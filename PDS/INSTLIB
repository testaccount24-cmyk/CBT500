./ ADD NAME=$$$DOC   0143-21204-21335-0740-00109-00001-00000-BENMAR  19

SUMMARY OF ENHANCEMENTS FOR zECF VERSION 2 RELEASE 3 (V2R3)
-----------------------------------------------------------

1.  Added SVC screening support in source modules ASM(ECFSVC,EVFSVS,
    ECFS35). The SVC screening table and related structures are mapped
    by macro MAC($ECFSVX). Refer to PARMLIB(ECFMSTR,TRAPSVC) for more
    details and PARMLIB(TRAPSVC) for event rule examples.

2.  Added active LPA display command "?D LPA,A" and dynamic LPA display
    command "?D LPA,D".

3.  Enhanced Event Rule processor ASM(ECFREB) to support the issuing
    of commands and messages via rule trigger CMD('command') and
    WTO('message') directly without invoking a REXX EXEC or CLIST.
    Of course, you can call a REXX EXEC or CLIST if you need to
    perform additional processing. Refer to PARMLIB(VLFRULE) for a
    complete example.

4.  Added system events trigger type MONITOR that define MONITOR rules
    to alert you when a system or subsystem started task address
    space normally or abnormally terminates. Refer to PARMLIB(SYSRULE)
    for a system monitoring rule example.

5.  Added IRBRUN PC routine in ASM(ECFXPC) that schedules asynchronous
    exits, IRBs, to execute under any task in any address space in
    the system. Refer to macro in MAC($IRBRUN) for calling examples.
    The PC caller must have READ authority to profile ZECF.XPC.AUTH,
    under RACF class, ECFCLASS, before calling this PC routine.

6.  Added DYNLPA PC routine in ASM(ECFXPC) that allows you to add and
    delete load modules to/from the Dynamic-LPA. Refer to ECF macro
    MAC($DYNLPA) for calling examples.
    The PC caller must have READ authority to profile ZECF.XPC.AUTH,
    under RACF class, ECFCLASS, before calling this PC routine.

7.  Enhanced ASM(ECFXPC) TPROT PC routine to support validating 64-bit
    virtual storage addresses. MAC($TPROT) macro supports a new operand,
    ADDR64, that allows you to specify a 64-bit virtual storage address.

8.  Added PERSIST={NO|YES} initialization option in PARMLIB(ECFMSTR).
    member. Review INSTLIB($$PARMS) member for complete details.

9.  Added common functional recovery routine (FRR) recovery termination
    manager in source module ASM(ECFFRR) and MAC($ECFFRR) in support of
    ECF-locked service routines.

10. Changed message listener ASM(ECFS35) to allow MSGTRAP triggers to be
    defined for WTO/R messages issued by subtasks of the ECF subsystem
    server. See ASM(ECFS35) change code @05.

11. Added INSTLIB($$CALLS) member that describes how to invoke useful
    ECF subsystem server PC an SVC calls.

12. Fixed a bug in variable resolution processor ASM(ECFVRX). The fix
    removes residual characters at the end of &SYSDATA, &COMMAND and
    &MESSAGE variables. See ASM(ECFVRX) change code @04.

13. Fixed a bug in event rule processor ASM(ECFREB) to allow MONITOR
    type rules to de defined without having to specify the EXEC()
    statement to call a REXX EXEC or CLIST. See ASM(ECFREB) change code
    @04A.

14. Fixed SC01 and S301 ABEND in the WTO message service routine. See
    ASM(ECFWTO) change code @04.

15. Fixed S378-14 ABEND when invoking started task recovery COMPRESS
    routine of ASM(ECFSTC) to compress a partitioned data set.
    See ASM(ECFSTC) change code @04.


SUMMARY OF ENHANCEMENTS FOR zECF VERSION 2 RELEASE 2 (V2R2)
-----------------------------------------------------------

1.  Added PC router routine ASM(ECFXPC) and ASM(ECFSAF) that implement
    RACF security calls via RACROUTE REQUEST AUTH to secure all ECF
    subsystem commands and restrict SVC and program call (PC) functions.

2.  Added RACF security class ECFCLASS to support ECF commands
    protection. Job INSTLIB($$RACF) activates class ECFCLASS and
    defines its resource profiles. Implementation codumentation can
    be found in member INSTLIB($$AUTH).

3.  Added dynamic LPA (CVDYLPA) ADD and REPLACE services in ECF service
    routine ASM(ECFCSA).

4.  Added DISPLAY {OPTIONS | JCLPARM | STATUS | ISTATUS} subsystem
    commands in command processor ASM(ECFCOM).

5.  Documented additional diagnostic error WTO messages in member
    INSTLIB($$MSGS).

6.  Enhanced ASM(ECFXPC) to allow callers to issue $TPROT PC. Unlike
    the TPROT instruction, ECF's $TPROT handles CC3 and it's very fast.

7.  Added ECF subsystem command prefix registration with the MVS
    Command Prefix Facility (CPF). CPF makes sure the command prefix
    selected is not already in use by another subsystem in the system
    or sysplex.


SUMMARY OF ENHANCEMENTS FOR zECF VERSION 2 RELEASE 1 (V2R1)
-----------------------------------------------------------

1.  ECF was originally developed under HERCULES MVS 3.8J. It has been
    enhanced to run under z/OS. Most of the code still runs in 24-bit
    mode.

***
./ ADD NAME=$$$INDEX 0116-21086-21278-1009-00030-00025-00030-BENMAR  22

$$README  - *** YOU MUST READ THIS! ***
$$$DOC    - ECF Enhancements documentation
$$ALLOC   - ECF data set allocations
$$CMDS    - ECF subsystem commands
$$RACF    - ECF Security Server implementation procedure
$$AUTH    - ECF authorizing operetor commands
$$RCVY    - ECF started tasks recovery procedure
$$INST    - ECF installation documentation
$$MSAS    - ECF running in Master Scheduler
$$MSGS    - ECF WTO messages documentation
$$PARMS   - ECF initialization parameters
$$RULES   - ECF rules syntax and description
$$CALLS   - ECF Callable PC services routines
$$SVCS    - SVC screening implementation procedure
ECF       - ECF started task JCL procedure
ECF2      - ECF started task JCL procedure for testing
ECFR      - Recovery TSO subsystem JCL procedure
ECFTMP    - ECF started task TSO/TMP JCL procedure
ECFMSAS   - MVS Reset command processor relink job
ECFWAIT   - ECF wait interval service processor JCL
ECFSSNT   - Define ECF and ECFR subsystems (MVS 3.8j only)
ZASM      - ECF subsystem Assembly JCL procedure
ZLINK     - ECF subsystem Link JCL procedure
ZLINKLIB  - ECF subsystem LINKLIB link JCL procedure
ZLINKLPA  - ECF subsystem LPALIB link JCL procedure
ZZECFSSM  - Assemble and link all ECF load modules
ZZVARS    - Supported ECF events variables
ZZEVENTS  - Supported ECF events

./ ADD NAME=$$ALLOC  0103-21086-21204-1117-00114-00115-00029-BENMAR  12
//$$ALLOC  JOB ...
//*
//*-----------------------------------------------------------------*/
//*                                                                 */
//*   Event Capture Facility data sets allocation job               */
//*                                                                 */
//*     This JCL allocates the data sets required to run the        */
//*     Event Capture Facility subsystem.                           */
//*                                                                 */
//*     1. Change hlq SYS1 as required by your installation.        */
//*     2. Change VOLSER as required by your installation.          */
//*                                                                 */
//*-----------------------------------------------------------------*/
//*
//ALLOC   EXEC PGM=IEFBR14
//ASMLIB   DD  DSN=SYS1.ZECF.ASM,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(128,64,16)),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=6160,DSORG=PO)
//*
//MACLIB   DD  DSN=SYS1.ZECF.MAC,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(128,64,16)),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=6160,DSORG=PO)
//*
//LOADLIB  DD  DSN=SYS1.ZECF.LOAD,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(512,256,32)),
//             DCB=(LRECL=0,RECFM=U,BLKSIZE=19069,DSORG=PO)
//*
//OBJLIB   DD  DSN=SYS1.ZECF.OBJ,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(512,256,32)),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=3120,DSORG=PO)
//*
//PARMLIB  DD  DSN=SYS1.ZECF.PARMLIB,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(32,16,12)),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=19040,DSORG=PO)
//*
//INSTLIB  DD  DSN=SYS1.ZECF.INSTLIB,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(32,16,12)),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=19040,DSORG=PO)
//*
//SYSPROC  DD  DSN=SYS1.ZECF.CMDPROC,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(64,32,16)),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=19040,DSORG=PO)
//*
//ECFJOBS  DD  DSN=SYS1.ZECF.ECFJOBS,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(64,32,16)),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=19040,DSORG=PO)
//*
//SYSTSIN  DD  DSN=SYS1.ZECF.SYSTSIN,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(128,64,32)),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=19040,DSORG=PO)
//*
//SYSTSPRT DD  DSN=SYS1.ZECF.SYSTSPRT,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(128,64,32)),
//             DCB=(LRECL=133,RECFM=FB,BLKSIZE=1330,DSORG=PO)
/*
//DBUGLOG  DD  DSN=SYS1.ZECF.DBUGLOG,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(128,64)),
//             DCB=(LRECL=133,RECFM=FB,BLKSIZE=1330,DSORG=PS)
//*
//TRCELOG  DD  DSN=SYS1.ZECF.TRCELOG,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(128,64)),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=19040,DSORG=PS)
//*
//SYSIN    DD  DSN=SYS1.ZECF.SYSIN,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(16)),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=80,DSORG=PS)
//*
//SYSPRINT DD  DSN=SYS1.ZECF.SYSPRINT,
//             DISP=(,CATLG),
//             UNIT=SYSDA,
//             VOL=SER=??????,
//             SPACE=(TRK,(64,16)),
//             DCB=(LRECL=121,RECFM=FBA,BLKSIZE=121,DSORG=PS)
/*
//
./ ADD NAME=$$AUTH   0104-21192-21223-1114-00089-00077-00000-BENMAR  02

            +-----------------------------------+
            | Authorizing ECF resources usage   |
            +-----------------------------------+

You can control who can issue ECF commands regardless of their point
of entry. This includes, commands issued at MCS consoles, batch JCL,
through MGCR/E (SVC 34) and through extended console support.

Authorizing the use of ECF commands
-----------------------------------
To control the use of ECF commands, create profiles in the RACF class
ECFCLASS. Refer to member INSTLIB($$RACF) for information on how to
define and activate ECFCLASS and associated resource names.

Important: If you do not define ECFLASS and associated resources, ECF
commands will not be protected.

The ECF subsystem server support the following resource profiles:

  ZECF.MODIFY
  ZECF.DISPLAY
  ZECF.RECOVERY

ZECF.MODIFY
-----------
Authorizes who can issue the following modify commands:

?ADD    - Define event rule
?ACT    - Activate event rule
?INACT  - Inactivate event rule
?REF    - Refreshe event rule
?SET    - Set ECF processing options
?MODIFY - Modifie subsystem server operational data


ZECF.DISPLAY
-----------
Authorizes who can issue the following display commands:

?HELP    - Display command help information
?DISPLAY - Display subsystem server operational data


ZECF.RECOVERY
Authorizes who can issue the following started task recovery commands:

?TSO      - Issue TSO commands from MCS consoles
?EDIT     - Edit sequential and PDS members from MCS consoles
?BROWSE   - Browse sequential and PDS members from MCS consoles
?COPY     - Copy sequential datasets and PDS members from MCS consoles
?COMPRESS - Compress PDS datasets from MCS consoles


Authorizing the use of ECF SVC/PC resources
-------------------------------------------
To restrict ECF PC routines and SVC routines, create profiles the
following profiles in class ECFCLASS:

  ZECF.SVC.AUTH
  ZECF.XPC.AUTH

Important: If you do not define ECFLASS for these profiles, ECF can not
protect PC and SVC routies from being issued by unauthorized callers.

ZECF.SVC.AUTH
-------------
Authorizes who can programmatically issues SVC functions provided by
the ECF subsystem server.
You should protect this function through ZECF.SVC.AUTH and only grant
UACC(READ) to authorized users.

Refer to ASM(ECFSVC) source member for functions details.


ZECF.XPC.AUTH
-------------
Authorizes who can programmatically issues PC functions provided by
the ECF subsystem server.
You should protect this function through ZECF.XPC.AUTH and only grant
UACC(READ) to authorized users.

Refer to ASM(ECFXPC) source member for function details.


ECF COMMANDS
------------
Refer to INSTLIB($$CMDS) member for a description of all ECF commands.

./ ADD NAME=$$CALLS  0133-21242-21245-1145-00310-00045-00000-BENMAR  48

             +----------------------------------+
             | ECF PC/SVC call Service Routines |
             +----------------------------------+

This document describes authorized service routines that can be invoked
by macros that reside in ECF MAC() macro library. Most of these services
require the requestor to have READ authority to RACF resource profiles
ZECF.XPC.AUTH or ZECF.SVC.AUTH in RACF class ECFCLASS.
Refer to INSTLIB($$RACF) and INSTLIB($$AUTH) for security implementation
details.

The following PC/SVC calls are currently supported:

$TPROT   - Test storage protection
$DYNLPA  - Add/delete modules to/from dynamic LPA
$RUNIRB  - Schedule asynchronous exits to run in any address space
$AUTH    - Toggle dispatched unit of work state and protect key

Calling these PC/SVC services require you to retrieve the ECF subsystem
server System-level Name/Token pair. Use DSECT NTP in macro MAC($ECFTKN)
to reference the PC number and the adrress of the SVC instruction.
Token word NTPPCNUM contains the PC number. Token word NTPSVCA contains
the address of the x'0Ann' SVC instruction.

Name/Token pair retrieve example:

RETRIEVE LOAD  EP=IEANTRT
         LR    15,0
         CALL  (15),(LEVEL,NAME,TOKEN,RC)
         LTR   15,15
         BNZ   ERROR
         LA    3,MYTOKEN
         USING NTP,3
         ..
RC       DC    F'0'
LEVEL    DC    AL4(IEANT_SYSTEM_LEVEL)
MYTOKEN  DS    0CL32
*
NAME     DC    CL16'SYS-zECF-V2R3M0'
TOKEN    DC    CL16' '
         ..
         $ECFTKN ,
         IEANTASM ,
         ..
         END

------------------------------------------------------------------------

$TPROT macro
------------
FUNCTION:
 Validate a storage address by determining if the storage key and PSW
 key match. Switch to the caller's PSW key and perform fetch and store
 into the page. An invalid fetch and store will be reflectd by the
 return code returned to the caller.

WHY NOT USE TPROT?
 The TPROT instruction does not distinguish between a valid/invalid
 virtual storage address. When the referenced page is swapped out,
 TPROT sets CC 3, translation not available.

RACF SECURITY:
 The PC caller does not require RACF authority to profile ZECF.XPC.AUTH
 in RACF class class ECFCLASS.

PARAMETERS:
 Addr
  A required parameter that specifies the virtual storage address to be
  validated. To code, specify the RS-type address, or address in
  register (2)-(12).

 ADDR64=
  A required parameter that specifies the 64-bit virtual storge address
  to be validated. To code, specify the RS-type address, or address in
  register (2)-(12).

 PC=
  A required parameter. Specify the PC number obtained from the
  retrieved Name/Token pair. Field NTPPCNUM contains the PC number.

R15 - RETURN DODES:
 00 - Fetch and store allowed
 04 - 0C4-4  Protection Exception
 08 - 0C5-5  Addressing Exception
 12 - 0C4-10 Segment Translation Exception
 16 - 0C4-11 Page Translation Exception

EXAMPLES:
 Validate storage address pointed to by register 2.

  $TPROT (2),PC=NTPPCNUM

 Validate grande storage address pointed by grande register 2.

  $TPROT ADDR64=(2),PC=NTPPCNUM

------------------------------------------------------------------------

$DYNLPA macro
-------------
FUNCTION:
 Load load-modules to dynamic LPA and delete load-modules from dynamic
 LPA.

RACF SECURITY:
 The PC caller must have READ authority to profile ZECF.XPC.AUTH in RACF
 class, ECFCLASS.

PARAMETERS:
 {Add}
  A required parameter. Add, adds a load-module to dynamic LPA. When the
  return code in register 15 is zero the entry point address is returned
  in register 1 and an 8-byte token is returned in field DYNTOKEN of the
  MF={E,listform) mapped by MAC($ECFDYN) macro.

 {Delete}
  Deletes a load-module from dynamic LPA. You can delete the load-module
  by name or by token.

 MOD=
  Specifies the address of an 8-byte field that contains the load-module
  name to be added or deleted. To code, specify the RS-type address, or
  address in register (2)-(12).

 PGFIX={NO|YES}
  Specifies if the load-module added to dynamic LPA should be page fixed
  (YES), or pageable (NO). The default is PGFIX=NO.

 OWNER={HOME|SYSTEM}
  Specifies if the load-module added to dynamic LPA is owned by the home
  address space (HOME), or by the operating system (SYSTEM). The default
  is OWNER=HOME.

 TYPE={TOKEN|CURRENT}
 {TOKEN}
  Deletes a load-module from dynamic LPA by token. To code, specify the
  RS-type address, or address in register (2)-(12).

 {CURRENT}
  Delets the load-module module from dynamic LPA by name. To code,
  specify the address, or address in register (2)-(12).

 TOKEN=
  Specifies the address of an 8-byte field that contains the token value
  to be used to delete the load-module. This token is located in field
  DYNTOKEN of the MF=(E,listform) mapped by macro MAC($ECFDYN).

 PC=
  A required parameter. Specify the PC number obtained from the
  retrieved Name/Token pair. Field NTPPCNUM contains the PC number.

 MF={E|L}
  MF=E specifies the address of the MF=L listform mapped by the $ECFDYN
  macro. $ECFDYN is located in macro library MAC($ECFDYN).

R15 - RETURN CODES:
 00 - Dynamic-LPA completed successfully
 08 - Dynamic-LPA add/delete failed

R0 - REASON CODES:
 00000000 - Dynamic-LPA completed successfully
 00000008 - Invalid DYN structure detected
 00000012 - Unknown Dynamic-LPA request specified

EXAMPLES:
 Add module pointed to by name in register 3 to dynamic LPA.
  $DYNLPA ADD,PC=NTPPCNUM,MOD=(3),MF=(E,(PARMLIST)

 Delete module pointed to by 8-byte token in register 3.
  $DYNLPA DELETE,PC=NTPPCNUM,TYPE=TOKEN,TOKEN=(3),MF=(E,PARMLIST)

 Delete current module pointed by name in register 3.
  $DYNLPA DELETE,PC=NTPPCNUM,TYPE=CURRENT,MOD=(3),MF=(E,(PARMLIST)

  PARMLIST DS    CL(DYN@SZE)
           $ECFDYN DSECT=YES

------------------------------------------------------------------------

$RUNIRB macro
-------------
FUNCTION:
 Schedule an IRB to execute under any task in any address space as
 specified by STOKEN and TCBTOKEN values.
 The ECF SSI component exploits this facility to post tasks in the
 ECF address space. This is much more reliable than using cross-memory
 post.

RACF SECURITY:
 The PC caller must have READ authority to profile ZECF.XPC.AUTH in RACF
 class, ECFCLASS.

PARAMETERS:
 EP=
  A required parameter. Specifies the 8-byte name address of the
  asynchronous IRB exit routine. To code, specify the RS-type address,
  or address in register (2)-(12).

 STOKEN=
  A required parameter. Specifies the 8-byte address space STOKEN where
  the IRB routine is to be scheduled. To code, specify the RS-type, or
  address in register (2)-(12).

 TCBTOKEN=
  A required parameter. Specifies the 16-byte TCBTOKEN address of the
  target TCB where the IRB routine will run. To code, specify the RS-
  type address, or address in register (2)-(12).

 PARM=
 An required parameter. Specifies the address of a parameter fullword
 that will be passed to the IRB routine in register 1.

 KEY={0|8}
  A required parameter. Specifies the IRB routine entry PSW protect key.

 MODE={SUP|PROB}
  A required parameter. Specifies the IRB routine problem or supervisor
  execution state.

 PC=
  A required parameter. Specify the PC number obtained from the
  retrieved Name/Token pair. Field NTPPCNUM contains the PC number.

 MF={E|L}
  MF=E specifies the address of the MF=L listform mapped by the $ECFXRB
  macro. $ECFXRB is located in macro library MAC($ECFXRB).

R15 - RETURN CODES:
 00 - IRB exit scheduled successfully
 08 - IRB exit schedule failed

R0 - REASON CODES
 00000000 - IRB exit scheduled successfully
 00000008 - XRB address supplied is invalid
 00000012 - LOCASCB(STOKEN) address space not active
 00000016 - IRB exit EP address not supplied
 00000020 - SP=245 SRB+XRB storage obtain failed

EXAMPLES:
 Schedule IRB exit to execute in the address space specified by STOKEN
 and run it under TCB specified by TCBTOKEN.

  $RUNIRB EP=(2),STOKEN=(3),TCBTOKEN=(4),PARM=(5),KEY=(6),MODE=SUP,
        PC=NTPPCNUM,MF=(E,(PARMLIST)


  PARMLIST DS    CL(XRB@SZE)
           $ECFXRB DSECT=YES

------------------------------------------------------------------------

$AUTH macro
-----------
FUNCTION:
 Supports the following authorized functions:

1. Change RBOPSW key and system state as requested by the SVC caller.

   This support is implemented by calling macro IEARBUP, which updates
   the official PSW located in the XSB control block. Starting with zOS
   V1R13, the RBOPSW still contains the PSW, but it's no longer relied
   upon by MVS. The official 16-byte dispatch PSW is kept in field
   XSBOPSW16. The original RBOPSW is kept in field XSB_Orig_RBOPSW.
   When the system detects that RBOPSW differs from the PSW kept in
   XSB_Orig_RBOPSW, a corresponding update is made to the PSW in field
   XSBOPSW16.

2. Change jobstep task authorization as requested by SVC caller by
   setting JSCBAUTH bit on or off. This allows TSO users to issue the
   MODESET SVC as required to change system state and PSW protect key.

RACF SECURITY:
 The SVC caller must have READ authority to profile ZECF.SVC.AUTH in
 RACF class, ECFCLASS.

PARAMETERS:
 {SUP|PROB}
  Specifies the requested PSW change. SUP, sets the caller's PSW to
  sypervisor state and key zero. PROB, sets the caller's PSW to problem
  state and key eight.

 {ON|OFF}
  Specifies the requested JSCBAUTH change. ON, turns on the JSCBAUTH
  bit. OFF, turns off the JSCBAUTH bit.

 SVC=
  A required parameter. Specify the SVC number obtained form retrieved
  Name/Token pair. Field NTPSVCA contains the pointer to the x'0Ann'
  SVC instruction. When SVC= in not specified, the default taken is
  SVC=NTPSVCA.

R15 - RETURN CODES:
 00 - Request completed successfully
 08 - Request terminated abnormally

EXAMPLES:
 Set JSCBAUTH authorization bit on.
  $AUTH ON

 Set JSCBAUTH authorization bit off.
  $AUTH OFF

 Set caller's PSW to supervisor state and protect key zero.
  $AUTH SUP

 Set caller's PSW to problem state and protect key eight.
  $AUTH PROB

-----------------------------------------------------------------------
./ ADD NAME=$$CMDS   0125-21114-21273-0745-00594-00343-00000-BENMAR  26

          +-------------------------------------------+
          | Event Capture Facility Subsystem Commands |
          +-------------------------------------------+


Event Capture Facility (ECF) subsystem supports the following
console D/DISPLAY commands:

+---------------------------------------------------------------------+
| CMDPFX | Command | Alias | Command | Description                    |
+=====================================================================+
| ?      | DISPLAY | D     | STATUS  | Displays current ECF subsystem |
|        |         |       |         | status.                        |
|        |         |       |         |                                |
+---------------------------------------------------------------------+
| ?      | DISPLAY | D     | ISTATUS | Displays ECF status data that  |
|        |         |       |         | is useful when you need to     |
|        |         |       |         | debug internal ECF problems.   |
|        |         |       |         |                                |
+---------------------------------------------------------------------+
| ?      | DISPLAY | D     | JCLPARM | Displays the JCL parameters    |
|        |         |       |         | that are in effect for the     |
|        |         |       |         | current ECF subsystem instance.|
|        |         |       |         | These are the parameters that  |
|        |         |       |         | were specified in the PARM=    |
|        |         |       |         | JCL parameter statement.       |
|        |         |       |         |                                |
+---------------------------------------------------------------------+
| ?      | DISPLAY | D     | OPTIONS | Displays the initialization    |
|        |         |       |         | options that are in effect for |
|        |         |       |         | the rurrent ECF subsysytem     |
|        |         |       |         | instance.                      |
|        |         |       |         | These are the initialization   |
|        |         |       |         | options specified in PARMLIB   |
|        |         |       |         | initialization member ECFMSTR. |
|        |         |       |         |                                |
+---------------------------------------------------------------------+
| ?      | DISPLAY | D     | RULES   | Displays event rules that are  |
|        |         |       |         | currently defined to ECF.      |
|        |         |       |         |                                |
+--------------------------------------------------------------------++
| ?      | DISPLAY | D     | RULE=   | Displays a single event rule   |
|        |         |       |         | by member name.                |
|        |         |       |         |                                |
+--------------------------------------------------------------------++
| ?      | DISPLAY | D     | CPOOLS  | Displays a common storage cell |
|        |         |       |         | pools used by ECF.             |
|        |         |       |         |                                |
+--------------------------------------------------------------------++
| ?      | DISPLAY | D     | ABENDS  | Displays ECF subsystem server  |
|        |         |       |         | ABEND diagnostic data.         |
|        |         |       |         |                                |
+--------------------------------------------------------------------++
| ?      | DISPLAY | D     | SSIDATA | Displays ECF subsystem server  |
|        |         |       |         | SSI-related diagnostic data.   |
|        |         |       |         |                                |
+--------------------------------------------------------------------++
| ?      | DISPLAY | D     | LPA,A   | Displays load modules that are |
|        |         |       |         | currently in the active link   |
|        |         |       |         | pack area (LPA).               |
+--------------------------------------------------------------------++
| ?      | DISPLAY | D     | LPA,{D} | Displays load modules that are |
|        |         |       |         | currently in the dynamic link  |
|        |         |       |         | pack area (LPA).               |
+---------------------------------------------------------------------+
| ?      | HELP    | H     | SUBSYS  | Displays available subsysytem  |
|        |         |       |         | commands and subcommands.      |
|        |         |       |         |                                |
+---------------------------------------------------------------------+
| ?      | HELP    | H     | R       | Displays started task recovery |
|        |         |       | RECOVERY| commands and subcommands.      |
|        |         |       |         |                                |
+---------------------------------------------------------------------+
| ?      | HELP    | H     | BROWSE  | Displays started task recovery |
|        |         |       |         | data set browse commands.      |
|        |         |       |         |                                |
+---------------------------------------------------------------------+
| ?      | HELP    | H     | EDIT    | Displays started task recovery |
|        |         |       |         | data set edit commands.        |
|        |         |       |         |                                |
+---------------------------------------------------------------------+


+---------------------------------------------------------------------+
|DISPLAY STATUS command example                                       |
+=====================================================================+
| ?D STATUS                                                           |
| ?DISPLAY STATUS                                                     |
|                                                                     |
| ECF000I zECF ?D STATUS                                              |
|  Subsystem Status ............. Active                              |
|    Local Start Time ........... 09:40:38:00  05:18:2021             |
|  Initialization PARMLIB ....... SYS1.ZECF.PARMLIB                   |
|    Initialization Member ...... ECFMSTR                             |
|  Subsystem Load Module ........ ECFCSM                              |
|    Loaded in Common by ........ CSVDYLPA                            |
|  Stacking PC Router EX/LX ..... 00003700                            |
|    Authorization Index LX ..... 01                                  |
|  Supervisor Call Router ....... 255                                 |
|  Event Listeners .............. EOT, EOM, MGCR/E, WTO/R             |
|    SSI Function Code 9 ........ Enabled                             |
|  Performance Data Capture ..... Inactive                            |
|    Capture Interval ........... 00                                  |
|  Debug mMessage Logging ....... ON                                  |
|  Trace Recording .............. OFF                                 |
|  MSAS Recovery ................ ONLY                                |
|  SDUMP Capture ................ YES                                 |
| ECF000I END                                                         |
|                                                                     |
|                                                                     |
|Display STATUS command output                                        |
+---------------------------------------------------------------------+
| Status                        | Description                         |
+---------------------------------------------------------------------+
| Subsystem Status              | Active: The subsystem is currently  |
|                               |         active.                     |
|                               |                                     |
|                               | Inactive: The subsystem is currenly |
|                               |           inactive.                 |
|                               |                                     |
|                               | ABENDed:  The subsystem abnormally  |
|                               |           terminated.               |
|                               |                                     |
+---------------------------------------------------------------------+
|   Local Start Time            | Time and date the subsystem was     |
|                               | started.                            |
|                               |                                     |
+---------------------------------------------------------------------+
| Initialization PARMLIB        | Data set name of the initialization |
|                               | parameters library.                 |
|                               |                                     |
+---------------------------------------------------------------------+
|   Initialization Member       | Member name used to determine what  |
|                               | parameters are will be used to      |
|                               | initialize the subsystem.           |
|                               |                                     |
+---------------------------------------------------------------------+
| Subsystem Load Module         | The name of the subsystem support   |
|                               | load module that will be loaded into|
|                               | common storage during init'zation.  |
|                               |                                     |
+---------------------------------------------------------------------+
|   Loded in Common by          | The service request used to load    |
|                               | load module into common storage.    |
|                               |                                     |
|                               | CSA: The load module is loaded into |
|                               |      CSA subpool 228.               |
|                               |                                     |
|                               | LPA: The load module is loaded from |
|                               |      the LPA system library.        |
|                               |                                     |
|                               | CSVDYLPA: The load module is loaded |
|                               |           via the CSVDYLPA ADD zOS  |
|                               |           system service.           |
|                               |                                     |
+---------------------------------------------------------------------+
| Stacking PC Router EX/LX      | The subsystem PCcp number defined   |
|                               | to invoke subsystem services.       |
|                               |                                     |
+---------------------------------------------------------------------+
|   Authorization Index         | The subsystem authorization index   |
|                               | AX=value. AX=1 allows ECF to perform|
|                               | authorized PC call services.        |
|                               |                                     |
+---------------------------------------------------------------------+
| Supevisor Call Router         | The supervisor call number defined  |
|                               | to invoke subsystem services.       |
|                               |                                     |
+---------------------------------------------------------------------+
| Event Listeners               | The subsystem broadcast functions   |
|                               | defined for the subsystem instance. |
|                               |                                     |
|                               | EOT:    End-of-Task                 |
|                               | EOM:    End-of-Memory               |
|                               | MGCR/E: Sub/system commands         |
|                               | WTO/R:  WTO and WTOR messages       |
|                               |                                     |
+---------------------------------------------------------------------+
|   SSI Function Code 9         | The subsystem broadcast function    |
|                               | code 9 status.                      |
|                               |                                     |
|                               | Enabled - Allows RCF to monitor and |
|                               |           react to all WTO aand WTOR|
|                               |           issued messages.          |
|                               | Disabled - Allows ECF to monitor    |
|                               |            only MONITOR/MN issue    |
|                               |            messages.                |
|                               |                                     |
+---------------------------------------------------------------------+
| Performance Data Capture      | The status of the performance       |
|                               | capture.                            |
|                               |                                     |
|                               | Active: The subsystem Disabled      |
|                               |         Interrupt Exit is activated |
|                               |         and will capture performance|
|                               |         data from the current addrss|
|                               |         space when an external      |
|                               |         interrupt occurs.           |
|                               |                                     |
|                               | Inactive: Performance data is not   |
|                               |           captured.                 |
|                               |                                     |
+---------------------------------------------------------------------+
|   Capture Interval            | The Disabled Interrupt Exit timer   |
|                               | interval.                           |
|                               |                                     |
+---------------------------------------------------------------------+
| Debug Message Logging         | ON: Debug messages in the range of  |
|                               |     100 to 199 are issued to show   |
|                               |     details about executing subsystm|
|                               |     functions.                      |
|                               |                                     |
|                               | OFF: Debug messages are not issued. |
|                               |                                     |
+---------------------------------------------------------------------+
| Trace Recording               | ON: Trace messages in the range of  |
|                               |     200 to 299 are issued to show   |
|                               |     details about executing subsystm|
|                               |     functions. Additioally, trace   |
|                               |     records are stored in the       |
|                               |     TRCELOG log dataset.            |
|                               |                                     |
|                               | OFF: Trace messages are not issued  |
|                               |      and trace records are not      |
|                               |      stored in the TRCELOG log data |
|                               |      set.                           |
|                               |                                     |
+---------------------------------------------------------------------+
| MSAS Recovery                 | TEST: Allows you to issue Started   |
|                               |       task recovery commands such   |
|                               |       as EDIT, COPY, COMPRESS from  |
|                               |       the system console during     |
|                               |       normal system operation.      |
|                               |                                     |
|                               | ONLY: You can only issued started   |
|                               |       task recovery commands during |
|                               |       started task recovery sessions|
|                               |       before JES2/3 is initialized. |
|                               |                                     |
+---------------------------------------------------------------------+
| SDUMP Capture                 | YES: Captures ABEND dumps when a    |
|                               |      subsystem function abnormally  |
|                               |      terminates.                    |
|                               |                                     |
|                               | NO:  Captures ABEND dumps in dataset|
|                               |      SYSMDUMP dataset defined by    |
|                               |      the ECF started task JCL       |
|                               |      procedure.                     |
|                               |                                     |
+---------------------------------------------------------------------+



+---------------------------------------------------------------------+
|DISPLAY ISTATUS command example                                      |
+=====================================================================+
| ?D ISTATUS                                                          |
| ?DISPLAY ISTATUS                                                    |
|                                                                     |
| ECF000I ECF ?D ISTATUS                                              |
| SSCT=00CA0054 EVT=00FE3858 REB=00AB8790 LCK=00000000                |
| ECFSUB                                                              |
|  TCB=009300BA REB=00000000 LCK=00000000 CMP=00000017                |
| ECFSRV(S34SRV)                                                      |
|  TCB=0093009C REB=00000000 LCK=00000000 CMP=00000017                |
| ECFSRV(S35SRV)                                                      |
|  TCB=00917800 REB=00000000 LCK=00000000 CMP=00000347                |
| ECFSRV(ADDSRV)                                                      |
|  TCB=009609E4 REB=00000000 LCK=00000000 CMP=00000007                |
| ECFSRV(REFSRV)                                                      |
|  TCB=009800AA REB=00000000 LCK=00000000 CMP=00000003                |
| ECF000I END                                                         |
|                                                                     |
|                                                                     |
|Display ISTATUS command output                                       |
+---------------------------------------------------------------------+
| Block ID   | Description                                            |
+---------------------------------------------------------------------+
| SSCT       | ECF subsystem SSI control table address                |
|            |                                                        |
+---------------------------------------------------------------------+
| EVT        | ECF common vector table address                        |
|            |                                                        |
+---------------------------------------------------------------------+
| REB        | Event rule element queue address                       |
|            |                                                        |
+---------------------------------------------------------------------+
| LCK        | Event rule element queue lockword                      |
|            |                                                        |
+---------------------------------------------------------------------+
| ECFSRV()   | Service processor subtask. Event rules, when triggered,|
|            | are processed by the ECFSUB jobstep task, and ECFSRV   |
|            | processor (S34SRV, S35SRV, ADDSRV, REFSRV).            |
|            |                                                        |
+---------------------------------------------------------------------+
| TCB        | ECFSUB subtask TCB address                             |
|            | ECFSRV subtask TCB address                             |
|            |                                                        |
+---------------------------------------------------------------------+
| REB        | triggered events queue address. When a command event   |
|            | is triggered, it is added to the ECFSRV REB queue for  |
|            | processing. When processing is complete, the REB is    |
|            | removed from the queue.                                |
|            |                                                        |
+---------------------------------------------------------------------+
| STG        | staging events queue address. When an event rule is    |
|            | added or refreshed, it is queued in the STG queue and  |
|            | then moved to the active REB queue.                    |
|            |                                                        |
+---------------------------------------------------------------------+
| LCK        | triggered events queue lockword.                       |
|            |                                                        |
+---------------------------------------------------------------------+
| STG        | Event rule staging queue address. When an event rule   |
|            | is in the process of being dynamically added or        |
|            | refreshed, it is added to the staging queue. Once the  |
|            | Add or refresh completes, the event rule is removed    |
|            | from the staging queue and added to the active event   |
|            | rule queue.                                            |
|            |                                                        |
+---------------------------------------------------------------------+
| EXC        | The number of command Events that have been processed  |
|            | by the ECFSRV subtask.                                 |
|            |                                                        |
+---------------------------------------------------------------------+
| IOP        | I/O processor lockword.                                |
|            |                                                        |
+---------------------------------------------------------------------+



+---------------------------------------------------------------------+
|DISPLAY RULES command example                                        |
+---------------------------------------------------------------------+
| ?D RULES                                                            |
| ?DISPLAY RULES                                                      |
|                                                                     |
| ECF000I ECF ?D RULES                                                |
| MEMBER   EVENT    MODE     STATUS   RUNAS EXEC     TRIGGER          |
| JOBINIT  JOBINIT  Active   Init     STC   CLIST100 PAY***LY         |
| JOBTERM  JOBTERM  Inactive Added    STC   REXX3000 AR****LY         |
| STOPTSO  TRAPMSG  Act      Refreshd STC   CLIST999 IKT012D TCAS     |
| TESTING  TRAPCMD  Act      Init     STC   TESTIT   $DQ              |
| ECF000I END                                                         |
|                                                                     |
|                                                                     |
|Display RULES command output                                         |
+---------------------------------------------------------------------+
| MEMBER   | EVENT    | MODE  | STATUS   | EXEC     | EVENT Trigger   |
+---------------------------------------------------------------------+
| PARMLIB  | Event    | event | Init     | REXX     | COMMAND, WTO/R, |
| event    | type:    | actv  | or       | or       | EOT, EOM trigger|
| member   | TRAPMSG  | or    | Added    | CLIST    | data            |
| name     | TRAPCMD  | inact | or       | name     |                 |
|          | JOBINIT  |       | Refreshd | to be    |                 |
|          | JOBTERM  |       |          | executed |                 |
|          | STCINIT  |       |          |          |                 |
|          | STCTERM  |       |          |          |                 |
|          | TSUINIT  |       |          |          |                 |
|          | TSUTERM  |       |          |          |                 |
|          |          |       |          |          |                 |
+---------------------------------------------------------------------+



+---------------------------------------------------------------------+
|                                                                     |
|DISPLAY SINGLE RULE command example                                  |
+---------------------------------------------------------------------+
| ?D RULE=TESTING                                                     |
| ?DISPLAY RULE=TESTING                                               |
|                                                                     |
| ECF000I ECF ?D RULE=TESTING                                         |
| MEMBER   EVENT    MODE  STATUS   RUNAS EXEC     TRIGGER             |
| TESTING  COMMAND  Act   Added    STC   TESTIT   $DQ                 |
| ECF000I END                                                         |
|                                                                     |
+---------------------------------------------------------------------+



Event Capture Facility (ECF) subsystem supports the following
T/SET; F/MODIFY commands:
+---------------------------------------------------------------------+
| CMDPFX | Command | Alias | Command                 | Description    |
+=====================================================================+
| ?      | SET     | T     | ACT,RULE=member         | Activates the  |
|        | MODIFY  | F     | ACT=RULE=member         | event rules    |
|        | ACT     |       | RULE=member             | defined by the |
|        |         |       |                         | specified      |
|        |         |       |                         | PARMLIB member |
|        |         |       |                         |                |
+---------------------------------------------------------------------+
| ?      | SET     | T     | INACT,RULE=member       | Inactivates    |
|        | MODIFY  | F     | INACT RULE=member       | the event rules|
|        | INACT   |       | RULE=member             | defined by the |
|        |         |       |                         | specified      |
|        |         |       |                         | PARMLIB member |
|        |         |       |                         |                |
+---------------------------------------------------------------------+
| ?      | SET     | T     | DEBUG=ON                | Activates ECF  |
|        | MODIFY  | F     |                         | debugging mode.|
|        |         |       |                         | DEBUG=ON issues|
|        |         |       |                         | additional WTO |
|        |         |       |                         | messages in the|
|        |         |       |                         | range of ECF100|
|        |         |       |                         | to ECF199 that |
|        |         |       |                         | show internal  |
|        |         |       |                         | processing     |
|        |         |       |                         | information.   |
|        |         |       |                         | The default is |
|        |         |       |                         | DEBUG=OFF      |
|        |         |       |                         |                |
+---------------------------------------------------------------------+
| ?      | SET     | T     | DEBUG=OFF               | Deactivate ECF |
|        | MODIFY  | F     |                         | debugging mode |
|        |         |       |                         |                |
+---------------------------------------------------------------------+
| ?      | SET     | T     | TRACE=ON                | Activate ECF   |
|        | MODIFY  | F     |                         | internal trace.|
|        |         |       |                         | The default is |
|        |         |       |                         | TRACE=OFF      |
|        |         |       |                         |                |
+---------------------------------------------------------------------+
| ?      | SET     | T     | TRACE=OFF               | Deactivate ECF |
|        | MODIFY  | F     |                         | internal trace |
|        |         |       |                         |                |
+---------------------------------------------------------------------+
| ?      | SET     | T     | SHOWREB=YES             | Displays WTO   |
|        | MODIFY  | F     |                         | messages that  |
|        |         |       |                         | show rule evet |
|        |         |       |                         | element (REB)  |
|        |         |       |                         | processing data|
|        |         |       |                         | The default is |
|        |         |       |                         | SHOWREB=NO     |
|        |         |       |                         |                |
+---------------------------------------------------------------------+
| ?      | SET     | T     | SHOWREB=NO              | Does nor show  |
|        | MODIFY  | F     |                         | REB processing |
|        |         |       |                         | WTO messages.  |
|        |         |       |                         |                |
+---------------------------------------------------------------------+



+---------------------------------------------------------------------+
|                                                                     |
|SET/MODIFY/ACT COMMAND EXAMPLES                                      |
+---------------------------------------------------------------------+
| ?T DEBUG=ON                                                         |
| ?SET DEBUG=ON                                                       |
|                                                                     |
| ?F DEBUG=ON                                                         |
| ?MODIFY DEBUG=ON                                                    |
|                                                                     |
| ECF040I ECF DEBUG=ON option set                                     |
|                                                                     |
+---------------------------------------------------------------------+
| ?T DEBUG=OFF                                                        |
| ?SET DEBUG=OFF                                                      |
|                                                                     |
| ?F DEBUG=OFF                                                        |
| ?MODIFY DEBUG=OFF                                                   |
|                                                                     |
| ECF040I ECF DEBUG=OFF option set                                    |
|                                                                     |
+---------------------------------------------------------------------+
| ?T TRACE=ON                                                         |
| ?SET TRACE=ON                                                       |
|                                                                     |
| ?F TRACE=ON                                                         |
| ?MODIFY TRACE=ON                                                    |
|                                                                     |
| ECF040I ECF TRACE=ON option set                                     |
|                                                                     |
+---------------------------------------------------------------------+
| ?T TRACE=OFF                                                        |
| ?SET TRACE=OFF                                                      |
|                                                                     |
| ?F TRACE=OFF                                                        |
| ?MODIFY TRACE=OFF                                                   |
|                                                                     |
| ECF040I ECF TRACE=OFF option set                                    |
|                                                                     |
+---------------------------------------------------------------------+
| ?T SHOWREB=YES                                                      |
| ?SET SHOWREB=YES                                                    |
|                                                                     |
| ?F SHOWREB=YES                                                      |
| ?MODIFY SHOWREB=YES                                                 |
|                                                                     |
| ECF043I ECF SHOWREB=YES option set                                  |
|                                                                     |
+---------------------------------------------------------------------+
| ?T SHOWREB=NO                                                       |
| ?SET SHOWREB=NO                                                     |
|                                                                     |
| ?F SHOWREB=NO                                                       |
| ?MODIFY SHOWREB=NO                                                  |
|                                                                     |
| ECF043I ECF SHOWREB=NO option set                                   |
|                                                                     |
+---------------------------------------------------------------------+
+---------------------------------------------------------------------+
| ?ACT RULE=MYRULE                                                    |
|                                                                     |
| ECF046I ECF Rule MYRULE is now active                               |
|                                                                     |
+---------------------------------------------------------------------+
| ?INACT RULE=TESTING                                                 |
|                                                                     |
| ECF046I ECF Rule TESTING is now inactive                            |
|                                                                     |
+---------------------------------------------------------------------+



Event Capture Facility (ECF) subsystem supports the following
event rule ADD and REFRESH commands:

+---------------------------------------------------------------------+
| CMDPFX | Command | Alias | Command                 | Description    |
+=====================================================================+
| ?      | ADD     | NONE  | RULE=member             | Add event rule |
|        |         |       |      {,MODE=ACT|ACTIVE} | to the active  |
|        |         |       |      {,RUNAS=STC|JOB|   | rule queue.    |
|        |         |       |       SUB}              | The rule member|
|        |         |       |                         | must reside in |
|        |         |       |                         | the PARMLIB    |
|        |         |       |                         | library.       |
|        |         |       |                         |                |
|        |         |       |                         |                |
+---------------------------------------------------------------------+
| ?      | REF     | NONE  | RULE=member             | Refresh active |
|        |         |       |                         | event rule.    |
|        |         |       |                         | The event rule |
|        |         |       |                         | is refreshed   |
|        |         |       |                         | with the same  |
|        |         |       |                         | attributes that|
|        |         |       |                         | are currently  |
|        |         |       |                         | in effect.     |
|        |         |       |                         | The rule member|
|        |         |       |                         | must reside in |
|        |         |       |                         | the PARMLIB    |
|        |         |       |                         | library.       |
|        |         |       |                         |                |
+---------------------------------------------------------------------+



+---------------------------------------------------------------------+
|                                                                     |
|ADD COMMAMD EXAMPLES                                                 |
+---------------------------------------------------------------------+
| ?ADD RULE=TESTING                                                   |
|                                                                     |
| ?ADD RULE=TESTING,MODE=ACTIVE                                       |
| ?ADD RULE=TESTING,MODE=INACTIVE                                     |
|                                                                     |
| ?ADD RULE=TESTING,MODE=ACTIVE,RUNAS=STC                             |
| ?ADD RULE=TESTING,MODE=INACTIVE,RUNAS=JOB                           |
|                                                                     |
| ECF047I ECF Rule TESTING add completed successfully                 |
|                                                                     |
+---------------------------------------------------------------------+
|                                                                     |
|REFRESH COMMAMD EXAMPLES                                             |
+---------------------------------------------------------------------+
| ?REF RULE=TESTING                                                   |
|                                                                     |
| ECF040I ECF Rule TESTING refresh completed successfully             |
|                                                                     |
+---------------------------------------------------------------------+


System-related started task JCL procedures HELP commands:
+---------------------------------------------------------------------+
| ?HELP R/RECOVERY        - lists recovery commands                   |
| ?HELP E/EDIT            - lists edit command examples               |
| ?HELP B/BROWSE          - lists browse command examples             |
|                                                                     |
+---------------------------------------------------------------------+


General ECF subsystem commands:
+---------------------------------------------------------------------+
| ?D/DISPLAY SSIDATA      - displays SSI diagnostic data              |
| ?D/DISPLAY ABENDS       - displays ECF subsysytem ABEND data        |
|                                                                     |
+---------------------------------------------------------------------+
+---------------------------------------------------------------------+
+---------------------------------------------------------------------+

./ ADD NAME=$$INST   0108-21114-21204-0759-00036-00030-00030-BENMAR  18

          +-------------------------------------+
          | Event Capture Facility Installation |
          +-------------------------------------+

INSTALLATION STEPS:

 Before implemention the following installation steps, please
 inspect them carefully and make changes that are necessary to
 meet your installation standards:

 1.  Submit job $$ALLOC to allocate ECF libraries

 2.  Copy JCL procedure ECF to SYS1.PROCLIB

 3.  Copy JCL procedure ECFR to SYS1.PROCLIB

 4.  Copy JCL procedure ECFTMP to SYS1.PROCLIB

 5.  Copy Assembler procedure ZASM to SYS1.PROCLIB

 6.  COPY Link JCL procedure ZLINKLIB to SYS1.PROCLIB

 7.  COPY Link JCL procedure ZLINKLPA to SYS1.PROCLIB

 8.  Submit job ZZECFSSM to assemble and link zECF subsystem

 9.  Review $$PARMS and change PARMLIB member ECFMSTR values
     as required by your installation.

 10. Review $$RACF Security Server implementation procedure

 11. Review $$AUTH Security Server resource profiles procedure

 12. Start the ECF subsystem started task "S ECF"

./ ADD NAME=$$MSAS   0105-21114-21141-0742-00080-00168-00075-BENMAR  11

              +----------------------------------+
              |   Running Event Capture inside   |
              |            the MVS               |
              |  Master Scheduler address space  |
              |                                  |
              +----------------------------------+


ECF SUBSYSTEM:
  The Event Capture Facility (ECF) subsystem was designed to run
  as a started task or as a jobstep task of the MVS and z/OS Master
  Scheduler address space.

RUNNING ECF IN THE MASTER SCHEDULER ADDRESS SPACE

Note: You must run INSTLIB JCL job ECFMSAS.
      This job relinks the Reset command processor to
      includes the ECFMST front-end service routine to IEEMB810.

To execute ECF as a subsystem, you need to define subsystem name
ECF and the TSO recovery subsystem name ECFR to the system. Issue
the following Reset commands to define the ECF subsystems:

  E ADD,SUB=ECF
  E ADD,SUB=ECFR

The above commands define subsysytems ECF and ECFR to the subsystem
interface (SSI).

Issue one of the following MVS Reset commands to run ECF in the
MVS Master Scheduler address space:

  E START=ECF

The above command starts ECF as a jobstep task of the Master
Scheduler address space and the following ECF810I message is issued:

  ECF810I ECF System recovery in progress

The ECF subsystem initialization service routine then issues the
following ECF800A WTOR action message:

  ECF800A Specify ECF initialization PARMLIB DSName or EXIT

Reply to ECF800A by specifying the fully qualified ECF PARMLIB
initialization parameters dataset name.

Example:
  E START,SUB=ECF
  ECF810I ECF System recovery in progress
 *00 ECF800A Specify ECF initialization PARMLIB DSName or EXIT
 R 00,SYS1.ECF.PARMLIB
  ECF0021 ECF Event Capture initialization in progress
  ECF004I ECF Using PARM='SUB=ECF,CMD=?,INI=ECFMSTR,SSM=ECFLSM'
  ECF002I ECF Event Capture initialization complete

ECF is now ready to process started task recovery commands:


STARTED TASK RECOVERY:
  ECF supports the following recovery commands:

    o EDIT
    o BROWSE
    o COPY
    o COMPRESS
    o TSO commands

  These commands are only available when ECF is running as a jobstep
  task of the Master Scheduler address space or as a native subsystem
  before JES2/JES3 is started in the system.

  To allow started task recovery during normal operation, change
  PARMLIB option MSAS=ONLY to MSAS=TEST.

  NOTE: Refer to INSTLIB($$RCVY) for a description of how to use
        started tasks recovery commands:


./ ADD NAME=$$MSGS   0147-21086-21309-1049-01512-01075-00000-BENMAR  05

               +---------------------------------+
               | Event Capture Facility Messages |
               +---------------------------------+

All Event Capture Facility WTO messages are documented in this membere
except for the following message ranges:

ECF100 to ECF199
        These are developer debugging messages. They are only
        displayed when DEBUG=ON PARMLIB option in initialization
        ECFMSTR is specified.
        DEBUG=ON should only be set when instructed by development.
        The option allows development to diagnose code path errors
        within the ECF subsystem server.

ECF200 to ECF299
        These are developer trace messages. they are only displayed
        when TRACE=ON PARMLIB option in initialization member ECFMSTR
        is specified.
        TRACE=ON should only be set when instructed by development.
        The option allows development to diagnose code path errors
        within the ECF subsystem server.

ECF300 to ECF399
        Are used to diagnose event rule implementation errors. These
        messages are only displayed when the SHOWREB=YES option in
        initialization member ECFMSTR is specified.
        SHOWREB=YES should only be set when instructed by development.
        The option allows development to diagnose code path errors
        that occure when adding or refreshing Event Rules.

***********************************************************************

*---------------------------------------------------------------------*

ECF000I ECFn ?command

Description: This message is displayed in response to a subsystem
             command being issued.

Subsystem Action: The subsystem displays command output data in a
                  multiline WTO message.

Response: None

*---------------------------------------------------------------------*

ECF001I ECFn Event Capture initialization in progress

Description: Issued to indicate that the Event Capture Facility
             address space is being initialized.

Subsystem action: Initialization continues.

Response: None

*---------------------------------------------------------------------*

ECF002I ECFn Event Capture initialization complete

Description: Issued to indicate that the Event Capture facility
             address space initialized successfully.

Subsystem Action: The Event Capture Facility address space waits
          for triggered events to process.

Response: None

*---------------------------------------------------------------------*

ECF003I ECFn Event Capture resources released

Description: Issued to indicate that all common subsystem resources
             have been freed.

Subsystem Action: Termination continues.

Response: None

*---------------------------------------------------------------------*

ECF004I ECFn Using PARM='parm,parm,parm'

Description: Issued at Event Capture initialization time to show
             the parameters that will be in effect for the current
             Event Capture Facility instance.

Subsystem Action: Initialization continues.

Response: None

*---------------------------------------------------------------------*

ECF005E ECFn RTBE Overflow error RSN=reason

Description: Issued to indicate that the rule table is not large
             enough to handle the number of rules defined in master
             initialization member ECFMSTR.

Subsystem Action: Event Capture Facility initialization fails.

Response: Contact technical support.

*---------------------------------------------------------------------*

ECF006I ECFn RULE=member-name,MODE={ACT|INACT},RUNAS={STC|JOB|SUB}

Description: Issued to indicate that the event rule(s) defined in
             RULE=member-name have been implemented.

Subsystem Action: Processing continues.

Response: None

*---------------------------------------------------------------------*

ECF007I ECFn TMPSTC=procedure-name

Description: Identifies the started task name that will be used
             to execute triggered event rules.

Subsystem Action: None

Response: None

*---------------------------------------------------------------------*

ECF008I ECFn RUNAS={STC|JOB|SUB}

Description: Identifies the default method used to execute triggered
             event rules when RUNAS= has not been specified on the
             RULE=member-name event rule statement.

Subsystem Action: None

Response: None

*---------------------------------------------------------------------*

ECF009I ECFn Pool-name=(primary,secondary)

Description: Issued to show the primary and secondary cell pool
             allocation values that will be used for the current
             Event Capture Facility instance.

Subsystem Action: None

Response: None

*---------------------------------------------------------------------*

ECF010I ECFn Default init parms in effect

Description: Issued to indicate that all default initialization
             parameters will be used for the current Event Capture
             instance.

Subsystem Action: Initialization continues.

Response: None

*---------------------------------------------------------------------*

ECF011I ECFn Previous instance resources released

Description: Issued at Event Capture Facility instance initialization
             to indicate that common resources not freed by the
             previous instance, due to critical abnormal termination,
             have been freed.

Subsystem Action: Initialization continues.

Response: None

*---------------------------------------------------------------------*

ECF012E ECFn CMD={prefix} Invalid command character prefix specified

Description: Issued at Event Capture Facility instance initialization
             to indicate that the specified command character prefix
             belongs to a different MVS subsystem and cannot be used
             by the current ECF instance.

Subsystem Action: The ECF started task instance is terminated.

Response: Specify a valid command character prefix and restart the ECF
          started task instance.

*---------------------------------------------------------------------*

ECF013E ECFn CMD=% prefix owned by ECF subssytem instance {subsystem}

Description: Issued at Event Capture Facility instance initialization
             to indicate that common resources not freed by the
             previous instance, due to critical abnormal termination,
             have been freed.

Subsystem Action: The ECF started task instance is terminated.

Response: Specify an available command character prefix and restart
          the ECF started task instance.

*---------------------------------------------------------------------*

ECF014W ECFn Unknown init parm ignored: {parameter}

Description: Issued to indicate that an obsolete or unknown parameter
             was specified in the master ECFMSTR initialization member.

Subsystem Action: The parameter is ignored and initialization continues.

Response: Remove the onsolete or unknow parameter from master ECFMSTR
          member.

*---------------------------------------------------------------------*

ECF015E ECFn Invalid init parm RSN=!!!! {parameter}

Description: Issued to indicate that a syntax error was detected in
             the displayed {parameter}.

Subsystem Action: Event Capture Facility initialization fails.

Response: Fix the syntax error and restart Event Capture Facility.

*---------------------------------------------------------------------*

ECF016W ECFn Previous Event Capture instance deactivated

Description: Issued to indicate that previous instance, due to abnormal
             termination, failed to deactivate the Event Capture
             facility subsystem. The previous instance subsystem is
             diactivated.

Subsystem Action: Initialization continues.

Response: None

*---------------------------------------------------------------------*

ECF017W ECFn Unable to free previous instance EVT table

Description: Issued to indicate that the Event Capture Facility was
             unable to storage release the previous instance event
             vector table.

Subsystem Action: Initialization continues.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF018E ECFn SSVT storage release failed RC=return-code

Description: During Event Capture Facility initialization or term-
             ination processing, the subsystem vector table storage
             obtain or release failed. The RC=return-code shows the
             reason for the failure.

Subsystem Action: Initialization or termination continues.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF019I ECFn TRACE={ON|OFF} DEBUG={ON|OFF} SSREQ={NO|YES}
              FETCH={NO|YES}

Description: Issued to show the selected initialization options thar
             are in effect for the current Event Capture Facility
             instance.

Subsystem Action: Initialization continues.

Response: None

*---------------------------------------------------------------------*

ECF020E ECFn REB CPOOL {BUILD|DELETE|GET|FREE} failed RSN=reason

Description: Indicates that there was a failure associated with the
             Event Capture Facility cell pool manager. The RSN=field
             show the reason for the failure.

Subsystem Action: Event Capture Facility initialization fails.

Response: Contact Technical support.

*---------------------------------------------------------------------*

ECF021E ECFn EVT storage release failed RC=return-code

Description: During termination processing the Event Capture Facility
             failed to storage release the common events vector table.

Subsystem Action: Termination continues.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF022E ECFn REBX CPOOL {BUILD|DELETE|GET|FREE} failed RSN=reason

Description: Indicates that there was a failure associated with the
             Event Capture Facility cell pool manager. The RSN=field
             show the reason for the failure.

Subsystem Action: Event Capture Facility initialization fails.

Response: Contact Technical support.

*---------------------------------------------------------------------*

ECF023E ECFn Dynamic LPA {ADD|DELETE} request failed RC=return code
              RSN=reason-code

Description: Indicates that subsystem initialization was unable to load
             or delete the SSI-support load module to/from dynamic LPA
             via the zOS CSVDYLPA service.

Subsystem Action: Event Capture Facility initialization/termination
                  fails.

Response: Contact Technical support.

*---------------------------------------------------------------------*

ECF024E ECFn SRB CPOOL {BUILD|DELETE|GET|FREE} failed RSN=reason

Description: Indicates that there was a failure associated with the
             Event Capture Facility cell pool manager. The RSN=field
             show the reason for the failure.

Subsystem Action: Event Capture Facility initialization fails.

Response: Contact Technical support.

*---------------------------------------------------------------------*

ECF025E ECFn {DSName} Open error RSN=reason

Description: Issued to indicate that the Event Capture Facility is
             unable to open the specified dataset.

Subsystem Action: Event Capture Facility request fails.

Response: Verify that the DSName exists and its name has been
          specified in the ECF started task JCL procedure or in
          PARMLIB initialization member ECFMSTR.

*---------------------------------------------------------------------*

ECF026E ECFn PARMLIB FIND error MEM=member-mam RSN=reson-code

Description: Issued to indicate that the specified PARMLIB member name
             could not be located.

Subsystem Action: The requested function is terminated.

Response: Verify that the specified PARMLIB member name exists in
          the PARMLIB library before requesting the function again.

*---------------------------------------------------------------------*

ECF027E ECFn PARMLIB READ overflow error MEM=member RSN=reason

Description: Issued to indicate that the allocated storage buffer is
             not large enough to hold the records from the specified
             PARMLIB member.

Subsystem Action: The requested function is terminated.

Response: Contact Technical support.

*---------------------------------------------------------------------*

ECF028E ECFn CSA storage release failed RC=return-code, SSM=lmod-name

Description: Issued to indicate that the CSA or SQA common storage
             occupied by the specified subsystem support module (SSM)
             could not be successfuly freed during ECF started task
             termination processing.

Subsystem Action: Termination continues.

Response: Contact Technical support.

*---------------------------------------------------------------------*

ECF029I ECFn No rules defined. {master member name}

Description: Issued to indicate that no Event rules were found to
             implement in PARMLIB member ECFMSTR.


Subsystem Action: Initialization continues.

Response: You can dynamically add event rules after Event Cature
          Facility initialization completes by issuing the following
          SET command: ?SET ADD,EVENT=member-name.

*---------------------------------------------------------------------*

ECF030I ECFn SYSTSIN=DSName

Description: Issued to indicate the name of the TSO TMP input
             data set specified by the ECFMSTR initialization member.

Subsystem None

Response: None

*---------------------------------------------------------------------*

ECF031E ECFn Misplaced RULE=member-name TYPE=event-type

Description: Issued to indicate that there is multiple events specified
             in the PARMLIB member-name and the event type does not
             follow the proper syntax rule.

Subsystem Action: The event member-name is not implemented.

Response: Fix the error and reissue the desidered function request.

*---------------------------------------------------------------------*

ECF032E ECFn Event data error RULE=member-name TYPE=event-type

Description: Issued to indicate that there is a syntx error on the
             specified event-type record.

Subsystem Action: The event member-name is not implemented.

Response: Fix the error and reissue the desidered function request.

*---------------------------------------------------------------------*

ECF033E ECFn RULE=member-name EXEC record error

Description: Issued to indicate that there is a syntx error on the
             REXX/CLIST EXEC record type.

Subsystem Action: The event member-name is not implemented.

Response: Fix the error and reissue the desidered function request.

*---------------------------------------------------------------------*

ECF034E ECFn Misplaced EXEC record RULE=eventy-type

Description: Issued to indicate that there is multiple events specified
             in the PARMLIB member-name and the event type does not
             follow the proper syntax rule.

Subsystem Action: The event member-name is not implemented.

Response: Fix the error and reissue the desidered function request.

*---------------------------------------------------------------------*

ECF035E ECFn RULE=Member-name EXEC=member-name END record missing

Description: Issued to indicate that the required END statement is
             missing in the specified event member-name.

Subsystem Action: The event member-name is not implemented.

Response: Fix the error and reissue the desidered function request.

*---------------------------------------------------------------------*

ECF036E ECFn RULE=member-name EXEC=member-name Variable overflow
              error

Description: The number of variables allowed i the EXEC statement
             exceeds the number allowed.

Subsystem Action: The event member-name is not implemented.

Response: Fix the error and reissue the desidered function request.

*---------------------------------------------------------------------*

ECF037E ECFn RULE=%%%%%%%% EXEC=%%%%%%%% Variable buffer size
              exceeded

Description: Issued to indicate that the variable buffer has reached
             the allowed limit.

Subsystem Action: The request is rejected.

Response: Contact Technical support.

*---------------------------------------------------------------------*

ECF038E ECFn {DDname} {error} RSN=reason

Description: Issued to indicate that an OPEN or CLOSE dataset request
             failed. The DDname identifies the dataset type.

Subsystem Action: Event Capture Facility initialization fails.

Response: Specify the DDname in the ECF started task JCL procedure
          and restart ECF.

*---------------------------------------------------------------------*

ECF039I ECFn DBUGLOG Logging is {ACTIVE}INACTIVE}

Description: Issued to indicate the debug option.

Subsystem Action: The requested debug option is set as specified.

Response: None

*---------------------------------------------------------------------*

ECF040I ECFn Option-name=option-value set

Description: Issued in response to an option ?SET command.

Subsystem Action: The specified option-name is set to the specified
                  option-value.

Response: None

*---------------------------------------------------------------------*

ECF041E ECFn Command invalid: {command-text}

Description: Issued to indicate that an invalid command was issued.

Subsystem Action: The command is rejected.

Response: Issue a supported Event Capture Facility command.
          Note that when ECF commands are issued by TSO users,
          OPERator command authority is required.

*---------------------------------------------------------------------*

ECF042I ECFn SHOWREB={NO}YES} option set

Description: Issued to indicate that Event rule processing messages,
             during rule implementation, are to be displayed on the
             console and the DBUGLOG log dataset.

Subsystem Action: The option is set as specified.

Response: None

*---------------------------------------------------------------------*

ECF043E ECFn RULE={member-name} refresh error RSN=reason

Description: Issued to indicate that the refresh request failed.

Subsystem Action: Add request is terminated.

Response: Validity check the command syntax and reissue the command.

*---------------------------------------------------------------------*

ECF044E ECFn RULE={member-name} add error RSN=reason

Description: Issued to indicate that the add request failed.

Subsystem Action: Refresh request is terminated.

Response: Validity check the command syntax and reissue the command.

*---------------------------------------------------------------------*

ECF045I ECFn Rule {member-name} not found

Description: Issued in response to a display, activate, or inactivate
             command when the specified member-name is not found in
             the PARMLIB dataset.

Subsystem Action: The command request is rejected.

Response: Resissue the command specifying a valid event member name.

*---------------------------------------------------------------------*

ECF046I ECFn Rule {member-name} is now {Active|Inactive}

Description: Issued in response to an Event Rule issued command to
             activate or deactivate a previously defined Event Rule.

Subsystem Action: The event Rules is successfully activated or
                  inactivated as requested.

Response: None

*---------------------------------------------------------------------*

ECF047I ECFn Rule {member-name} {message-text}

Description: Issued in response to an event rule refresh or add command.
             For refresh, issue ?d RULE=member-name to determine the
             status of the refresh request.

Subsystem Action: None

Response: Wait for the event rule request to complete.

*---------------------------------------------------------------------*

ECF048E ECFn TRCELOG log dataset not opened RSN=reason

Description: Issued by the TRACE processor to indicate that the TRCELOG
             log data set is not opened.

Subsystem Action: Trace logging is ignored.

Response: Add DDname TRCELOG to the ECF started task instance and
          restart ECF.

*---------------------------------------------------------------------*

ECF049E ECFn Invalid trace call ID={trace-ID} RSN=reason

Description: Issued by the TRACE processor to indicate that the trace
             ID supplied is invalid.

Subsystem Action: Trace logging is ignored.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF050E ECFn {DDname} storage {function} failed RC=code SSM=module

Description: Issued to indicate that a storage obtain or storage release
             issued by the requesting module failed.

Subsystem Action: The function is terminated.

Response: Contact Technical support.

*---------------------------------------------------------------------*

ECF051I ECFn Enter HELP for a list of valid commands

Description: An invalid ECF subsystem command was issued.

Subsystem Action: The command is rejected.

Response: Issue the HELP command to display a valid list of ECF
          subsystem commands.

*---------------------------------------------------------------------*

ECF052E ECFn Request error RC=return-code RSN=reason SSM=service

Description: Subsystem service request call failed. SSM= identifies
             the failing service routine.

Subsystem Action: The service request terminates abnormally.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF053I ECFn TMP=load-module-name

Description: Identifies the Terminal Monitor Program name specified.

Subsystem Action: The identified Terminal Monitor Program will be used
                  to request TSO services.

Response: None.

*---------------------------------------------------------------------*

ECF054I ECFn TSOSUB=subsystem name

Description: Identifies the 4-character TSO secondary subsystem name
             that will be used to process issued TSO commands.

Subsystem Action: None

Response: None

*---------------------------------------------------------------------*

ECF055I ECFn MSAS={ONLY|TEST}

Description: Issued to indicate the MVS Master Address Space recovery
             option setting. The default is MSAS=ONLY, which means that
             EDIT, BROWSE, TSO, recovery functions are only available
             when ECF is running under the MVS Master Scheduler address
             space. MSAS=TEST should not be used unless instructed to
             do so by ECF technical support.

Subsystem Action: None

Response: None

*---------------------------------------------------------------------*

ECF056E ECFn Unable to locate RTB rule table

Description: Issued to indicate the the Rule table address pointer is
             not initialized.

Subsystem The rule add/refresh request is failed.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF057I ECFn COMPWTO={NO}YES} option set

Description: Issued to indicate the ECF issued messages compress option.

Subsystem Action: The option is set as specified.

Response: None

*---------------------------------------------------------------------*

ECF058I ECFn TIMER=seconds-value

Description: Issued to display the Disabled Interrupt Exit (DIE) timer
             seconds default or specified value. If TIMER= is not
             specified, the default is TIMER=00, which causes ECF to
             disable DIE timing. A value of 01-99 seconds, causes ECF
             to enable the DIE timer capture service routine.

Subsystem Action: None

Response: None

*---------------------------------------------------------------------*

ECF059E ECFn TQE storage {obtain} failed RC=return-code

Description: Issued to indicate that Event Capture initialization was
             unable to storage obtain the Disabled Interrupt Exit TQE
             element in the system queue area (SQA).

Subsystem Action: The Disabled interrupt exit is not activated.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF060E ECFn SetDIE initialization failed; RC=return-code RSN=reason

Description: Event Capture initialization failed to activte the Disabled
             Interrupt Exit (DIE) service environment.

Subsystem Action: The Disabled interrupt exit is not activated.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF061I ECFn SVC={200|255}

Description: Issued to display the user specified SVC number to be
             installed for the current ECF subsystem instance.

Subsystem Action: None

Response: None

*---------------------------------------------------------------------*

ECF062E ECFn Required initialization option SVC= not specified

Description: Issued to indicate that the SVC= option has not been
             specified in the PARMLIB initialization member ECFMSTR.

Subsystem Action: The ECF started task instance is abnormally term-
                  inated.

Response: Specify a user SVC number in the range of 200 to 255 on
          the SVC= initialization option of PARMLIB member ECFMSTR
          and restart the ECF subsystem instance started task.

*---------------------------------------------------------------------*

ECF063E ECFn {function} {tonen-name} error; RC=retun-code RSN=reason

Description: Issued to indicate that the name/token pair requested
             service failed.

Subsystem Action: The ECF started task instance is abnormally term-
                  inated.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF064I ECFn REPLYID=size

Description: Issued to display the size of the WTOR reply ID. When
             REPLYID= is not specified in PARMLIB initialization
             member ECFMSTR, the default is REPLYID=2, which means
             that ECF expects MVS to issue WTOR messages with reply
             IDs in the range of 00 to 99. REPLYID=4 would mean that
             ECF expects MVS to issue WTOR messages with reply IDs
             in the range of 0000 to 9999.

Subsystem Action: None

Response: None

*---------------------------------------------------------------------*

ECF065I ECFn CAPTURE=option-value

Description: Issued to indicate the CPU utilization data capture option.
             When CAPURE=YES is specified, address space service units
             data is captured regardless of CPU utilization.
             When CAPURE=NO is specified or defaulted to, address space
             utilization data is only captured for significant CPU user
             address spaces.

Subsystem Action: The option is set as specified.

Response: None

*---------------------------------------------------------------------*

ECF066E ECFn Command ABENDed; RSN=reason-code {command data}

Description: Issued to indicate that the issued command terminated
             abnormally.

Subsystem Action: The command is not executed.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF067E ECFn Event Capture subtask {taskID} initialization failed

Description: Issued when a critical subsystem subtask fails during its
             initialization process.

Subsystem Action: Event Capture subsysytem initialization is abnormally
                  terminated.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF068E ECFn CSVDYLPA (Add|Delete} ownership error; SSM=load-module

Description: Issued to indicate that the load module is already being
             used by a different ECF subsystem instance.

Subsystem Action: The ECF started task instance is abnormally term-
                  inated.

Response: Specify a different load module name in the SSM= keyword of
          the started task JCL PARM= and restart the ECF subsystem
          instance.

*---------------------------------------------------------------------*

ECF069E ECFn ECF  MLWTO buffer overflow error; {command}

Description: The default MLWTO storage buffer size is not large enough
             to build the message display output.

Subsystem Action: The issued command is terminated in error.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF071E ECFn Command issuer not authorized; {command and operands}

Description: Issued to indicate the the user is not authorized to issue
             ECF commands.

Subsystem Action: Contact your Security Server administrator

Response: The command is not executed.

*---------------------------------------------------------------------*

ECF072I ECFn System-Level token {token-name} {created|deleted|retrieved}

Description: Issued at initialization time to indicate that the ECF
             subsystem server created, retrieved, or deleted the
             name/token pair.

Subsystem Action: Initialization or termination continues.

Response: None.

*---------------------------------------------------------------------*

ECF073I ECFn Q10LOCK={NO|YES}

Description: This option is used to serialize or bypass serialization
             of the Command Schecduling Control Block MVS (CSCB) chain.

Subsystem Action: Q10LOCK=YES serializes QNAME=SYSIEFSD, RNAME=Q10
                  which may cause performance issues scanning the
                  MVS CSCB chain.

Response: Only use default option Q10LOCK=NO, unless instructed by
          technical support to set Q10LOCK=YES.

*---------------------------------------------------------------------*

ECF074I ECFn MONTIMER=nn

Description: issued to display the system and subsystems address spaces
             monitor timer interval value selected.

Subsystem None

Response: None

*---------------------------------------------------------------------*

ECF075I ECFn MONMSGCT=nnnn

Description: issued to display the number of times that WTO message
             ECF700E is issued when a monitored address space normally
             or abnormally terminates.

Subsystem None

Response: None

*---------------------------------------------------------------------*

ECF076I ECFn PERSIST={NO|YES}

Description: issued to display the ECF instance persist option.
             When YES is specifed, the ECF subsystem server does not
             tear down the common instance environment. The environment
             is storage released at subsequent ECF start up.
             When NO, is specified, the common environment is storage
             released when the ECF instance is shutdown.

Subsystem None

Response: None

*---------------------------------------------------------------------*

ECF077I ECFn TRAPSVC={NO|SMF-record-number|DDname}

Description: Issued to display the SVC screening method that ECF will
             use to log screened SVCs. The default is TRAPSVC=NO which
             disables SVC screening.

Subsystem None

Response: None

*---------------------------------------------------------------------*

ECF079I ECF  SETCON MN,JOBNAMES=(ON,LOG) {Issued|not issued}

Description: Issued to display the status of initialization option
             SETCON={NO|YES}.

Subsystem None

Response: None

*---------------------------------------------------------------------*

ECF095E ECFn SQA storage obtain failed RC=return-code SSM=lmod-name

Description: Issued to indicate that a request for SQA virtual storage
             failed.

Subsystem Action: The ECF started task instance is abnormally term-
                  inated.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF096I ECFn STOP command accepted

Description: Issued to indicate that the STOP command issued against
             the ECF started task instance has been accepted.

Subsystem Action: The ECF started task begins the termination process.

Response: None

*---------------------------------------------------------------------*

ECF097E ECFn Event Capture initialization failed RC=return-code
              RSN=reason

Description: Issued to indicate that the ECF started task failed to
             initialize successfully.

Subsystem Action: The STC started task terminates with error and
                  reason codes.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF098I ECFn Event Capture termination in progress

Description: Issued to indicate that the ECF started task began the
             termination process.

Subsystem Action: The ECF started task starts freeing all acquired
                  resources.

Response: None

*---------------------------------------------------------------------*

ECF099I ECFn Event Capture termination complete

Description: Issued to indicate that the ECF started task has completed
             the termination process.

Subsystem Action: The ECF started task is terminated.

Response: None

*---------------------------------------------------------------------*

ECF700E ECFn {addrspace} MONITORED SYSTEM ADDRESS SPACE TERMINATED

Description: Issued to indicate that a monitored system address space
             has normally or abnormally terminated.

Subsystem Action: ECF triggers any defined and active MONITOR rules.
                  This WTO message is issued repeatedly based on the
                  number of times specified by initialization option
                  MONWTOCT in PARMLIB member ECFMSTR. the default is
                  MONWTOCT=16. The WTO message is issued based on the
                  time interval specified by initialization option
                  MONOTORT in PARMLIB member ECFMSTR. The default is
                  MONTIMER=10 seconds.
                  ECF stops issuing this WTO when the monitored address
                  space is re/started or when the MONWTOCT count is
                  reached.

Response: None

*---------------------------------------------------------------------*

ECF800A ECFn Specify Event Capture Facility PARMLIB or EXIT

Description: Issued by ECF started task recovery to request the name
             of the PARMLIB initialization data set to open for the
             recovery session.

Subsystem Action: ECF waits for the console operator reply.

Response: Reply the fully qualified PARMLIB data set name or reply
          EXIT to terminate the recovery session.

*---------------------------------------------------------------------*

ECF801I ECFn Primary subsystem name altered

Description: Issued by ECF started task recovery to inform the console
             operator that the subsysytem name has been successfully
             altered.

Subsystem Action: Started task recovery continues initialization
                  processing.

Response: None

*---------------------------------------------------------------------*

ECF802I ECFn Subsystem successfully defined

Description: Issued by ECF started task recovery to inform the console
             operator that the subsysytem name specified has been
             defined to the MVS SSI component.

Subsystem Action: Started task recovery continues initialization
                  processing.

Response: None

*---------------------------------------------------------------------*

ECF803E ECFn Recovery session already active; command rejected

Description: Issued by ECF started task recovery to inform the console
             operator that a started task recovery session is already
             active.

Subsystem Action: The command is rejected.

Response: Terminate current recovery session instance and start
          a new recovey instance.

*---------------------------------------------------------------------*

ECF804I ECFn Default parms=initialization-parameters

Description: Issued by ECF started task recovery to inform the console
             operator that default initialization parameters are in use.

Subsystem Action: Started task recovery continues initialization.

Response: None

*---------------------------------------------------------------------*

ECF805I ECF  Secondary subsystem successfully defined

Description: Issued by ECF started task recovery to inform the console
             operator that the specified subsystem has been successfully
             defined to the MVS SSI.

Subsystem Action: Started task recovery continues initialization.

Response: None

*---------------------------------------------------------------------*

ECF806E ECFn Recovery only allowed from Master address space

Description: Issued by ECF started task recovery to inform the console
             operator that the recovery session is not allowed.

Subsystem Action: Started task recovery terminates.

Response: Specify MSAS=TEST in PARMLIB initialization member ECFMSTR
          and restart the started task recovery session.

*---------------------------------------------------------------------*

ECF807I ECFn {EDIT|BROWSE} message-text

Description: Issued by ECF started task recovery to display the results
             of a recovery session issued command.

Subsystem Action: None

Response: None

*---------------------------------------------------------------------*

ECF808I ECFn For COMPRESS details issue BROWSE {dataset-name}

Description: Issued by ECF started task recovery to notify the console
             operator to BROWSE the results of COMPRESS datset request
             when the compress output is not displayed at the console.

Subsystem Action: None

Response: Browse compress output dataset.

*---------------------------------------------------------------------*

ECF810I ECFn System recovery session in progress

Description: Issued by ECF started task recovery to notify the console
             operator that a recovery session is active.

Subsystem Action: None

Response: None

*---------------------------------------------------------------------*

ECF811I ECFn Secondary subsystem already defined

Description: Issued by ECF started task recovery to notify the console
             operator that the subsysytem name specified is already
             defined to the MVS SSI.

Subsystem Action: The command is ignored.

Response: Specify a different subsysytem name and reissue the command.

*---------------------------------------------------------------------*

ECF813I ECFn Enter %HELP for a list of valid commands

Description: Issued by ECF started task recovery to notify the console
             operator that the issued command is invalid

Subsystem Action: The command is ignored.

Response: Issue the HELP command to display a list of valid commands.

*---------------------------------------------------------------------*

ECF900I ECFn Service request facility in progress

Description: Issued to indicate that the ECF service request facility
             has been enabled on behalf of the executing ECFTMP
             started task session.

Subsystem Action: Service request is processed.

Response: None

*---------------------------------------------------------------------*

ECF901I ECFn Service request facility complete

Description: Issued to indicate that the ECF service request facility
             has been disabled on behalf of the executing ECFTMP
             started task session.

Subsystem Action: Service request is processed.

Response: None

*---------------------------------------------------------------------*

ECF902E ECFn Trace componet abnormally terminated and disabled

Description: Issued to indicate that the ECF trace component terminated
             abnormally. The component has been disabled and tracing
             has been discontinued.

Subsystem Action: The trace request is ignored.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF903E ECFn DYNALLOC error RC=return-code I=info-code E=error-code
              DSN=dataset-name

Description: Issued to indicate that the allocation request failed.

Subsystem Action: Verify that the specified dataset name specified
                  is valid.

Response: Re-execute the specified function.

*---------------------------------------------------------------------*

ECF904E ECFn Subtask attach failed ECFSRV(subtask-ID)

Description: Issued to indicate that a subtask attach request did not
             complete successfully.

Subsystem Action: ECF subsystem is abnormally terminated.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF905E ECFn {function} Recursive loop detected

Description: A subsystem processing function was terminated to avoid
             ECF subsystem recursive loops.

Subsystem Action: The function is abnormally terminated.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF906E ECFn SSI load module LOAD failed SSM=lmod-name

Description: Issued to indicate that the Event Capture Facility failed
             to load subsystem interface load module ECFSSM into
             common CSA virtual storage.

Subsystem Action: The ECF started task is terminated.

Response: If you specified the CSA=YES parameter on the EXEC JCL
          PARM=, remove it or specify CSA=NO. Then copy ECFSSM load
          module from the ECF started task STEPLIB library to LPALIB.
          Rename the STEPLIB library ECFSSM load module to ECFSSM@ and
          re-IPL the system with the CLPA option.
          If the problem does not resolve, contact Technical Support.

*---------------------------------------------------------------------*

ECF907I ECFn EVT vector table size mismatch: ECFSUB/ECFVTA

Description: Issued to indicate that the Events Vector Table (EVT) size
             in module ECFSUB does not match the vector table in module
             ECFVTA.

Subsystem Action: The ECF started task is terminated.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF908I ECFn Commmon instance resources retained

Description: This message is issued to indicate that ECF server common
             structures are not storage released when the started task
             is shutdown. This occurs because initialization option,
             PERSIST=YES, has been specified in ECF PARMLIB member,
             ECFMSTR. PERSIST=YES, protects MVS system integrity.
             ECF server common structures will be storage released on
             subsequent ECF server restart. The default shipped with
             ECF is PERSIST=YES.

Subsystem Action: The ECF started task ends.

Response: DO NOT specify PERSIST=NO unless instructed to do so by
          Technical Support.

*---------------------------------------------------------------------*

ECF913E ECFn ECFS34 Command listener lock obtain failed; {lockID}

Description: The SSI command listener was unable to obtain a lock
             required to process command Event Rules.

Subsystem Action: Event Rule processing is bypassed.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF984E ECFn SVCUPDTE failed; SVC=SVC-number RC=return-code

Description: Issued to indicate that the SVC update service failed.

Subsystem Action: The ECF started task is terminated.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF985E ECFn SVC=SVCnumber ownership error; SVC Owner=SVCowner

Description: Issued to indicate that the SVC number specified belongs
             to a different ECF subsysytem instance.

Subsystem Action: The ECF started task is terminated.

Response: Specify an unused SVC number in the range of 200 to 255
          and restart the ECF subsystem instance.

*---------------------------------------------------------------------*

ECF986E ECFn $SSVT failed validity checks RC=return-code RSN=reason

Description: Issued to indicate that the service request caller failed
             to process the service request.

Subsystem Action: Service request is not processed.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF987E ECFn {Caller} error Rule=rule RC=return-code RSN=reason

Description: Issued to indicate that the service request caller failed
             to process the service request.

Subsystem Action: Service request is not processed.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF988E ECFn {subsys} subsystem ownership error. Owner={subsys}

Description: Issued to indicate that the Event Capture Facility sub-
             system specified by the SUB=subsystem-name JCL PARM is
             already owned by another ECF subsystem instance.
             instance.

Subsystem Action: The ECF started task is terminated.

Response: Select a different subsystem name and restart the ECF started
          task.

*---------------------------------------------------------------------*

ECF989E ECFn Event Capture already active. Start rejected

Description: Issued to indicate that the Event Capture Facility started
             task is already active in the system.

Subsystem Action: The ECF Start command is rejected.

Response: Shutdown the current ECF started task and reissue the Start
          ECF command.

*---------------------------------------------------------------------*

ECF990E ECFn Release Level mismatch: ECFSUB=VnRnMn ECFSSM=VnRnMn

Description: Issued to indicate that the Event Capture Facility module
             ECFSUB is at a different release level of module ECFSSM.

Subsystem Action: The ECF started task is terminated.

Response: Re-IPL the system with the CLPA or MLPA option to install the
          updated release level of the ECFSSM module.

*---------------------------------------------------------------------*

ECF991E ECFn Recovery environment create error RC=return-code

Description: Issued to indicate that Event Capture Facility was unable
             to establish a recovery environment.

Subsystem Action: The ECF Start task is terminated.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF992E ECFn {table} parms table overflow error

Description: Issued to indicate that an internal processing table is not
             large enough to hold the required data.

Subsystem Action: The ECF Start task is terminated.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF993E ECFn Storage obtain failed RC=return-code CMD=command-name

Description: Issued to indicate that ECF was unable to obtain virtual
             storage to process the requested command.

Subsystem Action: The command is rejected.

Response: Increase the ECF started task region size and restart the
          ECF started task.

*---------------------------------------------------------------------*

ECF994I ECFn No rules found

Description: Issued to indicate that no event rules have been defined
             in the PARMLIB data set.

Subsystem Action: The command is rejected.

Response: None

*---------------------------------------------------------------------*

ECF995E ECFn MLWTO display error RC=return-code ID=identifier

Description: Issued to indicate that a multiline message output display
             encountered an internal error.

Subsystem Action: The command is rejected.

Response: Contact Technical Support.

*---------------------------------------------------------------------*

ECF996W ECFn {Lmod} Recovery environment bypassed

Description: Issued to indicate that the ECF event capute subsystem
             is executing without recovery routines. Note that RCV=NO
             should only be used during debugging sessions on test
             systems only, since it could crash the system impacting
             other production work. USE CAUTION!

Subsystem Action: The ECF started task is terminated.

Response: Change option to RCV=YES on the PARM= parameter of the EXEC
          JCL statement and restart the ECF started task.

*---------------------------------------------------------------------*

ECF997I ECFn Event Capture listeners deactivated by {EOT|EOM}

Description: Issued to indicate that the subsystem listeners activated
             by the SSREQ=YES initialization option has been deactivated
             by the specified {EOT|EOM} component.

Subsystem Action: Normal termination continues.

Response: None

*---------------------------------------------------------------------*

ECF998E ECFn (msgID} Not found in message table

Description: Issued to indicate the the specified WTO message ID could
             not be found in the message table.

Subsystem Action: The issued WTO message is not displayed.

Response: Contact technical support.

*---------------------------------------------------------------------*

ECF999E ECFn Event Capture {module}/{CSECT} ABEND=code RSN=reason

Description: Issued to indicate an event capture service routine has
             terminated abnormally.

Subsystem Action: Event capture takes am SVC dump.

Response: Contact Technical Support.

*---------------------------------------------------------------------*
./ ADD NAME=$$PARMS  0125-21114-21333-0953-00344-00259-00000-BENMAR  58

              +-------------------------------+
              | ECF Initialization Parameters |
              +-------------------------------+

ECF initialization parameters are defined in ECF PARMLIB data set
member ECFMSTR. The following parameters are currently supported:

+======================================================================+
| Parameter | Parameter | Parameter                                    |
| Name      | Default   | Description                                  |
+======================================================================+
| CAPTURE   | NO        | Specifes the type of address space resource  |
|           |           | utilization data that ECF will capture.      |
|           |           | CAPTURE=NO, the default, only captures       |
|           |           | address space utilization data on behalf of  |
|           |           | address spaces the use large amounts of CPU. |
|           |           |                                              |
|           |           | CAPTURE=YES, captures address space data     |
|           |           | for all address spaces regardess of usage.   |
|           |           |                                              |
+----------------------------------------------------------------------+
| COMPWTO   | NO        | COMPWTO=YES compresses duplicate blanks in   |
|           |           | ECF issued WTO messages.                     |
|           |           |                                              |
|           |           | COMPWTO=NO displays ECF issued messages      |
|           |           | unchanged.                                   |
|           |           |                                              |
+----------------------------------------------------------------------+
| DEBUG     | OFF       | This option when set to DEBUG=ON displays    |
|           |           | internal processing events using WTOs in the |
|           |           | range of ECF100 to ECF199. The messages are  |
|           |           | issued with WTO Descriptor code 2 and route  |
|           |           | code 11. These messages also appear on the   |
|           |           | ECF started task Joblog.                     |
|           |           |                                              |
|           |           | This option can be dynamically changed by    |
|           |           | issuing the following ECF subsystem SET      |
|           |           | command:                                     |
|           |           |                                              |
|           |           | ?SET DEBUG=ON                                |
|           |           | ?SET DEBUG=OFF                               |
|           |           |                                              |
|           |           | Also if the debug log dataset has been       |
|           |           | specified by the ECF started task JCL DDname |
|           |           | DBUGLOG, the messages are written in DBUGLOG |
|           |           | only. They will not be displayed on MVS      |
|           |           | consoles that accept ROUTE code 11.          |
|           |           |                                              |
|           |           | Note: Specifiy DEBUG=ON only when this data  |
|           |           |       is requested by technical support.     |
|           |           |                                              |
+----------------------------------------------------------------------+
| ECFJOBS   | ECFSUB    | This option specifies the name of the ECFJOBS|
|           |           | partitioned dataset. It contains the output  |
|           |           | of triggered event rules that execute with   |
|           |           | the RUNAS=JOB option specified.              |
|           |           |                                              |
|           |           | The The data set name specified must also be |
|           |           | specified in PARMLIB member ECFMSTR parameter|
|           |           | ECFJOBS=DSName.                              |
|           |           |                                              |
+----------------------------------------------------------------------+
| MONTIMER  | 15        | MONTIMER=15, the default, is used as a timer |
|           |           | interval to monitor system and subsystems    |
|           |           | address spaces. Every 10 seconds, subtask    |
|           |           | ECFSRV(SYSSRV) wakes up and checks to see if |
|           |           | any address spaces monitored by event rule   |
|           |           | type MONITOR have normally or abnormally     |
|           |           | terminated. Termination causes MONITOR type  |
|           |           | rules to be triggered for execution.         |
|           |           |                                              |
+----------------------------------------------------------------------+
| MONMSGCT  | 0016      | MONMSGCT controls the number of times that   |
|           |           | WTO message ECF700E is issued on behalf of   |
|           |           | the terminated MONITORed address space.      |
|           |           | The ECF700E system/subsystem terminated WTO  |
|           |           | stops being issued when the limit is reached |
|           |           | or when the system/subsystem address space   |
|           |           | is restarted. MONMSGCT=9999 is the larget    |
|           |           | value that can be specified. The default is  |
|           |           | MONMSGCT=0016.                               |
|           |           |                                              |
+----------------------------------------------------------------------+
| MSAS      | ONLY      | This option when set to MSAS=TEST allows you |
|           |           | to execute EDIT, BROWSE and TSO recovery     |
|           |           | commands in non-recovery environments. The   |
|           |           | default is MSAS=ONLY which allows you to     |
|           |           | execute recovery commands when the ECF       |
|           |           | subsystem is running in the MVS Master       |
|           |           | Scheduler Address Space. MSAS=TEST should    |
|           |           | only be specified when instructed to do so   |
|           |           | by ECF technical support.                    |
|           |           |                                              |
+----------------------------------------------------------------------+
| PERSIST   | YES       | Specifes how the ECF subsystem server should |
|           |           | react when the STOP ECF command is issued.   |
|           |           | PERSIST=YES, terminates the subsystem server |
|           |           | instance without deleting its CSA loaded     |
|           |           | load module and without storage releasing    |
|           |           | the EVT vector table from SQA.               |
|           |           | ECF will tear down the common environment at |
|           |           | subsequent ECF instance start ups. This is   |
|           |           | done to preserve MVS system integrity.       |
|           |           | The default is PERSIST=YES.                  |
|           |           |                                              |
|           |           | PERSIST=NO, deletes the CSA loaded load      |
|           |           | module and the EVT vector table from SQA when|
|           |           | the STOP ECF command is issued.              |
|           |           |                                              |
|           |           | Note: Specifiy PERSIST=NO only when asked    |
|           |           |       to do so by ECF technical support.     |
|           |           |                                              |
+----------------------------------------------------------------------+
| Q10LOCK   | NO        | This option is used to serialize the Command |
|           |           | Scheduling Control Block (CSCB) chain.       |
|           |           |                                              |
|           |           | Note: Specifiy Q10LOCK=YES only when asked   |
|           |           |       to do so by ECF technical support.     |
|           |           |                                              |
+----------------------------------------------------------------------+
| REBPOOL   | 16,08     | Rule Element Block CSA cell pool.            |
|           |           | Primary extent default: 16                   |
|           |           | Secondary extents default: 8                 |
|           |           |                                              |
|           |           | This cell pools is used by ECF to track      |
|           |           | Event Capture data form any address space.   |
|           |           |                                              |
+----------------------------------------------------------------------+
| REPLYID   | 00-999    | Specifies the MVS reply ID range. The default|
|           |           | is REPLYID=2, which means that ECF expects   |
|           |           | MVS to issue WTORs with a reply ID in the    |
|           |           | range of 0 to 99. REPLYID=4 would mean that  |
|           |           | ECF expects MVS to issue WTORs with reply IDs|
|           |           | in the range 0f 0 to 9999.                   |
|           |           |                                              |
+----------------------------------------------------------------------+
| RULE      | N/A       | This option is used to specify the member    |
|           |           | name of the Event Rule that is implemented   |
|           |           | at ECF started task initialization.          |
|           |           |                                              |
|           |           | The following Event Rule operands can be     |
|           |           | specified:                                   |
|           |           |                                              |
|           |           | MODE={ACTIVE|INACTIVE}                       |
|           |           | RUNAS={STC|JOB|SUB}                          |
|           |           | JOBNAME=jobname                              |
|           |           |                                              |
|           |           | Example 1:                                   |
|           |           |                                              |
|           |           | RULE=WTOBUFF                                 |
|           |           |                                              |
|           |           | The WTOBUFF Event Rule is implemented with   |
|           |           | the MODE=ACTIVE default and will execute     |
|           |           | with the default RUNAS= attribute specified  |
|           |           | by the RUNAS= attribute in PARMLIB member    |
|           |           | ECFMSTR.                                     |
|           |           |                                              |
|           |           | Example 2:                                   |
|           |           |                                              |
|           |           | RULE=MONTSO,MODE=ACTIVE,RUNAS=STC            |
|           |           |                                              |
|           |           | The MONTSO Event Rule is implemented as      |
|           |           | active (MODE=ACTIVE) and when triggered it   |
|           |           | will execute as a started task (RUNAS=STC)   |
|           |           | by issuing the MVS Start command internally  |
|           |           | as follows: S ECFTMP.MONTSO,EXEC=member-name.|
|           |           |                                              |
|           |           | Example 3:                                   |
|           |           |                                              |
|           |           | RULE=TESTBAT,MODE=ACTIVE,RUNAS=JOB,JOBNAME=  |
|           |           | MYBATJOB                                     |
|           |           |                                              |
|           |           | The TESTBAT Event Rule is implemented as     |
|           |           | active (MODE=ACTIVE) and when triggered it   |
|           |           | will execute as a batch job (RUNAS=JOB) with |
|           |           | a jobname of MYBATJOB.                       |
|           |           |                                              |
|           |           | The model batch job JCL used is located in   |
|           |           | ECF PARMLIB member ECFSUB.                   |
|           |           |                                              |
|           |           | Note: Refer to PARMLIB member ECFSUB for     |
|           |           |       a complete overview.                   |
|           |           |                                              |
+----------------------------------------------------------------------+
| RUNAS     | STC       | This option tells the ECF subsystem how      |
|           |           | triggered event rules are to be executed.    |
|           |           |                                              |
|           |           | RUNAS=STC is the default. This means that    |
|           |           | when you define an Event Rule and do not     |
|           |           | specify the the RUNAS= operand, on the RULE= |
|           |           | definition statement, the RUNAS default will |
|           |           | be RUNAS=STC.                                |
|           |           |                                              |
|           |           | For example, if you define a rule as follows:|
|           |           | RULE=$TEST1,MODE=ACTIVE                      |
|           |           | The Event Rule is implemented with RUNAS=STC.|
|           |           |                                              |
|           |           | RUNAS=STC means that event rules are executed|
|           |           | as started tasks.                            |
|           |           |                                              |
|           |           | RUNAS=JOB means that event rules are executed|
|           |           | as batch jobs.                               |
|           |           |                                              |
|           |           | RUNAS=SUB means that event rules are executed|
|           |           | in the ECF started task address space as     |
|           |           | jobstep tasks.                               |
|           |           |                                              |
|           |           | RUNAS=SUB is only allowed when ECF is running|
|           |           | on MVS 3.8j systems.                         |
|           |           |                                              |
+----------------------------------------------------------------------+
| SDUMP     | NO        | This option when set to SDUMP=YES instructs  |
|           |           | Event Capture to take SVC dumps when errors  |
|           |           | occur. The default is SDUMP=NO which causes  |
|           |           | errors to be reported via SYSABEND only. .   |
|           |           |                                              |
|           |           | This option can be dynamically changed by    |
|           |           | issuing the following ECF subsystem SET      |
|           |           | command:                                     |
|           |           |                                              |
|           |           | ?SET SDUMP=NO                                |
|           |           | ?SET SDUMP=YES                               |
|           |           |                                              |
|           |           | Note: Specifiy SDUMP=YES only when this data |
|           |           |       is requested by technical support.     |
|           |           |                                              |
+----------------------------------------------------------------------+
| SETCON    | YES       | This option when set to SETCON=YES causes    |
|           |           | ECF to issue the following MVS command:      |
|           |           | SETCON MN,JOBNAMES=(ON,LOG). This causes the |
|           |           | MVS job scheduler component to issue "IEF"   |
|           |           | initialization and termination WTO messages  |
|           |           | that are listened to by ECF to trigger event |
|           |           | rules. SETCON=YES is the ECF default.        |
|           |           |                                              |
+----------------------------------------------------------------------+
| SHOWREB   | NO        | This option when set to SHOWREB=YES displays |
|           |           | Event Rule implementation data on MVS        |
|           |           | consoles that accept route code 11.          |
|           |           |                                              |
|           |           | Note: Specifiy SHOWREB=YES only when this    |
|           |           |       data is requested by technical support.|
|           |           |                                              |
+----------------------------------------------------------------------+
| SRBPOOL   | 16,08     | Service Request Block SQA cell pool.         |
|           |           | Primary extent default: 16                   |
|           |           | Secondary extents default: 8                 |
|           |           |                                              |
|           |           | This cell pools is used by the ECF subsystem |
|           |           | to schedule SRBs across address spaces.      |
|           |           |                                              |
+----------------------------------------------------------------------+
| SREPOOL   | 16,08     | Service Request Element CSA cell pool.       |
|           |           | Primary extent default: 16                   |
|           |           | Secondary extents default: 8                 |
|           |           |                                              |
|           |           | This cell pools is used by the ECF subsystem |
|           |           | to cross-memory post ECF subsystem subtasks. |
|           |           |                                              |
+----------------------------------------------------------------------+
| SSREQ     | NO        | This option when set to SSREQ=YES allows the |
|           |           | ECF subsystem to capture all WTO/R messages  |
|           |           | issued by any task in any address space.     |
|           |           | Use this option if running on MVS 3.8j. If   |
|           |           | running ECF on a zOS host this option is not |
|           |           | applicable.                                  |
|           |           |                                              |
+----------------------------------------------------------------------+
| SVC       | {200|255} | Specifies the ECF subsysytem SVC number.     |
|           |           | The default SVC number specified in PARMLIB  |
|           |           | member ECFMSTR is SVC=255. If SVC=255 is used|
|           |           | by another product, change SVC=255 to another|
|           |           | (UNUSED) SVC number in the range of 200 to   |
|           |           | 254.                                         |
|           |           |                                              |
+----------------------------------------------------------------------+
| SYSTSIN   | DSName    | This option specifies the name of the SYSTSIN|
|           |           | partitioned data set. Each member in the data|
|           |           | set is dynamically built by ECF when an Event|
|           |           | rule is triggered for execution.             |
|           |           | The member contains name of REXX/CLIST to be |
|           |           | executed as well as the supplied variables   |
|           |           | that the REXX/CLIST receives as  input.      |
|           |           |                                              |
|           |           | Note: The SYSTSIN data set name specified    |
|           |           |       must match the data set name specified |
|           |           |       by the ECFTMP started task JCL proc-   |
|           |           |       edure.                                 |
|           |           |                                              |
+----------------------------------------------------------------------+
| TIMER     | 00        | TIMER=00, the default, disables the ECF timer|
|           |           | component. A value of 01-60 seconds, enables |
|           |           | the ECF timer component.                     |
|           |           | The TIMER interval value of 01-60 is used to |
|           |           | drive the Disabled Interrupt Exit (DIE) ECF  |
|           |           | service routine. This routine captures global|
|           |           | performance address space data.              |
|           |           |                                              |
+----------------------------------------------------------------------+
| TMPSTC    | ECFTMP    | This option specifies the name of the started|
|           |           | task JCL procedure that will be started when |
|           |           | an Event rule is triggered for execution.    |
|           |           |                                              |
|           |           | ECFTMP invokes the TSO TMP to process the    |
|           |           | REXX/CLIST specified on the EXEC() Event     |
|           |           | Rule record.                                 |
|           |           |                                              |
+----------------------------------------------------------------------+
| TRACE     | OFF       | This option when set to TRACE=ON and the ECF |
|           |           | started task JCL DDname TRCELOG is also      |
|           |           | defined, internal trace dump data is written |
|           |           | to the TRCELOG log data se.                  |
|           |           |                                              |
|           |           | This option can be dynamically changed by    |
|           |           | issuing the following ECF subsystem SET      |
|           |           | command:                                     |
|           |           |                                              |
|           |           | ?SET TRACE=ON                                |
|           |           | ?SET TRCEG=OFF                               |
|           |           |                                              |
|           |           | Note: Specifiy TRACE=ON only when this data  |
|           |           |       is requested by technical support.     |
|           |           |                                              |
+----------------------------------------------------------------------+
| TRAPSVC   | NO        | This option specifies SVC screening log data |
|           |           | attributes.                                  |
|           |           |                                              |
|           |           | TRAPSVC=NO, the default disables screening   ||
|           |           | TRAPSVC=DDname, captures SVC log data in the |
|           |           | dataset specified by the DDname.             |
|           |           |                                              |
|           |           | TRAPSVC=SMF-record-Number, captures SVC log  |
|           |           | data in the user-specified SMF record number.|
|           |           |                                              |
+----------------------------------------------------------------------+
| TSOSUB    | ECFR      | This option specifies the name of the TSO    |
|           |           | recovery subsystem. Subsystem ECFR allows    |
|           |           | you to execute most TSO commands from the MVS|
|           |           | console. The default is TSOSUB=ECFR. If you  |
|           |           | change the default, you need to also change  |
|           |           | the ECFR started task JCL procedure name.    |
|           |           |                                              |
+----------------------------------------------------------------------+
./ ADD NAME=$$RACF   0119-21172-21192-0653-00075-00001-00075-BENMAR  23
//$$RACF   JOB ...
//*
//*-----------------------------------------------------------------*/
//*                                                                 */
//* Optional Event Capture Facility external security job           */
//*                                                                 */
//*    This JCL procedure defines resource class ECFCLASS to RACF.  */
//*                                                                 */
//*    STEP1: Defines the ECFCLASS to the dynamic RACF class        */
//*           desciptor table.                                      */
//*                                                                 */
//*    STEP2: Issues RACF command to activate ECFCLASS              */
//*                                                                 */
//*    STEP3: Issues RACF command to RACLIST ECFCLASS               */
//*                                                                 */
//*    STEP4: Defines the Event Capture facility resource names     */
//*                                                                 */
//*    STEP5: Grants permission to selected users                   */
//*                                                                 */
//*           NOTE: Add/Change PERMIT ID(userID) as required before */
//*                 submitting this job.                            */
//*                                                                 */
//*-----------------------------------------------------------------*/
//*
//*   RDEFINE ECFCLASS
//*
//STEP1    EXEC PGM=IKJEFT01,DYNAMNBR=30,REGION=0M
//SYSTSPRT  DD SYSOUT=*
//SYSTSIN   DD *
 RDEFINE CDT ECFCLASS UACC(NONE) +
    CDTINFO(DEFAULTUACC(NONE) FIRST(ALPHA) MAXLENGTH(32) +
    OTHER(ALPHA,NUMERIC,SPECIAL) POSIT(128) RACLIST(ALLOWED) +
    SECLABELSREQUIRED(YES))
/*
//*
//*   Activate ECFCLASS
//*
//STEP2    EXEC PGM=IKJEFT01,DYNAMNBR=30,REGION=0M
//SYSTSPRT  DD SYSOUT=*
//SYSTSIN   DD *
 SETROPTS CLASSACT(ECFCLASS)
/*
//*
//*   RACLIST ECFCLASS
//*
//STEP3    EXEC PGM=IKJEFT01,DYNAMNBR=30,REGION=0M
//SYSTSPRT  DD SYSOUT=*
//SYSTSIN   DD *
 SETROPTS RACLIST(CDT) REFRESH
/*
//*
//*   RDEFINE ECF resource entities
//*
//STEP4    EXEC PGM=IKJEFT01,DYNAMNBR=30,REGION=0M
//SYSTSPRT  DD SYSOUT=*
//SYSTSIN   DD *
 RDEFINE ECFCLASS ZECF.MODIFY UACC(NONE)
 RDEFINE ECFCLASS ZECF.DISPLAY UACC(NONE)
 RDEFINE ECFCLASS ZECF.RECOVERY UACC(NONE)
 RDEFINE ECFCLASS ZECF.SVC.AUTH UACC(NONE)
 RDEFINE ECFCLASS ZECF.XPC.AUTH UACC(NONE)
/*
//*
//*  Grant READ access to ECF command users
//*
//STEP5    EXEC PGM=IKJEFT01,DYNAMNBR=30,REGION=0M
//SYSTSPRT  DD SYSOUT=*
//SYSTSIN   DD *
 PERMIT  ZECF.MODIFY CLASS(ECFCLASS) ID(userID) ACCESS(READ)
 PERMIT  ZECF.DISPLAY CLASS(ECFCLASS) ID(userID) ACCESS(READ)
 PERMIT  ZECF.RECOVERY CLASS(ECFCLASS) ID(userID) ACCESS(READ)
 PERMIT  ZECF.SVC.AUTH CLASS(ECFCLASS) ID(userID) ACCESS(READ)
 PERMIT  ZECF.XPC.AUTH CLASS(ECFCLASS) ID(userID) ACCESS(READ)
/*
//
./ ADD NAME=$$RCVY   0105-21133-21204-0802-00193-00113-00193-BENMAR  18

              +------------------------------+
              |                              |
              |   Started Tasks Recovery     |
              |          console             |
              |          Commands            |
              |                              |
              +------------------------------+


STARTED TASK RECOVERY:
  ECF supports the following started task recovery commands:

    o EDIT
    o BROWSE
    o COPY
    o COMPRESS
    o TSO commands

  These commands are only available when ECF is running as a jobstep
  task of the Master Scheduler address space or as a native subsystem
  before JES2/JES3 is started in the system.

  To allow started task recovery during normal operation, change
  PARMLIB option from MSAS=ONLY to MSAS=TEST.

-----------------------------------------------------------------------

HELP COMMANDS:
  The following help commands detail how to issue started task
  recovery commands:

  ?HELP
  ?HELP {R|RECOVERY}
  ?HELP (E|EDIT}
  ?HELP (B|BROWSE}
  ?HELP (SUB|SUBSYS}

-----------------------------------------------------------------------

COMMON COMMANDS:
  ?SCROLL    ScrollAmount; L/LEFT; R/RIGHT
  ?TSO       Command
  ?COMPRESS  Dataset
  ?COPY      FROM=Dataset(member),TO=Dataset(member)

-----------------------------------------------------------------------

EDIT COMMANDS:
  ?EDIT      Dataset(member)
  ?LIST      Blank; RecordNumber; {T|TOP}; {B|BOTTOM}
  ?UPDATE    RecordNumber,DataValue
  ?DELETE    RecordNumber
  ?INSERT    RecordNumber,DataValue
  ?SAVE      Save member updates and END session
  ?NOSAVE    Discard member updates and END session


EDIT EXAMPLE:
  ?EDIT SYS1.PROCLIB(JES2)
    Edit system library member JES2 JCL procedure

  ?DELETE 7
    Delete JES2 member record number 7

  ?INSERT 0
    Insert JES2 record number 0 before record 1

  ?INSERT 17
    Insert JES2 record number 17 before record 18

  ?UPDATE 14,//SYSIN DD *
    Update JES2 record number 14 with: //SYSIN DD *

  ?SCROLL RIGHT
    Scroll member to the right.

  ?SCROLL LEFT
    Scroll member to the left.

  ?SAVE
    Save updates made to the JES2 member and end EDIT session

  ?NOSAVE
    Discard updates made to the JES2 member and end EDIT session

  ?LIST
    Scroll thru the JES2PARM member by the number of records set
    by the scroll amount. The default is 24 records.

  ?LIST 21
    List JES2 member starting at record 21

  ?LIST TOP
    List the beginning of the JES2 member

  ?LIST BOTTOM
    List the bottom of the JES2 member

-----------------------------------------------------------------------

BROWSE COMMANDS:
    ?BROWSE    Dataset(member)
    ?BROWSE    Blank; RecordNumber; {T|TOP}; {B|BOTTOM}
    ?ENDBROWSE Terminate browse session


BROWSE EXAMPLE:
  ?BROWSE SYS1.JES2PARM(JES2PARM)
    Display JES2 parameters member JES2PARM

  ?BROWSE 17
    Browse JES2PARM starting at record 17

  ?SCROLL RIGHT
    Scroll member to the right.

  ?SCROLL LEFT
    Scroll member to the left.

  ?BROWSE
    Scroll thru the JES2PARM member by the number of records set
    by the scroll amount. The default is 24 records.

  ?BROWSE TOP
    Browse the beginning of the JES2PARM member

  ?BROWSE BOTTOM
    Browse the bottom of the JES2PARM member

  ?ENDBROWSE
    Terminate browse session

-----------------------------------------------------------------------

COPY COMMAND:
  ?COPY FROM=DSN(member),TO=DSN(member)

  Copy member from one PDS to another or to the same PDS
  with a different member name.


COPY EXAMPLE:
  ?COPY FROM=SYS1.PROCLIB(JES2),TO=SYS1.PROCLIB(JESX)

-----------------------------------------------------------------------

COMPRESS COMMAND:
  ?COMPRESS DSName


COMPRESS EXAMPLE:
  ?COMPRESS SYS1.PROCLIB

-----------------------------------------------------------------------

TSO COMMANDS:
  Allows you to issue most TSO commands.
  ?ALLOCATE
  ?COPY
  ?DELETE
  ?EDIT
  ?FREE
  ?LIST
  ?LISTALC
  ?LISTBC
  ?LISTCAT
  ?LISTDS
  ?RENAME


TSO COMMAND EXAMPLE:
  ?LISTC

-----------------------------------------------------------------------

SCROLL COMMAND:
  ?SCROLL {data-lines} - Set the amount of data lines to scroll.
                         The default value is 24 data lines.

  ?SCROLL {L|LEFT|R|RIGHT} - Scroll data lines left or right.
                             Use during a BROWSE or EDIT session
                             to scroll the member to the left or
                             to the right.

SCROLL EXAMPLE:
  ?SCROLL 36    - Set the number of scroll lines to 36.
  ?SCROLL LEFT  - Scroll member to the left.
  ?SCROLL RIGHT - Scroll member data to the right.

-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
./ ADD NAME=$$README 0103-21114-21189-1115-00017-00014-00000-BENMAR  26

*/********************************************************************/*
*/********************************************************************/*
*/*                                                                  */*
*/* ECF - EVENT CAPTURE FACILITY                                     */*
*/*                                                                  */*
*/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  */*
*/* EXPRESSED OR IMPLIED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR */*
*/* ANY DAMAGES OR OTHER LIABILITIES.                                */*
*/*                                                                  */*
*/* ANY ONE USING THE SOFTWARE CAN MODIFY THE SOURCE CODE IN ANY     */*
*/* WAY HE OR SHE DEEMS FIT, INCLUDING COPYING IT, COMPILING IT,     */*
*/* AND REDISTRIBUTING IT, WITH OR WITHOUT MODIFICATIONS.            */*
*/*                                                                  */*
*/********************************************************************/*
*/********************************************************************/*

./ ADD NAME=$$RULES  0114-21114-21333-1047-00220-00179-00000-BENMAR  37

            +------------------------------------+
            | Event Rules syntax and description |
            +------------------------------------+

Designing an Event Rule requires that you specify the following
Even Rule elements:'

o Event Type
o Eventr Trigger
o Event Action
o Event Variables

Event Type:
Specifies the type of event that you wish to monitor.

o TRAPCMD  - Trap system and subsystem commands
o TRAPMSG  - Trap WTO and WTOR messages
o STCINIT  - Trap starting started tasks
o STCTERM  - Trap terminating started tasks
o JOBINIT  - Trap starting jobs
o JOBTERM  - Trap terminating jobs
o TSUINIT  - Trap TSO userID logons
o TSUTERM  - Trap TSO userID logons
o MONITOR  - Monitor critical system address spaces
o JOBSVCS  - Trap SVCs issued by batch jobs
o STCSVCS  - Trap SVCs issued by started tasks
o TSUSVCS  - Trap SVCs issued by TSO user IDs

Event Trigger:
Specifies the system event data that will trigger the Event Rule.

Event Action:
Specifies the name of the REXX/CLIST that will be executed when
the event triggers.

For TRAPMSG event type that specifiy a WTOR event trigger, ECF
tracks the WTOR reply ID. This ID can be used to reply to the WTOR.
See Event Rule in PARMLIB member STOPTSO for a working Event Rule
example.

Event Variables:
When the event is triggered, ECF creates Event Rule variables.
These variables are made available to the REXX/CLIST that is given
control to process the event.
The supported event variables are listed below in Table C.


Table A.
Event Types
+======================================================================+
| Event   | Event            | Event                                   |
| Type    | Trigger          | Description                             |
+======================================================================+
| JOBINIT | JOBname          | Triggers when the specified JOBname     |
|         |                  | starts executing.                       |
|         |                  |                                         |
+----------------------------------------------------------------------+
| JOBTERM | JOBname          | Triggers when the specified JOBname     |
|         |                  | normally or abnormally terminates.      |
|         |                  |                                         |
+----------------------------------------------------------------------+
| STCINIT | STCname          | Triggers when the specified STCname     |
|         |                  | starts executing.                       |
|         |                  |                                         |
+----------------------------------------------------------------------+
| STCTERM | STCname          | Triggers when the specified STCname     |
|         |                  | normally or abnormally terminates.      |
|         |                  |                                         |
+----------------------------------------------------------------------+
| TSUINIT | TSUname          | Triggers when the specified TSO user    |
|         |                  | logs on.                                |
|         |                  |                                         |
+----------------------------------------------------------------------+
| TSUTERM | TSUname          | Triggers when the specified TSO user    |
|         |                  | logs off.                               |
|         |                  |                                         |
+----------------------------------------------------------------------+
| TRAPCMD | Command name     | Triggers when the specified command     |
|         |                  | is issued.                              |
|         |                  |                                         |
+----------------------------------------------------------------------+
| TRAPMSG | WTO/R message    | Triggers when the specified WTO/R       |
|         |                  | message is issued.                      |
|         |                  |                                         |
+----------------------------------------------------------------------+
| MONITOR | System address   | Triggers when the specified monitored   |
|         | space name       | system or subsystem address space       |
|         |                  | normally or abnorally terminates.       |
|         |                  |                                         |
+----------------------------------------------------------------------+
| JOBSVCS | Jobname          | Triggers SVC screening for the specified|
|         |                  | batch job name.                         |
|         |                  |                                         |
+----------------------------------------------------------------------+
| STCSVCS | STCname          | Triggers SVC screening for the specified|
|         |                  | started task.                           |
|         |                  |                                         |
+----------------------------------------------------------------------+
| TSUSVCS | User ID          | Triggers SVC screening for the specified|
|         |                  | TSO user ID.                            |
|         |                  |                                         |
+----------------------------------------------------------------------+


Table B.
Event Action
+======================================================================+
| Event   | Event Action                                               |
| Action  | Description                                                |
+======================================================================+
| EXEC    | The event action EXEC statement specifies the name of the  |
|         | REXX/CLIST to be executed when the Event Rule is triggered.|
|         |                                                            |
+----------------------------------------------------------------------+
| CMD     | Issue system and subsystem commands.                       |
|         | Example:  CMD(D IPLINFO)                                   |
|         |                                                            |
+----------------------------------------------------------------------+
| WTO     | Issue WTO messages.                                        |
|         | Example:  WTO(Hello World)                                 |
|         |                                                            |
+----------------------------------------------------------------------+
+----------------------------------------------------------------------+
| REPLY   | (reply data) up to 120 characters.                         |
|         | Example:  REPLY(STOP)                                      |
|         |                                                            |
+----------------------------------------------------------------------+



Table C.
Event Variables
+======================================================================+
| Variable | Variable                                                  |
|          | Description                                               |
+======================================================================+
| &MEMBER  | Event rule PDS member name                                |
|          |                                                           |
+----------------------------------------------------------------------+
| &EVENT   | Event type. The following event types are supported:      |
|          | COMMAND                                                   |
|          | MESSAGE                                                   |
|          | STCINIT, STCTERM                                          |
|          | JOBINIT, JOBTERM                                          |
|          | TSUINIT, TSUTERM                                          |
|          |                                                           |
+----------------------------------------------------------------------+
| &TRIGGER | Event trigger data. Contains the captured system data.    |
| &SYSDATA | for example: Issued WTO/R or issued command.              |
|          |                                                           |
+----------------------------------------------------------------------+
| &EXEC    | The SYSPROC PDS data set member name (CLIST/REXX) to be   |
|          | triggered when the specified event ocurrs.                |
|          |                                                           |
+----------------------------------------------------------------------+
| &RUNAS   | Specifies how the event rule is to be given control.      |
|          | JOB means that a batch job is submitted; STC means that   |
|          | a started task is started; SUB means that a subtask is    |
|          | attached in the ECF address space.                        |
|          |                                                           |
|          | Note: RUNAS=SUB is only available in MVS 3.8j.            |
|          |                                                           |
+----------------------------------------------------------------------+
| &SYSID   | System identifier. 4-character SMF system ID.             |
|          |                                                           |
+----------------------------------------------------------------------+
| &LPAR    | LPAR name. 8-characters.                                  |
|          |                                                           |
|          | Note: Not available in MVS 3.8J.                          |
|          |                                                           |
+----------------------------------------------------------------------+
| &DATE    | System date when event triggered.                         |
|          |                                                           |
+----------------------------------------------------------------------+
| &TIME    | System time when event triggered.                         |
|          |                                                           |
+----------------------------------------------------------------------+
| &JOBNAME | The address space name where the event triggered.         |
|          |                                                           |
+----------------------------------------------------------------------+
| &JOBTYPE | The address space type where the event triggered. JOB;    |
|          | STC; TSU.                                                 |
|          |                                                           |
+----------------------------------------------------------------------+
| &ABEND   | The system ABEND code (Snnn) or user ABEND code (Unnnn)   |
|          | associated with a termination event.                      |
|          |                                                           |
+----------------------------------------------------------------------+
| &JCLERR  | The JOB NOT RUN - JCL ERROR associated with a termination |
|          | event.                                                    |
|          |                                                           |
+----------------------------------------------------------------------+
| &COMMAND | The system or subsystem command that triggered the event. |
|          |                                                           |
+----------------------------------------------------------------------+
| &CONSOLE | The console ID where the command was issued.              |
|          |                                                           |
+----------------------------------------------------------------------+
| &MESSAGE | The WTO or WTOR message that triggered the event.         |
|          |                                                           |
+----------------------------------------------------------------------+
| &REPLYID | The reply identifier number associated with the issued    |
|          | WTOR message.                                             |
|          |                                                           |
+----------------------------------------------------------------------+

The Event Capture Facility PARMLIB data set contains the following
Event Rule examples:

INIJOBS  - onitoring Job Initialization Event Rules
ENDJOBS  - Monitoring Job Termination Event Rules
MONRULE  - Monitoring system and subsystems address space rules
SYSEVNT  - System resources shortage event rules
STOPTSO  - Monitoring TSO Termination Event Rule
WTOBUFF  - WTO Buffer Shortage Event Rule
SVCDUMP  - Automatic reply to DUMP command Event Rule
VLFRULE  - Monitoring VLF availability event rule

+----------------------------------------------------------------------+
./ ADD NAME=$$SVCS   0104-21278-21333-0932-00079-00060-00000-BENMAR  07
/*-------------------------------------------------------------------*/
/*                                                                   */
/* SVC screening Event Rule examples                                 */
/*                                                                   */
/*  ECF allows you to monitor SVCs issued by TSO users, started      */
/*  tasks and batch jobs. Screening is activated when the system     */
/*  attaches the jobstep task of the program name specified by the   */
/*  PGM= EXEC statement. SVCs issued by programs running as subtasks */
/*  attached by the jobstep task are also screened.                  */
/*                                                                   */
/*  SVC screening output data is logged according to the setting     */
/*  of initialization option TRAPSVC= specified in ECF PARMLIB       */
/*  initialization options member ECFMSTR. The following TRAPSVC=    */
/*  options are supported:                                           */
/*                                                                   */
/*  TRAPSVC=NO                                                       */
/*   TRAPSVC=NO is the default option. This option does not activate */
/*   the SVC screening component.                                    */
/*                                                                   */
/*  TRAPSVC=DDname                                                   */
/*   Captures SVC screening log data in the sequential dataset or    */
/*   PDS member name specified in the job that is being SVC screened.*/
/*   Log records are written when the SVC screened job, STC, TSU,    */
/*   normally or abnormally terminates.                              */
/*                                                                   */
/*   Example:                                                        */
/*   //STEP1  PGM=MYPGM                                              */
/*   //SYSIN  DD DSN=...                                             */
/*   //OUTPUT DD DSN=...                                             */
/*   //SVCLOG DD SYSOUT=*                                            */
/*   //*                                                             */
/*   //STEP2  PGM=FILEPGM                                            */
/*   //INFILE DD DSN=...                                             */
/*   //OTFILE DD DSN=...                                             */
/*   //SVCLOG DD DSN=MY.SVC.LOG.REPORT,DISP=OLD                      */
/*   //                                                              */
/*                                                                   */
/*  TRAPSVC=SMF-record-number                                        */
/*   Captures SVC screening log data using the user-specified SMF    */
/*   record number. The SMF record is written when the SVC screened  */
/*   JOB, STC, TSU, normally or abnormally terminates.               */
/*                                                                   */
/*   For each screened SVC a record is created that shows the        */
/*   following information:                                          */
/*                                                                   */
/*  Example:                                                         */
/*  ---------------------------------------------------------------- */
/*                                                                   */
/*  SVC ..................... 120  TYPE=1 APF=NO  NP=N LOCKS=LOCAL   */
/*  MACRO ................... GETMAIN/FREEMAIN                       */
/*   JOBname ................ BENMARX                                */
/*   Step name .............. RUN                                    */
/*   Program name ........... IGWCCA00                               */
/*   Entry address .......... 04C7A000                               */
/*    Issued at address ..... 04CA09F8                               */
/*    Unit of work .......... SVRB                                   */
/*    Authorization ......... AC(0)                                  */
/*    System state .......... Supervisor                             */
/*    Time and date ......... 07:25:59:94 11/29/2021                 */
/*    Issued on CPU ......... 0000                                   */
/*    Completed on CPU ...... 0000                                   */
/*    Duration .............. 0.000001                               */
/*                                                                   */
/*    SVC entry registers.... AR0:  00BFB5E4  R0:  00000000 00000690 */
/*                            AR1:  00000000  R1:  00000000 00000000 */
/*                            AR14: 00000000  R14: 00000000 00FE3E00 */
/*                            AR15: 00000401  R15: 00000000 0000E672 */
/*                                                                   */
/*    SVC return registers... AR0:  00BFB5E4  R0:  00000000 00000690 */
/*                            AR1:  00000000  R1:  00000000 7F478970 */
/*                            AR14: 00000000  R14: 00000000 00FE3E00 */
/*                            AR15: 00000401  R15: 00000000 00000000 */
/*                                                                   */
/*  ---------------------------------------------------------------- */
/*                                                                   */
/*  Note: Refer to PARMLIB(TRAPSVC) for SVC screening rule examples. */
/*        examples.                                                  */
/*                                                                   */
/*-------------------------------------------------------------------*/
./ ADD NAME=ECF      0110-21114-21335-0756-00149-00137-00120-BENMAR  33
//*
//*-----------------------------------------------------------------*/
//*                                                                 */
//*   Event Capture Facility JCL procedure                          */
//*     This JCL procedure is used to start the Event Capture       */
//*     Facility subsystem.                                         */
//*                                                                 */
//*     Copy this procedure to a library specified by the PROC00    */
//*     data definition statement of the JES2/JES3 JCL procedure.   */
//*                                                                 */
//*     Change hlq SYS1 to your installation standards hlq.         */
//*                                                                 */
//*     PARM= parameters:                                           */
//*                                                                 */
//*           SUB= Specifies 1-4 character subsystem name that      */
//*                will be implemented for the ECF started task.    */
//*                Once the subsystem name is associated with a     */
//*                specific started task name, it cannot be reused  */
//*                with a different STC started task name. This     */
//*                restriction allows you to run a subsystem pro-   */
//*                duction version and one or more test versions.   */
//*                This is useful for testing maintenance updates   */
//*                or testing a new release without desrupting the  */
//*                production version. if SUB= is not specified,    */
//*                the default subsystem name used is ECF.          */
//*                                                                 */
//*           CMD= Specifies the command character prefix used      */
//*                to issue subsystem display and modify commands.  &/
//*                The command character prefix specified must be   */
//*                unique across all ECF started task instances.    */
//*                The default command character prefix is CMD=?.   */
//*                                                                 */
//*                ECF also registers the command prefix with the   */
//*                MVS Command Prefix Facility (CPF), for the life  */
//*                of the IPL (CPF FAILDISP=RETAIN). This prevents  */
//*                command prefix collision with other subsystems.  */
//*                                                                 */
//*           SSM= Specifies the subsystem interface load module    */
//*                name that is loaded at initialization time. The  */
//*                The load module, by default, is loaded from the  */
//*                LPA list concatination.                          */
//*                                                                 */
//*           CSA= When CSA=YES is specified, ECF loads the subsys- */
//*                tem interface load module specified on the SSM=  */
//*                parameter into CSA subpool 241 virtual storage.  */
//*                CSA=YES eliminates the need to re-IPL with the   */
//*                CLPA or MLPA option when new code changes need   */
//*                to be implemeted. When CSA=NO is specified or    */
//*                defaulted to, the load module specified by the   */
//*                SSM= parameter is loaded from the LPA list       */
//*                concatenation.                                   */
//*                                                                 */
//*           INI= Specifies the hlq.PARMLIB master initialization  */
//*                member name that contains all initialization     */
//*                parameters. If INI= is not specified, the default*/
//*                member name used is ECFMSTR.                     */
//*                                                                 */
//*           OPT= Specifies if the initialization options located  */
//*                in master initialization member ECFMSTR are to   */
//*                be displayed on the ECF started task joblog and  */
//*                MVS consoles via WTO messages.                   */
//*                The default is OPT=NOSHOW. Change to OPT=SHOW    */
//*                to have these options displayed.                 */
//*                                                                 */
//*           RCV= Specifies if recovery routines are created or    */
//*                bypassed. This option should only be used when   */
//*                debugging Event Capture Facility subsystem       */
//*                issues. The default is RCV=YES, which creates    */
//*                the recovery environment. To expose internal     */
//*                recoverable errors, specify RCV=NO option.       */
//*                Warning: use option RCV=NO testing on test       */
//*                systems only.                                    */
//*                                                                 */
//*     LIBRARY definitions:                                        */
//*             Refer to INSTLIB($$ALLOC) for allocation attributes.*/
//*                                                                 */
//*           STEPLIB:                                              */
//*                This library contains the Event Capture Facility */
//*                jobstep task initialization/termination ECFSUB   */
//*                load module.                                     */
//*                                                                 */
//*                                                                 */
//*           PARMLIB:                                              */
//*                This library contains initialization parameters  */
//*                and event rule definitions to be implemented at  */
//*                initialization time.                             */
//*                Refer to hlq.INSTLIB($$ALLOC) for allocation     */
//*                attributes.                                      */
//*                                                                 */
//*           SYSPROC:                                              */
//*                This library contains REXX/CLIST rule members    */
//*                that are called to process triggered events.     */
//*                Allocate SYSPROC with the same attributes of     */
//*                SYS1.CMDPROC.                                    */
//*                                                                 */
//*           DBUGLOG:                                              */
//*                This library is optional. When specified, it     */
//*                captures WTO messages issued by ECF during a     */
//*                debug session. When DEBUG=ON is specified in     */
//*                master initialization PARMLIB member ECFMSTR     */
//*                and the DBUGLOG DDname is also specified, debug  */
//*                WTO messages in the range of ECF100I to ECF199I  */
//*                are captured to the DBUGLOG log dataset.         */
//*                When DEBUG=ON is specified without specifying    */
//*                the DBUGLOG DDname, debug WTO messages are       */
//*                displayed on MVS consoles that have ROUTCDE=11   */
//*                routing code specified as well as the Joblog     */
//*                of the ECF started task address space.           */
//*                                                                 */
//*           TRCELOG:                                              */
//*                This library is optional. When specified, it     */
//*                captures internal trace data produced by ECF     */
//*                components. When TRACE=ON is specified in master */
//*                initialization member ECFMSTR and the TRCELOG    */
//*                DDname is also specified, internal execution     */
//*                trace data is captured in the TRCELOG log datset.*/
//*                                                                 */
//*           SYSIN:                                                */
//*                This dataset contains the IEBCOPY compress       */
//*                control statements required to compress the      */
//*                ECFJOBS, SYSTSIN, and SYSTSPRT datasets. These   */
//*                compress control statement are located in the    */
//*                PARMLIB dataset in member ECFCMP.                */
//*                                                                 */
//*           SYSPRINT:                                             */
//*                This dataset contains output data produced by    */
//*                ECF components.                                  */
//*                                                                 */
//*-----------------------------------------------------------------*/
//*
//COMPRESS EXEC PGM=IEBCOPY
//SYSPRINT DD  SYSOUT=A
//SYSIN    DD  DISP=SHR,DSN=SYS1.ECF.PARMLIB(ECFCMP)
//ECFJOBS  DD  DISP=SHR,DSN=SYS1.ECF.ECFJOBS
//SYSTSIN  DD  DISP=SHR,DSN=SYS1.ECF.SYSTSIN
//SYSTSPRT DD  DISP=SHR,DSN=SYS1.ECF.SYSTSPRT
//*
//ECF     EXEC PGM=ECFSUB,
//             PARM='SUB=zECF,CMD=?,INI=ECFMSTR,SSM=ECFCSM,CSA=YES',
//             TIME=1440,
//             REGION=8192K,
//             DPRTY=(14,15)
//*
//STEPLIB  DD  DISP=SHR,DSN=SYS1.ECF.LOAD
//PARMLIB  DD  DISP=SHR,DSN=SYS1.ECF.PARMLIB
//SYSPROC  DD  DISP=SHR,DSN=SYS1.ECF.CMDPROC
//SYSIN    DD  DISP=SHR,DSN=SYS1.ECF.SYSIN
//SYSPRINT DD  DISP=SHR,DSN=SYS1.ECF.SYSPRINT
//*
./ ADD NAME=ECFMSAS  0110-21086-21141-0820-00030-00081-00026-BENMAR  13
//ECFMSAS  JOB ...
//*
//*-----------------------------------------------------------------*/
//*                                                                 */
//*   Relink IEEMB810 MVS RESET/E command processor                 */
//*                                                                 */
//*    This job relinks the reset command processor to include      */
//*    the ECF ECFMST front-end routine. Its purpose is to allow    */
//*    you to dynamically add the ECF and ECFR as MVS secondary     */
//*    subsysytems and start ECF as a jobstep task of the Master    */
//*    address space during started task recovery sessions.         */
//*                                                                 */
//*   Notes:                                                        */
//*    1. Before you run this job, make a back up copy of IEEMB810  */
//*       and call it ECFMB810.                                     */
//*                                                                 */
//*    2. Depending on the version of MVS you're running, IEEMB810  */
//*       resides in either SYS1.LPALIB or SYS1.LINKLIB. Change the */
//*       binder INCLUDE statement as required.                     */
//*                                                                 */
//*-----------------------------------------------------------------*/
//*
//ASM810 EXEC ZASM,SRC=ECFMST,OBJ=ECFMST
//LNK810 EXEC ZLINKLIB,MOD=ECFMST,LMOD=ECFMST
 INCLUDE SYSLIB(ECFMST)
 INCLUDE LINKLIB(ECFMB810)
 ENTRY ECFMST
 NAME IEEMB810(R)
/*
//
./ ADD NAME=ECFR     0104-21114-21335-0756-00031-00031-00004-BENMAR  48
//*
//*-----------------------------------------------------------------*/
//*                                                                 */
//*   ECFR recovery TSO subsystem JCL procedure                     */
//*                                                                 */
//*     This JCL procedure is invoked by ECF to execute issued      */
//*     TSO commands for the purpose of recovering system-related   */
//*     started tasks such as, JES, NET, and TCAS/TSO.              */
//*                                                                 */
//*     The JCL procedure name cannot exceed four characters,       */
//*     since it executes as an MVS subsystem.                      */
//*                                                                 */
//*     The ECFR JCL procedure must reside in SYS1.PROCLIB.         */
//*     Copying it in a data set concatenated to SYS1.PROCLIB       */
//*     will cause JCL errors.                                      */
//*                                                                 */
//*     If you plan to use a different ECFR JCL procedure name,     */
//*     you must change initialization PARMLIB option TSOSUB=ECFR   */
//*     to TSOSUB=your-procedure-name.                              */
//*                                                                 */
//*     Note: SYSPROC, SYSTSIN, SYSTSPRT must be cataloged in the   */
//*           Master Catalog.                                       */
//*                                                                 */
//*-----------------------------------------------------------------*/
//*
//ECFR     PROC EXEC=
//ECFR     EXEC PGM=IKJEFT01,DYNAMNBR=32,REGION=4096K,TIME=1440
//SYSPROC   DD DSN=SYS1.ECF.CMDPROC,DISP=SHR
//SYSTSIN   DD DSN=SYS1.ECF.SYSTSIN(&EXEC),DISP=SHR
//SYSTSPRT  DD DSN=SYS1.ECF.SYSTSPRT(&EXEC),DISP=SHR
//*
./ ADD NAME=ECFSSNT  0103-21086-21133-0624-00027-00028-00004-BENMAR  27
//ECFSSNT  JOB ...
//*
//*-----------------------------------------------------------------*/
//*                                                                 */
//* MVS 3.8j ONLY                                                   */
//*   Define subsystem name ECF and ECFR to MVS:                    */
//*                                                                 */
//*     This job adds subsysytems ECF and ECFR to the SYS1.LINKLIB  */
//*     subsysytem name table IEFJSSNT.                             */
//*                                                                 */
//*                                                                 */
//* NOTE: Run this job for MVS 3.8j systems only                    */
//*                                                                 */
//*-----------------------------------------------------------------*/
//*
//SPZAP   EXEC PGM=AMASPZAP
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DISP=SHR,DSN=SYS1.LINKLIB
//SYSIN    DD  *
 NAME  IEFJSSNT IEFJSSNT
 VER 00 4040,4040
 VER 50 4040,4040
 REP 00 C5C3,C640
 REP 00 C5C3,C6D9
 DUMPT IEFJSSNT ALL
/*
//
./ ADD NAME=ECFTMP   0103-21114-21335-0757-00047-00049-00004-BENMAR  08
//*
//*-----------------------------------------------------------------*/
//*                                                                 */
//*   Batch TMPSTC JCL procedure                                    */
//*     This JCL procedure is invoked by the Event Capture          */
//*     Facility subsystem to execute triggered event rules.        */
//*                                                                 */
//*     Copy this procedure to a library specified by the PROC00    */
//*     data definition statement of the JES2/JES3 JCL procedure.   */
//*                                                                 */
//*     The default TMP JCL procedure name is ECFTMP.               */
//*     If you plan to use a different TMP JCL procedure name,      */
//*     you must change initialization PARMLIB option TMPSTC=ECFTMP */
//*     to TMPSTC=your-TMP-chosen-JCL-procedure-name                */
//*                                                                 */
//*     Change DSName qualifiers to comply with your installation   */
//*     standards.                                                  */
//*                                                                 */
//*   JCL procedure definitions:                                    */
//*                                                                 */
//*     &EXEC=   - DO NOT change the &EXEC symbolic name since      */
//*                it's referenced internally by the Event Capture  */
//*                Facility when issuing MGCR MVS START commands.   */
//*                                                                 */
//*     SYSPROC  - This dataset contains CLIST/REXX rule members    */
//*                that are called to process triggered events.     */
//*                                                                 */
//*     SYSTSIN  - This dataset contains dynamically created rule   */
//*                variables by the Event Capture Facility that are */
//*                supplied as input to the triggered CLIST/REXX    */
//*                procedure.                                       */
//*                                                                 */
//*                Note: The dataset name specified must also be    */
//*                      specified in PARMLIB member ECFMSTR by     */
//*                      initialization parameter SYSTSIN=DSName.   */
//*                                                                 */
//*     SYSTSPRT - This library contains the output generated by    */
//*                the executed CLIST/REXX procedure.               */
//*                                                                 */
//*-----------------------------------------------------------------*/
//*
//ECFTMP   PROC EXEC=
//ECFTMP   EXEC PGM=IKJEFT01,DYNAMNBR=32,REGION=4096K
//SYSPROC   DD DSN=SYS1.CMDPROC,DISP=SHR
//SYSTSIN   DD DSN=SYS1.SYSTSIN(&EXEC),DISP=SHR
//SYSTSPRT  DD DSN=SYS1.SYSTSPRT(&EXEC),DISP=SHR
//*
./ ADD NAME=ECFWAIT  0104-21086-21335-0757-00022-00024-00002-BENMAR  33
//ECFWAIT  JOB ...
//*
//*-----------------------------------------------------------------*/
//*                                                                 */
//*   Event Capture Facility wait interval service processor.       */
//*     This JCL procedure can be inserted in a jobstam to wait     */
//*     for a specified time interval before the next step starts.  */
//*                                                                 */
//*     Change hlq SYS1 to your installation standards hlq.         */
//*                                                                 */
//*     WAIT= hhmmssth                                              */
//*           Specifies the wait interval in hours(hh), minutes(mm),*/
//*           seconds(ss), tenths and hundredhs of seconds(th).     */
//*                                                                 */
//*           For example, to wait for 15 seconds, specifiy:        */
//*           PARM='WAIT=00001500'                                  */
//*                                                                 */
//*-----------------------------------------------------------------*/
//*
//ECFWAIT EXEC PGM=ECFWAIT,PARM='WAIT=00001500'     wait 15 seconds
//STEPLIB  DD  DSN=SYS1.ECF.LINKLIB,DISP=SHR
//*
./ ADD NAME=ECFX     0102-21114-21335-0758-00011-00011-00005-BENMAR  00
//ECFX    EXEC PGM=ECFSUB,
//             PARM='SUB=ECFX,CMD=@,INI=ECFMSTR,SSM=ECFCSM,CSA=YES',
//             TIME=1440,REGION=8192K,DPRTY=(14,15)
//*
//STEPLIB  DD  DISP=SHR,DSN=SYS1.ZECF.LINKLIB
//PARMLIB  DD  DISP=SHR,DSN=SYS1.ECF.PARMLIB
//SYSPROC  DD  DISP=SHR,DSN=SYS1.ECF.CMDPROC
//*
//SYSIN    DD  DISP=SHR,DSN=SYS1.ECF.SYSIN
//SYSPRINT DD  DISP=SHR,DSN=SYS1.ECF.SYSPRINT
//*
./ ADD NAME=ECF2     0106-21114-21335-0758-00151-00148-00025-BENMAR  26
//*
//*-----------------------------------------------------------------*/
//*                                                                 */
//*   Event Capture Facility JCL procedure                          */
//*     This JCL procedure is used to start the Event Capture       */
//*     Facility subsystem.                                         */
//*                                                                 */
//*     Copy this procedure to a library specified by the PROC00    */
//*     data definition statement of the JES2/JES3 JCL procedure.   */
//*                                                                 */
//*     PARM= parameters:                                           */
//*                                                                 */
//*           SUB= Specifies 1-4 character subsystem name that      */
//*                will be implemented for the ECF started task.    */
//*                Once the subsystem name is associated with a     */
//*                specific started task name, it cannot be reused  */
//*                with a different STC started task name. This     */
//*                restriction allows you to run a subsystem pro-   */
//*                duction version and one or more test versions.   */
//*                This is useful for testing maintenance updates   */
//*                or testing a new release without desrupting the  */
//*                production version. if SUB= is not specified,    */
//*                the default subsystem name used is ECF.          */
//*                                                                 */
//*           CMD= Specifies the command character prefix used      */
//*                to issue subsystem display and modify commands.  */
//*                The command character prefix specified must be   */
//*                unique across all ECF started task instances.    */
//*                The default command character prefix is CMD=?.   */
//*                                                                 */
//*                ECF also registers the command prefix with the   */
//*                MVS Command Prefix Facility (CPF), for the life  */
//*                of the IPL (CPF FAILDISP=RETAIN). This prevents  */
//*                command prefix collision with other subsystems.  */
//*                                                                 */
//*           SSM= Specifies the subsystem interface load module    */
//*                name that is loaded at initialization time. The  */
//*                The load module, by default, is loaded from the  */
//*                system LPA list concatination.                   */
//*                                                                 */
//*           CSA= When CSA=YES is specified, ECF loads the subsys- */
//*                tem interface load module specified on the SSM=  */
//*                parameter into CSA subpool 241 virtual storage.  */
//*                CSA=YES eliminates the need to re-IPL with the   */
//*                CLPA or MLPA option when new code changes need   */
//*                to be implemeted. When CSA=NO is specified or    */
//*                defaulted to, the load module specified by the   */
//*                SSM= parameter is loaded from the system LPA     */
//*                list concatenation.                              */
//*                                                                 */
//*           INI= Specifies the hlq.PARMLIB master initialization  */
//*                member name that contains all initialization     */
//*                parameters. If INI= is not specified, the default*/
//*                member name used is ECFMSTR.                     */
//*                                                                 */
//*           OPT= Specifies if the initialization options located  */
//*                in master initialization member ECFMSTR are to   */
//*                be displayed on the ECF started task joblog and  */
//*                MVS consoles via WTO messages.                   */
//*                The default is OPT=NOSHOW. Change to OPT=SHOW    */
//*                to have these options displayed.                 */
//*                                                                 */
//*           RCV= Specifies if recovery routines are created or    */
//*                bypassed. This option should only be used when   */
//*                debugging Event Capture Facility subsystem       */
//*                issues. The default is RCV=YES, which creates    */
//*                the recovery environment. To expose internal     */
//*                recoverable errors, specify RCV=NO option.       */
//*                Warning: use option RCV=NO testing on test       */
//*                systems only.                                    */
//*                                                                 */
//*     LIBRARY definitions:                                        */
//*             Refer to INSTLIB($$ALLOC) for allocation attributes.*/
//*                                                                 */
//*           STEPLIB:                                              */
//*                This library contains the Event Capture Facility */
//*                jobstep task initialization/termination ECFSUB   */
//*                load module.                                     */
//*                                                                 */
//*           PARMLIB:                                              */
//*                This library contains initialization parameters  */
//*                and event rule definitions to be implemented at  */
//*                initialization time.                             */
//*                Refer to hlq.INSTLIB($$ALLOC) for allocation     */
//*                attributes.                                      */
//*                                                                 */
//*           SYSPROC:                                              */
//*                This library contains REXX/CLIST rule members    */
//*                that are called to process triggered events.     */
//*                Allocate SYSPROC with the same attributes of     */
//*                SYS1.CMDPROC.                                    */
//*                                                                 */
//*           DBUGLOG:                                              */
//*                This library is optional. When specified, it     */
//*                captures WTO messages issued by ECF during a     */
//*                debug session. When DEBUG=ON is specified in     */
//*                master initialization PARMLIB member ECFMSTR     */
//*                and the DBUGLOG DDname is also specified, debug  */
//*                WTO messages in the range of ECF100I to ECF199I  */
//*                are captured to the DBUGLOG log dataset.         */
//*                When DEBUG=ON is specified without specifying    */
//*                the DBUGLOG DDname, debug WTO messages are       */
//*                displayed on MVS consoles that have ROUTCDE=11   */
//*                routing code specified as well as the Joblog     */
//*                of the ECF started task address space.           */
//*                                                                 */
//*           TRCELOG:                                              */
//*                This library is optional. When specified, it     */
//*                captures internal trace data produced by ECF     */
//*                components. When TRACE=ON is specified in master */
//*                initialization member ECFMSTR and the TRCELOG    */
//*                DDname is also specified, internal execution     */
//*                trace data is captured in the TRCELOG log datset.*/
//*                                                                 */
//*           SYSIN:                                                */
//*                This dataset contains the IEBCOPY compress       */
//*                control statements required to compress the      */
//*                ECFJOBS, SYSTSIN, and SYSTSPRT datasets. These   */
//*                compress control statement are located in the    */
//*                PARMLIB dataset in member ECFCMP.                */
//*                                                                 */
//*           SYSPRINT:                                             */
//*                This dataset contains output data produced by    */
//*                ECF components.                                  */
//*                                                                 */
//*           SYSABEND:                                             */
//*                This dataset contains abnormal termination dump  */
//*                data produced by the ABEND Supervisor call.      */
//*                                                                 */
//*-----------------------------------------------------------------*/
//*
//COMPRESS EXEC PGM=IEBCOPY
//SYSPRINT DD  SYSOUT=A
//SYSIN    DD  DISP=SHR,DSN=SYS1.ECF.PARMLIB(ECFCMP)
//ECFJOBS  DD  DISP=SHR,DSN=SYS1.ECF.ECFJOBS
//SYSTSIN  DD  DISP=SHR,DSN=SYS1.ECF.SYSTSIN
//SYSTSPRT DD  DISP=SHR,DSN=SYS1.ECF.SYSTSPRT
//*
//ECF2    EXEC PGM=ECFSUB,
//             PARM='SUB=ECF2,CMD=%,INI=ECFMSTR,SSM=ECFCSM,CSA=YES',
//             TIME=1440,
//             REGION=8192K,
//             DPRTY=(14,15)
//*
//STEPLIB  DD  DISP=SHR,DSN=SYS1.ECF.LINKLIB
//PARMLIB  DD  DISP=SHR,DSN=SYS1.ECF.PARMLIB
//SYSPROC  DD  DISP=SHR,DSN=SYS1.ECF.CMDPROC
//*
//SYSPRINT DD  SYSOUT=A
//SYSABEND DD  SYSOUT=A
//*
./ ADD NAME=ZASM     0102-21114-21335-0754-00034-00033-00027-BENMAR  21
//*
//* Date: 05/22/2019
//* Changed: 10/19/2020
//* Author: Ben Marino
//* Function: Assemble ECF subsystem modules
//*
//* Note: Copy this JCL procedure to a PROCLIB known to JES2.
//*
//ZASM    PROC SRC='DUMMY',
//         MAC1='SYS1.ECF.MAC',
//         MAC2='SYS1.MACLIB',
//         MAC3='SYS1.MODGEN'
//*
//ASM     EXEC PGM=ASMA90,
//             PARM=(NOTERM,OBJECT,NODECK,RENT,OBJ)
//SYSLIB   DD  DSN=&MAC1,DISP=SHR
//         DD  DSN=&MAC2,DISP=SHR
//         DD  DSN=&MAC3,DISP=SHR
//*
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(16384,(120,120),,,ROUND),
//             UNIT=SYSALLDA,BUFNO=1
//*
//SYSUT2   DD  DSN=&&SYSUT1,SPACE=(16384,(120,120),,,ROUND),
//             UNIT=SYSALLDA,BUFNO=1
//*
//SYSUT3   DD  DSN=&&SYSUT1,SPACE=(16384,(120,120),,,ROUND),
//             UNIT=SYSALLDA,BUFNO=1
//*
//SYSPRINT DD  SYSOUT=*
//SYSPUNCH DD  SYSOUT=B
//*
//SYSIN    DD  DISP=SHR,DSN=SYS1.ECF.ASM(&SRC)
//SYSLIN   DD  DISP=SHR,DSN=SYS1.ECF.OBJ(&OBJ)
//*
./ ADD NAME=ZLINK    0103-21114-21335-0759-00019-00019-00003-BENMAR  05
//*
//* Date: 05/22/2019
//* Author: Ben Marino
//* Function: Link ECF subsystem JCL procedure
//*
//* Note: Copy this JCL procedure to a PROCLIB known to JES2.
//*
//LINK     PROC MOD='DUMMY',
//         LMOD='DUMMY',
//         DSN='SYS1.ECF.LINKLIB'
//*
//IEWL     EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL,RENT',
//             REGION=256K
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.ECF.OBJ(&MOD),DISP=SHR
//SYSLIN   DD  DSN=SYS1.ECF.OBJ(&MOD),DISP=SHR
//         DD  DDNAME=SYSIN
//SYSLMOD  DD  DSN=&DSN(&LMOD),DISP=SHR
//*
./ ADD NAME=ZLINKLIB 0104-21114-21335-0755-00018-00018-00004-BENMAR  02
//*
//* Date: 07/08/2019
//* Author: Ben Marino
//* Function: Link ECF subsystem LINKLIB modules
//*
//* NOTE: Copy this JCL procedure to a PROCLIB known to JES2.
//*
//LINKLIB PROC MOD=,LMOD=
//IEWL    EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL,RENT',
//             REGION=512K
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.ECF.OBJ(&MOD),DISP=SHR
//SYSLIN   DD  DSN=SYS1.ECF.OBJ(&MOD),DISP=SHR
//         DD  DDNAME=SYSIN
//SYSUT1   DD  DSN=&&SYSUT1,UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),
//             SPACE=(1024,(50,20))
//SYSLMOD  DD  DSN=SYS1.ECF.LINKLIB(&LMOD),DISP=SHR
//*
./ ADD NAME=ZLINKLPA 0102-21114-21335-0755-00018-00016-00008-BENMAR  26
//*
//* Date: 07/08/2019
//* Author: Ben Marino
//* Function: Link ECF subsystem LPALIB modules
//*
//* Note: Copy this JCL procedure to a PROCLIB known to JES2.
//*
//LINKLIB PROC MOD=,LMOD=
//IEWL    EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL,RENT',
//             REGION=512K
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.ECF.OBJ(&MOD),DISP=SHR
//SYSLIN   DD  DSN=SYS1.ECF.OBJ(&MOD),DISP=SHR
//         DD  DDNAME=SYSIN
//SYSUT1   DD  DSN=&&SYSUT1,UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),
//             SPACE=(1024,(50,20))
//SYSLMOD  DD  DSN=SYS1.ECF.LPALIB(&LMOD),DISP=SHR
//*
./ ADD NAME=ZZECFSSM 0111-21114-21335-0756-00181-00150-00181-BENMAR  00
//ZZECFSSM JOB ...
//*
//**  Assemble ECF local service routines
//*
//ECFSUB  EXEC ZASM,SRC=ECFSUB,OBJ=ECFSUB
//ECFPST  EXEC ZASM,SRC=ECFPST,OBJ=ECFPST
//ECFSRV  EXEC ZASM,SRC=ECFSRV,OBJ=ECFSRV
//ECFVRX  EXEC ZASM,SRC=ECFVRX,OBJ=ECFVRX
//ECFTKN  EXEC ZASM,SRC=ECFTKN,OBJ=ECFTKN
//ECFREB  EXEC ZASM,SRC=ECFREB,OBJ=ECFREB
//ECFDYN  EXEC ZASM,SRC=ECFDYN,OBJ=ECFDYN
//ECFIIO  EXEC ZASM,SRC=ECFIIO,OBJ=ECFIIO
//ECFOIO  EXEC ZASM,SRC=ECFOIO,OBJ=ECFOIO
//ECFIOT  EXEC ZASM,SRC=ECFIOT,OBJ=ECFIOT
//ECFPAR  EXEC ZASM,SRC=ECFPAR,OBJ=ECFPAR
//ECFCSA  EXEC ZASM,SRC=ECFCSA,OBJ=ECFCSA
//ECFSSI  EXEC ZASM,SRC=ECFSSI,OBJ=ECFSSI
//ECFCOM  EXEC ZASM,SRC=ECFCOM,OBJ=ECFCOM
//ECFSTC  EXEC ZASM,SRC=ECFSTC,OBJ=ECFSTC
//ECFENV  EXEC ZASM,SRC=ECFENV,OBJ=ECFENV
//ECFWSR  EXEC ZASM,SRC=ECFWSR,OBJ=ECFWSR
//ECFTRC  EXEC ZASM,SRC=ECFTRC,OBJ=ECFTRC
//ECFTMP  EXEC ZASM,SRC=ECFTMP,OBJ=ECFTMP
//*
//ECFVTA  EXEC ZASM,SRC=ECFVTA,OBJ=ECFVTA
//ECFSVT  EXEC ZASM,SRC=ECFSVT,OBJ=ECFSVT
//ECFSVX  EXEC ZASM,SRC=ECFSVX,OBJ=ECFSVX
//ECFSVN  EXEC ZASM,SRC=ECFSVN,OBJ=ECFSVN
//ECFLCK  EXEC ZASM,SRC=ECFLCK,OBJ=ECFLCK
//ECFRMT  EXEC ZASM,SRC=ECFRMT,OBJ=ECFRMT
//ECFVAL  EXEC ZASM,SRC=ECFVAL,OBJ=ECFVAL
//ECFDIE  EXEC ZASM,SRC=ECFDIE,OBJ=ECFDIE
//ECFIDI  EXEC ZASM,SRC=ECFIDI,OBJ=ECFIDI
//ECFS34  EXEC ZASM,SRC=ECFS34,OBJ=ECFS34
//ECFS35  EXEC ZASM,SRC=ECFS35,OBJ=ECFS35
//ECFEOT  EXEC ZASM,SRC=ECFEOT,OBJ=ECFEOT
//ECFEOM  EXEC ZASM,SRC=ECFEOM,OBJ=ECFEOM
//ECFCPL  EXEC ZASM,SRC=ECFCPL,OBJ=ECFCPL
//ECFIRB  EXEC ZASM,SRC=ECFIRB,OBJ=ECFIRB
//ECFSVC  EXEC ZASM,SRC=ECFSVC,OBJ=ECFSVC
//ECFXPC  EXEC ZASM,SRC=ECFXPC,OBJ=ECFXPC
//ECFSVS  EXEC ZASM,SRC=ECFSVS,OBJ=ECFSVS
//ECFTCB  EXEC ZASM,SRC=ECFTCB,OBJ=ECFTCB
//ECFREQ  EXEC ZASM,SRC=ECFREQ,OBJ=ECFREQ
//ECFIEW  EXEC ZASM,SRC=ECFIEW,OBJ=ECFIEW
//ECFSAF  EXEC ZASM,SRC=ECFSAF,OBJ=ECFSAF
//ECFVAR  EXEC ZASM,SRC=ECFVAR,OBJ=ECFVAR
//ECFLOG  EXEC ZASM,SRC=ECFLOG,OBJ=ECFLOG
//ECFFRR  EXEC ZASM,SRC=ECFFRR,OBJ=ECFFRR
//ECFRTM  EXEC ZASM,SRC=ECFRTM,OBJ=ECFRTM
//ECFWTO  EXEC ZASM,SRC=ECFWTO,OBJ=ECFWTO
//ECFWTX  EXEC ZASM,SRC=ECFWTX,OBJ=ECFWTX
//*
//*
//**  Link ECFSUB into SYS1.ECF.LINKLIB
//*
//LNKSUB EXEC ZLINKLIB,MOD=ECFSUB,LMOD=ECFSUB
 INCLUDE SYSLIB(ECFSUB)
 INCLUDE SYSLIB(ECFENV)
 INCLUDE SYSLIB(ECFREB)
 INCLUDE SYSLIB(ECFDYN)
 INCLUDE SYSLIB(ECFIIO)
 INCLUDE SYSLIB(ECFOIO)
 INCLUDE SYSLIB(ECFIOT)
 INCLUDE SYSLIB(ECFVRX)
 INCLUDE SYSLIB(ECFPAR)
 INCLUDE SYSLIB(ECFPST)
 INCLUDE SYSLIB(ECFTKN)
 INCLUDE SYSLIB(ECFCOM)
 INCLUDE SYSLIB(ECFSTC)
 INCLUDE SYSLIB(ECFCSA)
 INCLUDE SYSLIB(ECFIEW)
 INCLUDE SYSLIB(ECFSSI)
 INCLUDE SYSLIB(ECFREQ)
 INCLUDE SYSLIB(ECFRTM)
 INCLUDE SYSLIB(ECFWTO)
 INCLUDE SYSLIB(ECFWTX)
 SETCODE AC(1)
 ENTRY ECFSUB
 NAME ECFSUB(R)
//*
//**  Link ECFSRV into SYS1.ECF.LINKLIB
//*
//LNKSRV EXEC ZLINKLIB,MOD=ECFSRV,LMOD=ECFSRV
 ENTRY ECFSRV
 NAME ECFSRV(R)
//*
//**  Link ECFTMP into SYS1.ECF.LINKLIB
//*
//LNKTMP EXEC ZLINKLIB,MOD=ECFTMP,LMOD=ECFTMP
 ENTRY ECFTMP
 NAME ECFTMP(R)
//*
//**  Link ECFTRC into SYS1.ECF.LINKLIB
//*
//LNKTRC EXEC ZLINKLIB,MOD=ECFTRC,LMOD=ECFTRC
 INCLUDE SYSLIB(ECFTRC)
 ENTRY ECFTRC
 NAME ECFTRC(R)
//*
//**  Link ECFWAIT into SYS1.ECF.LINKLIB
//*
//LNKWSR EXEC ZLINKLIB,MOD=ECFWSR,LMOD=ECFWSR
 ENTRY ECFWSR
 NAME ECFWAIT(R)
//*
//**  Link ECFCSM into SYS1.ECF.LINKLIB -- CSA=YES required
//*
//LNKCSM EXEC ZLINKLIB,MOD=ECFVTA,LMOD=ECFCSM
 INCLUDE SYSLIB(ECFVTA)
 INCLUDE SYSLIB(ECFSVT)
 INCLUDE SYSLIB(ECFSVX)
 INCLUDE SYSLIB(ECFSVN)
 INCLUDE SYSLIB(ECFLCK)
 INCLUDE SYSLIB(ECFRMT)
 INCLUDE SYSLIB(ECFVAL)
 INCLUDE SYSLIB(ECFDIE)
 INCLUDE SYSLIB(ECFS34)
 INCLUDE SYSLIB(ECFS35)
 INCLUDE SYSLIB(ECFEOT)
 INCLUDE SYSLIB(ECFEOM)
 INCLUDE SYSLIB(ECFENV)
 INCLUDE SYSLIB(ECFSAF)
 INCLUDE SYSLIB(ECFVAR)
 INCLUDE SYSLIB(ECFLOG)
 INCLUDE SYSLIB(ECFCPL)
 INCLUDE SYSLIB(ECFIRB)
 INCLUDE SYSLIB(ECFSVC)
 INCLUDE SYSLIB(ECFXPC)
 INCLUDE SYSLIB(ECFSVS)
 INCLUDE SYSLIB(ECFTCB)
 INCLUDE SYSLIB(ECFIDI)
 INCLUDE SYSLIB(ECFTKN)
 INCLUDE SYSLIB(ECFFRR)
 INCLUDE SYSLIB(ECFRTM)
 INCLUDE SYSLIB(ECFWTO)
 INCLUDE SYSLIB(ECFWTX)
 ENTRY ECFVTA
 NAME ECFCSM(R)
//
//
//
//
//
//
//*
//**  Link ECFLSM into SYS1.ECF.LPALIB -- CLPA/MLPA required
//*
//LNKLSM EXEC ZLINKLPA,MOD=ECFVTA,LMOD=ECFLSM
 INCLUDE SYSLIB(ECFVTA)
 INCLUDE SYSLIB(ECFSVT)
 INCLUDE SYSLIB(ECFSVX)
 INCLUDE SYSLIB(ECFSVN)
 INCLUDE SYSLIB(ECFLCK)
 INCLUDE SYSLIB(ECFRMT)
 INCLUDE SYSLIB(ECFVAL)
 INCLUDE SYSLIB(ECFDIE)
 INCLUDE SYSLIB(ECFS34)
 INCLUDE SYSLIB(ECFS35)
 INCLUDE SYSLIB(ECFEOT)
 INCLUDE SYSLIB(ECFEOM)
 INCLUDE SYSLIB(ECFENV)
 INCLUDE SYSLIB(ECFSAF)
 INCLUDE SYSLIB(ECFVAR)
 INCLUDE SYSLIB(ECFLOG)
 INCLUDE SYSLIB(ECFCPL)
 INCLUDE SYSLIB(ECFIRB)
 INCLUDE SYSLIB(ECFSVC)
 INCLUDE SYSLIB(ECFXPC)
 INCLUDE SYSLIB(ECFSVS)
 INCLUDE SYSLIB(ECFTCB)
 INCLUDE SYSLIB(ECFIDI)
 INCLUDE SYSLIB(ECFTKN)
 INCLUDE SYSLIB(ECFFRR)
 INCLUDE SYSLIB(ECFRTM)
 INCLUDE SYSLIB(ECFWTO)
 INCLUDE SYSLIB(ECFWTX)
 ENTRY ECFVTA
 NAME ECFLSM(R)
/*
//
./ ADD NAME=ZZEVENTS 0111-21114-21333-0751-00058-00123-00018-BENMAR  36

Event Capture Facility (ECF)

The ECF subsystem captures the following system and subsystems events:

CAPTURED EVENTS
+======================================================================+
| Event   | Event            | Event                                   |
| Type    | Name             | Description                             |
+======================================================================+
| JOBINIT | JOBname          | Triggers when the specified JOBname     |
|         |                  | starts executing.                       |
|         |                  |                                         |
+----------------------------------------------------------------------+
| JOBTERM | JOBname          | Triggers when the specified JOBname     |
|         |                  | normally or abnormally terminates.      |
|         |                  |                                         |
+----------------------------------------------------------------------+
| STCINIT | STCname          | Triggers when the specified STCname     |
|         |                  | starts executing.                       |
|         |                  |                                         |
+----------------------------------------------------------------------+
| STCTERM | STCname          | Triggers when the specified STCname     |
|         |                  | normally or abnormally terminates.      |
|         |                  |                                         |
+----------------------------------------------------------------------+
| TSUINIT | TSUname          | Triggers when the specified TSO user    |
|         |                  | logs on.                                |
|         |                  |                                         |
+----------------------------------------------------------------------+
| TSUTERM | TSUname          | Triggers when the specified TSO user    |
|         |                  | logs off.                               |
|         |                  |                                         |
+----------------------------------------------------------------------+
| TRAPCMD | Command name     | Triggers when the specified command     |
|         |                  | is issued.                              |
|         |                  |                                         |
+----------------------------------------------------------------------+
| TRAPMSG | WTO/R message    | Triggers when the specified WTO/R       |
|         |                  | message is issued.                      |
|         |                  |                                         |
+----------------------------------------------------------------------+
| MONITOR | STCname          | Triggers when the monitored address     |
|         |                  | space normally or abnormally terminates.|
|         |                  |                                         |
+----------------------------------------------------------------------+
| JOBSVCS | Jobname          | Triggers SVC screening for the specified|
|         |                  | batch job name.                         |
|         |                  |                                         |
+----------------------------------------------------------------------+
| STCSVCS | STCname          | Triggers SVC screening for the specified|
|         |                  | started task.                           |
|         |                  |                                         |
+----------------------------------------------------------------------+
| TSUSVCS | User ID          | Triggers SVC screening for the specified|
|         |                  | TSO user ID.                            |
|         |                  |                                         |
+----------------------------------------------------------------------+
./ ADD NAME=ZZVARS   0107-21203-21333-0927-00091-00079-00091-BENMAR  25

Event Capture Facility (ECF)
----------------------------
ECF captures the following variables when an event triggers:

CAPTURED EVENT VARIABLES
+======================================================================+
| Variable | Variable                                                  |
|          | Description                                               |
+======================================================================+
| &ABEND   | The system ABEND code (Snnn) or user ABEND code (Unnnn)   |
|          | associated with a termination event.                      |
|          |                                                           |
+----------------------------------------------------------------------+
| &COMMAND | The system or subsystem command that triggered the event. |
|          |                                                           |
+----------------------------------------------------------------------+
| &CONSOLE | The console ID where the command was issued.              |
|          |                                                           |
+----------------------------------------------------------------------+
| &DATE    | System date when event triggered.                         |
|          |                                                           |
+----------------------------------------------------------------------+
| &EVENT   | Event type. The following event types are supported:      |
|          |                                                           |
|          | TRAPCMD  - MVS and subsystems commands                    |
|          | TRAPMSG  - Trap WTO and WTOR messages                     |
|          | JOBSVCS  - SVC screen jobs                                |
|          | STCSVCS  - SVC screen started tasks                       |
|          | TSUSVCS  - SVC screen TSO user IDs                        |
|          | STCINIT  - Starting started tasks                         |
|          | STCTERM  - Terminating started tasks                      |
|          | JOBINIT  - Starting batch jobs                            |
|          | JOBTERM  - Terminating batch jobs                         |
|          | TSUINIT  - TSO user IDs logging on                        |
|          | TSUTERM  - TSO user IDs logging off                       |
|          |                                                           |
+----------------------------------------------------------------------+
| &EXEC    | The SYSPROC PDS data set member name (CLIST/REXX) to be   |
|          | triggered when the specified event ocurrs.                |
|          |                                                           |
+----------------------------------------------------------------------+
| &JOBNAME | The address space name where the event triggered.         |
|          |                                                           |
+----------------------------------------------------------------------+
| &JOBTYPE | The address space type where the event triggered. JOB;    |
|          | STC; TSU.                                                 |
|          |                                                           |
+----------------------------------------------------------------------+
| &JCLERR  | The JOB NOT RUN - JCL ERROR associated with a termination |
|          | event.                                                    |
|          |                                                           |
+----------------------------------------------------------------------+
| &LPAR    | LPAR name. 8-characters.                                  |
|          | Note: Not available in MVS 3.8J.                          |
|          |                                                           |
+----------------------------------------------------------------------+
| &MEMBER  | Event rule PDS member name                                |
|          |                                                           |
+----------------------------------------------------------------------+
| &MESSAGE | The WTO/R message that triggered the event.               |
|          |                                                           |
+----------------------------------------------------------------------+
| &REPLYID | The reply identifier number associated with the issued    |
|          | WTOR message.                                             |
|          |                                                           |
+----------------------------------------------------------------------+
| &RUNAS   | Specifies how the event rule is to be given control.      |
|          | JOB means that a batch job is submitted; STC means that   |
|          | a started task is started; SUB means that a subtask is    |
|          | attached in the ECF address space.                        |
|          |                                                           |
+----------------------------------------------------------------------+
| &SYSDATA | Event trigger data. Contains the captured system data.    |
|          | for example: Issued WTO/R or issued command.              |
|          |                                                           |
+----------------------------------------------------------------------+
| &SYSID   | System identifier. 4-character SMF system ID.             |
|          |                                                           |
+----------------------------------------------------------------------+
| &TIME    | System time when event triggered.                         |
|          |                                                           |
+----------------------------------------------------------------------+
| &TRIGGER | Event trigger data. Contains the captured system data.    |
|          | for example: Issued WTO/R or issued command.              |
|          |                                                           |
+----------------------------------------------------------------------+
| &TRIGGER | Event trigger data. Contains the captured system data.    |
|          | for example: Issued WTO/R or issued command.              |
|          | Same as &SYSDATA variable.                                |
+----------------------------------------------------------------------+
