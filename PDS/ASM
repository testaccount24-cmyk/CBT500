./ ADD NAME=ECFCOM   0199-21115-21321-0916-06912-04874-04600-BENMAR  28
ECFCOM   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFCOM                                                     */
*/*                                                                  */
*/* Function: Event Capture Subsysytem Command Processor             */
*/*                                                                  */
*/* Description: When a command is issued, the SSI command listener, */
*/*              ECFS34, obtains and initializes a Service Request   */
*/*              Element (SRE) cell with command-related data. Adds  */
*/*              SRE to the pending SRE queue and issues $XMPOST to  */
*/*              cross-memory post the ECFSRV(S34SRV) subtask of the */
*/*              Event Capture address space. Service routine S34SRV */
*/*              copies the command and its operands locally, issues */
*/*              $CPOOL FREE to return the SRE to its SRE cell pool, */
*/*              then calls this command processor, ECFCOM, to pro-  */
*/*              cess the command.                                   */
*/*                                                                  */
*/* Input Regs: R0  SRE address                                      */
*/*             R1  Command buffer address                           */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=8                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 10182020 | Ben Marino  | Removed SYSDATA support       *
* @03 | V1R1 | 10232020 | Ben Marino  | ECFSRV(DIE) display support   *
* @04 | V1R1 | 02052021 | Ben Marino  | Fix H/HELP display bugs       *
* @05 | V2R1 | 05162021 | Ben Marino  | zOS serviceability support    *
* @06 | V2R3 | 08022021 | Ben Marino  | Added MONITOR event trigger   *
* @07 | V2R3 | 08202021 | Ben Marino  | Added DISPLAY LPA command     *
* @08 | V2R3 | 09272021 | Ben Marino  | Added SVC screening support   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
         COPY  $GLBLS
ECFCOM   $SRVINI
         STM   R0,R1,DSAIPAR           save PARM regs
         USING EVT,R11                 EVT addressability
         IPK   ,                       get entry PSW key
         ST    R2,DSACKEY              save it
*
**       Copy SRE and command buffer
*
COM0000  DS    0H
         LR    R3,R0                   copy SRE address            @05A
         MVC   DSASREC(SRE@SIZE),0(R3) copy SRE block              @05A
         MVI   DSACMDBF,BLANK          clear CMD buffer
         MVC   DSACMDBF+1(DSA@CMDZ-1),DSACMDBF
         MVC   DSACMDBF(SREDATAL),0(R1) copy command buffer
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN2004)    set error RSN
         $RETRY COMEXIT,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              ABEND RSN
*
**       Process subsystem command
*
         L     R3,STORSIZE             MLWTO storage buffer size   @05A
         ST    R3,DSASTORZ             save size for subrouties    @05A
         LA    R4,CMDTBLE              CMD table address
         USING CMDE,R4                 set addressability
*
COM0010  DS    0H
         CLC   CMDEPA,CMDTEND          end of table?
         BE    COM0020                 yes, unknown subsystem CMD
         LH    R1,CMDSIZE              CMD verb length
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COMPCMND             CMD verb match?
         BNE   COM0030                 no, loop
         LR    R1,R4                   pass CMD entry address
         L     R15,CMDEPA              subroutine EPA
         BALR  R14,R15                 call subroutine
         LTR   R15,R15                 successful?
         BZ    COMEXIT                 yes, exit
*
COM0020  DS    0H
         $WTO  MID=ECF041E,VAR1=DSACMDBF  command invalid msg
         $WTO  MID=ECF051I,VAR1=EVTCMDCH  help commands msg
         B     COMEXIT                 exit
*
COM0030  DS    0H
         LA    R4,CMD@SIZE(,R4)        next CMD entry
         B     COM0010                 loop
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
COMEXIT  DS    0H
         $SRVXIT PARM=DSAOPAR,                                         +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COMPCMND CLC   CMDNAME(*-*),DSACMDTA   EXecuted instruction
*---------------------------------------------------------------------*
*        Subsystem Commands table                                     *
*--------+---------+---------+---------+---------+---------+---------+*
CMDTBLE  DS    0F
         $CMDCALL TYPE=INITIAL
*
**       P/STOP Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STOP,                        EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=2,                          verb                    +
               CMD=CL24'P'                     command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STOP,                        EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=5,                          verb                    +
               CMD=CL24'STOP'                  command
*
**       DISPLAY/D Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STATUS,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=9,                          verb                    +
               CMD=CL24'D STATUS'              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STATUS,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=15,                         verb                    +
               CMD=CL24'DISPLAY STATUS'        command
*
         $CMDCALL TYPE=ENTRY,                                      @05C+
               EP=ISTATUS,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'D ISTATUS'             command
*
         $CMDCALL TYPE=ENTRY,                                      @05C+
               EP=ISTATUS,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=16,                         verb                    +
               CMD=CL24'DISPLAY ISTATUS'       command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=RULES,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=8,                          verb                    +
               CMD=CL24'D RULES'               command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=RULES,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=14,                         verb                    +
               CMD=CL24'DISPLAY RULES'         command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=DISPONE,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=7,                          verb                    +
               CMD=CL24'D RULE='               command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=DISPONE,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=13,                         verb                    +
               CMD=CL24'DISPLAY RULE='         command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=CPOOLS,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=9,                          verb                    +
               CMD=CL24'D CPOOLS'              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=CPOOLS,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=15,                         verb                    +
               CMD=CL24'DISPLAY CPOOLS'        command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=SSIDATA,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'D SSIDATA'             command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=SSIDATA,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=16,                         verb                    +
               CMD=CL24'DISPLAY SSIDATA'       command
*
         $CMDCALL TYPE=ENTRY,                                      @08A+
               EP=SVCDATA,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'D SVCDATA'             command
*
         $CMDCALL TYPE=ENTRY,                                      @08A+
               EP=SVCDATA,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=16,                         verb                    +
               CMD=CL24'DISPLAY SVCDATA'       command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=ABENDS,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=08,                         verb                    +
               CMD=CL24'D ABENDS'              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=ABENDS,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=14,                         verb                    +
               CMD=CL24'DISPLAY ABENDS'        command
*
         $CMDCALL TYPE=ENTRY,                                      @05A+
               EP=JCLPARM,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'D JCLPARM'             command
*
         $CMDCALL TYPE=ENTRY,                                      @05A+
               EP=JCLPARM,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=16,                         verb                    +
               CMD=CL24'DISPLAY JCLPARM'       command
*
         $CMDCALL TYPE=ENTRY,                                      @05A+
               EP=OPTIONS,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'D OPTIONS'             command
*
         $CMDCALL TYPE=ENTRY,                                      @05A+
               EP=OPTIONS,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=16,                         verb                    +
               CMD=CL24'DISPLAY OPTIONS'       command
*
         $CMDCALL TYPE=ENTRY,                                      @07A+
               EP=DYNLPA,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=5,                          verb                    +
               CMD=CL24'D LPA'                 command
*
         $CMDCALL TYPE=ENTRY,                                      @07A+
               EP=DYNLPA,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=11,                         verb                    +
               CMD=CL24'DISPLAY LPA'           command
*
**       MODIFY/F Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=DEBUG,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=8,                          verb                    +
               CMD=CL24'F DEBUG='              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=DEBUG,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=13,                         verb                    +
               CMD=CL24'MODIFY DEBUG='         command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=TRACE,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=8,                          verb                    +
               CMD=CL24'F TRACE='              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=TRACE,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=13,                         verb                    +
               CMD=CL24'MODIFY TRACE='         command
         $CMDCALL TYPE=ENTRY,                                          +
               EP=SDUMP,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=8,                          verb                    +
               CMD=CL24'F SDUMP='              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=SDUMP,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=13,                         verb                    +
               CMD=CL24'MODIFY SDUMP='         command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=SHOWREB,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'F SHOWREB='            command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=SHOWREB,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=15,                         verb                    +
               CMD=CL24'MODIFY SHOWREB='       command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=COMPWTO,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'F COMPWTO='            command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=COMPWTO,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=15,                         verb                    +
               CMD=CL24'MODIFY COMPWTO='       command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=ACTEVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=11,                         verb                    +
               CMD=CL24'F ACT,RULE='           command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=ACTEVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=16,                         verb                    +
               CMD=CL24'MODIFY ACT,RULE='      command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=NACEVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=13,                         verb                    +
               CMD=CL24'F INACT,RULE='         command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=NACEVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=18,                         verb                    +
               CMD=CL24'MODIFY INACT,RULE='    command
*
**       SET/T Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=DEBUG,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=8,                          verb                    +
               CMD=CL24'T DEBUG='              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=DEBUG,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'SET DEBUG='            command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=TRACE,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=8,                          verb                    +
               CMD=CL24'T TRACE='              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=TRACE,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'SET TRACE='            command
         $CMDCALL TYPE=ENTRY,                                          +
               EP=SDUMP,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=8,                          verb                    +
               CMD=CL24'T SDUMP='              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=SDUMP,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'SET SDUMP='            command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=SHOWREB,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'T SHOWREB='            command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=SHOWREB,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=12,                         verb                    +
               CMD=CL24'SET SHOWREB='          command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=COMPWTO,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'T COMPWTO='            command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=COMPWTO,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=12,                         verb                    +
               CMD=CL24'SET COMPWTO='          command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=ACTEVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=11,                         verb                    +
               CMD=CL24'T ACT,RULE='           command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=ACTEVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=13,                         verb                    +
               CMD=CL24'SET ACT,RULE='         command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=NACEVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=13,                         verb                    +
               CMD=CL24'T INACT,RULE='         command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=NACEVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=15,                         verb                    +
               CMD=CL24'SET INACT,RULE='       command
*
**       ACT Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=ACTEVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=09,                         verb                    +
               CMD=CL24'ACT RULE='             command
*
**       INACT Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=NACEVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=11,                         verb                    +
               CMD=CL24'INACT RULE='           command
*
**       ADD Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=ADDEVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=9,                          verb                    +
               CMD=CL24'ADD RULE='             command
*
**       REF Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=RFREVNT,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=09,                         verb                    +
               CMD=CL24'REF RULE='             command
*
**       H/HELP subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HELP,                        EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=24,                         verb                @04C+
               CMD=CL24'HELP'                  command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HELPSUB,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=06,                         verb                    +
               CMD=CL24'H SUB'                 command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HELPSUB,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=09,                         verb                    +
               CMD=CL24'HELP SUB'              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HELPSUB,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=09,                         verb                    +
               CMD=CL24'H SUBSYS'              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HELPSUB,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=12,                         verb                    +
               CMD=CL24'HELP SUBSYS'           command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HELPREC,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=04,                         verb                    +
               CMD=CL24'H R'                   command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HELPREC,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=07,                         verb                    +
               CMD=CL24'HELP R'                command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HELPREC,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=11,                         verb                    +
               CMD=CL24'H RECOVERY'            command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HELPREC,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=14,                         verb                    +
               CMD=CL24'HELP RECOVERY'         command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HBROWSE,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=04,                         verb                    +
               CMD=CL24'H B'                   command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HBROWSE,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=07,                         verb                    +
               CMD=CL24'HELP B'                command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HBROWSE,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=09,                         verb                    +
               CMD=CL24'H BROWSE'              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HBROWSE,                     EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=12,                         verb                    +
               CMD=CL24'HELP BROWSE'           command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HEDIT,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=04,                         verb                    +
               CMD=CL24'H E'                   command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HEDIT,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=07,                         verb                    +
               CMD=CL24'HELP E'                command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HEDIT,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=07,                         verb                    +
               CMD=CL24'H EDIT'                command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=HEDIT,                       EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'HELP EDIT'             command
*
**       BROWSE Recovery Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=07,                         verb                    +
               CMD=CL24'BROWSE'                command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=08,                         verb                    +
               CMD=CL24'ENDBROW'               command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=10,                         verb                    +
               CMD=CL24'ENDBROWSE'             command
*
**       EDIT Recovery Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=05,                         verb                    +
               CMD=CL24'EDIT'                  command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=05,                         verb                    +
               CMD=CL24'LIST'                  command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=07,                         verb                    +
               CMD=CL24'DELETE'                command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=07,                         verb                    +
               CMD=CL24'INSERT'                command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=07,                         verb                    +
               CMD=CL24'UPDATE'                command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=05,                         verb                    +
               CMD=CL24'SAVE'                  command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=07,                         verb                    +
               CMD=CL24'NOSAVE'                command
*
**       COMMON Recovery Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=04,                         verb                    +
               CMD=CL24'TSO'                   command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=05,                         verb                    +
               CMD=CL24'COPY'                  command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=09,                         verb                    +
               CMD=CL24'COMPRESS'              command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=07,                         verb                    +
               CMD=CL24'SCROLL'                command
*
**       RECOVERY Display Subsystem Commands
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=04,                         verb                    +
               CMD=CL24'D R'                   command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=11,                         verb                    +
               CMD=CL24'D RECOVERY'            command
*
         $CMDCALL TYPE=ENTRY,                                          +
               EP=STCCMD,                      EPA                     +
               EXEC=LOCAL,                     exec locally            +
               LEN=17,                         verb                    +
               CMD=CL24'DISPLAY RECOVERY'      command
*
         $CMDCALL TYPE=FINAL
CMDTBLSZ EQU   *-CMDTBLE
*---------------------------------------------------------------------*
*        MLWTO message lines                                          *
*--------+---------+---------+---------+---------+---------+---------+*
         $ECFMWTO DSECT=NO,T=MSX
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
STORLNES EQU   32                      max number of MLWTO lines   @05A
STORSIZE DC    AL4(80*STORLNES)        MLWTO display lines max     @05A
CMDTEND  DC    XL4'FFFFFFFF'           CMD table end indicator
         DS    0C
ZSTOP    DC    CL2'P'                  STOP command
ZSTOP2   DC    CL5'STOP'               STOP command
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DEBUG                                                      */
*/*                                                                  */
*/* Function: DEBUG={ON|OFF} command subroutine                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?T DEBUG=ON                                            */
*/*           ?T DEBUG=OFF                                           */
*/*           ?SET DEBUG=ON                                          */
*/*           ?SET DEBUG=OFF                                         */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DEBUG    $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
         LR    R5,R1                   CMD entry address
         USING CMDE,R5                 set addressability
         LH    R2,CMDSIZE              CMD verb length
         LA    R3,DSACMDTA             CMD verb address
         LA    R3,0(R2,R3)             CMD operand data address
         CLC   0(3,R3),=CL3'ON'        DEBUG=ON?
         BNE   DBUG100                 no, test further
         $OI   EVTFLG2,EVT@DBUG        set DEBUG=ON
         ICM   R2,15,EVTSTKAD          ECFSUB stack?
         BZ    DBUG000                 no, carry on
         OI    STKFLG1-STK(R2),STK@DBUG    set DEBUG=ON
*
DBUG000  DS    0H
         ICM   R2,15,EVTADSTK          ECFSRV(ADDSRV) stack?
         BZ    DBUG010                 no, carry on
         OI    STKFLG1-STK(R2),STK@DBUG    set DEBUG=ON
*
DBUG010  DS    0H
         ICM   R2,15,EVTRFSTK          ECFSRV(RFRSRV) stack?
         BZ    DBUG020                 no, carry on
         OI    STKFLG1-STK(R2),STK@DBUG    set DEBUG=ON
*
DBUG020  DS    0H
         ICM   R2,15,EVTCOSTK          ECFSRV(COMSRV) stack?
         BZ    DBUG030                 no, carry on
         OI    STKFLG1-STK(R2),STK@DBUG    set DEBUG=ON
*
DBUG030  DS    0H
         ICM   R2,15,EVTSTSTK          ECFSRV(STCSRV) stack?
         BZ    DBUG040                 no, carry on
         OI    STKFLG1-STK(R2),STK@DBUG    set DEBUG=ON
*
DBUG040  DS    0H                                                  @03A
         ICM   R2,15,EVTDISTK          ECFSRV(DIESRV) stack?       @03A
         BZ    DBUG045                 no, carry on                @06C
         OI    STKFLG1-STK(R2),STK@DBUG    set DEBUG=ON            @03A
*
DBUG045  DS    0H                                                  @06A
         ICM   R2,15,EVTSYSTK          ECFSRV(SYSSRV) stack?       @06A
         BZ    DBUG050                 no, carry on                @06A
         OI    STKFLG1-STK(R2),STK@DBUG    set DEBUG=ON            @06A
*                                                                  @06A
DBUG050  DS    0H
         $WTO  MID=ECF040I,VAR1==CL5'DEBUG',VAR2==CL3'ON'
         XC    DSARC,DSARC             set RC
         B     DEBUGXIT                exit
*
DBUG100  DS    0H
         CLC   0(4,R3),=CL4'OFF'       DEBUG=OFF?
         BE    DBUG200                 yes, carry on
         MVC   DSARC,=AL4(RC8)         set error RC
         B     DEBUGXIT                exir
*
DBUG200  DS    0H
         $NI   EVTFLG2,XFF-EVT@DBUG    set DEBUG=OFF
         ICM   R2,15,EVTSTKAD          ECFSUB stack?
         BZ    DBUG210                 no, carry on
         NI    STKFLG1-STK(R2),XFF-STK@DBUG  DEBUG=OFF
*
DBUG210  DS    0H
         ICM   R2,15,EVTADSTK          ECFSRV(ADDSRV) stack?
         BZ    DBUG220                 no, carry on
         NI    STKFLG1-STK(R2),XFF-STK@DBUG  DEBUG=OFF
*
DBUG220  DS    0H
         ICM   R2,15,EVTRFSTK          ECFSRV(RFRSRV) stack?
         BZ    DBUG230                 no, carry on
         NI    STKFLG1-STK(R2),XFF-STK@DBUG  DEBUG=OFF
*
DBUG230  DS    0H
         ICM   R2,15,EVTCOSTK          ECFSRV(COMSRV) stack?
         BZ    DBUG240                 no, carry on
         NI    STKFLG1-STK(R2),XFF-STK@DBUG  DEBUG=OFF
*
DBUG240  DS    0H
         ICM   R2,15,EVTSTSTK          ECFSRV(STCSRV) stack?
         BZ    DBUG250                 no, carry on
         NI    STKFLG1-STK(R2),XFF-STK@DBUG  DEBUG=OFF
*
DBUG250  DS    0H                                                  @03A
         ICM   R2,15,EVTDISTK          ECFSRV(DIESRV) stack?       @03A
         BZ    DBUG260                 no, carry on                @03A
         NI    STKFLG1-STK(R2),XFF-STK@DBUG  DEBUG=OFF             @03A
*
DBUG260  DS    0H                                                  @06A
         ICM   R2,15,EVTSYSTK          ECFSRV(SYSSRV) stack?       @06A
         BZ    DBUG299                 no, carry on                @06A
         NI    STKFLG1-STK(R2),XFF-STK@DBUG  DEBUG=OFF             @06A
*
DBUG299  DS    0H                                                  @06C
         $WTO  MID=ECF040I,VAR1==CL5'DEBUG',VAR2==CL3'OFF'
         XC    DSARC,DSARC             set RC
*
DEBUGXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TRACE                                                      */
*/*                                                                  */
*/* Function: TRACE={ON|OFF} command subroutine                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?T TRACE=ON                                            */
*/*           ?T TRACE=OFF                                           */
*/*           ?SET TRACE=ON                                          */
*/*           ?SET TRACE=OFF                                         */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TRACE    $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
         LR    R5,R1                   CMD entry address
         USING CMDE,R5                 set addressability
         LH    R2,CMDSIZE              CMD verb length
         LA    R3,DSACMDTA             CMD verb address
         LA    R3,0(R2,R3)             CMD operand data address
         CLC   0(3,R3),=CL3'ON'        TRACE=ON?
         BNE   TRCE100                 no, test further
         $OI   EVTFLG2,EVT@TRCE        set TRACE=ON
         ICM   R2,15,EVTSTKAD          ECFSUB stack?
         BZ    TRCE000                 no, carry on
         OI    STKFLG1-STK(R2),STK@TRCE    set TRACE=ON
*
TRCE000  DS    0H
         ICM   R2,15,EVTADSTK          ECFSRV(ADDSRV) stack?
         BZ    TRCE010                 no, carry on
         OI    STKFLG1-STK(R2),STK@TRCE    set TRACE=ON
*
TRCE010  DS    0H
         ICM   R2,15,EVTRFSTK          ECFSRV(RFRSRV) stack?
         BZ    TRCE020                 no, carry on
         OI    STKFLG1-STK(R2),STK@TRCE    set TRACE=ON
*
TRCE020  DS    0H
         ICM   R2,15,EVTCOSTK          ECFSRV(COMSRV) stack?
         BZ    TRCE030                 no, carry on
         OI    STKFLG1-STK(R2),STK@TRCE    set TRACE=ON
*
TRCE030  DS    0H
         ICM   R2,15,EVTSTSTK          ECFSRV(STCSRV) stack?
         BZ    TRCE040                 no, carry on
         OI    STKFLG1-STK(R2),STK@TRCE    set TRACE=ON
*
TRCE040  DS    0H                                                  @03A
         ICM   R2,15,EVTDISTK          ECFSRV(DIESRV) stack?       @03A
         BZ    TRCE045                 no, carry on                @06C
         OI    STKFLG1-STK(R2),STK@TRCE    set TRACE=ON            @03A
*
TRCE045  DS    0H                                                  @06A
         ICM   R2,15,EVTSYSTK          ECFSRV(SYSSRV) stack?       @06A
         BZ    TRCE050                 no, carry on                @06A
         OI    STKFLG1-STK(R2),STK@TRCE    set TRACE=ON            @06A
*
TRCE050  DS    0H
         $WTO  MID=ECF040I,VAR1==CL5'TRACE',VAR2==CL3'ON'
         XC    DSARC,DSARC             set RC
         B     TRCEEXIT                exit
*
TRCE100  DS    0H
         CLC   0(4,R3),=CL4'OFF'       TRACE=OFF?
         BE    TRCE200                 yes, carry on
         MVC   DSARC,=AL4(RC8)         set error RC
         B     TRCEEXIT                exir
*
TRCE200  DS    0H
         $NI   EVTFLG2,XFF-EVT@TRCE    set TRACE=OFF
         ICM   R2,15,EVTSTKAD          ECFSUB stack?
         BZ    TRCE210                 no, carry on
         NI    STKFLG1-STK(R2),XFF-STK@TRCE  TRACE=OFF
*
TRCE210  DS    0H
         ICM   R2,15,EVTADSTK          ECFSRV(ADDSRV) stack?
         BZ    TRCE220                 no, carry on
         NI    STKFLG1-STK(R2),XFF-STK@TRCE  TRACE=OFF
*
TRCE220  DS    0H
         ICM   R2,15,EVTRFSTK          ECFSRV(RFRSRV) stack?
         BZ    TRCE230                 no, carry on
         NI    STKFLG1-STK(R2),XFF-STK@TRCE  TRACE=OFF
*
TRCE230  DS    0H
         ICM   R2,15,EVTCOSTK          ECFSRV(COMSRV) stack?
         BZ    TRCE240                 no, carry on
         NI    STKFLG1-STK(R2),XFF-STK@TRCE  TRACE=OFF
*
TRCE240  DS    0H                                                  @03A
         ICM   R2,15,EVTDISTK          ECFSRV(DIESRV) stack?       @03A
         BZ    TRCE250                 no, carry on                @03A
         NI    STKFLG1-STK(R2),XFF-STK@TRCE  TRACE=OFF             @03A
*
TRCE250  DS    0H                                                  @03A
         ICM   R2,15,EVTSTSTK          ECFSRV(STCSRV) stack?
         BZ    TRCE260                 no, carry on                @06C
         NI    STKFLG1-STK(R2),XFF-STK@TRCE  TRACE=OFF
*
TRCE260  DS    0H                                                  @06A
         ICM   R2,15,EVTSYSTK          ECFSRV(SYSSRV) stack?       @06A
         BZ    TRCE299                 no, carry on                @06A
         NI    STKFLG1-STK(R2),XFF-STK@TRCE  TRACE=OFF
*
TRCE299  DS    0H                                                  @06C
         $WTO  MID=ECF040I,VAR1==CL5'TRCAE',VAR2==CL3'OFF'
         XC    DSARC,DSARC             set RC
*
TRCEEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SDUMP                                                      */
*/*                                                                  */
*/* Function: SDUMP={NO|YES} command subroutine                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?T SDUMP=NO                                            */
*/*           ?T SDUMP=YES                                           */
*/*           ?SET SDUMP=NO                                          */
*/*           ?SET SDUMP=YES                                         */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SDUMP    $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
         LR    R5,R1                   CMD entry address
         USING CMDE,R5                 set addressability
         LH    R2,CMDSIZE              CMD verb length
         LA    R3,DSACMDTA             CMD verb address
         LA    R3,0(R2,R3)             CMD operand data address
         CLC   0(4,R3),=CL4'YES'       SDUMP=YES?
         BNE   SDUMP00                 no, test further
         OI    STKFLG2,STK@DUMP        set SDUMP=YES locally
         $OI   EVTFLG2,EVT@DUMP        set SDUMP=YES globally
         $WTO  MID=ECF040I,VAR1==CL5'SDUMP',VAR2==CL3'YES'
         XC    DSARC,DSARC             set RC
         B     SDUMPXIT                exit
*
SDUMP00  DS    0H
         CLC   0(3,R3),=CL3'NO'        SDUMP=NO?
         BE    SDUMP10                 yes, carry on
         MVC   DSARC,=AL4(RC8)         set error RC
         B     SDUMPXIT                exir
*
SDUMP10  DS    0H
         NI    STKFLG2,XFF-STK@DUMP    set SDUMP=OFF locally
         $NI   EVTFLG2,XFF-EVT@DUMP    set SDUMP=OFF globally
         $WTO  MID=ECF040I,VAR1==CL5'SDUMP',VAR2==CL3'NO'
         XC    DSARC,DSARC             set RC
*
SDUMPXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: STOP                                                       */
*/*                                                                  */
*/* Function: P/STOP command subroutine                              */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?P ECFn                                                */
*/*           ?STOP ECFn                                             */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
STOP     $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Schedule Event Capture termination
*
         $WTO  MID=ECF096I             issue msg
         $OI   EVTFLG1,EVT@TERM        subsystem terminating
         $POST EVTJSECB                post Jobstep task ECB
         XC    DSARC,DSARC             set RC
*
STOPEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SHOWREB                                                    */
*/*                                                                  */
*/* Function: SHOWREB={NO|YES} command subroutine                    */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?T SHOWREB=NO                                          */
*/*           ?T SHOWREB=YES                                         */
*/*           ?SET SHOWREB=NO                                        */
*/*           ?SET SHOWREB=YES                                       */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SHOWREB  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
         LR    R5,R1                   copy CMD entry address
         USING CMDE,R5                 set addressability
         LH    R2,CMDSIZE              CMD verb length
         LA    R3,DSACMDTA             CMD verb address
         LA    R3,0(R2,R3)             CMD operand data address
         CLC   0(4,R3),=CL4'YES'       SHOWREB=YES?
         BNE   SHOW000                 no, test further
         $OI   EVTFLG2,EVT@EDSP        set SHOWREB=YES
         $WTO  MID=ECF042I,VAR1==CL3'YES',VAR2==CL10'option set'
         XC    DSARC,DSARC             set RC
         B     SHOWEXIT                exit
*
SHOW000  DS    0H
         CLC   0(3,R3),=CL3'NO'        SHOWREB=NO?
         BE    SHOW010                 yes, carry on
         MVC   DSARC,=AL4(RC8)         set error RC
         B     SHOWEXIT                exir
*
SHOW010  DS    0H
         $NI   EVTFLG2,XFF-EVT@EDSP    set SHOWREB=NO
         $WTO  MID=ECF042I,VAR1==CL3'NO',VAR2==CL10'option set'
         XC    DSARC,DSARC             set RC
*
SHOWEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: COMPWTO                                                    */
*/*                                                                  */
*/* Function: COMPWTO={NO|YES} command subroutine                    */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?T COMPWTO=NO                                          */
*/*           ?T COMPWTO=YES                                         */
*/*           ?SET COMPWTO=NO                                        */
*/*           ?SET COMPWTO=YES                                       */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
COMPWTO  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
         LR    R5,R1                   copy CMD entry address
         USING CMDE,R5                 set addressability
         LH    R2,CMDSIZE              CMD verb length
         LA    R3,DSACMDTA             CMD verb address
         LA    R3,0(R2,R3)             CMD operand data address
         CLC   0(4,R3),=CL4'YES'       COMPWTO=YES?
         BNE   COMP000                 no, test further
         $NI   EVTFLG4,XFF-EVT@CWTO    set COMPWTO=YES
         NI    STKFLG1,XFF-STK@CWTO    set COMPWTO=YES
         $WTO  MID=ECF057I,VAR1==CL3'YES',VAR2==CL10'option set'
         XC    DSARC,DSARC             set RC
         B     COMPEXIT                exit
*
COMP000  DS    0H
         CLC   0(3,R3),=CL3'NO'        COMPWTO=NO?
         BE    COMP010                 yes, carry on
         MVC   DSARC,=AL4(RC8)         set error RC
         B     COMPEXIT                exir
*
COMP010  DS    0H
         $OI   EVTFLG4,EVT@CWTO        set COMPWTO=NO
         OI    STKFLG1,STK@CWTO        set COMPWTO=NO
         $WTO  MID=ECF057I,VAR1==CL3'NO',VAR2==CL10'option set'
         XC    DSARC,DSARC             set RC
*
COMPEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RFREVNT                                                    */
*/*                                                                  */
*/* Function: Refresh Event rule command subroutine                  */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?REF RULE=member-name                                  */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RFREVNT  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         LR    R5,R1                   copy CMD entry address
         USING CMDE,R5                 set addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0956)    set error RSN
         $RETRY RFRSH99,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              ABEND RSN
         XC    DSAQREB,DSAQREB         zere REB address
*
**       Validity check rule refresh command
*
         LH    R2,CMDSIZE              CMD verb length
         LA    R3,DSACMDTA             CMD verb address
         LA    R3,0(R2,R3)             CMD operand data address
         LR    R2,R3                   copy operand data address
         LA    R1,8                    member name length
         MVI   DSAMEMBR,BLANK          clear member-name field
         MVC   DSAMEMBR+1(DSAMEMBZ-1),DSAMEMBR
         CLI   0(R2),BLANK             null member name?
         BNE   RFRSH05                 no, carry on
         MVC   DSARC,=AL4(RC8)         yes, command invalid
         B     RFRSHXIT                exit
*
RFRSH05  DS    0H
         CLI   0(R2),BLANK             end of member name?
         BE    RFRSH10                 yes, carry on
         LA    R2,1(,R2)               walk thru text
         BCT   R1,RFRSH05              loop
*
RFRSH10  DS    0H
         SLR   R2,R3                   get member name length
         BCTR  R2,0                    minus-1 for EXecute
         EX    R2,RFREVENT             copy member name
*
**       Locate matching rule refresh REB
*
         $LOCK EVTREBLK                lock REB queue
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   RFRSH15                 yes, carry on
         $UNLOCK EVTREBLK              unlock REB queue
         B     RFRSH88                 issue error msg
*
RFRSH15  DS    0H
         USING REB,R5                  set addressability
         CLC   DSAMEMBR,REBMEMBR       member name found?
         BNE   RFRSH20                 no, loop
         TM    REBFLG1,REB@REFR        refresh in progress?
         BZ    RFRSH25                 no, carry on
         $UNLOCK EVTREBLK              unlock REB queue before $WTO
         $WTO  MID=ECF047I,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2==CL32'refresh already in progress'
         XC    DSARC,DSARC             set RC
         B     RFRSHXIT                exit
*
RFRSH20  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   RFRSH15                 yes, loop
         ICM   R1,15,DSAQREB           1st REB address init?
         BNZ   RFRSH40                 yes, schedule refresh
         $UNLOCK EVTREBLK              unlock REB queue
         B     RFRSH88                 issue error msg
*
RFRSH25  DS    0H
         ICM   R1,15,DSAQREB           1st REB address init?
         BNZ   RFRSH30                 yes, carry on
         ST    R5,DSAQREB              no, save refresh-REB address
         MVC   DSARUNAS,REBRUNAS       copy RUNAS indicator
         MVC   DSAJOBNM,REBJOBNM       copy rule job name
*
RFRSH30  DS    0H
         $OI   REBFLG1,REB@REFR        set refresh in progress
         TM    REBFLG1,REB@ACTV        REB active?
         BZ    RFRSH20                 no, loop
         $NI   REBFLG1,XFF-REB@ACTV    yes, inactivate REB
         $OI   REBFLG1,REB@WACT        indicate REB was active
         OI    DSAFLG1,DSA@WACT        indicate REB was active
         B     RFRSH20                 loop
*
**       Issue rule refresh in progress msg
*
RFRSH40  DS    0H
         $UNLOCK EVTREBLK              unlock REB queue before $WTO
         $WTO  MID=ECF047I,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2==CL32'refresh in progress'
*
**       Obtain SRE Cell element
*
         $CPOOL GET,                   get SRE cell                    +
               CPID=EVTSRECP,          cell pool ID                    +
               CELL=DSASREA,           return SRE cell here            +
               MODE=COND               conditional request
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    RFRSH60                 yes, schedule refresh
*
**       Reset rule refresh indicators
*
         $LOCK EVTREBLK                lock REB queue
         L     R5,DSAQREB              refresh REB address
*
RFRSH45  DS    0H
         $NI   REBFLG1,XFF-REB@REFR    reset refresh in progress
         TM    REBFLG1,REB@WACT        was REB active?
         BZ    RFRSH50                 no, get next REB
         $OI   REBFLG1,REB@ACTV        yes, reactivate REB
         $NI   REBFLG1,XFF-REB@WACT    reset REB was active indicator
*
RFRSH50  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BZ    RFRSH55                 no, exit loop
         CLC   DSAMEMBR,REBMEMBR       refresh member name match?
         BE    RFRSH45                 yes, reset refresh flags
         B     RFRSH50                 no, loop
*
**       Issue rule refresh failed error msg
*
RFRSH55  DS    0H
         $UNLOCK EVTREBLK              unlock REB queue before $WTO
         $WTO  MID=ECF047I,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2==CL32'internal rule refresh error'
         B     RFRSHXIT                exit
*
**       Initialize service request element
*
RFRSH60  DS    0H
         L     R6,DSASREA              SRE cell address
         USING SRE,R6                  set addressability
         $XC   SRE(SRE@SIZE),SRE       zero SRE element
         $MVC  SREID,=CL4'SRE'         ID SRE
         $MVC  SREMEMBR,DSAMEMBR       init rule member name
         $MVC  SREJOBNM,DSAJOBNM       init rule job name
         $MVC  SRERUNAS,DSARUNAS       init RUNAS indicator
         $MVC  SREREBA,DSAQREB         init RFR-REB address
         $MVI  SREDATA,BLANK           clear data field
         $MVC  SREDATA+1(SREDATAL-1),SREDATA
         $OI   SREFLG1,SRE@REFR        refresh request indicator
         TM    DSAFLG1,DSA@WACT        was RFR-REB active?
         BZ    RFRSH70                 no, carry on
         $OI   SREFLG1,SRE@WACT        set RFR-REB was active
*
**       Queue SRE to rule refresh queue
*
RFRSH70  DS    0H
         $LOCK EVTRFRLK                lock RFR queue
         L     R5,DSASREA              get SRE address
         L     R3,EVTRFRQA             top SRE queue ptr
         $ST   R3,SRECHPTR             chain top refresh SRE ptr
         $ST   R5,EVTRFRQA             make my SRE top SRE
         L     R1,EVTRFCNT             get RFR processed count
         LA    R1,1(,R1)               add one
         $ST   R1,EVTRFCNT             update count
         $UNLOCK EVTRFRLK              unlock RFR queue
         DROP  R6
*
**       Schedule rule refresh service request
*
         $POST EVTRFECB                post RFRSRV subtask ECB
         XC    DSARC,DSARC             set RC
         B     RFRSHXIT                exit
*
**       Issue rule member name not found
*
RFRSH88  DS    0H
         $WTO  MID=ECF045I,                                            +
               VAR1=DSAMEMBR           show member name
         XC    DSARC,DSARC             set RC
         B     RFRSHXIT                exit
*
**       ABEND recovery clean up routine
*
RFRSH99  DS    0H
         $UNLOCK EVTRFRLK              unlock RFR-REB queue
         $UNLOCK EVTREBLK              unlock REB queue
*
RFRSHXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
RFREVENT MVC   DSAMEMBR(*-*),0(R3)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ADDEVNT                                                    */
*/*                                                                  */
*/* Function: Add Event rule command subroutine                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?ADD RULE=member-name{,RUNAS=,JOBNAME=,MODE=}          */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ADDEVNT  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         LR    R5,R1                   copy CMD entry address
         USING CMDE,R5                 set addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0996)    set error RSN
         $RETRY ADD0099,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              ABEND RSN
*
**       Validity check rule add command
*
ADD0000  DS    0H
         LH    R2,CMDSIZE              CMD verb length
         LA    R3,DSACMDTA             CMD verb address
         LA    R3,0(R2,R3)             CMD operand data address
         LR    R2,R3                   copy operand data address
         LA    R1,8                    member name length
         MVI   DSAMEMBR,BLANK          clear member-name field
         MVC   DSAMEMBR+1(DSAMEMBZ-1),DSAMEMBR
         CLI   0(R2),BLANK             null member name?
         BNE   ADD0010                 no, carry on
         MVC   DSARC,=AL4(RC8)         yes, command invalid
         B     ADDEXIT                 exit
*
ADD0010  DS    0H
         CLI   0(R2),COMMA             end of member name?
         BE    ADD0020                 yes, carry on
         CLI   0(R2),BLANK             end of member name?
         BE    ADD0020                 yes, carry on
         LA    R2,1(,R2)               walk thru text
         BCT   R1,ADD0010              loop
*
ADD0020  DS    0H
         LR    R4,R2                   copy operand address
         SLR   R2,R3                   get member name length
         BCTR  R2,0                    minus-1 for EXecute
         EX    R2,CPYEVENT             copy member name
*
**       Scan active REB queue for duplicates
*
         $LOCK EVTREBLK                lock active REB queue
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   ADD0030                 yes, carry on
         $UNLOCK EVTREBLK              unlock active REB queue
         B     ADD0050                 exit loop
*
ADD0030  DS    0H
         USING REB,R5                  REB addressability
         CLC   REBMEMBR,DSAMEMBR       member name match?
         BE    ADD0040                 yes, exit loop
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   ADD0030                 yes, loop
         $UNLOCK EVTREBLK              unlock active REB queue
         B     ADD0050                 no, exit loop
*
**       Issue rule member previously added msg
*
ADD0040  DS    0H
         $UNLOCK EVTREBLK              unlock active REB queue
         $WTO  MID=ECF047I,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2==CL32'rule already added; ADD rejected'
         XC    DSARC,DSARC             set RC
         B     ADDEXIT                 exit
*
**       Scan SRE queue for duplicate request
*
ADD0050  DS    0H
         $LOCK EVTADDLK                lock SRE queue
         ICM   R6,15,EVTADDQA          queued SREs?
         BNZ   ADD0060                 yes, carry on
         $UNLOCK EVTADDLK              unlock ADD queue
         B     ADD0080                 exit loop

*
ADD0060  DS    0H
         USING SRE,R6                  SRE addressability
         CLC   SREMEMBR,DSAMEMBR       member name match?
         BE    ADD0070                 yes, exit loop
         ICM   R6,15,SRECHPTR          more SREs?
         BNZ   ADD0060                 yes, loop
         $UNLOCK EVTADDLK              unlock SRE queue
         B     ADD0080                 no, exit loop
         DROP  R6
*
**       Issue add already in progress msg
*
ADD0070  DS    0H
         $UNLOCK EVTADDLK              unlock SRE queue
         $WTO  MID=ECF047I,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2==CL32'add already in progress'
         XC    DSARC,DSARC             set RC
         B     ADDEXIT                 exit
*
**       Issue add in progress msg
*
ADD0080  DS    0H
         $WTO  MID=ECF047I,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2==CL32'add in progress'
*
**       Obtain SRE Cell element
*
         $CPOOL GET,                   get SRE cell                    +
               CPID=EVTSRECP,          cell pool ID                    +
               CELL=DSASREA,           return SRE cell here            +
               MODE=COND               conditional request
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    ADD0090                 yes, carry on
*
**       Issue rule add failed error msg
*
         $WTO  MID=ECF047I,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2==CL32'internal rule add error'
         B     ADDEXIT                 exit
*
ADD0090  DS    0H
         L     R6,DSASREA              SRE cell address
         USING SRE,R6                  set addressability
         $XC   SRE(SRE@SIZE),SRE       zero SRE element
         $MVC  SREID,=CL4'SRE'         ID SRE
         $MVC  SREMEMBR,DSAMEMBR       copy member name
         $MVC  SREDATA,0(R4)           copy possible{RUNAS=|MODE=}
         $OI   SREFLG1,SRE@ADDR        set add request indicator
*
**       Queue SRE to rule active queue
*
         $LOCK EVTADDLK                lock SRE queue
         L     R5,DSASREA              get SRE address
         L     R3,EVTADDQA             top SRE queue ptr
         $ST   R3,SRECHPTR             chain top refresh SRE ptr
         $ST   R5,EVTADDQA             make my SRE top SRE
         L     R1,EVTADCNT             get ADD processed count
         LA    R1,1(,R1)               add one
         $ST   R1,EVTADCNT             update count
         $UNLOCK EVTADDLK              unlock ADD queue
         DROP  R6
*
**       Schedule rule add service request
*
         $POST EVTADECB                post ADDSRV subtask ECB
         XC    DSARC,DSARC             set RC
         B     ADDEXIT                 exit
*
**       ABEND recovery clean up routine
*
ADD0099  DS    0H
         $UNLOCK EVTADDLK              unlock SRE queue
         $UNLOCK EVTREBLK              unlock active REB queue
*
ADDEXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
CPYEVENT MVC   DSAMEMBR(*-*),0(R3)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: STCCMD                                                     */
*/*                                                                  */
*/* Function: Started task recovery command subroutine               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE addressability                              */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
STCCMD   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         LR    R5,R1                   copy CMD entry address
         USING CMDE,R5                 set addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3008)    set error RSN
         $RETRY STC0099,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              ABEND RSN
*
**       Obtain SRE Cell element
*
         $CPOOL GET,                                                   +
               CPID=EVTSRECP,          cell pool ID                    +
               CELL=DSASREA,           return SRE cell here            +
               MODE=UNCOND             unconditional request
         L     R6,DSASREA              SRE cell address
         USING SRE,R6                  set addressability
         $XC   SRE(SRE@SIZE),SRE       zero SRE element
         $MVC  SREID,=CL4'SRE'         ID SRE
         $MVC  SREDATA,DSACMDBF        copy command buffer
         $OI   SREFLG1,SRE@RCVY        set STC recovery indicator
*
**       Queue SRE to STC active queue
*
         $LOCK EVTSTCLK                lock SRE queue
         L     R5,DSASREA              get SRE address
         L     R3,EVTSTCQA             top SRE queue ptr
         $ST   R3,SRECHPTR             chain top refresh SRE ptr
         $ST   R5,EVTSTCQA             make my SRE top SRE
         L     R1,EVTSTCNT             get STC processed count
         LA    R1,1(,R1)               add one
         $ST   R1,EVTSTCNT             update count
         $UNLOCK EVTSTCLK              unlock STC queue
         DROP  R6
*
**       Schedule recovery service request
*
         $POST EVTSTECB                post STCCMD subtask ECB
         XC    DSARC,DSARC             set RC
         B     STCEXIT                 exit
*
**       ABEND recovery clean up routine
*
STC0099  DS    0H
         $UNLOCK EVTSTCLK              unlock SRE queue
*
STCEXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ACTEVNT                                                    */
*/*                                                                  */
*/* Function: Activate Event rule command subroutine                 */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?T ACT,RULE=member-name                                */
*/*           ?T ACTIVE,RULE=member-name                             */
*/*           ?SET ACT,RULE=member-name                              */
*/*           ?SET ACTIVE,RULE=member-name                           */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ACTEVNT  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         LR    R5,R1                   copy CMD entry address
         USING CMDE,R5                 set addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0960)    set error RSN
         $RETRY ACTIV99,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              ABEND RSN
*
**       Validity check command
*
         LH    R2,CMDSIZE              CMD verb length
         LA    R3,DSACMDTA             CMD verb address
         LA    R3,0(R2,R3)             CMD operand data address
         LR    R2,R3                   copy operand data address
         LA    R1,8                    member name length
         MVI   DSAMEMBR,BLANK          clear member-name field
         MVC   DSAMEMBR+1(DSAMEMBZ-1),DSAMEMBR
         CLI   0(R2),BLANK             null member name?
         BNE   ACTIV10                 no, carry on
         MVC   DSARC,=AL4(RC8)         yes, command invalid
         B     ACTIVXIT                exit
*
ACTIV10  DS    0H
         CLI   0(R2),BLANK             end of member name?
         BE    ACTIV20                 yes, carry on
         LA    R2,1(,R2)               walk thru text
         BCT   R1,ACTIV10              loop
*
ACTIV20  DS    0H
         SLR   R2,R3                   get member name length
         BCTR  R2,0                    minus-1 for EXecute
         EX    R2,ACTEVENT             copy member name
*
**       Locate matching command REB
*
         $LOCK EVTREBLK                lock REB queue
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   ACTIV40                 yes, carry on
*
ACTIV30  DS    0H
         $UNLOCK EVTREBLK              unlock REB queue before $WTO
         $WTO  MID=ECF045I,VAR1=DSAMEMBR member name not found
         XC    DSARC,DSARC             set RC
         B     ACTIVXIT                exit
*
ACTIV40  DS    0H
         USING REB,R5                  set addressability
         CLC   DSAMEMBR,REBMEMBR       member name found?
         BE    ACTIV60                 yes, carry on
*
ACTIV50  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   ACTIV40                 yes, loop
         TM    DSAFLG1,DSA@ACTV        event rule activated?
         BZ    ACTIV30                 no, error
         $UNLOCK EVTREBLK              unlock REB queue before $WTO
         $WTO  MID=ECF046I,VAR1=DSAMEMBR,VAR2==CL8'active'
         XC    DSARC,DSARC             set RC
         B     ACTIVXIT                release lock
*
ACTIV60  DS    0H
         TM    REBFLG2,REB@RDIS        rule disabled?
         BZ    ACTIV70                 no, carry on
         $UNLOCK EVTREBLK              unlock REB queue before $WTO
         XC    DSARC,DSARC             set RC
         $WTO  MID=ECF047I,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2==CL32'disabled rule. Command rejected'
         B     ACTIV99                 exit
*
ACTIV70  DS    0H
         $OI   REBFLG1,REB@ACTV        activate event rule
         OI    DSAFLG1,DSA@ACTV        indicate event rule activated
         B     ACTIV50                 check next REB
*
**       ABEND recovery clean up routine
*
ACTIV99  DS    0H
         $UNLOCK EVTREBLK              unlock REB queue
*
ACTIVXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
ACTEVENT MVC   DSAMEMBR(*-*),0(R3)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: NACEVNT                                                    */
*/*                                                                  */
*/* Function: Inactivate Event rule command subroutine               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?T INACT,RULE=member-name                              */
*/*           ?SET INACT,RULE=member-name                            */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
NACEVNT  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         LR    R5,R1                   copy CMD entry address
         USING CMDE,R5                 set addressability
         USING STKE,R13                STKE addressability
*
**       Activate retry
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0964)    set error RSN
         $RETRY NACTV99,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              ABEND RSN
*
**       Validity check command
*
         LH    R2,CMDSIZE              CMD verb length
         LA    R3,DSACMDTA             CMD verb address
         LA    R3,0(R2,R3)             CMD operand data address
         LR    R2,R3                   copy operand data address
         LA    R1,8                    member name length
         MVI   DSAMEMBR,BLANK          clear member-name field
         MVC   DSAMEMBR+1(DSAMEMBZ-1),DSAMEMBR
         CLI   0(R2),BLANK             null member name?
         BNE   NACTV10                 no, carry on
         MVC   DSARC,=AL4(RC8)         yes, command invalid
         B     NACTVXIT                exit
*
NACTV10  DS    0H
         CLI   0(R2),BLANK             end of member name?
         BE    NACTV20                 yes, carry on
         LA    R2,1(,R2)               walk thru text
         BCT   R1,NACTV10              loop
*
NACTV20  DS    0H
         SLR   R2,R3                   get member name length
         BCTR  R2,0                    minus-1 for EXecute
         EX    R2,NACEVENT             copy member name
*
**       Locate matching command REB
*
         $LOCK EVTREBLK                lock REB queue
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   NACTV40                 yes, carry on
*
NACTV30  DS    0H
         $UNLOCK EVTREBLK              unlock REB queue before $WTO
         $WTO  MID=ECF045I,VAR1=DSAMEMBR member name not found
         XC    DSARC,DSARC             set RC
         B     NACTVXIT                exit
*
NACTV40  DS    0H
         USING REB,R5                  set addressability
         CLC   DSAMEMBR,REBMEMBR       member name found?
         BE    NACTV60                 yes, carry on
*
NACTV50  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   NACTV40                 yes, loop
         TM    DSAFLG1,DSA@NACT        event rule inactivated?
         BZ    NACTV30                 no, error
         $UNLOCK EVTREBLK              unlock REB queue before $WTO
         $WTO  MID=ECF046I,VAR1=DSAMEMBR,VAR2==CL8'inactive'
         XC    DSARC,DSARC             set RC
         B     NACTVXIT                release lock
*
NACTV60  DS    0H
         TM    REBFLG2,REB@RDIS        rule disabled?
         BZ    NACTV70                 no, carry on
         $UNLOCK EVTREBLK              unlock REB queue before $WTO
         XC    DSARC,DSARC             set RC
         $WTO  MID=ECF047I,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2==CL32'disabled rule. Command rejected'
         B     NACTVXIT                exit
*
NACTV70  DS    0H
         OI    DSAFLG1,DSA@NACT        inactivate event rule
         $NI   REBFLG1,XFF-REB@ACTV    inactivate event rule
         $NI   REBFLG1,XFF-REB@WACT    reset was active indicator
         B     NACTV50                 check next REB
*
**       ABEND recovery clean up routine
*
NACTV99  DS    0H
         $UNLOCK EVTREBLK              unlock REB queue
*
NACTVXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
NACEVENT MVC   DSAMEMBR(*-*),0(R3)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DISPONE                                                    */
*/*                                                                  */
*/* Function: Display Event rule command subroutine                  *?
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?D RULE=member-name                                    */
*/*           ?DISPLAY RULE=member-name                              */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DISPONE  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         LR    R5,R1                   copy CMD entry address
         USING CMDE,R5                 set addressability
*
**       Validity check command
*
         LH    R2,CMDSIZE              CMD verb length
         LA    R3,DSACMDTA             CMD verb address
         LA    R3,0(R2,R3)             CMD operand data address
         LR    R2,R3                   copy operand data address
         LA    R1,8                    member name length
         MVI   DSAMEMBR,BLANK          clear member-name field
         MVC   DSAMEMBR+1(DSAMEMBZ-1),DSAMEMBR
         CLI   0(R2),BLANK             null member name?
         BNE   DISP000                 no, carry on
         MVC   DSARC,=AL4(RC8)         yes, command invalid
         B     DISPXIT                 exit
*
DISP000  DS    0H
         CLI   0(R2),BLANK             end of member name?
         BE    DISP010                 yes, carry on
         LA    R2,1(,R2)               walk thru text
         BCT   R1,DISP000              loop
*
DISP010  DS    0H
         SLR   R2,R3                   get member name length
         BCTR  R2,0                    minus-1 for EXecute
         EX    R2,COPYMEMN             copy member name
*
**       Locate requested event REB
*
         USING REB,R5                  REB addressability
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   DISP020                 yes, carry on
         $WTO  MID=ECF994I             no, event queue is empty
         B     DISPXIT                 exit
*
DISP020  DS    0H
         CLC   REBMEMBR,DSAMEMBR       member name match?
         BE    DISP030                 yes, carry on
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   DISP020                 yes, loop
         $WTO  MID=ECF045I,VAR1=DSAMEMBR member name not found
         XC    DSARC,DSARC             set RC
         B     DISPXIT                 exit
*
**       Storage obtain MLWTO buffer
*
DISP030  DS    0H
         GETMAIN RC,                                                   +
               LV=MSGXSIZE,            buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    DISP040                 yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     DISPXIT                 exit
*
**       Activate Recovery
*
DISP040  DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN0968)    set RSN
         $RETRY DISP099,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              ABEND RSN
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
         LA    R7,1                    update line count
*
**       Initialize DATA message header
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA,DISPTXT        init DATA line header
         LA    R7,1(,R7)               update line count
         LA    R3,MSGXMAXL             max lines loop value
*
**       Initialize DATA message line
*
DISP050  DS    0H
         LA    R6,MSGD@SZE(,R6)        next DATA line address
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line message address
         USING TXT,R4                  TEXT addressability
         MVI   TXTLINE,BLANK           clear DATA line
         MVC   TXTLINE+1(TXT@SIZE-1),TXTLINE
         MVC   TXTEVENT,REBMEMBR       init member name
         MVC   TXTEXEC,REBEXEC         init REXX/CLIST name
         MVC   TXTETYPE,REBETYPE       init event type
         TM    EVTFLG2,EVT@EDSP        SHOWREB=YES?
         BNZ   DISP055                 yes, show all event data
         CLC   REBETYPE,=CL8'MONITOR'  MONITOR type?               @06A
         BE    DISP060                 yes, carry on               @06A
         CLC   REBETYPE,=CL8'JOBINIT'  JOBINIT type?
         BE    DISP060                 yes, carry on
         CLC   REBETYPE,=CL8'JOBTERM'  JOBTERM type?
         BE    DISP060                 yes, carry on
         CLC   REBETYPE,=CL8'STCINIT'  STCINIT type?               @06A
         BE    DISP060                 yes, carry on               @06A
         CLC   REBETYPE,=CL8'STCTERM'  STCTERM type?               @06A
         BE    DISP060                 yes, carry on               @06A
         CLC   REBETYPE,=CL8'TSUINIT'  TSUINIT type?               @06A
         BE    DISP060                 yes, carry on               @06A
         CLC   REBETYPE,=CL8'TSUTERM'  TSUTERM type?               @06A
         BE    DISP060                 yes, carry on               @06A
*
DISP055  DS    0H
         MVC   TXTEDATA,REBEDATA       init event trigger
         B     DISP070                 carry on
*
DISP060  DS    0H
         MVC   TXTEDATA,REBEDATA+8     init event trigger          @07C
*
DISP070  DS    0H
         MVC   TXTSTAT,=CL8'Init'      set default status
         MVC   TXTRUNAS,REBRUNAS       init RUNAS attribute
         MVC   TXTMODE,=CL8'Active'    assume REB is active
         TM    REBFLG1,REB@ACTV        active REB?
         BNZ   DISP075                 yes, carry on
         MVC   TXTMODE,=CL8'Refresh'   assume refresh in progress
         TM    REBFLG1,REB@REFR        refresh in progress?
         BNZ   DISP085                 yes, carry on
         MVC   TXTMODE,=CL8'Inactive'  no, REB is inactive
*
DISP075  DS    0H
         TM    REBFLG1,REB@REFD        REB refreshed?
         BZ    DISP080                 no, carry on
         MVC   TXTSTAT,=CL8'Refresh'   indiate REB refreshed
         B     DISP085                 carry on
*
DISP080  DS    0H
         TM    REBFLG1,REB@RADD        REB added?
         BZ    DISP085                 no, carry on
         MVC   TXTSTAT,=CL8'Added'     indiate REB added
*
DISP085  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BZ    DISP090                 no, display END line
         CLC   REBMEMBR,DSAMEMBR       member name match?
         BNE   DISP085                 no, loop
         BCT   R3,DISP050              yes, next DATA line
*
**       Initialize END message line
*
DISP090  DS    0H
         LA    R6,MSGD@SZE(,R6)        END line address
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
         LA    R7,1(,R7)               update line count
         ST    R7,DSAWLINE             update count
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R7,DSAWLINE             get number of lines
         STC   R7,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
*
**       Storage release MLWTO buffer
*
DISP099  DS    0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    DISPXIT                 no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               SP=SP107,               subpool                         +
               LV=MSGXSIZE             buffer size
*
DISPXIT  DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYMEMN MVC   DSAMEMBR(*-*),0(R3)     EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
DISPTXT  DS    0CL70                   data line
         DC    CL1' '
         DC    CL8'MEMBER'             -rule member name
         DC    CL1' '
         DC    CL8'EVENT'              -Event type
         DC    CL1' '
         DC    CL8'MODE'               -{Active|Inactive}
         DC    CL1' '
         DC    CL8'UPDATE'             -{Added|Refresh|Init}
         DC    CL1' '
         DC    CL5'RUNAS'              -{STC|JOB|SUB}
         DC    CL1' '
         DC    CL8'EXEC'               -CLIST/REXX name
         DC    CL1' '
         DC    CL18'TRIGGER'           -Event data
DISP@SZE EQU   *-DISPTXT
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: STATUS                                                     */
*/*                                                                  */
*/* Function: Display Subsystem Status Command Subroutine            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?D STATUS                                              */
*/*           ?DISPLAY STATUS                                        */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
STATUS   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain MLWTO buffer
*
         LA    R1,STS@NUME             record count
         LA    R1,2(,R1)               add CONTROL & END lines
         ST    R1,DSAWLINE             save display lines
         LR    R0,R1                   copy record count
         LA    R3,80                   record size
         MR    R2,R0                   R3 has total length
         ST    R3,DSAWSIZE             MLWTO buffer size
         GETMAIN RC,                                                   +
               LV=(R3),                buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    STAT0000                yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     STATEXIT                exit
*
**       Activate Recovery
*
STAT0000 DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN0994)    set RSN
         $RETRY STAT0099,              activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
*
**       Capture subsystem status
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         USING STS,R4                  TEXT addressability
         MVC   STSLINE,TSTATUS         init status line
         MVC   STSDATA(8),=CL8'Active'
         TM    EVTFLG1,EVT@SACT        subsys active?
         BNZ   STAT0010                yes, carry on
         MVC   STSDATA(8),=CL8'Inactive'
         TM    EVTFLG1,EVT@TERM        subsys inactive?
         BNZ   STAT0010                yes, carry on
         MVC   STSDATA(8),=CL8'ABENDed'
         TM    EVTFLG1,EVT@TERM        subsys ABENDed?
         BNZ   STAT0010                yes, carry on
         MVC   STSDATA(8),=CL8'Unknown'
*
**       Capture initialization time & date
*
STAT0010 DS    0H
         TM    EVTFLG5,EVT@HZOS        zOS host?
         BZ    STAT0020                no, skip time & date
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TTIME           init Time & date
         LA    R3,DSATMAP              TMAP addrss
         USING TMAP,R3                 set addressability
         MVC   TIMESTR,TMODEL          time & date skeleton
         MVC   DSAWORD,EVTOSTCK        time
         $CNVX DSAVAR,DSAWORD          convert time
         MVC   TIMEHH,DSAVAR           show hours
         MVC   TIMEMM,DSAVAR+2         show minutes
         MVC   TIMESS,DSAVAR+4         show seconds
         MVC   TIMETH,DSAVAR+6         show hundreds
         MVC   DSAWORD,EVTOSTCK+8      date
         $CNVX DSAVAR,DSAWORD          convert date
         MVC   DATEMM,DSAVAR           month
         MVC   DATEDD,DSAVAR+2         day
         MVC   DATEYY,DSAVAR+4         year
         MVC   STSDATA,TIMESTR         show time & date
         DROP  R3
*
**       Capture initialization PARMLIB
*
STAT0020 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TPARMLIB        init PARMLIB field
         MVC   STSDATA,EVTPARML        init PARMLIB dataset
*
**       Capture initialization parameters
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TPARMS          init init parameters
         MVC   STSDATA(8),EVTMASTR     init PARMLIB PDS member
*
**       Capture Subsystem load module
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TLMOD           init LMOD field
         MVC   STSDATA(8),EVTSSMNM     init LMOD name
*
**       Capture Subsystem residence
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TLOAD           init residence ID
         MVC   STSDATA(8),=CL8'CSVDYLPA'
         TM    EVTFLG5,EVT@HLPA        CSVDYLPA loaded?
         BNZ   STAT0030                yes, carry on
         MVC   STSDATA(8),=CL8'CSA'
         TM    EVTFLG1,EVT@CSSM        CSA loaded?
         BNZ   STAT0030                yes, carry on
         MVC   STSDATA(8),=CL8'LPA'
*
**       Capture Subsystem PC call LX/EX
*
STAT0030 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TPC             init PC field
         $CNVX DSAVAR,EVTPCNUM         convert it
         MVC   STSDATA(8),DSAVAR
         MVC   STSDATA+8(7),=CL7'/ECFXPC'
*
**       Capture subsystem Authorization Inedx
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TAX             init PC field
         $CNVX DSAVAR,EVTAXSET         convert it
         MVC   STSDATA(3),=CL3'AX='
         MVC   STSDATA+3(1),DSAVAR+7   AX value
*
**       Capture Subsystem SVC call number
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TSVC            init SVC field
         MVC   STSDATA(3),EVTSVCNM     SVC number
         MVC   STSDATA+3(7),=CL7'/ECFSVC'
*
**       Capture Subsystem SSI listeners
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TSSI            init SSI listeners
         MVC   STSDATA(24),=CL24'EOT, EOM, MGCR/E, WTO/R'
*
**       Capture SSI Function Code 9 status
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TSCSR           init FC=9 control
         MVC   STSDATA(7),=CL7'Enabled'
         TM    EVTFLG5,EVT@G700        FC=9 enabled?
         BNZ   STAT0035                yes, carry on
         MVC   STSDATA(8),=CL8'Disabled'
*
**       Capture performance data capture
*
STAT0035 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TCAPTURE        init data capture status
         MVC   STSDATA(8),=CL8'Inactive'
         ICM   R3,15,EVTTQXAD          TQX init?
         BZ    STAT0050                no, carry on
         MVC   STSDATA(8),=CL8'Active'
         USING TQX,R3                  set addressability
*
**       Capture performance data interval
*
STAT0040 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TINTERVL        interval line
         $CNVD DSAVAR,TQXDINTV         TQE timer interval
         MVC   STSDATA(2),DSAVAR+6     init capture interval
         DROP  R3
*
**       Capture SVC screening status                              @08A
*
STAT0050 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TSCREEN         token name line
         MVC   STSDATA(8),=CL8'Inactive'
         CLC   EVTRPSVC,=CL8'NO'       SVCTRAP=NO set?
         BE    STAT0052                yes
         MVC   STSDATA(8),=CL8'Active' SVCTRAP={SVCLOG|SMFnnn) set
*
**       Capture System-level token name                           @06A
*
STAT0052 DS    0H
         TM    EVTFLG5,EVT@SLVL        System-Level Token created?
         BZ    STAT0055                no, skip display
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TTOKEN          token name line
         MVC   STSDATA(16),EVTKNMDL    init token name
*
**       Capture System-Level Token Data
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TKDATA          init data field
         $CNVX DSAVAR,EVTEVTAD         EVT address
         MVC   STSDATA(8),DSAVAR       show it
         $CNVX DSAVAR,EVTASCB          ASCB address
         MVC   STSDATA+9(8),DSAVAR     show it
         LA    R1,EVTSVC               SVC instruction address
         ST    R1,DSAWORD              init address
         $CNVX DSAVAR,DSAWORD          SVC instruction address
         MVC   STSDATA+18(8),DSAVAR    show it
         $CNVX DSAVAR,EVTPCNUM         PC EX/LX
         MVC   STSDATA+27(8),DSAVAR    show it
*
**       Capture SAF authorization class
*
STAT0055 DS    0H                                                  @06A
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TCLASS          init init parameters
         MVC   STSDATA(8),EVTCLASS     init SAF auth-class
*
**       Capture subsysytem debug status
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TDEBUG          init debug status
         MVC   STSDATA(3),=CL3'On'
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BNZ   STAT0060                yes, carry on
         MVC   STSDATA(3),=CL3'Off'
*
**       Capture subsysytem trace status
*
STAT0060 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TTRACE          init trace status
         MVC   STSDATA(3),=CL3'On'
         TM    EVTFLG2,EVT@TRCE        TRACE=ON?
         BNZ   STAT0070                yes, carry on
         MVC   STSDATA(3),=CL3'Off'
*
**       Started Task Recovery Status
*
STAT0070 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TMSAS           init MSAS status
         MVC   STSDATA(4),=CL4'Test'
         TM    EVTFLG4,EVT@MSAS        MSAS=ONLY?
         BNZ   STAT0080                yes, carry on
         MVC   STSDATA(4),=CL4'Only'
*
**       Capture System Dumps Status
*
STAT0080 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         MVC   STSLINE,TSDUMP          init trace status
         MVC   STSDATA(3),=CL3'Yes'
         TM    EVTFLG2,EVT@DUMP        SDUMP=YES?
         BNZ   STAT0090                yes, carry on
         MVC   STSDATA(3),=CL4'No'
*
**       Initialize END message line
*
STAT0090 DS    0H
         LA    R6,MSGD@SZE(,R6)        END line address
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,DSAWLINE             get number of lines
         STC   R1,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
*
**       Storage release MLWTO buffer
*
STAT0099 DS    0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    STATEXIT                no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         L     R0,DSAWSIZE             buffer size
         FREEMAIN RC,                                                  +
               A=(R1),                 buffer address                  +
               LV=(R0),                buffer size                     +
               SP=SP107                subpool
*
STATEXIT DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
STSTAB   DS    0C
TSTATUS  DC    CL70' Subsystem Status .............'
TTIME    DC    CL70'   Local Start Time ...........'
TPARMLIB DC    CL70' Initialization PARMLIB .......'
TPARMS   DC    CL70'   Initialization Member ......'
TCLASS   DC    CL70' Security Server Class ........'
TLMOD    DC    CL70' Subsystem Load Module ........'
TLOAD    DC    CL70'   Loaded in Common by ........'
TPC      DC    CL70' Stacking PC Router SLX .......'
TAX      DC    CL70'   Authorization Index ........'
TSVC     DC    CL70' Supervisor Call Router .......'
TSSI     DC    CL70' Event Listeners ..............'
TSCSR    DC    CL70'   IEAVG700 Function Code 9 ...'
TCAPTURE DC    CL70' Performance Data Capture .....'
TSCREEN  DC    CL70' SVC screening ................'
TINTERVL DC    CL70'   Capture Interval ...........'
TTOKEN   DC    CL70' System-Level Token ...........'
TKDATA   DC    CL70'   Token Data .................'
TDEBUG   DC    CL70' Debug Message Logging ........'
TTRACE   DC    CL70' Trace Recording ..............'
TMSAS    DC    CL70' MSAS Recovery ................'
TSDUMP   DC    CL70' SDUMP Capture ................'
STSLASTE DC    CL70'                               '
STS@SZE  EQU   *-STSLASTE
STS@NUME EQU   (*-STSTAB)/STS@SZE
         DS    0C
TMODEL   DC    CL38'hh:mm:ss:th mm/dd/yyyy'
TMODL@SZ EQU   *-TMODEL
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ISTATUS                                                    */
*/*                                                                  */
*/* Function: Display Internal Subsystem Status Command Subroutine   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?D ISTATUS                                             */
*/*           ?DISPLAY ISTATUS                                       */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ISTATUS  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain MLWTO buffer
*
         L     R0,DSASTORZ             MLWTO buffer size           @05A
         GETMAIN RC,                                                   +
               LV=(0),                 size                        @05C+
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    ISTAT010                yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     ISTATXIT                exit
*
**       Activate Recovery
*
ISTAT010 DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         AL    R1,DSASTORZ             MLWTO buffer-end address    @05A
         ST    R1,DSASTORE             save it overflow check      @05A
         MVC   DSARSN,=AL4(RSN0972)    set RSN
         $RETRY ISTAT099,              activate retry                  +
               SDUMP=NO,               take SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
         LA    R7,1                    update line count
*
**       Initialize DATA message line
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         USING ZXT,R4                  TEXT addressability
         MVI   ZXTLINE,BLANK           clear DATA line
         MVC   ZXTLINE+1(ZXT@SIZE-1),ZXTLINE
         MVC   MSGDDATA,LINESSCT       init DATA line
         $CNVX DSAVAR,EVTSSCT          SSCT address
         MVC   ZXTCID,DSAVAR           show SSCT address
         ST    R11,DSAWORD             store EVT address
         $CNVX DSAVAR,DSAWORD          translate date
         MVC   ZXTCID2,DSAVAR          show EVT address
         $CNVX DSAVAR,EVTREBQA         REB queue address
         MVC   ZXTCID3,DSAVAR          show address
         $CNVX DSAVAR,EVTREBLK         REB lockword
         MVC   ZXTCID4,DSAVAR          show REB lockword
         L     R1,EVTSYLVL             IEEVIPL FSA address
         MVC   DSAWORD,0(R1)           store token able addrss
         $CNVX DSAVAR,DSAWORD          convert TKN address
         MVC   ZXTCID5,DSAVAR          show address
         LA    R7,1(,R7)               update line count
*
**       Initialize TQE DATA message line
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   MSGDDATA,LINETQE        init DATA line
         $CNVX DSAVAR,EVTTQEAD         TQE element address
         MVC   ZXTCID,DSAVAR           show TQE address
         $CNVX DSAVAR,EVTLXVAL         SLX value
         MVC   ZXTCID2,DSAVAR          show address
         $CNVX DSAVAR,EVTSVCEA         SVC table entry
         MVC   ZXTCID3,DSAVAR          show address
         L     R3,EVTSTKAD             jobstep STK address
         MVC   DSAWORD,STKFLAGS-STK(R3) copy flags
         $CNVX DSAVAR,DSAWORD          format flags
         MVC   ZXTCID4,DSAVAR          show flags
         $CNVX DSAVAR,EVTSSICT         SSI listener count          @05A
         MVC   ZXTCID5,DSAVAR          show listener count         @05A
*
**       Initialize SUB DATA message line
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVI   ZXTLINE,BLANK           clear DATA line
         MVC   ZXTLINE+1(ZXT@SIZE-1),ZXTLINE
         MVC   MSGDDATA(14),LINESUB    show ECFSUB
         MVC   MSGDDATA+7(4),EVTSUBNM  show subsystem name
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   MSGDDATA,LINETCB        init DATA line
*
         L     R15,EVTJSTCB            JS-TCB address
         ST    R15,DSAWORD             set value
         USING TCB,R15                 addressability
         MVC   DSAWORD(1),TCBPKF       copy protect key
         DROP  R15
         $CNVX DSAVAR,DSAWORD          printable
*
         MVC   ZXTCID,DSAVAR           show jobstep TCB address
         $CNVX DSAVAR,EVTJSECB         jobstep ECB address
         MVC   ZXTCBL2,=CL3'ECB'       show ECB ID
         MVC   ZXTCID2,DSAVAR          show word contents
         $CNVX DSAVAR,EVTFLGS          EVT flags
         MVC   ZXTCBL3,=CL3'FLG'       show flags ID
         MVC   ZXTCID3,DSAVAR          show flags
         $CNVX DSAVAR,EVTREQA          IEFJSREQ EPA
         MVC   ZXTCBL4,=CL3'REQ'       show ID
         MVC   ZXTCID4,DSAVAR          show address
*
**       Initialize S34 DATA message line
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVI   ZXTLINE,BLANK           clear DATA line
         MVC   ZXTLINE+1(ZXT@SIZE-1),ZXTLINE
         MVC   MSGDDATA(14),LINES34    show ECFSRV(S34SRV)
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   MSGDDATA,LINETCB        init DATA line
*
         L     R15,EVTCMTCB            S34-TCB address
         ST    R15,DSAWORD             set value
         USING TCB,R15                 addressability
         MVC   DSAWORD(1),TCBPKF       copy protect key
         DROP  R15
         $CNVX DSAVAR,DSAWORD          printable
*
         MVC   ZXTCID,DSAVAR           show address
         $CNVX DSAVAR,EVTCMDQA         S34-REB queue address
         MVC   ZXTCID2,DSAVAR          show address
         $CNVX DSAVAR,EVTCMDLK         show lockword
         MVC   ZXTCID3,DSAVAR          show S34 lockword
         $CNVD DSAVAR,EVTCMCNT         S34-EXC count
         MVC   ZXTCID4,DSAVAR          show count
*
**       Initialize COM DATA message line
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVI   ZXTLINE,BLANK           clear DATA line
         MVC   ZXTLINE+1(ZXT@SIZE-1),ZXTLINE
         MVC   MSGDDATA(14),LINECOM    show ECFSRV(COMSRV)
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   MSGDDATA,LINETCB        init DATA line
*
         L     R15,EVTCOTCB            COM-TCB address
         ST    R15,DSAWORD             set value
         USING TCB,R15                 addressability
         MVC   DSAWORD(1),TCBPKF       copy protect key
         DROP  R15
         $CNVX DSAVAR,DSAWORD          printable
*
         MVC   ZXTCID,DSAVAR           show address
         $CNVX DSAVAR,EVTCOMQA         COM queue address
         MVC   ZXTCBL2,=CL3'SRE'       show ID
         MVC   ZXTCID2,DSAVAR          show address
         $CNVX DSAVAR,EVTCOMLK         COM lockword
         MVC   ZXTCID3,DSAVAR          show lockword
         $CNVD DSAVAR,EVTCOCNT         COM=EXC count
         MVC   ZXTCID4,DSAVAR          show count
*
**       Initialize S35 DATA message line
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVI   ZXTLINE,BLANK           clear DATA line
         MVC   ZXTLINE+1(ZXT@SIZE-1),ZXTLINE
         MVC   MSGDDATA(14),LINES35    show ECFSRV(S35SRV)
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   MSGDDATA,LINETCB        init DATA line
*
         L     R15,EVTWTTCB            S35-TCB address
         ST    R15,DSAWORD             set value
         USING TCB,R15                 addressability
         MVC   DSAWORD(1),TCBPKF       copy protect key
         DROP  R15
         $CNVX DSAVAR,DSAWORD          printable
*
         MVC   ZXTCID,DSAVAR           show address
         $CNVX DSAVAR,EVTWTOQA         S35-REB queue address
         MVC   ZXTCID2,DSAVAR          show address
         $CNVX DSAVAR,EVTWTOLK         S35 lockword
         MVC   ZXTCID3,DSAVAR          show lockword
         $CNVD DSAVAR,EVTWTCNT         S35=EXC count
         MVC   ZXTCID4,DSAVAR          show count
*
**       Initialize RFR DATA message line
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVI   ZXTLINE,BLANK           clear DATA line
         MVC   ZXTLINE+1(ZXT@SIZE-1),ZXTLINE
         MVC   MSGDDATA(14),LINEREF    show ECFSRV(RFRSRV)
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   MSGDDATA,LINETCB        init DATA line
*
         L     R15,EVTRFTCB            RFR-TCB address
         ST    R15,DSAWORD             set value
         USING TCB,R15                 addressability
         MVC   DSAWORD(1),TCBPKF       copy protect key
         DROP  R15
         $CNVX DSAVAR,DSAWORD          printable
*
         MVC   ZXTCID,DSAVAR           show address
         $CNVX DSAVAR,EVTRFRQA         RFR queue address
         MVC   ZXTCBL2,=CL3'SRE'       show ID
         MVC   ZXTCID2,DSAVAR          show address
         $CNVX DSAVAR,EVTRFRLK         RFR lockword
         MVC   ZXTCID3,DSAVAR          show lockword
         $CNVX DSAVAR,EVTSTGQA         STG-REB queue address
         MVC   ZXTCBL4,=CL3'STG'       show ID
         MVC   ZXTCID4,DSAVAR          show address
         $CNVD DSAVAR,EVTRFCNT         RFR-EXC count
         MVC   ZXTCBL5,=CL4'EXC='      show ID
         MVC   ZXTCID5,DSAVAR          show count
*
**       Initialize ADD DATA message line
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVI   ZXTLINE,BLANK           clear DATA line
         MVC   ZXTLINE+1(ZXT@SIZE-1),ZXTLINE
         MVC   MSGDDATA(14),LINEADD    show ECFSRV(ADDSRV)
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   MSGDDATA,LINETCB        init DATA line
*
         L     R15,EVTADTCB            ADD-TCB address
         ST    R15,DSAWORD             set value
         USING TCB,R15                 addressability
         MVC   DSAWORD(1),TCBPKF       copy protect key
         DROP  R15
         $CNVX DSAVAR,DSAWORD          printable
*
         MVC   ZXTCID,DSAVAR           show address
         $CNVX DSAVAR,EVTADDQA         ADD queue address
         MVC   ZXTCBL2,=CL3'SRE'       show ID
         MVC   ZXTCID2,DSAVAR          show address
         $CNVX DSAVAR,EVTADDLK         ADD lockword
         MVC   ZXTCID3,DSAVAR          show lockword
         $CNVX DSAVAR,EVTSTGQA         STG-REB queue address
         MVC   ZXTCBL4,=CL3'STG'       show ID
         MVC   ZXTCID4,DSAVAR          show address
         $CNVD DSAVAR,EVTADCNT         ADD-EXC count
         MVC   ZXTCBL5,=CL4'EXC='      show ID
         MVC   ZXTCID5,DSAVAR          show count
*
**       Initialize STC DATA message line
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVI   ZXTLINE,BLANK           clear DATA line
         MVC   ZXTLINE+1(ZXT@SIZE-1),ZXTLINE
         MVC   MSGDDATA(14),LINESTC    show ECFSRV(STCSRV)
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   MSGDDATA,LINETCB        init DATA line
*
         L     R15,EVTSTTCB            STC-TCB address
         ST    R15,DSAWORD             set value
         USING TCB,R15                 addressability
         MVC   DSAWORD(1),TCBPKF       copy protect key
         DROP  R15
         $CNVX DSAVAR,DSAWORD          printable
*
         MVC   ZXTCID,DSAVAR           show address
         $CNVX DSAVAR,EVTSTCQA         STC queue address
         MVC   ZXTCBL2,=CL3'SRE'       show ID
         MVC   ZXTCID2,DSAVAR          show address
         $CNVX DSAVAR,EVTSTCLK         STC lockword
         MVC   ZXTCID3,DSAVAR          show lockword
         $CNVD DSAVAR,EVTSTCNT         STC=EXC count
         MVC   ZXTCID4,DSAVAR          show count
*
**       Initialize DIE DATA message line
*
         LA    R6,MSGD@SZE(,R6)        next DATA line              @03A
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model             @03A
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model        @03A
         LA    R7,1(,R7)               update line count           @03A
         LA    R4,MSGDDATA             DATA line address           @03A
         MVI   ZXTLINE,BLANK           clear DATA line             @03A
         MVC   ZXTLINE+1(ZXT@SIZE-1),ZXTLINE                       @03A
         MVC   MSGDDATA(14),LINEDIE    show ECFSRV(DIESRV)         @03A
*
         LA    R6,MSGD@SZE(,R6)        next DATA line              @03A
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model             @03A
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model        @03A
         LA    R7,1(,R7)               update line count           @03A
         LA    R4,MSGDDATA             DATA line address           @03A
         MVC   MSGDDATA,LINETCB        init DATA line              @03A
*
         L     R15,EVTDITCB            DIE-TCB address
         ST    R15,DSAWORD             set value
         USING TCB,R15                 addressability
         MVC   DSAWORD(1),TCBPKF       copy protect key
         $CNVX DSAVAR,DSAWORD          printable
         MVC   ZXTCID,DSAVAR           show address                @03A
         DROP  R15
*
         MVC   ZXTCBL2,=CL3'ZVT'       show ID                     @03C
         MVC   ZXTCBL3,=CL3'SRB'       show ID                     @03A
         MVC   ZXTCBL4,=CL3'INT'       show ID                     @03A
         MVC   ZXTCBL5,=CL4'POP='      show ID                     @03A
         MVC   ZXTCID4,=CL8'00000000'  show null count             @03A
         MVC   ZXTCID5,=CL8'00000000'  show null count             @03A
         $CNVX DSAVAR,EVTDIEQA         DIE queue address           @03A
         MVC   ZXTCID2,DSAVAR          show address                @03A
         ICM   R3,15,EVTTQXAD          YQX address                 @03A
         BZ    ISTAT020                no, skip formatting         @03A
         USING TQX,R3                  addressability              @03A
         $CNVD DSAVAR,TQXSRBCT         SRB dispatch count          @03A
         MVC   ZXTCID3,DSAVAR          show count                  @03A
         $CNVD DSAVAR,TQXDINTV         TQE timer interval          @03A
         MVC   ZXTCID4,DSAVAR          show interval               @03A
         $CNVD DSAVAR,TQXDIECT         DIE dispatch count          @03A
         MVC   ZXTCID5,DSAVAR          show count                  @03A
         DROP  R3                                                  @03A
*
**       Initialize SYS DATA message line
*
ISTAT020 DS    0H                                                  @06M
         LA    R6,MSGD@SZE(,R6)        next DATA line              @06A
         CL    R6,DSASTORE             MLWTO buffer overflow?      @06A
         BNL   ISTATERR                yes, buffer overflow errors @06A
         L     R1,=A(MSXD)             DATA line model             @06A
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model        @06A
         LA    R7,1(,R7)               update line count           @06A
         LA    R4,MSGDDATA             DATA line address           @06A
         MVI   ZXTLINE,BLANK           clear DATA line             @06A
         MVC   ZXTLINE+1(ZXT@SIZE-1),ZXTLINE                       @06A
         MVC   MSGDDATA(14),LINESYS    show ECFSRV(SYSSRV)         @06A
*
         LA    R6,MSGD@SZE(,R6)        next DATA line              @06A
         CL    R6,DSASTORE             MLWTO buffer overflow?      @06A
         BNL   ISTATERR                yes, buffer overflow errors @06A
         L     R1,=A(MSXD)             DATA line model             @06A
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model        @06A
         LA    R7,1(,R7)               update line count           @06A
         LA    R4,MSGDDATA             DATA line address           @06A
         MVC   MSGDDATA,LINETCB        init DATA line              @06A
*
         L     R15,EVTSYTCB            SYS-TCB address             @06A
         ST    R15,DSAWORD             set value                   @06A
         USING TCB,R15                 addressability              @06A
         MVC   DSAWORD(1),TCBPKF       copy protect key            @06A
         $CNVX DSAVAR,DSAWORD          printable                   @06A
         MVC   ZXTCID,DSAVAR           show address                @06A
         DROP  R15
*
         MVC   ZXTCBL2,=CL3'MCT'       show ID                     @06C
         $CNVX DSAVAR,EVTSYMCT         MCT table address           @06A
         MVC   ZXTCID2,DSAVAR          show MCT adddress           @06A
         MVC   ZXTCBL3,=CL3'POP'       show ID                     @06A
         $CNVD DSAVAR,EVTSYCNT         POP count                   @06A
         MVC   ZXTCID3,DSAVAR          show MCT adddress           @06A
         MVC   ZXTCBL4,=CL3'INT'       show ID                     @06A
         MVC   ZXTCID4,EVTSYSTM        show timer interval         @06A
         MVC   ZXTCBL5,=CL4'WTO='      show ID                     @06A
         $CNVD DSAVAR,EVTSYWTO         WTO messages issued         @06A
         MVC   ZXTCID5,DSAVAR          show WTOs                   @06A
*
**       Initialize SVC DATA message line
*
         LA    R6,MSGD@SZE(,R6)        next DATA line              @08A
         CL    R6,DSASTORE             MLWTO buffer overflow?
         BNL   ISTATERR                yes, buffer overflow errors
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVI   ZXTLINE,BLANK           clear DATA line
         MVC   ZXTLINE+1(ZXT@SIZE-1),ZXTLINE
         MVC   MSGDDATA(14),LINESVC    show ECFSRV(SVCSRV)
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?
         BNL   ISTATERR                yes, buffer overflow errors
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   MSGDDATA,LINETCB        init DATA line
*
         L     R15,EVTSVTCB            SVC-TCB address
         ST    R15,DSAWORD             set value
         USING TCB,R15                 addressability
         MVC   DSAWORD(1),TCBPKF       copy protect key
         DROP  R15
         $CNVX DSAVAR,DSAWORD          printable
         MVC   ZXTCID,DSAVAR           show TCB address
*
         MVC   ZXTCBL2,=CL3'SVS'       show front-end SVC count
         $CNVX DSAVAR,EVTSVSCT         SVC queue address
         MVC   ZXTCID2,DSAVAR          show address
*
         MVC   ZXTCBL3,=CL3'S60'       show ID
         $CNVX DSAVAR,EVTS60CT         printable
         MVC   ZXTCID3,DSAVAR          show SVC count
*
         MVC   ZXTCBL4,=CL3'SVC'       show ID
         $CNVX DSAVAR,EVTSVCCT         printable
         MVC   ZXTCID4,DSAVAR          show back-end SVC count
*
         MVC   ZXTCBL5,=CL4'VRB='      show ID
         $CNVX DSAVAR,EVTSVRBC         printable
         MVC   ZXTCID5,DSAVAR          show SVRB SVC count
*
**       Initialize END message line
*
         LA    R6,MSGD@SZE(,R6)        END line address
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   ISTATERR                yes, buffer overflow errors @05A
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
         LA    R7,1(,R7)               update line count
         ST    R7,DSAWLINE             update count
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R7,DSAWLINE             get number of lines
         STC   R7,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
         B     ISTAT099                carry on                    @05A
*
**       Storage buffer overflow error
*
ISTATERR DS    0H                                                  @05A
         $WTO  MID=ECF069E,            error msg                   @05A+
               VAR1=DSACMDBF           show command                @05A
*
**       Storage release MLWTO buffer
*
ISTAT099 DS    0H
         L     R0,DSASTORZ             size                        @05A
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    ISTATXIT                no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               LV=(0),                 buffer size                 @05C+
               SP=SP107                subpool
*
ISTATXIT DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
LINESUB  DC    CL14'ECFSUB(ECF )'
LINES34  DC    CL14'ECFSRV(S34SRV)'
LINES35  DC    CL14'ECFSRV(S35SRV)'
LINEREF  DC    CL14'ECFSRV(RFRSRV)'
LINEADD  DC    CL14'ECFSRV(ADDSRV)'
LINECOM  DC    CL14'ECFSRV(COMSRV)'
LINESTC  DC    CL14'ECFSRV(STCSRV)'
LINEDIE  DC    CL14'ECFSRV(DIESRV)'                                @03A
LINESYS  DC    CL14'ECFSRV(SYSSRV)'                                @06A
LINESVC  DC    CL14'ECFSRV(SVCSRV)'                                @08A
LINETCB  DC    CL70' TCB=00000000 REB=00000000 LCK=00000000 EXC='
LINESSCT DC    CL70'SSCT=00000000 EVT=00000000 REB=00000000 LCK=0000000+
               0 TKN=00000000'
LINETQE  DC    CL70' TQE=00000000 SLX=00000000 SVC=00000000 STK=0000000+
               0 SSI=00000000'
LINNE@CT EQU   *-LINESSCT
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SSIDATA                                                    */
*/*                                                                  */
*/* Function: Display SSI debugging data subroutine                  */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?D SSIDATA                                             */
*/*           ?DISPLAY SSIDATA                                       */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SSIDATA  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain MLWTO buffer
*
         L     R0,DSASTORZ             MLWTO buffer size           @05A
         GETMAIN RC,                                                   +
               LV=(0),                 size                        @05C+
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    SSIDTA05                yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     SSIDTAXT                exit
*
**       Activate Recovery
*
SSIDTA05 DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         AL    R1,DSASTORZ             MLWTO buffer-end address    @05A
         ST    R1,DSASTORE             save it overflow check      @05A
         MVC   DSARSN,=AL4(RSN0998)    set RSN
         $RETRY SSIDTA99,              activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              ABEND RSN
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
         LA    R7,1                    update line count
*
**       Initialize SVC34 DATA message lines
*
         LA    R2,3                    XDATA loop value
         LA    R3,EVTX34DA             XDATA buffer address
         LA    R6,MSGC@SZE(,R6)        DATA line address
         B     SSIDTA15                carry on
*
SSIDTA10 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   SSIDTAER                yes, buffer overflow errors @05A
*
SSIDTA15 DS    0H
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         USING SXT,R4                  TEXT addressability
         MVI   SXTLINE,BLANK           clear DATA line
         MVC   SXTLINE+1(SXT@SIZE-1),SXTLINE
         MVC   MSGDDATA,LINEXDTA       init DATA line
         MVC   SXTID,=CL8'S34XDATA'    ID XDATA
         LA    R7,1(,R7)               update line count
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA1,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA2,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA3,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA4,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA5,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA6,DSAVAR         show hex data
         BCT   R2,SSIDTA10             loop
*
SSIDTA20 DS    0H
         USING MSGD,R6                 MSGD addressability
         LA    R6,MSGD@SZE(,R6)        DATA line address
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   SSIDTAER                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         USING SXT,R4                  TEXT addressability
         MVI   SXTLINE,BLANK           clear DATA line
         MVC   SXTLINE+1(SXT@SIZE-1),SXTLINE
         MVC   SXTID,=CL8'S34CDATA'    ID CDATA
         MVC   SXTDATA1(61),EVTC34DA   show decimal data
         LA    R7,1(,R7)               update line count
         CLC   EVTC34DA(61),NODATA     any data to display?
         BNE   SSIDTA25                yes, carry on
         MVC   SXTDATA1(7),=C'No data' no, show no data
*
**       Initialize SVC35 DATA message lines
*
SSIDTA25 DS    0H
         LA    R2,3                    XDATA loop value
         LA    R3,EVTX35DA             XDATA buffer address
*
SSIDTA30 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   SSIDTAER                yes, buffer overflow errors @05A
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         USING SXT,R4                  TEXT addressability
         MVI   SXTLINE,BLANK           clear DATA line
         MVC   SXTLINE+1(SXT@SIZE-1),SXTLINE
         MVC   MSGDDATA,LINEXDTA       init DATA line
         MVC   SXTID,=CL8'S35XDATA'    ID XDATA
         LA    R7,1(,R7)               update line count
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA1,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA2,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA3,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA4,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA5,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SXTDATA6,DSAVAR         show hex data
         BCT   R2,SSIDTA30             loop
*
SSIDTA40 DS    0H
         USING MSGD,R6                 MSGD addressability
         LA    R6,MSGD@SZE(,R6)        DATA line address
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   SSIDTAER                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         USING SXT,R4                  TEXT addressability
         MVI   SXTLINE,BLANK           clear DATA line
         MVC   SXTLINE+1(SXT@SIZE-1),SXTLINE
         MVC   SXTID,=CL8'S35CDATA'    ID CDATA
         MVC   SXTDATA1(61),EVTC35DA   show decimal data
         LA    R7,1(,R7)               update line count
         CLC   EVTC35DA(61),NODATA     any data to display?
         BNE   SSIDTA50                yes, carry on
         MVC   SXTDATA1(7),=C'No data' no, show no data
*
**       Initialize END message line
*
SSIDTA50 DS    0H
         LA    R6,MSGD@SZE(,R6)        END line address
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   SSIDTAER                yes, buffer overflow errors @05A
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
         LA    R7,1(,R7)               update line count
         ST    R7,DSAWLINE             update count
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R7,DSAWLINE             get number of lines
         STC   R7,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
         B     SSIDTA99                carry on                    @05A
*
**       Storage buffer overflow error
*
SSIDTAER DS    0H                                                  @05A
         $WTO  MID=ECF069E,            error msg                   @05A+
               VAR1=DSACMDBF           show command                @05A
*
**       Storage release MLWTO buffer
*
SSIDTA99 DS    0H
         L     R0,DSASTORZ             MLWTO buffer size           @05A
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    SSIDTAXT                no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               LV=(0),                 buffer size                 @05C+
               SP=SP107                subpool
*
SSIDTAXT DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
NODATA   DC    CL61' '
LINEXDTA DC    CL70'S3??DATA 00000000 00000000 00000000 00000000 000000+
               00 00000000'
LINE@XDZ EQU   *-LINEXDTA
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SVCDATA                                                    */
*/*                                                                  */
*/* Function: Display SVC debugging data subroutine                  */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?D SVCDATA                                             */
*/*           ?DISPLAY SVCDATA                                       */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SVCDATA  $SUBINI                                                 99@08A
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain MLWTO buffer
*
         L     R0,DSASTORZ             MLWTO buffer size
         GETMAIN RC,                                                   +
               LV=(0),                 size                            +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    SVCDTA05                yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     SVCDTAXT                exit
*
**       Activate Recovery
*
SVCDTA05 DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         AL    R1,DSASTORZ             MLWTO buffer-end address
         ST    R1,DSASTORE             save it overflow check
         MVC   DSARSN,=AL4(RSN0998)    set RSN
         $RETRY SVCDTA99,              activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              ABEND RSN
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
         LA    R7,1                    update line count
*
**       Initialize SVC DATA message lines
*
         LA    R2,3                    XDATA loop value
         LA    R3,EVTXDATA             XDATA buffer address
         LA    R6,MSGC@SZE(,R6)        DATA line address
         B     SVCDTA15                carry on
*
SVCDTA10 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         CL    R6,DSASTORE             MLWTO buffer overflow?
         BNL   SVCDTAER                yes, buffer overflow errors
*
SVCDTA15 DS    0H
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         USING SVC,R4                  TEXT addressability
         MVI   SVCLINE,BLANK           clear DATA line
         MVC   SVCLINE+1(SVC@SIZE-1),SVCLINE
         MVC   MSGDDATA,LINESDTA       init DATA line
         MVC   SVCID,=CL8'SVCXDATA'    ID XDATA
         LA    R7,1(,R7)               update line count
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SVCDATA1,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SVCDATA2,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SVCDATA3,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SVCDATA4,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SVCDATA5,DSAVAR         show hex data
         LA    R3,4(,R3)
         MVC   DSAWORD,0(R3)
         $CNVX DSAVAR,DSAWORD          convert to hex
         MVC   SVCDATA6,DSAVAR         show hex data
         BCT   R2,SVCDTA10             loop
*
SVCDTA20 DS    0H
         USING MSGD,R6                 MSGD addressability
         LA    R6,MSGD@SZE(,R6)        DATA line address
         CL    R6,DSASTORE             MLWTO buffer overflow?
         BNL   SVCDTAER                yes, buffer overflow errors
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R4,MSGDDATA             DATA line address
         USING SVC,R4                  TEXT addressability
         MVI   SVCLINE,BLANK           clear DATA line
         MVC   SVCLINE+1(SVC@SIZE-1),SVCLINE
         MVC   SVCID,=CL8'SVCCDATA'    ID CDATA
         MVC   SVCDATA1(61),EVTCDATA   show decimal data
         LA    R7,1(,R7)               update line count
         CLC   EVTCDATA(61),SVCNDATA   any data to display?
         BNE   SVCDTA30                yes, carry on
         MVC   SVCDATA1(7),=C'No data' no, show no data
*
**       Initialize END message line
*
SVCDTA30 DS    0H
         LA    R6,MSGD@SZE(,R6)        END line address
         CL    R6,DSASTORE             MLWTO buffer overflow?
         BNL   SVCDTAER                yes, buffer overflow errors
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
         LA    R7,1(,R7)               update line count
         ST    R7,DSAWLINE             update count
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R7,DSAWLINE             get number of lines
         STC   R7,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
         B     SVCDTA99                carry on
*
**       Storage buffer overflow error
*
SVCDTAER DS    0H
         $WTO  MID=ECF069E,            error msg                       +
               VAR1=DSACMDBF           show command
*
**       Storage release MLWTO buffer
*
SVCDTA99 DS    0H
         L     R0,DSASTORZ             MLWTO buffer size
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    SVCDTAXT                no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               LV=(0),                 buffer size                     +
               SP=SP107                subpool
*
SVCDTAXT DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
SVCNDATA DC    CL61' '
LINESDTA DC    CL70'SVC?DATA 00000000 00000000 00000000 00000000 000000+
               00 00000000'
LINE@SVC EQU   *-LINESDTA
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ABENDS                                                     */
*/*                                                                  */
*/* Function: Display ABEND recovery data subroutine                 */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?D ABENDS                                              */
*/*           ?D ABENDS=component                                    */
*/*           ?DISPLAY ABENDS                                        */
*/*           ?DISPLAY ABENDS=component                              */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ABENDS   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         LR    R4,R1                   CMDE address
         USING CMDE,R4                 set addressability
*
**       Storage obtain MLWTO buffer
*
         GETMAIN RC,                                                   +
               LV=MSGXSIZE,            buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    ABND000                 yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     ABNDEXIT                exit
*
**       Activate Recovery
*
ABND000  DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN1026)    set RSN
         $RETRY ABND099,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              ABEND RSN
*
**       Determine SRWA display request
*
         LA    R3,DSACMDTA             command buffer address
         LH    R2,CMDSIZE              {D|DISPLAY} verb length
         LA    R3,0(R2,R3)             point to =name
         MVC   DSAZABND,0(R3)          copy display operand
         CLI   DSAZABND,C'='           valid separator?
         BE    ABND010                 yes, carry on
         CLI   DSAZABND,BLANK          display all entries
         BNE   ABND045                 no, error
         OI    DSAFLG4,DSA@ZALL        yes, display all entries
         MVC   DSAZABND,=CL8'=ECFSUB'  set process
*
ABND010  DS    0H
         CLC   =CL8'=ECFSUB',DSAZABND  ECFSUB ABENDs?
         BNE   ABND015                 no, test further
         TM    DSAFLG4,DSA@ZSUB        already displayed?
         BNZ   ABND015                 yes, skip it
         MVC   DSASTKA,EVTSTKAD        set stack address
         OI    DSAFLG4,DSA@ZSUB        set display indicator
         TM    DSAFLG4,DSA@ZALL        display all entries
         BZ    ABND050                 no, carry on
         MVC   DSAZABND,=CL8'=S34SRV'  set next process
         B     ABND050                 carry on
*
ABND015  DS    0H
         CLC   =CL8'=S34SRV',DSAZABND  S34SRV ABENDs?
         BNE   ABND020                 no, test further
         TM    DSAFLG4,DSA@ZS34        already displayed?
         BNZ   ABND020                 yes, skip it
         MVC   DSASTKA,EVTCMSTK        set stack address
         OI    DSAFLG4,DSA@ZS34        set display indicator
         TM    DSAFLG4,DSA@ZALL        display all entries
         BZ    ABND050                 no, carry on
         MVC   DSAZABND,=CL8'=S35SRV'  set next process
         B     ABND050                 carry on
*
ABND020  DS    0H
         CLC   =CL8'=S35SRV',DSAZABND  S35SRV ABENDs?
         BNE   ABND025                 no, test further
         TM    DSAFLG4,DSA@ZS35        already displayed?
         BNZ   ABND025                 yes, skip it
         MVC   DSASTKA,EVTWTSTK        set stack address
         OI    DSAFLG4,DSA@ZS35        set display indicator
         TM    DSAFLG4,DSA@ZALL        display all entries
         BZ    ABND050                 no, carry on
         MVC   DSAZABND,=CL8'=RFRSRV'  set next process
         B     ABND050                 carry on
*
ABND025  DS    0H
         CLC   =CL8'=RFRSRV',DSAZABND  RFRSRV ABENDs?
         BNE   ABND030                 no, test further
         TM    DSAFLG4,DSA@ZRFR        already displayed?
         BNZ   ABND030                 yes, skip it
         MVC   DSASTKA,EVTRFSTK        set stack address
         OI    DSAFLG4,DSA@ZRFR        set display indicator
         TM    DSAFLG4,DSA@ZALL        display all entries
         BZ    ABND050                 no, carry on
         MVC   DSAZABND,=CL8'=ADDSRV'  set next process
         B     ABND050                 carry on
*
ABND030  DS    0H
         CLC   =CL8'=ADDSRV',DSAZABND  ADDSRV ABENDs?
         BNE   ABND032                 no, test further            @03C
         TM    DSAFLG4,DSA@ZADD        already displayed?
         BNZ   ABND032                 yes, skip it                @03C
         MVC   DSASTKA,EVTADSTK        set stack address
         OI    DSAFLG4,DSA@ZADD        set display indicator
         TM    DSAFLG4,DSA@ZALL        display all entries
         BZ    ABND050                 no, carry on
         MVC   DSAZABND,=CL8'=DIESRV'  set next process            @03C
         B     ABND050                 carry on
*
ABND032  DS    0H                                                  @03A
         CLC   =CL8'=DIESRV',DSAZABND  DIESRV ABENDs?              @03A
         BNE   ABND034                 no, test further            @06C
         TM    DSAFLG2,DSA@ZDIE        already displayed?          @03A
         BNZ   ABND034                 yes, skip it                @06C
         MVC   DSASTKA,EVTDISTK        set stack address           @03A
         OI    DSAFLG2,DSA@ZDIE        set display indicator       @03A
         TM    DSAFLG4,DSA@ZALL        display all entries         @03A
         BZ    ABND050                 no, carry on                @03A
         MVC   DSAZABND,=CL8'=SYSSRV'  set next process            @06C
         B     ABND050                 carry on                    @03A
*
ABND034  DS    0H                                                  @06A
         CLC   =CL8'=SYSSRV',DSAZABND  SYSSRV ABENDs?              @06A
         BNE   ABND035                 no, test further            @06A
         TM    DSAFLG2,DSA@ZSYS        already displayed?          @06A
         BNZ   ABND035                 yes, skip it                @06A
         MVC   DSASTKA,EVTDISTK        set stack address           @06A
         OI    DSAFLG2,DSA@ZSYS        set display indicator       @06A
         TM    DSAFLG4,DSA@ZALL        display all entries         @06A
         BZ    ABND050                 no, carry on                @06A
         MVC   DSAZABND,=CL8'=STCSRV'  set next process            @06A
         B     ABND050                 carry on                    @06A
*
ABND035  DS    0H
         CLC   =CL8'=STCSRV',DSAZABND  STCSRV ABENDs?
         BNE   ABND040                 no, test further
         TM    DSAFLG4,DSA@ZSTC        already displayed?
         BNZ   ABND040                 yes, skip it
         MVC   DSASTKA,EVTSTSTK        set stack address
         OI    DSAFLG4,DSA@ZSTC        set display indicator
         TM    DSAFLG4,DSA@ZALL        display all entries
         BZ    ABND050                 no, carry on
         MVC   DSAZABND,=CL8'=COMSRV'  set next process
         B     ABND050                 carry on
*
ABND040  DS    0H
         CLC   =CL8'=COMSRV',DSAZABND  COMSRV ABENDs?
         BNE   ABND045                 no, error
         TM    DSAFLG4,DSA@ZCOM        already displayed?
         BNZ   ABND099                 yes, exit
         MVC   DSASTKA,EVTCOSTK        set stack address
         OI    DSAFLG4,DSA@ZCOM        set display indicator
         B     ABND050                 carry on
*
ABND045  DS    0H
         MVC   DSARC,=AL4(RC8)         assume error
         TM    DSAFLG2,DSA@ABND        ABENDS displayed?
         BZ    ABND099                 no, error
         XC    DSARC,DSARC             yes, set good RC
         B     ABND099                 release MLWTO buffer
*
**       Display SRWA recovery data
*
ABND050  DS    0H
         L     R8,DSASTKA              STK address
         MVC   DSASTKL,STKSTKEL-STK(R8) copy last STKE address
         L     R5,STKSTKET-STK(,R8)    top STKE address
         USING STKE,R5                 set addressability
         ST    R5,DSASTKE              save STKE address
         LA    R5,STKESRWA             SRWA address
         USING SRWA,R5                 set addressability
         OI    DSAFLG2,DSA@ABND        processing ABENDs
*
**       Initialize CONTROL message line
*
ABND060  DS    0H
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
         LA    R7,1                    update line count
         LA    R3,MSGXMAXL             max lines loop value
*
**       Initialize DATA message line
*
         USING MSGD,R6                 MSGD addressability
         LA    R6,MSGC@SZE(,R6)        DATA line address
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         USING ABN,R4                  set addressability
         MVC   ABNCPID,ZMODULE         init load module ID
         MVC   ABNDATA1,STKLMOD-STK(R8) init subtask name          @04C
         MVC   ABNDATA2,SRWASECT       init service name
         MVC   ABNDATA3(20),ZNORMAL    show no ABENDs
         ICM   R1,15,SRWABEND          entry initiazed?
         BZ    ABND070                 no, carry on
         MVC   ABNDATA3(20),ZRETRY     show recovered ABEND
         TM    SRWASFLG,SRWA@NDP       SDUMP=NO?
         BNZ   ABND070                 yes, recovered ABEND
         MVC   ABNDATA3(20),ZABEND     show unrecovered ABEND
*
ABND070  DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   ABNCPID,ZSTKE           init STKE/RETRY ID
         $CNVX DSAVAR,DSASTKE          convert to printable
         MVC   ABNDATA1,DSAVAR         init STKE addess
         $CNVX DSAVAR,SRWARTRY         convert to printable
         MVC   ABNDATA2,DSAVAR         init STKE addess
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   ABNCPID,ZCMP            init CMP ID
         $CNVX DSAVAR,SRWABEND         convert to printable
         MVC   ABNDATA1,DSAVAR         init ABEND code
         MVC   ABNDATA2,ZEROS          zero rason code
         CLC   ABNDATA1,ZEROS          ABEND code init?
         BE    ABND075                 no, carry on
         $CNVX DSAVAR,SRWARSN          convert to printable
         MVC   ABNDATA2,DSAVAR         init RSN code
*
ABND075  DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   ABNCPID,ZTEA            init TEA ID
         $CNVX DSAVAR,SRWATEA          convert to printable
         MVC   ABNDATA1,DSAVAR         init TEA code
         XR    R1,R1
         IC    R1,SRWAILC              ILC
         STH   R1,DSAWORD
         IC    R1,SRWAIC               IC
         STH   R1,DSAWORD+2
         $CNVX DSAVAR,DSAWORD          convert to printable
         MVC   ABNDATA2,DSAVAR         init ILC/IC values
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   ABNCPID,ZPSW            init PSW ID
         $CNVX DSAVAR,SRWAPSW0         convert to printable
         MVC   ABNDATA1,DSAVAR         init PSW+0
         $CNVX DSAVAR,SRWAPSW4         convert to printable
         MVC   ABNDATA2,DSAVAR         init PSW+4
*
         $CNVX DSAVAR,SRWADAT0         convert to printable
         MVC   ABNDATA3,DSAVAR         init PSW DATA+0
         $CNVX DSAVAR,SRWADAT4         convert to printable
         MVC   ABNDATA4,DSAVAR         init PSW DATA+4
         $CNVX DSAVAR,SRWADAT8         convert to printable
         MVC   ABNDATA5,DSAVAR         init PSW DATA+8
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   ABNCPID,ZR0R5           init R0-R5 ID
         $CNVX DSAVAR,SRWABN0          convert to printable
         MVC   ABNDATA1,DSAVAR         init R0
         $CNVX DSAVAR,SRWABN1          convert to printable
         MVC   ABNDATA2,DSAVAR         init R1
         $CNVX DSAVAR,SRWABN2          convert to printable
         MVC   ABNDATA3,DSAVAR         init R2
         $CNVX DSAVAR,SRWABN3          convert to printable
         MVC   ABNDATA4,DSAVAR         init R3
         $CNVX DSAVAR,SRWABN4          convert to printable
         MVC   ABNDATA5,DSAVAR         init R4
         $CNVX DSAVAR,SRWABN5          convert to printable
         MVC   ABNDATA6,DSAVAR         init R5
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   ABNCPID,ZR6R11          init R6-R11 ID
         $CNVX DSAVAR,SRWABN6          convert to printable
         MVC   ABNDATA1,DSAVAR         init R6
         $CNVX DSAVAR,SRWABN7          convert to printable
         MVC   ABNDATA2,DSAVAR         init R7
         $CNVX DSAVAR,SRWABN8          convert to printable
         MVC   ABNDATA3,DSAVAR         init R8
         $CNVX DSAVAR,SRWABN9          convert to printable
         MVC   ABNDATA4,DSAVAR         init R9
         $CNVX DSAVAR,SRWABN10         convert to printable
         MVC   ABNDATA5,DSAVAR         init R10
         $CNVX DSAVAR,SRWABN11         convert to printable
         MVC   ABNDATA6,DSAVAR         init R11
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         MVC   ABNCPID,ZR12R15         init R12-R15 ID
         $CNVX DSAVAR,SRWABN12         convert to printable
         MVC   ABNDATA1,DSAVAR         init R12
         $CNVX DSAVAR,SRWABN13         convert to printable
         MVC   ABNDATA2,DSAVAR         init R13
         $CNVX DSAVAR,SRWABN14         convert to printable
         MVC   ABNDATA3,DSAVAR         init R14
         $CNVX DSAVAR,SRWABN15         convert to printable
         MVC   ABNDATA4,DSAVAR         init R15
*
**       Initialize END message line
*
         LA    R6,MSGD@SZE(,R6)        END line address
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
         LA    R7,1(,R7)               update line count
         ST    R7,DSAWLINE             update count
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R7,DSAWLINE             get number of lines
         STC   R7,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
         LTR   R15,R15                 successful?
         BNZ   ABND099                 no, error
*
**       Process next SRWA table entry
*
ABND080  DS    0H
         L     R5,DSASTKE              current STKE address
         USING STKE,R5                 set addressability
         LA    R5,STKE@SZE(,R5)        get next STKE address
         CL    R5,DSASTKL              end of STKEs?
         BH    ABND010                 yes, do next stack
         ST    R5,DSASTKE              save current STKE address
         LA    R5,STKESRWA             get SRWA address
         USING SRWA,R5                 set addressability
         ICM   R1,15,SRWARTRY          SRWA in use?
         BZ    ABND080                 no, loop
         BCT   R3,ABND060              loop
         TM    DSAFLG4,DSA@ZCOM        COMSRV ABENDs displayed?
         BNZ   ABND099                 yes, all done
         B     ABND010                 process all entries
*
**       Storage release MLWTO buffer
*
ABND099  DS    0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    ABNDEXIT                no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         FREEMAIN RC,                                                  +
               A=(R1),                 buffer address                  +
               SP=SP107,               subpool                         +
               LV=MSGXSIZE             buffer size
*
ABNDEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
ZEROS    DC    CL8'00000000'
ZMODULE  DC    CL13'LMOD SRV   -'
ZSTKE    DC    CL13'STKE RETRY -'
ZCMP     DC    CL13'CMP  RSN   -'
ZTEA     DC    CL13'TEA  ILCIC -'
ZPSW     DC    CL13'PSW  DATA  -'
ZR0R5    DC    CL13'R0   R5    -'
ZR6R11   DC    CL13'R6   R11   -'
ZR12R15  DC    CL13'R12  R15   -'
*
ZRETRY   DC    CL20'(Recovered ABEND)'
ZABEND   DC    CL20'(Unrecovered ABEND)'
ZNORMAL  DC    CL20'(No ABEND detected)'
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RULES                                                      */
*/*                                                                  */
*/* Function: Display event rules command subroutine                 */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?D RULES                                               */
*/*           ?DISPLAY RULES                                         */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RULES    $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Scan active REB queue
*
         USING REB,R5                  REB addressability
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   RULES00                 yes, carry on
         $WTO  MID=ECF994I             no, event queue is empty
         B     RULEXIT                 exit
*
**       Storage obtain MLWTO buffer
*
RULES00  DS    0H
         GETMAIN RC,                                                   +
               LV=MSGXSIZE,            buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    RULES10                 yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     RULEXIT                 exit
*
**       Activate Recovery
*
RULES10  DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN0976)    set RSN
         $RETRY RULES99,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
         LA    R7,1                    update line count
*
**       Initialize DATA message header
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA,RULESTXT       init DATA line header
         LA    R7,1(,R7)               update line count
         LA    R3,MSGXMAXL             max lines loop value
*
**       Initialize DATA message line
*
RULES20  DS    0H
         LA    R6,MSGD@SZE(,R6)        next DATA line address
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line message address
         USING TXT,R4                  TEXT addressability
         MVI   TXTLINE,BLANK           clear DATA line
         MVC   TXTLINE+1(TXT@SIZE-1),TXTLINE
         MVC   TXTEVENT,REBMEMBR       init member name
         MVC   TXTEXEC,REBEXEC         init REXX/CLIST name
         MVC   TXTETYPE,REBETYPE       init event type
         TM    EVTFLG2,EVT@EDSP        SHOWREB=YES?
         BNZ   RULES25                 yes, show all event data
         CLC   REBETYPE,=CL8'MONITOR'  MONITOR event type?         @06A
         BE    RULES30                 yes, carry on               @06A
         CLC   REBETYPE,=CL8'JOBINIT'  JOBINIT event type?
         BE    RULES30                 yes, carry on
         CLC   REBETYPE,=CL8'JOBTERM'  JOBTERM event type?
         BE    RULES30                 yes, carry on
         CLC   REBETYPE,=CL8'STCINIT'  STCINIT event type?
         BE    RULES30                 yes, carry on
         CLC   REBETYPE,=CL8'STCTERM'  STCTERM event type?
         BE    RULES30                 yes, carry on
         CLC   REBETYPE,=CL8'TSUINIT'  TSUINIT event type?
         BE    RULES30                 yes, carry on
         CLC   REBETYPE,=CL8'TSUTERM'  TSUTERM event type?
         BE    RULES30                 yes, carry on
*
RULES25  DS    0H
         MVC   TXTEDATA,REBEDATA       init event trigger
         B     RULES35                 carry on
*
RULES30  DS    0H
         MVC   TXTEDATA,REBEDATA+8     init event trigger          @07C
*
RULES35  DS    0H
         MVC   TXTSTAT,=CL8'Init'      set default status
         MVC   TXTRUNAS,REBRUNAS       init RUNAS attribute
         MVC   TXTMODE,=CL8'Disabled'  assume REB disabled
         TM    REBFLG2,REB@RDIS        rule disabled?
         BNZ   RULES60                 yes, carry on
*
RULES40  DS    0H
         MVC   TXTMODE,=CL8'Active'    assume REB is active
         TM    REBFLG1,REB@ACTV        active REB?
         BNZ   RULES45                 yes, carry on
         MVC   TXTMODE,=CL8'Refresh'   assume refresh in progress
         TM    REBFLG1,REB@REFR        refresh in progress?
         BNZ   RULES60                 yes, carry on
         MVC   TXTMODE,=CL8'Inactive'  no, REB is inactive
*
RULES45  DS    0H
         TM    REBFLG1,REB@REFD        REB refreshed?
         BZ    RULES50                 no, carry on
         MVC   TXTSTAT,=CL8'Refresh'   indiate REB refreshed
         B     RULES60                 carry on
*
RULES50  DS    0H
         TM    REBFLG1,REB@RADD        REB added?
         BZ    RULES60                 no, carry on
         MVC   TXTSTAT,=CL8'Added'     indiate REB added
*
RULES60  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BZ    RULES70                 no, display END line
         BCT   R3,RULES20              yes, next DATA line
*
**       Initialize END message line
*
RULES70  DS    0H
         LA    R6,MSGD@SZE(,R6)        END line address
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
         LA    R7,1(,R7)               update line count
         ST    R7,DSAWLINE             update count
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R7,DSAWLINE             get number of lines
         STC   R7,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
*
**       Storage release MLWTO buffer
*
RULES99  DS    0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    RULEXIT                 no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               SP=SP107,               subpool                         +
               LV=MSGXSIZE             buffer size
*
RULEXIT  DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
RULESTXT DS    0CL70                   data line
         DC    CL1' '
         DC    CL8'MEMBER'             -Member name
         DC    CL1' '
         DC    CL8'EVENT'              -Event type
         DC    CL1' '
         DC    CL8'MODE'               -{Active|Inactive}
         DC    CL1' '
         DC    CL8'STATUS'             -{Added|Refresh|Init}
         DC    CL1' '
         DC    CL5'RUNAS'              -{STC|JOB|SUB}
         DC    CL1' '
         DC    CL8'EXEC'               -CLIST/REXX name
         DC    CL1' '
         DC    CL18'TRIGGER'           -Event Trigger
RULES@SZ EQU   *-RULESTXT
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: CPOOLS                                                     */
*/*                                                                  */
*/* Function: Display cell pools command subroutine                  */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?D CPOOLS                                              */
*/*           ?DISPLAY CPOOLS                                        */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CPT address                                      */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
CPOOLS   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Set up cell pool table
*
         MVC   DSAREBCP,EVTREBCP       REB cell pool ID
         MVC   DSASRECP,EVTSRECP       SRE cell pool ID
         MVC   DSASRBCP,EVTSRBCP       SRB cell pool ID
         MVC   DSARBXCP,EVTREBXC       REBX cell pool ID
         LA    R2,DSA@CPLZ             get number of entries
         LA    R3,DSAPOOLS             get table address
*
**       Storage obtain MLWTO buffer
*
         L     R0,DSASTORZ             MLWTO buffer size           @05A
         GETMAIN RC,                                                   +
               LV=(0),                 size                        @05C+
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    CPOOLS10                yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     CPOOLSXT                exit
*
**       Activate Recovery
*
CPOOLS10 DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         AL    R1,DSASTORZ             MLWTO buffer-end address    @05A
         ST    R1,DSASTORE             save it overflow check      @05A
         MVC   DSARSN,=AL4(RSN1024)    set RSN
         $RETRY CPOOLS99,              activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
         LA    R7,1                    update line count
*
**       Initialize CPOOL data message line
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         B     CPOOLS30                carry on
*
CPOOLS20 DS    0H
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   CPOOLSER                yes, buffer overflow errors @05A
*
CPOOLS30 DS    0H
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(CPOOLHDL),CPOOLHDR
         L     R5,0(,R3)               set CPOOL address
         SL    R5,=AL4(CPT@SIZE)       get CPOOL prefix
         USING CPT,R5                  CPT addressability
         MVC   MSGDDATA+8(24),CPTHDR   show CPID HDR
         LA    R7,1(,R7)               update line count
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   CPOOLSER                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         MVC   MSGDDATA,CPOOLID        show CPOOL data line
*
         LA    R6,MSGD@SZE(,R6)        next DATA line
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   CPOOLSER                yes, buffer overflow errors @05A
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R7,1(,R7)               update line count
         LA    R4,MSGDDATA             DATA line address
         USING CXT,R4                  text addressability
         MVI   CXTLINE,BLANK           clear DATA line
         MVC   CXTLINE+1(CXT@SIZE-1),CXTLINE
*
         $CNVX DSAVAR,CPTCPID          CPID address
         MVC   CXTCPID,DSAVAR          show address
         $CNVX DSAVAR,CPTCHPTR         secondary extent address
         MVC   CXTPRIM,DSAVAR          show address
         $CNVD DSAVAR,CPTXTNT          secondary extents
         MVC   CXTSECN,DSAVAR          show secondary extents
         $CNVD DSAVAR,CPTAXTNT         allocated extents
         MVC   CXTSIZE,DSAVAR          show allocated extents
         $CNVD DSAVAR,CPTCELLS         number of cells
         MVC   CXTCELLS,DSAVAR         show number of cells
         $CNVD DSAVAR,CPTACTV          allocated cells
         MVC   CXTALLOC,DSAVAR         show allocated cells
         $CNVX DSAVAR,CPTLOCK          lockword
         MVC   CXTLOCK,DSAVAR          show lockword
         $CNVD DSAVAR,CPTSPN           subpool
         MVC   CXTSPN,DSAVAR+5         show subpool
         $CNVX DSAVAR,CPTKEY           storage key
         MVC   CXTKEY,DSAVAR+6         show storage key
         LA    R3,4(,R3)               next CPOOL ID ptr
         BCT   R2,CPOOLS20             loop
*
**       Initialize END message line
*
         LA    R6,MSGD@SZE(,R6)        END line address
         CL    R6,DSASTORE             MLWTO buffer overflow?      @05A
         BNL   CPOOLSER                yes, buffer overflow errors @05A
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
         LA    R7,1(,R7)               update line count
         ST    R7,DSAWLINE             update count
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R7,DSAWLINE             get number of lines
         STC   R7,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
         B     CPOOLS99                carry on                    @05A
*
**       Storage buffer overflow error
*
CPOOLSER DS    0H                                                  @05A
         $WTO  MID=ECF069E,            error msg                   @05A+
               VAR1=DSACMDBF           show command                @05A
*
**       Storage release MLWTO buffer
*
CPOOLS99 DS    0H
         L     R0,DSASTORZ             MLWTO storage size          @05A
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    CPOOLSXT                no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               LV=(0),                 buffer size                 @05C+
               SP=SP107                subpool
*
CPOOLSXT DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
CPOOLHDR DC    CL70' CPOOL: ECF2-V1R1-SRB-CELL-POOL'
CPOOLHDL EQU   *-CPOOLHDR
         DS    0C
CPOOLID  DC    CL70' Prim     Sec      Extents  Alloc    Cells    Alloc+
                   Lock     SPN KY'
CPOOLIDL EQU   *-CPOOLID
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: OPTIONS                                                    */
*/*                                                                  */
*/* Function: Display Subsystem Options Command Subroutine           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?D OPTIONS                                             */
*/*           ?DISPLAY OPTIONS                                       */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
OPTIONS  $SUBINI                                                 99@05A
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain MLWTO buffer
*
         LA    R1,OPT@NUME             record count
         LA    R1,2(,R1)               add CONTROL & END lines
         ST    R1,DSAWLINE             save display lines
         LR    R0,R1                   copy record count
         LA    R3,80                   record size
         MR    R2,R0                   R3 has total length
         ST    R3,DSAWSIZE             MLWTO buffer size
         GETMAIN RC,                                                   +
               LV=(R3),                buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    OPTS0000                yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     OPTSEXIT                exit
*
**       Activate Recovery
*
OPTS0000 DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN0954)    set RSN
         $RETRY OPTS0999,              activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
*
**       Display Options data line
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(24),OPTLIST    data line
*
**       Display SVC Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSVC       init option name
         MVC   MSGDDATA+12(3),EVTSVCNM init option data
*
**       Display RUNAS Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),ORUNAS     init option name
         MVC   MSGDDATA+12(3),EVTRUNAS init option data
*
**       Display SETCON initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSETCON    init option name
         MVC   MSGDDATA+12(3),EVTSETCN init option data
*
**       Display MSAS Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OMSAS      init option name
         MVC   MSGDDATA+12(4),=CL4'ONLY' init option data
         TM    EVTFLG4,EVT@MSAS        MSAS=ONLY set?
         BZ    OPTS0005                  yes
         MVC   MSGDDATA+12(4),=CL4'TEST' no
*
**       Display SSREQ Initialization Option
*
OPTS0005 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSSREQ     init option name
         MVC   MSGDDATA+12(3),EVTSSREQ init option data
*
**       Display TIMER Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OTIMER     init option name
         MVC   MSGDDATA+12(2),EVTXINTV+4 init option data
*
**       Display CAPTURE Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OCAPTURE   init option name
         MVC   MSGDDATA+12(3),=CL3'YES' init option data
         TM    EVTFLG4,EVT@ACAP        CAPTURE=YES set?
         BNZ   OPTS0010                yes
         MVC   MSGDDATA+12(3),=CL3'NO' no
*
**       Display MONTIMER Initialization Option
*
OPTS0010 DS    0H                                                14@06A
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OMONTIMR   init option name
         MVC   MSGDDATA+12(2),EVTSYSTM+4 init option data
*
**       Display MONMSGCT Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         $CNVD DSAVAR,EVTMSGCT         MONMSGCT=value
         MVC   MSGDDATA(12),OMONMSGC   init option name
         MVC   MSGDDATA+12(4),DSAVAR+4 init option data
*
**       Display TRAPSVC= Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address          6@08A
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OTRAPSVC   init option name
         MVC   MSGDDATA+12(8),EVTRPSVC init TRAPSVC option
*
**       Display DEBUG Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),ODEBUG     init option name
         MVC   MSGDDATA+12(3),=CL3'ON' init option data
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON set?
         BNZ   OPTS0020                 yes
         MVC   MSGDDATA+12(3),=CL3'OFF' no
*
**       Display TRACE Initialization Option
*
OPTS0020 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OTRACE     init option name
         MVC   MSGDDATA+12(3),=CL3'ON' init option data
         TM    EVTFLG2,EVT@TRCE        TRACE=ON set?
         BNZ   OPTS0030                 yes
         MVC   MSGDDATA+12(3),=CL3'OFF' no
*
**       Display SDUMP Initialization Option
*
OPTS0030 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSDUMP     init option name
         MVC   MSGDDATA+12(3),=CL3'YES' init option data
         TM    EVTFLG2,EVT@DUMP        SDUMP=YES set?
         BNZ   OPTS0035                 yes
         MVC   MSGDDATA+12(3),=CL3'NO'  no
*
**       Display REPLYID Initialization Option
*
OPTS0035 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OREPLYID   init option name
         $CNVD DSAVAR,EVTREPLY         convert opton data
         MVC   MSGDDATA+12(1),DSAVAR+7 init option data
*
**       Display Q10LOCK Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address          9@06A
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OQ10LOCK   init option name
         MVC   MSGDDATA+12(3),=CL3'YES' init option data
         TM    EVTFLG4,EVT@CSCB         Q10LOCK=YES?
         BNZ   OPTS0040                 yes
         MVC   MSGDDATA+12(3),=CL3'NO'  no
*
**       Display PERSIST Initialization Option
*
OPTS0040 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OPERSIST   init option name
         MVC   MSGDDATA+12(3),=CL3'YES' init option data
         TM    EVTFLG5,EVT@EXIT         PERSIST=YES?
         BNZ   OPTS0045                 yes
         MVC   MSGDDATA+12(3),=CL3'NO'  no
*
**       Display COMPWTO Initialization Option
*
OPTS0045 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OCOMPWTO   init option name
         MVC   MSGDDATA+12(3),=CL3'NO' init option data
         TM    EVTFLG4,EVT@CWTO        COMPWTO=NO set?
         BNZ   OPTS0050                 no
         MVC   MSGDDATA+12(3),=CL3'YES' yes
*
**       Display SHOWREB Initialization Option
*
OPTS0050 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSHOWREB   init option name
         MVC   MSGDDATA+12(3),=CL3'NO' init option data
         TM    EVTFLG2,EVT@EDSP        SHOWREB=YES?
         BZ    OPTS0060                 no
         MVC   MSGDDATA+12(3),=CL3'YES' yes
*
**       Display TMP Initialization Option
*
OPTS0060 DS    0H
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OTMP       init option name
         MVC   MSGDDATA+12(8),EVTTMPNM init option data
*
**       Display TMPSTC Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OTMPSTC    init option name
         MVC   MSGDDATA+12(8),EVTMPSTC init option data
*
**       Display TSOSUB Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OTSOSUB    init option
         MVC   MSGDDATA+12(3),EVTECFRS init option
*
**       Display REBPOOL Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OREBPOOL   init option name
         $CNVD DSAVAR,EVTREBCL         convert data
         MVC   MSGDDATA+12(3),DSAVAR+5 init option data
         MVI   MSGDDATA+15,C','        init separator
         $CNVD DSAVAR,EVTREBXT         convert data
         MVC   MSGDDATA+16(3),DSAVAR+5 init option data
*
**       Display SRBPOOL Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSRBPOOL   init option name
         $CNVD DSAVAR,EVTSRBCL         convert data
         MVC   MSGDDATA+12(3),DSAVAR+5 init option data
         MVI   MSGDDATA+15,C','        init separator
         $CNVD DSAVAR,EVTSRBXT         convert data
         MVC   MSGDDATA+16(3),DSAVAR+5 init option data
*
**       Display SREPOOL Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSREPOOL   init option name
         $CNVD DSAVAR,EVTSRECL         convert data
         MVC   MSGDDATA+12(3),DSAVAR+5 init option data
         MVI   MSGDDATA+15,C','        init separator
         $CNVD DSAVAR,EVTSREXT         convert data
         MVC   MSGDDATA+16(3),DSAVAR+5 init option data
*
**       Display PARMLIB Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OPARMLIB   init option name
         MVC   MSGDDATA+12(44),EVTPARML init option data
*
**       Display SYSPROC Initialization option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSYSPROC   init option name
         MVC   MSGDDATA+12(44),EVTSYSPR init option data
*
**       Display ECFJOBS Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OECFJOBS   init option name
         MVC   MSGDDATA+12(44),EVTSJOBS init option data
*
**       Display SYSTSIN Initialization Option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSYSTSIN   init option name
         MVC   MSGDDATA+12(44),EVTSYSTI init option name
*
**       Display SYSTSPRT Initialization option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSYSTSPR   init option name
         MVC   MSGDDATA+12(44),EVTSYSPT init option data
*
**       Display SYSIN Initialization option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSYSIN     init option name
         MVC   MSGDDATA+12(44),EVTSYSIN init option data
*
**       Display SYSPRINT Initialization option
*
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(12),OSYSPRNT   init option name
         MVC   MSGDDATA+12(44),EVTSYSOT init option data
*
**       Initialize END message line
*
         LA    R6,MSGD@SZE(,R6)        END line address
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,DSAWLINE             get number of lines
         STC   R1,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
*
**       Storage release MLWTO buffer
*
OPTS0999 DS    0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    OPTSEXIT                no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         L     R0,DSAWSIZE             buffer size
         FREEMAIN RC,                                                  +
               A=(R1),                 buffer address                  +
               LV=(R0),                buffer size                     +
               SP=SP107                subpool
*
OPTSEXIT DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
OPTTAB   DS    0C
OPTLIST  DC    CL24' Initialization Options'
OSVC     DC    CL12' SVC      ='
ORUNAS   DC    CL12' RUNAS    ='
OMSAS    DC    CL12' MSAS     ='
OSETCON  DC    CL12' SETCON   ='
OSSREQ   DC    CL12' SSREQ    ='
OTIMER   DC    CL12' TIMER    ='
OCAPTURE DC    CL12' CAPTURE  ='
OMONTIMR DC    CL12' MONTIMER ='
OMONMSGC DC    CL12' MONMSGCT ='
OTRAPSVC DC    CL12' TRAPSVC  ='
ODEBUG   DC    CL12' DEBUG    ='
OTRACE   DC    CL12' TRACE    ='
OSDUMP   DC    CL12' SDUMP    ='
OREPLYID DC    CL12' REPLYID  ='
OQ10LOCK DC    CL12' Q10LOCK  ='
OPERSIST DC    CL12' PERSIST  ='
OCOMPWTO DC    CL12' COMPWTO  ='
OSHOWREB DC    CL12' SHOWREB  ='
OTMP     DC    CL12' TMP      ='
OTMPSTC  DC    CL12' TMPSTC   ='
OTSOSUB  DC    CL12' TSOSUB   ='
OREBPOOL DC    CL12' REBPOOL  ='
OSRBPOOL DC    CL12' SRBPOOL  ='
OSREPOOL DC    CL12' SREPOOL  ='
OPARMLIB DC    CL12' PARMLIB  ='
OSYSPROC DC    CL12' SYSPROC  ='
OECFJOBS DC    CL12' ECFJOBS  ='
OSYSTSIN DC    CL12' SYSTSIN  ='
OSYSTSPR DC    CL12' SYSTSPRT ='
OSYSIN   DC    CL12' SYSIN    ='
OSYSPRNT DC    CL12' SYSPRINT ='
OPTLASTE DC    CL12'           '
OPT@SZE  EQU   *-OPTLASTE
OPT@NUME EQU   (*-OPTTAB)/OPT@SZE
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: JCLPARM                                                    */
*/*                                                                  */
*/* Function: Display Subsystem JCL PARM=parms Subroutine            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?D JCLPARM                                             */
*/*           ?DISPLAY JCLPARM                                       */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
JCLPARM  $SUBINI                                                 99@05A
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain MLWTO buffer
*
         LA    R1,JCL@NUME             record count
         LA    R1,2(,R1)               add CONTROL & END lines
         ST    R1,DSAWLINE             save display lines
         LR    R0,R1                   copy record count
         LA    R3,80                   record size
         MR    R2,R0                   R3 has total length
         ST    R3,DSAWSIZE             MLWTO buffer size
         GETMAIN RC,                                                   +
               LV=(R3),                buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    JCLP0000                yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     JCLPEXIT                exit
*
**       Activate Recovery
*
JCLP0000 DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN0938)    set RSN
         $RETRY JCLP0999,              activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
*
**       Display Options data line
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(16),JCLLIST    data line
         LA    R4,MSGDDATA             data address
         ST    R4,DSAJLIST             save JCLLIST address
         OI    DSAFLG2,DSA@NOJP        set no JCL PARMs found
*
**       Display INI= JCL Parameter
*
JCLP0010 DS    0H
         TM    STKFLG3,STK@JINI        specified by JCL PARM?
         BZ    JCLP0020                no
         NI    DSAFLG2,XFF-DSA@NOJP    supplied by JCL PARMs
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(9),JINI        init option name
         MVC   MSGDDATA+9(8),EVTMASTR  init option data
*
**       Display SUB= JCL Parameter
*
JCLP0020 DS    0H
         TM    STKFLG3,STK@JSUB        specified by JCL PARM?
         BZ    JCLP0030                no
         NI    DSAFLG2,XFF-DSA@NOJP    supplied by JCL PARMs
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(9),JSUB        init option name
         MVC   MSGDDATA+9(4),EVTSUBNM  init option data
*
**       Display CMD= JCL Parameter
*
JCLP0030 DS    0H
         TM    STKFLG3,STK@JCMD        specified by JCL PARM?
         BZ    JCLP0040                no
         NI    DSAFLG2,XFF-DSA@NOJP    supplied by JCL PARMs
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(9),JCMD        init option name
         MVC   MSGDDATA+9(1),EVTCMDCH  init option data
*
**       Display OPT= JCL Parameter
*
JCLP0040 DS    0H
         TM    STKFLG3,STK@JOPT        specified by JCL PARM?
         BZ    JCLP0050                no
         NI    DSAFLG2,XFF-DSA@NOJP    supplied by JCL PARMs
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(9),JOPT        init option name
         MVC   MSGDDATA+9(8),EVTOPTSH  init option data
*
**       Display SSM= JCL Parameter
*
JCLP0050 DS    0H
         TM    STKFLG3,STK@JSSM        specified by JCL PARM?
         BZ    JCLP0060                no
         NI    DSAFLG2,XFF-DSA@NOJP    supplied by JCL PARMs
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(9),JSSM        init option name
         MVC   MSGDDATA+9(8),EVTSSMNM  init option data
*
**       Display CSA= JCL Parameter
*
JCLP0060 DS    0H
         TM    STKFLG3,STK@JCSA        specified by JCL PARM?
         BZ    JCLP0070                no
         NI    DSAFLG2,XFF-DSA@NOJP    supplied by JCL PARMs
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(9),JCSA        init option name
         MVC   MSGDDATA+9(3),EVTCSAOP  init option data
*
**       Display RCV= JCL Parameter
*
JCLP0070 DS    0H
         TM    STKFLG3,STK@JRCV        specified by JCL PARM?
         BZ    JCLP0080                no
         NI    DSAFLG2,XFF-DSA@NOJP    supplied by JCL PARMs
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(9),JRCV        init option name
         MVC   MSGDDATA+9(3),EVTZRCVY  init option data
*
**       Display DEBUG= JCL Parameter
*
JCLP0080 DS    0H
         TM    STKFLG1,STK@DPRM        specified by JCL PARM?
         BZ    JCLP0090                no
         NI    DSAFLG2,XFF-DSA@NOJP    supplied by JCL PARMs
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(9),JDEBUG      init option name
         MVC   MSGDDATA+9(3),=CL3'ON'  init option data
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON set?
         BNZ   JCLP0090                yes
         MVC   MSGDDATA+9(3),=CL3'OFF' no
*
**       Display TRACE= JCL Parameter
*
JCLP0090 DS    0H
         TM    STKFLG1,STK@TPRM        specified by JCL PARM?
         BZ    JCLP0095                no
         NI    DSAFLG2,XFF-DSA@NOJP    supplied by JCL PARMs
         LA    R6,MSGD@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         MVC   MSGDDATA(9),JTRACE      init option name
         MVC   MSGDDATA+9(3),=CL3'ON'  init option data
         TM    EVTFLG2,EVT@TRCE        TRACE=ON set?
         BNZ   JCLP0095                yes
         MVC   MSGDDATA+9(3),=CL3'OFF' no
*
**       JCL parmeters specification check
*
JCLP0095 DS    0H
         TM    DSAFLG2,DSA@NOJP        Any PARMs specified?
         BZ    JCLP0099                yes
         ICM   R4,15,DSAJLIST          JCLIST init?
         BZ    JCLP0099                no
         MVC   0(32,R4),NOJPARMS       no JCL PARMS found
*
**       Initialize END message line
*
JCLP0099 DS    0H
         LA    R6,MSGD@SZE(,R6)        END line address
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,DSAWLINE             get number of lines
         STC   R1,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
*
**       Storage release MLWTO buffer
*
JCLP0999 DS    0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    JCLPEXIT                no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         L     R0,DSAWSIZE             buffer size
         FREEMAIN RC,                                                  +
               A=(R1),                 buffer address                  +
               LV=(R0),                buffer size                     +
               SP=SP107                subpool
*
JCLPEXIT DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
JCLTAB   DS    0C
JCLLIST  DC    CL16' JCL parameters'
JINI     DC    CL09' INI   ='
JSUB     DC    CL09' SUB   ='
JCMD     DC    CL09' CMD   ='
JOPT     DC    CL09' OPT   ='
JSSM     DC    CL09' SSM   ='
JCSA     DC    CL09' CSA   ='
JRCV     DC    CL09' RCV   ='
JDEBUG   DC    CL09' DEBUG ='
JTRACE   DC    CL09' TRACE ='
JCLLASTE DC    CL09'        '
JCL@SZE  EQU   *-JCLLASTE
JCL@NUME EQU   (*-JCLTAB)/JCL@SZE
NOJPARMS DC    CL32' No JCL parameters specified'
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DYNLPA                                                     */
*/*                                                                  */
*/* Function: Display Dynamic-LPA modules subroutine                 */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?D LPA                                                 */
*/*           ?DISPLAY LPA                                           */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R8  ZIO address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DYNLPA   $SUBINI                                                 99@07A
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         LR    R5,R1                   copy CMD entry address
         USING CMDE,R5                 set addressability
*
**       Storage obtain MLWTO buffer
*
         GETMAIN RC,                                                   +
               LV=MSGXSIZE,            buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    DYLPA00                 yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     DYLPAXIT                exit
*
**       Activate Recovery
*
DYLPA00  DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN1002)    set RSN
         $RETRY DYLPA99,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Allocate SYSPRINT dataset
*
         LA    R8,DSAZIO               ZIO block address
         USING ZIO,R8                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVI   ZIOFUNC,ZIO@MSAS        set function ID
         OI    ZIOFLG1,ZIO@UNAL        unallocate then allocate
         OI    ZIOFLG1,ZIO@SOUT        ECFCOM(DYNLPA) caller
         MVC   ZIODDNAM,=CL8'SYSPRINT' set DDname
         MVC   ZIODSNAM,EVTSYSOT       set DSName
         $CALL VR=EVTDYNA,PARM=(R8)
         LTR   R15,R15                 successful?
         BNZ   DYLPA99                 no, exit
*
**       Validity check Dynamic-LPA coomand
*
         LH    R1,CMDSIZE              CMD verb length
         LA    R3,DSACMDTA             CMD verb address
         LA    R3,0(R1,R3)             CMD operand data address
*
         LA    R2,=A(ZACTLPA)          set parm
         CLC   0(3,R3),=CL3',A'        ?D LPA,A command?
         BE    DYLPA10                 yes
*
         LA    R2,=A(ZLSTLPA)          set parm
         CLC   0(3,R3),=CL3',L'        ?D LPA,L command?
         BE    DYLPA10                 yes
*
         LA    R2,=A(ZDYNLPA)          set parm
         CLI   0(R3),BLANK             ?D LPA command?
         BE    DYLPA10                 yes
         CLC   0(3,R3),=CL3',D'        ?D LPA,D command?
         BE    DYLPA10                 yes
         MVC   DSARC,=AL4(RC8)         set error RC
         B     DYLPA99                 exit
*
**       Call Dynamic-LPA service routine
*
DYLPA10  DS    0H
         LOAD  EP=CSVDLPAU             CSV manager
         LR    R15,R0                  copy EPA
         LR    R1,R2                   SYNCH parm
         SYNCH (15),AMODE=31,STATE=PROB
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   DYLPA99                 no, exit
*
**       Open SYSPRINT data set
*
         MVC   DSAOLST,ROPENLST        listform
         MVC   DSAPDCB(SYSPRNTL),SYSPRINT
         LA    R8,DSAPDCB              address
         USING IHADCB,R8               set addressability
         OPEN  ((R8),INPUT),MF=(E,DSAOLST)
         OI    DSAFLG3,DSA@OPEN        data set is open
         TM    DCBOFLGS,DCBOFOPN       successful?
         BNZ   DYLPA20                 yes, carry on
         MVC   DSARC,=AL4(RC8)         set RC
         MVC   DSARSN,=AL4(RSN2054)    set RSN
         $WTO  MID=ECF025E,            no, issue error msg             +
               VAR1==CL8'SYSPRINT',    show DDname                     +
               VAR2=DSARSN             show error RSN
         B     DYLPA99                 exit
*
**       Initialize CONTROL message line
*
DYLPA20  DS    0H
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R2,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R2)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
         LA    R7,1                    update line count
*
**       Initialize DATA message header
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R2,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R2)    init DATA line model
         MVC   MSGDDATA(16),EVTBLNKS   init DATA line
         LA    R7,1(,R7)               update line count
         LA    R3,MSGXMAXL             max lines loop value
*
**       Initialize DATA message line
*
DYLPA30  DS    0H
         GET   (R8)                    read record
         LA    R6,MSGD@SZE(,R6)        next DATA line address
         L     R2,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R2)    init DATA line model
         LA    R7,1(,R7)               update line count
         MVC   MSGDDATA,1(R1)          init DATA line
         BCT   R3,DYLPA30              loop
*
**       Close SYSPRINT data set
*
DYLPA40  DS    0H
         MVC   DSACLST,RCLOSLST        listform
         LA    R8,DSAPDCB              address
         CLOSE ((R8)),MF=(E,DSACLST)   close SYSPRINT
*
**       Initialize END message line
*
         LA    R6,MSGD@SZE(,R6)        END line address
         USING MSGE,R6                 MSGE addressability
         L     R2,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R2)    init END line model
         LA    R7,1(,R7)               update line count
         ST    R7,DSAWLINE             update count
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R7,DSAWLINE             get number of lines
         STC   R7,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
         ST    R15,DSARC               save RC
*
**       Storage release MLWTO buffer
*
DYLPA99  DS    0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    DYLPAXIT                no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               SP=SP107,               subpool                         +
               LV=MSGXSIZE             buffer size
*
DYLPAXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ZACTLPA  DC    AL2(1),CL1'A',99X'0'    PARM=A
ZDYNLPA  DC    AL2(1),CL1'D',99X'0'    PARM=D
ZLSTLPA  DC    AL2(1),CL1'L',99X'0'    PARM=L
         DS    0F
ROPENLST OPEN  (,),MF=L                OPEN listform
         DS    0F
RCLOSLST OPEN  (,),MF=L                CLOSE listform
         DS    0F
SYSPRINT DCB   DDNAME=SYSPRINT,        DDname                          +
               DSORG=PS,               read sequentially               +
               MACRF=GL,               macro format                    +
               BUFNO=1,                just one buffer                 +
               EODAD=DYLPA40           EODAD routine
SYSPRNTL EQU   *-SYSPRINT              DCB listform
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: HELP                                                       */
*/*                                                                  */
*/* Function: Display help commands subroutine                       */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?HELP                                                  */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
HELP     $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain MLWTO buffer
*
         LA    R1,HLP@HLPC             record count
         LA    R1,2(,R1)               add CONTROL & END lines
         ST    R1,DSAWLINE             save display lines
         LR    R0,R1                   copy record count
         LA    R3,80                   record size
         MR    R2,R0                   R3 has total length
         ST    R3,DSAWSIZE             MLWTO buffer size
         GETMAIN RC,                                                   +
               LV=(R3),                buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    HELP010                 yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     HELPXIT                 exit
*
**       Activate Recovery
*
HELP010  DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN0966)    set RSN
         $RETRY HELP099,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
*
**       Initialize DATA message line
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R2,HLP@HLPC             number of lines
         LA    R3,HELPTAB              help table address
*
HELP020  DS    0H
         MVC   MSGDDATA,0(R3)          init DATA line
         CLI   MSGDDATA+1,BLANK        command line?
         BNE   HELP030                 no, skip insert
         MVC   MSGDDATA+2(1),EVTCMDCH  show command prefix
*
HELP030  DS    0H
         LA    R6,MSGD@SZE(,R6)        next DATA line       s
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R3,HLPHLPLZ(,R3)        next data line
         BCT   R2,HELP020              loop
*
**       Initialize END message line
*
HELP040  DS    0H
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,DSAWLINE             get number of lines
         STC   R1,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
*
**       Storage release MLWTO buffer
*
HELP099 DS     0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    HELPXIT                 no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         L     R0,DSAWSIZE             buffer size
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               LV=(0),                 buffer size                     +
               SP=SP107                subpool
*
HELPXIT  DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        RECOVERY Help Commands                                       *
*--------+---------+---------+---------+---------+---------+---------+*
         DS  0C
HELPTAB  DC  CL70'Help Commands:'
         DC  CL70'   HELP SUB/SUBSYS  Display help subsystem commands'
         DC  CL70'   HELP R/RECOVERY  Display help recovery commands'
         DC  CL70'   HELP E/EDIT      Display help edit commands'
HLPHLPLN DC  CL70'   HELP B/BROWSE    Display help browse commands'
HLPHLPLZ EQU *-HLPHLPLN
HLP@HLPC EQU (*-HELPTAB)/HLPHLPLZ
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: HELPSUB                                                    */
*/*                                                                  */
*/* Function: Display help subsystem commands subroutine             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?HELP                                                  */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
HELPSUB  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         LA    R1,HLP@SUBC             record count
         LA    R1,2(,R1)               add CONTROL & END lines
         ST    R1,DSAWLINE             save display lines
         LR    R0,R1                   copy record count
         LA    R3,80                   record size
         MR    R2,R0                   R3 has total length
         ST    R3,DSAWSIZE             MLWTO buffer size
*
**       Storage obtain MLWTO buffer
*
         GETMAIN RC,                                                   +
               LV=(R3),                buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    HSUB010                 yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     HSUBXIT                 exit
*
**       Activate Recovery
*
HSUB010  DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN0990)    set RSN
         $RETRY HSUB099,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
*
**       Initialize DATA message line
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R2,HLP@SUBC             number of lines
         LA    R3,SUBTABLE             help table address
*
HSUB020  DS    0H
         MVC   MSGDDATA,0(R3)          init DATA line
         CLI   MSGDDATA+1,BLANK        command line?
         BNE   HSUB030                 no, skip insert
         MVC   MSGDDATA+2(1),EVTCMDCH  show command prefix
*
HSUB030  DS    0H
         LA    R6,MSGD@SZE(,R6)        next DATA line       s
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R3,HLPSUBLZ(,R3)        next data line
         BCT   R2,HSUB020              loop
*
**       Initialize END message line
*
HSUB040  DS    0H
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,DSAWLINE             get number of lines
         STC   R1,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
*
**       Storage release MLWTO buffer
*
HSUB099 DS     0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    HSUBXIT                 no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         L     R0,DSAWSIZE             buffer size
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               LV=(0),                 buffer size                     +
               SP=SP107                subpool
*
HSUBXIT  DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        RECOVERY Help Commands                                       *
*--------+---------+---------+---------+---------+---------+---------+*
         DS  0C                             sessions
SUBTABLE DC  CL70'Subsystem display commands:'
         DC  CL70'   D LPA,A           - Display active-LPA modules'
         DC  CL70'   D LPA,D           - Display dynamic-LPA modules'
         DC  CL70'   D RULES           - Display event rules'
         DC  CL70'   D RULE=member     - Display a single event rule'
         DC  CL70'   D STATUS          - Display ECF status'
         DC  CL70'   D ISTATUS         - Display ECF internal status'
         DC  CL70'   D JCLPARM         - Display ECF JCL parms'
         DC  CL70'   D OPTIONS         - Display ECF init options'
         DC  CL70'   D CPOOLS          - Display ECF cell pools'
         DC  CL70'   D SSIDATA         - Display SSI diagnostic data'
         DC  CL70'   D SVCDATA         - Display SVC diagnostic data'
         DC  CL70'   D RECOVERY        - Display STC recovery data'
         DC  CL70'   D ABENDS          - Display ECF ABEND data'
         DC  CL70'Subsystem modify commands:'
         DC  CL70'   ACT RULE=member   - Activate event rule'
         DC  CL70'   INACT RULE=member - Inactivate event rule'
         DC  CL70'   ADD RULE=member   - Add event rule'
         DC  CL70'   REF RULE=member   - Refresh event rule'
         DC  CL70'   SET DEBUG=ON/OFF  - Toggle debug option ON or OFF'
HLPSUBLN DC  CL70'   SET TRACE=ON/OFF  - Toggle trace option ON or OFF'
HLPSUBLZ EQU *-HLPSUBLN
HLP@SUBC EQU (*-SUBTABLE)/HLPSUBLZ
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: HELPREC                                                    */
*/*                                                                  */
*/* Function: Display Recovery Help commands subroutine              */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?HELP R                                                */
*/*           ?HELP RECOVERY                                         */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
HELPREC  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain MLWTO buffer
*
         LA    R1,HLPRCVLZ             record count
         LA    R1,2(,R1)               add CONTROL & END lines
         ST    R1,DSAWLINE             save display lines
         LR    R0,R1                   copy record count
         LA    R3,80                   record size
         MR    R2,R0                   R3 has total length
         ST    R3,DSAWSIZE             MLWTO buffer size
         GETMAIN RC,                                                   +
               LV=(R3),                buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    HLPR010                 yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     HLPRXIT                 exit
*
**       Activate Recovery
*
HLPR010  DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN0974)    set RSN
         $RETRY HLPR099,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
*
**       Initialize DATA message line
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R2,HLP@RCVC             number of lines
         LA    R3,HLPRCVY              help table address
*
HLPR020  DS    0H
         MVC   MSGDDATA,0(R3)          init DATA line
         CLI   MSGDDATA+1,BLANK        command line?
         BNE   HLPR030                 no, skip insert
         MVC   MSGDDATA+2(1),EVTCMDCH  show command prefix
*
HLPR030  DS    0H
         LA    R6,MSGD@SZE(,R6)        next DATA line       s
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R3,HLPRCVLZ(,R3)        next data line
         BCT   R2,HLPR020              loop
*
**       Initialize END message line
*
HLPR040  DS    0H
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,DSAWLINE             get number of lines
         STC   R1,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
*
**       Storage release MLWTO buffer
*
HLPR099 DS     0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    HLPRXIT                 no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         L     R0,DSAWSIZE             buffer size
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               LV=(0),                 buffer size                     +
               SP=SP107                subpool
*
HLPRXIT  DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        RECOVERY Help Commands                                       *
*--------+---------+---------+---------+---------+---------+---------+*
         DS  0C
HLPRCVY  DC  CL70'EDIT Commands:'
         DC  CL70'   EDIT      Dataset(member)'
         DC  CL70'   LIST      Blank; RecordNumber; T/TOP; B/BOTTOM'
         DC  CL70'   UPDATE    RecordNumber,DataValue'
         DC  CL70'   DELETE    RecordNumber'
         DC  CL70'   INSERT    RecordNumber,DataValue'
         DC  CL70'   SAVE      Save member updates and END session'
         DC  CL70'   NOSAVE    Discard member updates and END session'
         DC  CL70'BROWSE Commands:'
         DC  CL70'   BROWSE    Dataset(member)'
         DC  CL70'   BROWSE    Blank; RecordNumber; T/TOP; B/BOTTOM'
         DC  CL70'   ENDBROW   Terminate browse session'
         DC  CL70'   ENDBROWSE Terminate browse session'
         DC  CL70'COMMON Commands:'
         DC  CL70'   SCROLL    ScrollAmount; L/LEFT; R/RIGHT'
         DC  CL70'   TSO       Command'
         DC  CL70'   COMPRESS  Dataset'
HLPRCVLN DC  CL70'   COPY      FROM=Dataset(member),TO=Dataset(member)'
HLPRCVLZ EQU *-HLPRCVLN
HLP@RCVC EQU (*-HLPRCVY)/HLPRCVLZ
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: HBROWSE                                                    */
*/*                                                                  */
*/* Function: Display BROWSE Help commands subroutine                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?HELP B                                                */
*/*           ?HELP BROWSE                                           */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
HBROWSE  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain MLWTO buffer
*
         LA    R1,HLP@BROC             record count
         LA    R1,2(,R1)               add CONTROL & END lines
         ST    R1,DSAWLINE             save display lines
         LR    R0,R1                   copy record count
         LA    R3,80                   record size
         MR    R2,R0                   R3 has total length
         ST    R3,DSAWSIZE             MLWTO buffer size
         GETMAIN RC,                                                   +
               LV=(R3),                buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    HBRO010                 yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     HBROEXIT                exit
*
**       Activate Recovery
*
HBRO010  DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN0978)    set RSN
         $RETRY HBRO099,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
*
**       Initialize DATA message line
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R2,HLP@BROC             number of lines
         LA    R3,HLPBROW              help table address
*
HBRO020  DS    0H
         MVC   MSGDDATA,0(R3)          init DATA line
         CLI   MSGDDATA+2,BLANK        command line?
         BNE   HBRO025                 no, test further
         MVC   MSGDDATA+2(1),EVTCMDCH  show command prefix
         B     HBRO030                 carry on
*
HBRO025  DS    0H
         CLI   MSGDDATA+2,C':'         :sign?
         BNE   HBRO030                 no, skip insert
         MVC   MSGDDATA+2(1),BLANK     change to blank
*
HBRO030  DS    0H
         LA    R6,MSGD@SZE(,R6)        next DATA line       s
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R3,HLPBROLZ(,R3)        next data line
         BCT   R2,HBRO020              loop
*
**       Initialize END message line
*
HBRO040  DS    0H
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,DSAWLINE             get number of lines
         STC   R1,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
*
**       Storage release MLWTO buffer
*
HBRO099 DS     0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    HBROEXIT                no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         L     R0,DSAWSIZE             buffer size
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               LV=(0),                 buffer size                     +
               SP=SP107                subpool
*
HBROEXIT DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        BROWSE Help Command                                          *
*--------+---------+---------+---------+---------+---------+---------+*
         DS 0C
HLPBROW  DC CL70'Browse Commands:'
         DC CL70'   BROWSE    Dataset; Dataset(member)'
         DC CL70'   BROWSE    Blank; RecordNumber; T/TOP; B/BOTTOM'
         DC CL70'   ENDBROWSE Terminate browse session'
         DC CL70'   SCROLL    ScrollAmount; L/LEFT; R/RIGHT'
         DC CL70'BROWSE Example:'
         DC CL70'   SCROLL 36'
         DC CL70'  : -Override 24 records scroll amount to 36'
         DC CL70'   BROWSE SYS1.JES2PARM(JES2PARM)'
         DC CL70'  : -Display JES2 parameters member JES2PARM'
         DC CL70'   BROWSE 17'
         DC CL70'  : -List JES2PARM starting at record 17'
         DC CL70'   BROWSE'
         DC CL70'  : -List the beginning of the JES2PARM member'
         DC CL70'   BROWSE TOP'
         DC CL70'  : -List the beginning of the JES2PARM member'
         DC CL70'   BROWSE BOTTOM'
         DC CL70'  : -List the beginning of the JES2PARM member'
         DC CL70'   BROWSE '
         DC CL70'  : -List JES2PARM member forward using scroll amount'
         DC CL70'   ENDBROWSE'
HLPBROLN DC CL70'  : -Terminate JES2PARM browse session'
HLPBROLZ EQU   *-HLPBROLN
HLP@BROC EQU   (*-HLPBROW)/HLPBROLZ
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: HEDIT                                                      */
*/*                                                                  */
*/* Function: Display EDIT Help commands subroutine                  */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Command:  ?HELP E                                                */
*/*           ?HELP EDIT                                             */
*/*                                                                  */
*/* Input Regs: R1  CMDE address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  CMDE address                                     */
*/*             R7  line count                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
HEDIT    $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain MLWTO buffer
*
         LA    R1,HLP@EDTC             record count
         LA    R1,2(,R1)               add CONTROL & END lines
         ST    R1,DSAWLINE             save display lines
         LR    R0,R1                   copy record count
         LA    R3,80                   record size
         MR    R2,R0                   R3 has total length
         ST    R3,DSAWSIZE             MLWTO buffer size
         GETMAIN RC,                                                   +
               LV=(R3),                buffer size                     +
               SP=SP107                subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    HEDT010                 yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     HEDTEXIT                exit
*
**       Activate Recovery
*
HEDT010  DS    0H
         ST    R1,DSAWBUFF             save MLWTO buffer address
         MVC   DSARSN,=AL4(RSN0986)    set RSN
         $RETRY HEDT099,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,DSACMDBF       init command data
*
**       Initialize DATA message line
*
         LA    R6,MSGC@SZE(,R6)        DATA line address
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R2,HLP@EDTC             number of lines
         LA    R3,HLPEDIT              help table address
*
HEDT020  DS    0H
         MVC   MSGDDATA,0(R3)          init DATA line
         CLI   MSGDDATA+2,BLANK        command line?
         BNE   HEDT025                 no, test further
         MVC   MSGDDATA+2(1),EVTCMDCH  show command prefix
         B     HEDT030                 carry on
*
HEDT025  DS    0H
         CLI   MSGDDATA+2,C':'         :sign?
         BNE   HEDT030                 no, skip insert
         MVC   MSGDDATA+2(1),BLANK     change to blank
*
HEDT030  DS    0H
         LA    R6,MSGD@SZE(,R6)        next DATA line       s
         L     R1,=A(MSXD)             DATA line model
         MVC   MSGD(MSGD@SZE),0(R1)    init DATA line model
         LA    R3,HLPEDTLZ(,R3)        next data line
         BCT   R2,HEDT020              loop
*
**       Initialize END message line
*
HEDT040  DS    0H
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             END line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
*
**       Set number of lines to display
*
         L     R6,DSAWBUFF             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,DSAWLINE             get number of lines
         STC   R1,MSGCTOTL             init display lines
*
**       Display MLWTO message lines
*
         $CALL DISPLAY                 display data lines
*
**       Storage release MLWTO buffer
*
HEDT099 DS     0H
         ICM   R1,15,DSAWBUFF          storage release required?
         BZ    HEDTEXIT                no, exit
         XC    DSAWBUFF,DSAWBUFF       zero buffer address
         L     R0,DSAWSIZE             buffer size
         FREEMAIN RC,                                                  +
               A=(1),                  buffer address                  +
               LV=(0),                 buffer size                     +
               SP=SP107                subpool
*
HEDTEXIT DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        EDIT Help Commands                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         DS 0C
HLPEDIT  DC CL70'EDIT Commands:'
         DC CL70'   EDIT     Dataset(member)'
         DC CL70'   LIST     Blank; RecordNumber; T/TOP; B/BOTTOM'
         DC CL70'   UPDATE   RecordNumber,DataValue'
         DC CL70'   DELETE   RecordNumber'
         DC CL70'   INSERT   RecordNumber,DataValue'
         DC CL70'   SAVE     Save member updates and END EDIT'
         DC CL70'   NOSAVE   Discard member updates and END EDIT'
         DC CL70'   SCROLL   ScrollAmount; L/LEFT; R/RIGHT'
         DC CL70'EDIT Example:'
         DC CL70'   SCROLL 32'
         DC CL70'  : -Override 24 records scoll amount to 32'
         DC CL70'   EDIT SYS1.PROCLIB(JES2)'
         DC CL70'  : -Edit system library member JES2 JCL procedure'
         DC CL70'   DELETE 7'
         DC CL70'  : -Delete JES2 member record number 7'
         DC CL70'   INSERT 0'
         DC CL70'  : -Insert JES2 record number 0 before record 1'
         DC CL70'   INSERT 17'
         DC CL70'  : -Insert JES2 record number 17 before record 18'
         DC CL70'   UPDATE 14,//SYSIN DD *'
         DC CL70'  : -Update JES2 record number 14 with: //SYSIN DD *'
         DC CL70'   SAVE'
         DC CL70'  : -Save updates made to the JES2 member and END EDIT+
                session'
         DC CL70'   NOSAVE'
         DC CL70'  : -Discard updates made to the JES2 member and END E+
               DIT session'
         DC CL70'   LIST 21'
         DC CL70'  : -List JES2 member starting at record 21'
         DC CL70'   LIST TOP'
         DC CL70'  : -List the beginning of the JES2 member'
         DC CL70'   LIST BOTTOM'
HLPEDTLN DC CL70'  : -List the bottom of the JES2 member'
HLPEDTLZ EQU   *-HLPEDTLN
HLP@EDTC EQU   (*-HLPEDIT)/HLPEDTLZ
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DISPLAY                                                    */
*/*                                                                  */
*/* Function: MLWTO command output display subroutine                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R6  MSGC address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R1  message ID                                      */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DISPLAY  $SUBINI
         USING MSGC,R6
         USING STKE,R13
*
**       Activate Recovery
*
         MVC   DSARSN,=AL4(RSN3060)    set RSN
         $RETRY DISP999,               activate retry                  +
               SDUMP=NO,               keep it quiet                   +
               RSN=DSARSN              RSN code
*
**       Display MLWTO message lines
*
         XR    R0,R0                   zero console ID
         $WTO  MF=(E,(R6))             issue MLWTO
         ST    R1,DSAWID               save returned ID
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    DISPEXIT                yes, carry on
*
**       Issue MLWTO display failed error msg
*
DISP999  DS    0H
         $WTO  MID=ECF995E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSAWID             show RSN
*
DISPEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants & Literals                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFEQU ,
         $ECFSTK ,
         $ECFSRE ,
         $ECFREB ,
         $ECFCPT ,
         $ECFTQX ,
         $ECFZIO ,                                                 @07A
         $CMDCALL DSECT=YES
         $ECFMWTO DSECT=YES,T=MSG
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASVA   DS    18F                     save area
         DS    0X
DSAFLG1  DS    XL1                     flags
DSA@IRB  EQU   X'80'                   IRB scheduled
DSA@CELL EQU   X'40'                   REB cell element obtained
DSA@ACTV EQU   X'20'                   event rule activated
DSA@NACT EQU   X'10'                   event rule inactivated
DSA@WACT EQU   X'08'                   REB was active indicator
DSA@RS15 EQU   X'04'                   -available
DSA@RS16 EQU   X'02'                   -available
DSA@RS17 EQU   X'01'                   -available
         DS    0X
DSAFLG2  DS    XL1                     flags
DSA@ABND EQU   X'80'                   ABENDS displayed indicator
DSA@ZDIE EQU   X'40'                   ECFSRV(DIESRV) ABENDS display
DSA@NOJP EQU   X'20'                   no JCL PARMs specified
DSA@ZSYS EQU   X'10'                   ECFSRV(SYSSRV) ABENDS display
DSA@RS24 EQU   X'08'                   -available
DSA@RS25 EQU   X'04'                   -available
DSA@RS26 EQU   X'02'                   -available
DSA@RS27 EQU   X'01'                   -available
         DS    0X
DSAFLG3  DS    XL1                     flags
DSA@OPEN EQU   X'80'                   SYSPRINT open indicator
DSA@RS31 EQU   X'40'                   -available
DSA@RS32 EQU   X'20'                   -available
DSA@RS33 EQU   X'10'                   -available
DSA@RS34 EQU   X'08'                   -available
DSA@RS35 EQU   X'04'                   -available
DSA@RS36 EQU   X'02'                   -available
DSA@RS37 EQU   X'01'                   -available
         DS    0X
DSAFLG4  DS    XL1                     flags
DSA@ZALL EQU   X'80'                   display all ABENDs
DSA@ZSUB EQU   X'40'                   ECFSUB ABEND display
DSA@ZADD EQU   X'20'                   ECFSRV(ADDSRV) ABEND display
DSA@ZRFR EQU   X'10'                   ECFSRV(RFRSRV) ABEND display
DSA@ZSTC EQU   X'08'                   ECFSRV(STCSRV) ABEND display
DSA@ZCOM EQU   X'04'                   ECFSRV(COMSRV) ABEND display
DSA@ZS34 EQU   X'02'                   ECFSRV(S34SRV) ABEND display
DSA@ZS35 EQU   X'01'                   ECFSRV(S35SRV) ABENS display
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSACKEY  DS    F                       entry protect key
DSAQREB  DS    F                       triggered REB address
DSAREBA  DS    F                       REB address
DSASREA  DS    F                       SRE address
DSASTKA  DS    F                       STK address
DSASTKE  DS    F                       STKE address
DSASTKL  DS    F                       last STKE address
DSAWID   DS    F                       returned MLWTO ID
DSAWBUFF DS    F                       MLWTO buffer address
DSAWSIZE DS    F                       MLWTO buffer size
DSAWLINE DS    F                       MLWTO total lines
DSASTORZ DS    F                       MLWTO storage size          @05A
DSASTORE DS    F                       MLWTO storage-end address   @05A
DSAJLIST DS    F                       JCLLIST MLWTO data line address
DSAWORD  DS    F                       workarea
DSAWORD2 DS    F                       workarea
         DS    0F
DSAOPAR  DS    F                       output parm reg
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
         DS    0D
DSADWRD  DS    D                       conversion work area
         DS    0C
DSAMEMBR DS    CL8                     Event member-name
DSAMEMBZ EQU   *-DSAMEMBR              length
         DS    0C
DSAJOBNM DS    CL8                     Event job-name
DSAJOBNZ EQU   *-DSAJOBNM              length
         DS    0C
DSACMDBF DS    0CL120                  CMD buffer
DSACMDID DS    CL1                     CMD character
DSACMDTA DS    CL119                   CMD operands
DSA@CMDZ EQU   *-DSACMDBF              CMD buffer length
         DS    0C
DSARUNAS DS    CL3                     RUNAS={STC|JOB|SUB}
         DS    0C
DSAVAR   DS    CL8                     variable data
DSAVARX  DS    CL1                     slack byte
DSA@VARZ EQU   *-DSAVAR                keep it together
         DS    0C
DSAZABND DS    CL8                     ABEND display modID
DSAZ@ABZ EQU   *-DSAZABND              length
         DS    0F
DSAPOOLS DS    0F                      cell pools
DSAREBCP DS    F                       -REB cell pool ID
DSASRECP DS    F                       -SRE cell pool ID
DSASRBCP DS    F                       -SRB cell pool ID
DSARBXCP DS    F                       -REBX cell pool ID
DSA@CPLZ EQU   (*-DSAPOOLS)/4          number of cell pools
         DS    0F
DSASREC  DS    CL(SRE@SIZE)            SRE copy                    @05A
DSA@SREL EQU   *-DSASREC               SRE block length            @05A
         DS    0F
DSAZIO   DS    CL(ZIO@SIZE)            ZIO block                   @07A
DSA@ZIOL EQU   *-DSAZIO                ZIO block length            @07A
         DS    0F
DSATMAP  DS    CL(TMODL@SZ)            time and date listform
         DS    0F
DSAPDCB  DS    CL(SYSPRNTL)            SYSPRINT DCB
         DS    0F
DSAOLST  OPEN  (,),MF=L                OPEN listform
         DS    0F
DSACLST  CLOSE (,),MF=L                CLOSE listform
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*
**       ?D/DISPLAY RULES data line map
*
TXT      DSECT ,
TXTLINE  DS    0CL70
         DS    CL1
TXTEVENT DS    CL8                     -event member name
         DS    CL1
TXTETYPE DS    CL8                     -Event type
         DS    CL1
TXTMODE  DS    CL8                     -{Active|Inactive}
         DS    CL1
TXTSTAT  DS    CL8                     -{Add|Refresh|Init}
         DS    CL1
TXTRUNAS DS    CL3                     -{STC|JOB|SUB}
         DS    CL3
TXTEXEC  DS    CL8                     -CLIST/REXX member name
         DS    CL1
TXTEDATA DS    CL18                    -Event Trigger
TXT@SIZE EQU   *-TXT
*
**       ?D/DISPLAY STATUS data line map
*
STS      DSECT ,                                                   @05A
STSLINE  DS    0CL70
STSNAME  DS    CL32                    -data ID
STSDATA  DS    CL38                    -data value
STS@SIZE EQU   *-STS
*
**       STCKCONV time and date map       18595595 22020000 05172021
*
TMAP     DSECT                                                     @05A
TIMESTR  DS    0CL38
TIMEHH   DS    CL2                      hours
         DS    CL1                      :
TIMEMM   DS    CL2                      minutes
         DS    CL1                      :
TIMESS   DS    CL2                      seconds
         DS    CL1                      :
TIMETH   DS    CL2                      hundreds
         DS    CL1
*
DATEMM   DS    CL2                      month
         DS    CL1                      /
DATEDD   DS    CL2                      day
         DS    CL1                      /
DATEYY   DS    CL4                      year
         DS    CL16                     filler
TIME@DTE EQU   *-TMAP
*
**       ?D/DISPLAY ISTATUS data line map
*
ZXT      DSECT ,
ZXTLINE  DS    0CL70
         DS    CL5                     -control block ID
ZXTCID   DS    CL8                     -control block value
         DS    CL1                     -
ZXTCBL2  DS    CL3                     -control block ID
         DS    CL1                     -equal sign
ZXTCID2  DS    CL8                     -control block value
         DS    CL1                     -
ZXTCBL3  DS    CL3                     -control block ID
         DS    CL1                     -equal sign
ZXTCID3  DS    CL8                     -control block value
         DS    CL1                     -
ZXTCBL4  DS    CL3                     -control block ID
         DS    CL1                     -equal sign
ZXTCID4  DS    CL8                     -control block value
         DS    CL1                     -
ZXTCBL5  DS    CL4                     -control block ID
ZXTCID5  DS    CL8                     -control block value
         DS    CL5                     -available
ZXT@SIZE EQU   *-ZXT
*
**       ?D/DISPLAY CPOOLS data line map
*
CXT      DSECT ,
CXTLINE  DS    0CL70
         DS    CL1                     -
CXTCPID  DS    CL8                     -CPID
         DS    CL1                     -
CXTPRIM  DS    CL8                     -primary extent
         DS    CL1                     -
CXTSECN  DS    CL8                     -secondary extents
         DS    CL1                     -
CXTSIZE  DS    CL8                     -cell pool size
         DS    CL1                     -
CXTCELLS DS    CL8                     -cell pool cells
         DS    CL1                     -
CXTALLOC DS    CL8                     -allocated cells
         DS    CL1                     -
CXTLOCK  DS    CL8                     -lockword
         DS    CL1                     -
CXTSPN   DS    CL3                     -subpool number
         DS    CL1                     -
CXTKEY   DS    CL2                     -storage key
CXT@SIZE EQU   *-CXT
*
**       ?D/DISPLAY SSIDATA data line map
*
SXT      DSECT ,
SXTLINE  DS    0CL70
SXTID    DS    CL8                     -S3??DATA
         DS    CL1                     -
SXTDATA1 DS    CL8                     -data
         DS    CL1                     -
SXTDATA2 DS    CL8                     -data
         DS    CL1                     -
SXTDATA3 DS    CL8                     -data
         DS    CL1                     -
SXTDATA4 DS    CL8                     -data
         DS    CL1                     -
SXTDATA5 DS    CL8                     -data
         DS    CL1                     -
SXTDATA6 DS    CL8                     -data
         DS    CL8                     -
SXT@SIZE EQU   *-SXT
*
**       ?D/DISPLAY SVCDATA data line map
*
SVC      DSECT ,
SVCLINE  DS    0CL70
SVCID    DS    CL8                     -dara
         DS    CL1                     -
SVCDATA1 DS    CL8                     -data
         DS    CL1                     -
SVCDATA2 DS    CL8                     -data
         DS    CL1                     -
SVCDATA3 DS    CL8                     -data
         DS    CL1                     -
SVCDATA4 DS    CL8                     -data
         DS    CL1                     -
SVCDATA5 DS    CL8                     -data
         DS    CL1                     -
SVCDATA6 DS    CL8                     -data
         DS    CL8                     -
SVC@SIZE EQU   *-SVC
*
**       ?D/DISPLAY ABENDS data line map
*
ABN      DSECT ,
ABNLINE  DS    0CL70
ABNCPID  DS    CL13                    -line ID
ABNDATA1 DS    CL8                     -ABEND data
         DS    CL1                     -
ABNDATA2 DS    CL8                     -ABEND data
         DS    CL1                     -
ABNDATA3 DS    CL8                     -ABEND data
         DS    CL1                     -
ABNDATA4 DS    CL8                     -ABEND data
         DS    CL1                     -
ABNDATA5 DS    CL8                     -ABEND data
         DS    CL1                     -
ABNDATA6 DS    CL8                     -ABEND data
         DS    CL4                     -
ABN@SIZE EQU   *-ABN
*
**       ?D/DISPLAY TOKENS data line map
*
TKN      DSECT ,
TKNLINE  DS    0CL70
TKNNAME  DS    CL8'  Name: '           -ID
TKNDATA  DS    0CL36
TKNDAT1  DS    CL08'00000000'          -token data
         DS    CL01
TKNDAT2  DS    CL08'00000000'          -token data
         DS    CL01
TKNDAT3  DS    CL08'00000000'          -token data
         DS    CL01
TKNDAT4  DS    CL08'00000000'          -token data
         DS    CL01
TKNXDT1  DC    CL02'| '                -separator
TKNXDT2  DC    CL16' '                 -hex token dats
TKNXDT3  DC    CL02' |'                -separator
         DS    CL08                    -blanks
TKN@SIZE EQU   *-TKN
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         CVT   DSECT=YES
         IKJTCB DSECT=YES
         IKJRB DSECT=YES
         IEZJSCB ,
         DCBD  DSORG=PS,DEVD=DA
         END
./ ADD NAME=ECFCPL   0125-21068-21308-0600-01271-01267-00057-BENMAR  01
ECFCPL   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Nname ECFCPL                                                     */
*/*                                                                  */
*/* Function: Event Capture Facility Cell Pool Manager               */
*/*                                                                  */
*/* Description: Manages common and local storage cells on behalf    */
*/*              of all subsysytm components.                        */
*/*                                                                  */
*/* Input Regs: R0  input parameter                                  */
*/*             R1  input parameter                                  */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor state, Key=Callerkey           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 04072021 | Ben Marino  | Serviceability enhancement    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFCPL   $SRVINI
         STM   R0,R1,DSAIPAR           save PARM regs
         USING EVT,R11                 EVT addressability
         IPK   ,                       caller protect key          @02C
         ST    R2,DSACKEY              save it                     @02C
*
**       BUILD Cell Pool
*
         ST    R1,DSASVR1              save listform reg
         L     R0,DSAIGR0              parm reg
         CL    R0,BLDUCOND             BUILD MODE=UNCOND request?
         BNE   CPL0000                 no, test further
         OI    DSAFLG1,DSA@UCND        set BUILD MODE=UNCOND
         $CALL BUILD                   build cell pool
         B     CPLEXIT                 exit
*
CPL0000  DS    0H
         CL    R0,BLDCOND              BUILD MODE=COND request?
         BNE   CPL0100                 no, test further
         OI    DSAFLG1,DSA@COND        set BUILD MODE=COND
         $CALL BUILD                   build cell pool
         B     CPLEXIT                 exit
*
**       DELETE Cell Pool
*
CPL0100  DS    0H
         CL    R0,DELUCOND             DELETE MODE=UNCOND request?
         BNE   CPL0200                 no, test further
         OI    DSAFLG1,DSA@DUNC        set MODE=UNCOND specified
         B     CPL0300                 carry on
*
CPL0200  DS    0H
         CL    R0,DELCOND              DELETE MODE=COND request?
         BNE   CPL0400                 no, test further
         OI    DSAFLG1,DSA@DCND        set MODE=COND specified
*
CPL0300  DS    0H
         ST    R0,DSASVR0              save request reg
         ST    R1,DSASVR1              save CPID reg
         OI    DSAFLG1,DSA@DEL         delete request
         $CALL DELETE                  delete cell pool
         B     CPLEXIT                 exit
*
**       GET Cell Pool element
*
CPL0400  DS    0H
         L     R1,DSAIGR1              parm reg
         LTR   R1,R1                   positive?
         BNP   CPL0600                 no, test further
         ST    R1,DSASVR1              save CPID reg
         LTR   R0,R0                   MODE=UNCOND?
         BP    CPL0500                 yes, carry on
         OI    DSAFLG1,DSA@GETC        set MODE=COND specified
         LPR   R0,R0                   make it positive

CPL0500  DS    0H
         ST    R0,DSASVR0              save CELL reg
         OI    DSAFLG1,DSA@GET         get request
         $CALL GET                     GET cell element
         B     CPLEXIT                 exit
*
**       FREE Cell Pool element
*
CPL0600  DS    0H
         LPR   R1,R1                   make it positive
         ST    R1,DSASVR1              save CPID reg
         ST    R0,DSASVR0              save CELL reg
         OI    DSAFLG1,DSA@FREE        free request
         $CALL FREE                    FREE cell element
         B     CPLEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
CPLEXIT  DS    0H
         L     R2,DSACKEY              caller protect key          @02A
         SPKA  0(R2)                   reset key                   @02A
         $SRVXIT PARM=DSAOPAR,RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
BLDCOND  DC    AL4(64)                 BUILD MODE=COND request
BLDUCOND DC    AL4(128)                BUILD MODE=UNCOND request
DELCOND  DC    AL4(256)                DELETE MODE=COND request
DELUCOND DC    AL4(512)                DELETE MODE=UNCOND request
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: BUILD                                                      */
*/*                                                                  */
*/* Function: BUILD cell pool subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  request code                                     */
*/*                  64 - MODE=COND                                  */
*/*                 128 - MODE=UNCOND                                */
*/*             R1  list address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* MACRO: $CPOOL BUILD,MODE=(),                                     */
*/*               CPID=(),CELLS=(),CSIZE=(),SP=(),KEY=(),HDR=()      */
*/*                                                                  */
*/* MACRO LISTFORM: LST      DSECT ,                                 */
*/*                 LSTCPID  DS    A         .CPID                   */
*/*                 LSTCELLS DS    A         .CELLS                  */
*/*                 LSTCSIZE DS    A         .CSIZE                  */
*/*                 LSTSP    DS    A         .SP                     */
*/*                 LSTXTNT  DS    A         .XTNT                   */
*/*                 LSTKEY   DS    A         .Key                    */
*/*                 LSTHDR   DS    CL24      .HDR                    */
*/*                 LST@SIZE EQU   *-LST                             */
*/*                                                                  */
*/* NOTES: MF=I is not supported.                                    */
*/*                                                                  */
*/********************************************************************/
BUILD    $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability         @02A
*
**       Trace BUILD service request
*
         $TRACE $SUBINI,                                               +
               MID=ECFCPL,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
**       Establish recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0392)    set error RSN
         $RETRY BLD0999,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
**       Validity check service request
*
BLD0000  DS    0H
         L     R7,DSASVR1              MF=L address
         USING LST,R7                  set addressability
         ICM   R1,15,LSTCPID           CPID address init?
         BNZ   BLD0005                 yes, test further
         MVC   DSARSN,=AL4(RSN0300)    set error RSN
         B     BLD0999                 exit
*
BLD0005  DS    0H
         ST    R1,DSACPID              save CPID address
         ICM   R1,15,LSTCELLS          CELLS address init?
         BP    BLD0010                 yes, test further
         MVC   DSARSN,=AL4(RSN0304)    set error RSN
         B     BLD0999                 exit
*
BLD0010  DS    0H
         LTR   R1,R1                   CELLS non-zero?
         BNZ   BLD0020                 yes, carry on
         MVC   DSARSN,=AL4(RSN0312)    set error RSN
         B     BLD0999                 exit
*
BLD0020  DS    0H
         ST    R1,DSACELLS             save CELLS count
*
         ICM   R1,15,LSTCSIZE          CSIZE address init?
         BP    BLD0030                 yes, test further
         MVC   DSARSN,=AL4(RSN0316)    set error RSN
         B     BLD0999                 exit
*
BLD0030  DS    0H
         LTR   R1,R1                   CSIZE non-zero?
         BNZ   BLD0035                 yes, carry on
         MVC   DSARSN,=AL4(RSN0324)    set error RSN
         B     BLD0999                 exit
*
BLD0035  DS    0H
         LA    R1,7(,R1)               round CSIZE
         N     R1,=F'-8'               to doubleword boundary
         ST    R1,DSACSIZE             save CSIZE
*
         ICM   R1,15,LSTSP             SP address init?
         BNZ   BLD0040                 yes, test further
         MVC   DSARSN,=AL4(RSN0348)    set error RSN
         B     BLD0999                 exit
*
BLD0040  DS    0H
         CL    R1,=AL4(255)            valid SP number?
         BNH   BLD0050                 yes, carry on
         MVC   DSARSN,=AL4(RSN0336)    set error RSN
         B     BLD0999                 exit
*
BLD0050  DS    0H
         ST    R1,DSASP                save SP number
         CLC   DSASP,=AL4(228)         fixed CSA SP?
         BE    BLD0055                 yes, carry on
         CLC   DSASP,=AL4(241)         pageable CSA SP?
         BE    BLD0055                 yes, carry on
         CLC   DSASP,=AL4(245)         SQA SP?
         BE    BLD0055                 yes, carry on
         CLC   EVTASCB,PSAAOLD         ECF address space?
         BE    BLD0055                 yes, carry on
         MVC   DSARSN,=AL4(RSN0492)    set error RSN
         B     BLD0999                 exit
*
BLD0055  DS    0H
         ICM   R1,15,LSTXTNT           XTNT count init?
         BP    BLD0060                 yes, test further
         MVC   DSARSN,=AL4(RSN0352)    set error RSN
         B     BLD0999                 exit
*
BLD0060  DS    0H
         LTR   R1,R1                   valid XTNT count?
         BNZ   BLD0065                 yes, test further
         MVC   DSARSN,=AL4(RSN0340)    set error RSN
         B     BLD0999                 exit
*
BLD0065  DS    0H
         ST    R1,DSAXTNT              save XTNT count
         MVC   DSAHDR,LSTHDR           save HDR name
         MVC   DSAHDR2,DSAHDR          save HDR name
*
BLD0070  DS    0H
         L     R1,LSTKEY               get key value
         CL    R1,BLKEY0               valid key?                  @02C
         BE    BLD0075                 yes, carry on
         CL    R1,BLKEY8               valid key?                  @02C
         BE    BLD0075                 yes, carry on
         MVC   DSARSN,=AL4(RSN0388)    set error RSN
         B     BLD0999                 exit
*
BLD0075  DS    0H
         ST    R1,DSAKEY               save key locally
*
**       Create Primary Cell Pool extent
*
         $CALL GETPOOL,                                                +
               PARMPTR==CL4'PRIM'      init primary extent
         CLC   DSARC,=AL4(RC0)         successful?
         BNE   BLD0999                 no, exit
         L     R7,DSAOPAR              get cell pool address
         USING CPT,R7                  CPT addressability
         $ST   R7,CPTCPID              store address of self
         L     R3,DSACPID              caller CPID address
         LA    R7,CPT@SIZE(,R7)        bump past CPT prefix
         ST    R7,0(,R3)               return CPID to caller
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         B     BLDEXIT                 exit
*
**       ABEND Cell Pool build caller
*
BLD0999  DS    0H
         TM    DSAFLG1,DSA@COND        MODE=COND specified?
         BNZ   BLDEXIT                 yes, exit
         $RETRY OFF                    no, remove recovery
         $ABEND UFF3,RSN=DSARSN        ABEND
*
**       Issue Cell Pool build debug msg
*
BLDEXIT  DS    0H
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    BLDXIT00                no, skip debug msg
         $WTO  MID=ECF100I,                                            +
               VAR1==CL6'build',       show function                   +
               VAR2=DSAOPAR,           show cell pool address          +
               VAR3=DSARSN,            show RSN code                   +
               VAR4=DSAHDR             show cell pool header
*
BLDXIT00 DS    0H
         $TRACE $SUBXIT,                                               +
               MID=ECFCPL,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
BLKEY0   DC    XL4'00000000'           key zero                    @02A
BLKEY8   DC    XL4'00000080'           key eight                   @02A
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DELETE                                                     */
*/*                                                                  */
*/* Function: DELETE cell pool subroutine                            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0 Request code                                      */
*/*                256 - MODE=COND                                   */
*/*                512 - MODE=UNCOND                                 */
*/*             R1  CPID                                             */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* MACRO: $CPOOL DELETE,CPID=()                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DELETE   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability         @02A
         ST    R1,DSACPID              save CPID address
*
**       Establish recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0384)    set error RSN
         $RETRY DEL0999,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
**       Validity check Cell Pool
*
         L     R7,DSACPID              copy cell pool ID
         SL    R7,=AL4(CPT@SIZE)       CPT prefix
         USING CPT,R7                  CPT addressability
         CLC   CPTID,=CL4'CPT'         valid indeed?
         BE    DEL0100                 yes, test further
         MVC   DSARSN,=AL4(RSN0364)    set error RSN
         B     DEL0999                 exit
*
**       Validity check Cell Pool owner
*
DEL0100  DS    0H
         CLC   EVTZFCID,=CL4'INIT'     INIT in progress?
         BE    DEL0200                 yes, carry on
         CLC   EVTZFCID,=CL4'TERM'     TERM in progress?
         BE    DEL0200                 yes, carry on
         CLC   CPTTCB,PSATOLD          TCB owner?
         BE    DEL0200                 yes, carry on
         MVC   DSARSN,=AL4(RSN0368)    set error RSN
         B     DEL0999                 exit
*
**       Inactivate Cell Pool
*
DEL0200  DS    0H
         XR    R2,R2                   zero reg
         L     R3,PSAAOLD              ASCB address
         $CS   R2,R3,CPTLOCK           lock available?
         $MVC  CPTLOCK2,PSATOLD        yes, set lock owner
         OI    DSAFLG2,DSA@LOCK        lock held
*
         $OI   CPTFLG1,CPT@DEL         deleting cell pool
         $MVC  CPTSTAT,=CL3'DEL'       inactivate cell pool
         MVC   DSAHDR,CPTHDR           copy cell pool header
         MVC   DSAHDR2,CPTHDR          copy cell pool header
         $XC   CPTLOCK2,CPTLOCK2       zero lock owner
         $XC   CPTLOCK,CPTLOCK         release lock
*
DEL0300  DS    0H
         MVC   DSAXKEY,CPTKEY          save cell pool key
         MVC   DSACHPTR,CPTCHPTR       save CPT extent address
         ICM   R2,15,CPTCPSZE          cell pool size init?
         BNZ   DEL0400                 yes, test further
         MVC   DSARSN,=AL4(RSN0372)    set error RSN
         B     DEL0999                 exit
*
**       Storage release Cell Pool extent
*
DEL0400  DS    0H
         L     R15,DSAXKEY             cell pool key
         SPKA  0(R15)                  set key
         L     R3,CPTSPN               cell pool subpool
         FREEMAIN RC,                                                  +
               A=(R7),                 cell pool address               +
               LV=(R2),                cell pool size                  +
               SP=(R3)                 cell pool subpool
         ST    R15,DSARC               save RC
         L     R15,STKEKEY             get my protect key          @02C
         SPKA  0(R15)                  set it                      @02C
         CLC   DSARC,=AL4(RC0)         successful?
         BE    DEL0500                 yes, carry on
         MVC   DSARSN,=AL4(RSN0376)    set error RSN
         MVC   DSARSN(2),DSARC+2       set FREEMAIN RC
         B     DEL0999                 exit
*
DEL0500  DS    0H
         ICM   R7,15,DSACHPTR          extents to free?
         BNZ   DEL0600                 yes, carry on
         XC    DSAOPAR,DSAOPAR         zero output parm
         MVC   DSARC,=AL4(RC0)         set RC
         MVC   DSARSN,=AL4(RSN0)       set RSN
         B     DELEXIT                 exit
*
DEL0600  DS    0H
         CLC   CPTID,=CL4'CPT'         valid indeed?
         BNE   DEL0700                 no, exit
         $OI   CPTFLG1,CPT@DEL         deleting cell pool
         $MVC  CPTSTAT,=CL3'DEL'       inactivate cell pool
         B     DEL0300                 delete all extents
*
DEL0700  DS    0H
         MVC   DSARSN,=AL4(RSN0380)    set error RSN
*
**       ABEND Cell Pool delete caller
*
DEL0999  DS    0H
         TM    DSAFLG2,DSA@LOCK        lock held?
         BZ    DELEXIT                 no, skip release
         $XC   CPTLOCK2,CPTLOCK2       zero lock owner
         $XC   CPTLOCK,CPTLOCK         release lock
         NI    DSAFLG2,XFF-DSA@LOCK    lock released
         TM    DSAFLG1,DSA@DCND        MODE=COND specified?
         BNZ   DELEXIT                 yes, exit
         $RETRY OFF                    no, remove recovery
         $ABEND UFF3,RSN=DSARSN        ABEND
*
**       Issue Cell Pool delete debug msg
*
DELEXIT  DS    0H
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DELXIT00                no, skip debug msg
         $WTO  MID=ECF100I,                                            +
               VAR1==CL6'delete',      show function                   +
               VAR2=DSACPID,           show cell pool address          +
               VAR3=DSARSN,            show RSN code                   +
               VAR4=DSAHDR2            show cell pool header
*
DELXIT00 DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: GET                                                        */
*/*                                                                  */
*/* Function: GET cell pool element subroutine                       */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  CELL (negative means MODE=COND)                  */
*/*             R1  CPID                                             */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* MACRO: $CPOOL GET,CPID=(),CELL=(),MODE=()                        */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
GET      $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability         @02A
*
**       Trace GET service request
*
         $TRACE $SUBINI,                                               +
               MID=ECFCPL,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
**       Establish recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0412)    set error RSN
         $RETRY GET0999,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
**       Validity check Cell Pool
*
         L     R7,DSASVR1              CPID parm
         L     R7,0(,R7)               cell pool ID
         SL    R7,=AL4(CPT@SIZE)       get prefix address
         USING CPT,R7                  CPT addressability
         ST    R7,DSAPRIXT             save primary extent address
         CLC   CPTID,=CL4'CPT'         valid indeed?
         BE    GET0100                 yes, test further
         MVC   DSARSN,=AL4(RSN0416)    set error RSN
         B     GET0999                 exit
*
GET0100  DS    0H
         MVC   DSARSN,=AL4(RSN0448)    set error RSN
         CLC   CPTSTAT,=CL3'DEL'       cell pool active?
         BE    GET0999                 yes, exit
*
**       Validity check Cell address
*
         ICM   R3,15,DSASVR0           cell address init?
         BNZ   GET0200                 yes, carry on
         MVC   DSARSN,=AL4(RSN0420)    set error RSN
         B     GET0999                 exit
*
**       Serialize Cell Pool
*
GET0200  DS    0H
         XR    R2,R2                   zero reg
         L     R3,PSAAOLD              ASCB address
         $CS   R2,R3,CPTLOCK           lock available?
         $MVC  CPTLOCK2,PSATOLD        yes, set lock owner
         OI    DSAFLG2,DSA@LOCK        lock held
*
**       Locate free cell element slot
*
GET0300  DS    0H
         ICM   R6,15,CPTFREE           free cell slot?
         BZ    GET0400                 no, test further
         $XC   CPTFREE,CPTFREE         zero free cell slot
         USING CPE,R6                  CPE addressability
         L     R1,CPTACTV              get active cell count
         LA    R1,1(,R1)               add one
         $ST   R1,CPTACTV              update count
         $MVC  CPESTAT,=CL4'ACTV'      activate cell
         $MVC  CPENCUR,=XL4'FFFFFFFF'  ID
         AL    R6,=AL4(CPE@SIZE)       bump past CPE prefix
*
         L     R3,DSASVR0              caller's cell output address
         ST    R6,0(,R3)               return cell address
         ST    R6,DSAOPAR              return cell address in R1
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         B     GET0999                 release lock
*
**       Locate free cell in primary extent
*
GET0400  DS    0H
         ICM   R6,15,CPTTCELL          top cell address init?
         BNZ   GET0500                 yes, carry on
         MVC   DSARSN,=AL4(RSN0424)   *cell pool is currupted
         B     GET0999                 release lock
*
GET0500  DS    0H
         CLC   CPEID,=CL4'CPE'         valid cell?
         BE    GET0600                 yes, test further
         MVC   DSARSN,=AL4(RSN0428)   *cell pool is currupted
         B     GET0999                 release lock
*
GET0600  DS    0H
         CLC   CPESTAT,=CL4'FREE'      cell available?
         BE    GET0900                 yes, carry on
         ICM   R6,15,CPECHPTR          no, get next cell
         BNZ   GET0500                 loop
*
**       Locate free cell in secondary extent
*
         ST    R7,DSACURXT             save current extent address
         ICM   R7,15,CPTCHPTR          secondary extent allocated?
         BZ    GET0700                 no, test further
         CLC   CPTID,=CL4'CPT'         valid indeed?
         BE    GET0400                 yes, loop
         MVC   DSARSN,=AL4(RSN0444)   *cell pool is currupted
         B     GET0999                 release lock
*
GET0700  DS    0H
         L     R7,DSAPRIXT             primary extent address
         CLC   CPTAXTNT,CPTXTNT        max extents allocated?
         BL    GET0800                 no, storage obtain extent
         TM    DSAFLG1,DSA@GETC        MODE=COND specified?
         BNZ   GET0800                 yes, storage obtain extent
         MVC   DSARSN,=AL4(RSN0432)    set error RSN
         B     GET0999                 release lock
*
**       Storage obtain secondary extent
*
GET0800  DS    0H
         $CALL GETXTNT                 get secondary extent
         CLC   DSARC,=AL4(RC0)         successful?
         BE    GET0810                 yes, locate free cell
         MVC   DSARSN,=AL4(RSN0440)    no, set error RC
         B     GET0999                 release lock
*
GET0810  DS    0H
         L     R7,DSAPRIXT             primary extent address
         L     R3,CPTAXTNT             allocated extent count
         LA    R3,1(,R3)               add one
         $ST   R3,CPTAXTNT             update count
         L     R7,DSACURXT             current extent address
         $MVC  CPTCHPTR,DSASECXT       chain extent
         L     R7,CPTCHPTR             secondary extent address
         XC    DSACURXT,DSACURXT       zero current extent address
         XC    DSASECXT,DSASECXT       zero secondary extent address
         B     GET0400                 loop
*
**       Activate Cell element
*
GET0900  DS    0H
         L     R3,CPTACTV              get active cell count
         LA    R3,1(,R3)               add one
         $ST   R3,CPTACTV              update count
         $MVC  CPESTAT,=CL4'ACTV'      activate cell
         $MVC  CPENCUR,=XL4'FFFFFFFF'  ID
         AL    R6,=AL4(CPE@SIZE)       bump past CPE prefix
         L     R3,DSASVR0              caller cell output address
         ST    R6,0(,R3)               return cell to caller
         ST    R6,DSAOPAR              return cell in R1
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
**       Release Cell Pool serialization
*
GET0999  DS    0H
         TM    DSAFLG2,DSA@LOCK        lock held?
         BZ    GET1000                 no, skip release
         L     R7,DSAPRIXT             primary extent
         $XC   CPTLOCK2,CPTLOCK2       zero lock owner
         $XC   CPTLOCK,CPTLOCK         release lock
         NI    DSAFLG2,XFF-DSA@LOCK    lock released
*
**       Issue Get Cell debug message
*
GET1000  DS    0H
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    GET2000                 no, exit
         $WTO  MID=ECF102I,                                            +
               VAR1==CL4'get',         show function                   +
               VAR2=DSAOPAR,           show cell address               +
               VAR3=DSARSN,            show RSN code                   +
               VAR4=CPTHDR             show cell pool header
*
GET2000  DS    0H
         CLC   DSARC,=AL4(RC0)         GET cell successful?
         BE    GETEXIT                 yes, exit
         TM    DSAFLG1,DSA@GETC        MODE=COND specified?
         BNZ   GETEXIT                 yes, skip ABEND
         $RETRY OFF                    turn off retry
         $ABEND UFF3,RSN=DSARSN        ABEND
*
GETEXIT  DS    0H
         $TRACE $SUBXIT,                                               +
               MID=ECFCPL,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: FREE                                                       */
*/*                                                                  */
*/* Function: FREE cell pool element subroutine                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  CELL                                             */
*/*             R1  CPID (negative)                                  */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* MACRO: $CPOOL FREE,CPID=(),CELL=()                               */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
FREE     $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability         @02A
*
**       Trace FREE service request
*
         $TRACE $SUBINI,                                               +
               MID=ECFCPL,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
**       Establish recovery
*
         MVC   DSARC,=AL4(RC12)        set RC
         MVC   DSARSN,=AL4(RSN0396)    set error RSN
         $RETRY FRE0999,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
**       Validity check Cell Pool
*
         L     R7,DSASVR1              copy cell pool ID
         L     R7,0(,R7)               cell pool ID
         SL    R7,=AL4(CPT@SIZE)       get prefix address
         USING CPT,R7                  CPT addressability
         MVC   DSARSN,=AL4(RSN0400)    set error RSN
         CLC   CPTID,=CL4'CPT'         valid indeed?
         BNE   FRE0999                 no, exit
         CLC   CPTSTAT,=CL3'USE'       cell pool active?
         BNE   FRE0999                 no, exit
*
**       Serialize Cell Pool
*
FRE0000  DS    0H
         XR    R2,R2                   zero reg
         L     R3,PSAAOLD              ASCB address
         $CS   R2,R3,CPTLOCK           lock available?
         $MVC  CPTLOCK2,PSATOLD        yes, set lock owner
         OI    DSAFLG2,DSA@LOCK        lock held
*
FRE0100  DS    0H
         ICM   R6,15,DSASVR0           cell element init?
         BNZ   FRE0200                 yes, carry on
         MVC   DSARSN,=AL4(RSN0404)    set error RSN
         B     FRE0999                 exit
*
FRE0200  DS    0H
         L     R6,0(,R6)               cell address
         ST    R6,DSACELL              save cell address
         SL    R6,=AL4(CPE@SIZE)       get CPE prefix
         USING CPE,R6                  CPE addressability
         CLC   CPEID,=CL4'CPE'         valid indeed?
         BE    FRE0300                 yes, carry on
         MVC   DSARSN,=AL4(RSN0408)    set error RSN
         B     FRE0999                 exit
*
**       Free Cell Pool element
*
FRE0300  DS    0H
         $MVC  CPESTAT,=CL4'FREE'
         $MVC  CPENCUR,=XL4'FFFFFFFF'  ID
         L     R1,CPTACTV              get active cells count
         BCTR  R1,0                    subtract one
         $ST   R1,CPTACTV              update count
         ICM   R1,15,CPTFREE           free cell slot init?
         BNZ   FRE0400                 yes, skip update
         $ST   R6,CPTFREE              update free cell slot
*
FRE0400  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
**       Release Cell Pool serialization
*
FRE0999  DS    0H
         TM    DSAFLG2,DSA@LOCK        lock held?
         BZ    FRE1000                 no, skip release
         $XC   CPTLOCK2,CPTLOCK2       zero lock owner
         $XC   CPTLOCK,CPTLOCK         release lock
         NI    DSAFLG2,XFF-DSA@LOCK    lock released
*
**       Issue Cell free debug message
*
FRE1000  DS    0H
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    FREEXIT                 no, exit
         $WTO  MID=ECF102I,                                            +
               VAR1==CL4'free',        show function                   +
               VAR2=DSACELL,           show cell address               +
               VAR3=DSARSN,            show RSN code                   +
               VAR4=CPTHDR             show cell pool header
*
FREEXIT  DS    0H
         $TRACE $SUBXIT,                                               +
               MID=ECFCPL,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
         XC    DSAOPAR,DSAOPAR         zero returned parm
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: GETPOOL                                                    */
*/*                                                                  */
*/* Function: Storage obtain primary cell pool extent                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  CELL                                             */
*/*             R1  CPID (negative)                                  */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* MACRO: $CPOOL FREE,CPID=(),CELL=()                               */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
GETPOOL  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability         @02A
         ST    R1,DSAPARM              save parm reg
*
**       Trace GETPOOL service routine
*
         $TRACE $SUBINI,                                               +
               MID=ECFCPL,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
**       Compute Cell Pool size
*
         L     R4,DSASP                cell pool subpool
         L     R3,DSACSIZE             cell size
         AL    R3,=AL4(CPE@SIZE)       add CPE cell prefix size
         ST    R3,DSACLSZE             save cell size
         L     R0,DSACELLS             number of cells
         MR    R2,R0                   compute cell pool size
         AL    R3,=AL4(CPT@SIZE)       Add CPT table size
         ST    R3,DSACPSZE             save cell pool size
*
**       Cell Pool COND storage obtain
*
         L     R2,DSAKEY               set supplied key
         SPKA  0(R2)                   set cell pool key
         TM    DSAFLG1,DSA@UCND        MODE=UNCOND specified?
         BNZ   GETP000                 yes, issue RU request
         GETMAIN RC,                                                   +
               LV=(R3),                size                            +
               SP=(R4)                 subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    GETP100                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0360)    set error RSN
         L     R15,STKEKEY             get my protect key          @02C
         SPKA  0(R15)                  set it                      @02C
         B     GETPXIT                 exit
*
**       Cell Pool UNCOND storage obtain
*
GETP000  DS    0H
         GETMAIN RU,                                                   +
               LV=(R3),                size                            +
               SP=(R4)                 subpool
*
GETP100  DS    0H
         LR    R2,R1                   copy storage address
         XR    R15,R15                 scrub,
         MVCL  R2,R14                  cell pool.
*
**       Initialize Cell Pool table
*
         LR    R7,R1                   copy storage address
         USING CPT,R7                  CPT addressability
         ST    R7,CPTCPID              save address of self
         MVC   CPTID,=CL4'CPT'         ID CPT
         MVC   CPTSTAT,=CL3'USE'       debugging indicator
         MVC   CPTTCB,PSATOLD          cell pool owner TCB
         MVC   CPTASCB,PSAAOLD         cell pool owner ASCB
         MVC   CPTSPN,DSASP            subpool
         MVC   CPTKEY,DSAKEY           key
         MVC   CPTXTNT,DSAXTNT         extents
         MVC   CPTCELLS,DSACELLS       number of cells
         MVC   CPTCSIZE,DSACLSZE       cell size
         MVC   CPTCPSZE,DSACPSZE       cell pool size
         MVC   CPTHDR,DSAHDR           cell pool header
*
**       Initialize Cell Pool elements
*
         LA    R6,CPT@SIZE(,R7)        top cell address
         USING CPE,R6                  CPE addressability
         ST    R6,CPTFREE              init free cell address
         ST    R6,CPTTCELL             init top cell address
         L     R2,CPTCSIZE             get cell size
         L     R3,CPTCELLS             get number of cells
         B     GETP300                 carry on
*
GETP200  DS    0H
         ST    R6,CPECHPTR-CPE(,R4)    chain cell
*
GETP300  DS    0H
         MVC   CPEID,=CL4'CPE'         ID cell
         MVC   CPESTAT,=CL4'FREE'      debugging indicator
         MVC   CPENCUR,=XL4'FFFFFFFF'  ID
         LR    R4,R6                   copy current cell address
         LA    R6,0(R2,R6)             next cell address
         BCT   R3,GETP200              loop
         OI    CPTFLG1,CPT@INI         set init complete
*
**       ID Cell Pool extent type
*
         L     R1,DSAPARM              get parm reg
         CLC   0(4,R1),=CL4'PRIM'      primary extent?
         BNE   GETP400                 no, carry on
         OI    CPTFLG1,CPT@PRI         ID extent type
         ST    R7,CPTPRIM              set primary extent
         L     R15,STKEKEY             get my protect key          @02C
         SPKA  0(R15)                  set it                      @02C
*
**       Return Cell Pool ID to Caller
*
GETP400  DS    0H
         ST    R7,DSAOPAR              return CPID output parm
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
GETPXIT  DS    0H
         $TRACE $SUBXIT,                                               +
               MID=ECFCPL,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: GETXTNT                                                    */
*/*                                                                  */
*/* Function: Storage obtain secondary cell pool extent              */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
GETXTNT  $SUBINI
         USING PSA,0                     FLC addressability
         USING EVT,R11                   EVT addressability
         USING STKE,R13                  STKE addressability       @02A
         IPK   0(0)                      get my protect key
         ST    R2,DSASKEY                same protect key
*
**       Trace GETXTNT service routine
*
         $TRACE $SUBINI,                                               +
               MID=ECFCPL,               trace caller                  +
               A=(R13),                  trace storage addrss          +
               LN=DSA@SIZE               trace storage size
*
**       Storage obtain Cell Pool extent
*
         L     R7,DSAPRIXT               primary extent address
         USING CPT,R7                    CPT addressability
         L     R2,CPTKEY                 key
         L     R3,CPTCPSZE               size
         L     R4,CPTSPN                 subpool
         SPKA  0(R2)                     set cell pool key
*
         GETMAIN RC,                                                   +
               LV=(R3),                  size                          +
               SP=(R4)                   subpool
         ST    R15,DSARC                 save RC
         LTR   R15,R15                   successful?
         BZ    GETX100                   yes, carry on
         MVC   DSARC,=AL4(RC12)          set error RC
         MVC   DSARSN,=AL4(RSN0436)      set error RSN
         B     GETXEXIT                  exit
*
GETX100  DS    0H
         LR    R2,R1                     copy storage address
         XR    R15,R15                   scrub,
         MVCL  R2,R14                    cell pool.
*
**       Initialize Cell Pool table
*
         LR    R7,R1                     copy storage address
         ST    R7,DSAOPAR                return extent in R1
         ST    R7,DSASECXT               save secondary extent address
         ST    R7,CPTCPID                save address of self
         L     R5,DSAPRIXT               primary extent address
         MVC   CPTID,=CL4'CPT'           ID CPT
         MVC   CPTSTAT,=CL3'USE'         debugging indicator
         MVC   CPTPRIM,DSAPRIXT          copy prim extent in secondry
         MVC   CPTTCB,CPTTCB-CPT(R5)     cell pool owner TCB
         MVC   CPTASCB,CPTASCB-CPT(R5)   cell pool owner ASCB
         MVC   CPTSPN,CPTSPN-CPT(R5)     subpool
         MVC   CPTKEY,CPTKEY-CPT(R5)     key
         MVC   CPTXTNT,CPTXTNT-CPT(R5)   extents
         MVC   CPTCELLS,CPTCELLS-CPT(R5) number of cells
         MVC   CPTCSIZE,CPTCSIZE-CPT(R5) cell size
         MVC   CPTCPSZE,CPTCPSZE-CPT(R5) cell pool size
         MVC   CPTHDR,CPTHDR-CPT(R5)     cell pool header
*
**       Initialize Cell Pool elements
*
         LA    R6,CPT@SIZE(,R7)          top cell address
         USING CPE,R6                    CPE addressability
         ST    R6,CPTFREE                init free cell address
         ST    R6,CPTTCELL               init top cell address
         L     R2,CPTCSIZE               get cell size
         L     R3,CPTCELLS               get number of cells
         B     GETX300                   carry on
*
GETX200  DS    0H
         ST    R6,CPECHPTR-CPE(,R4)      chain cell
*
GETX300  DS    0H
         MVC   CPEID,=CL4'CPE'           ID cell
         MVC   CPESTAT,=CL4'FREE'        debugging indicator
         MVC   CPENCUR,=XL4'FFFFFFFF'    ID
         LR    R4,R6                     copy current cell address
         LA    R6,0(R2,R6)               next cell address
         BCT   R3,GETX200                loop
         OI    CPTFLG1,CPT@INI           set init complete
         XC    DSARC,DSARC               set RC
         XC    DSARSN,DSARSN             set RSN
         L     R15,STKEKEY               get my protect key        @02C
         SPKA  0(R15)                    set it                    @02C
*
GETXEXIT DS    0H
         $TRACE $SUBXIT,                                               +
               MID=ECFCPL,               trace caller                  +
               A=(R13),                  trace storage addrss          +
               LN=DSA@SIZE               trace storage size
*
         $SUBXIT PARM=DSAOPAR,           exit                          +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFEQU ,
         $ECFCPT ,
         $ECFSTK ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@COND EQU   X'80'                   BUILD MODE=COND indicator
DSA@UCND EQU   X'40'                   BUILD MODE=UNCOND indicator
DSA@DEL  EQU   X'20'                   DELETE request indicator
DSA@GET  EQU   X'10'                   GET request indicator
DSA@FREE EQU   X'08'                   FREE request indicator
DSA@GETC EQU   X'04'                   MODE=COND indicator
DSA@DCND EQU   X'02'                   DELETE MODE=COND indicator
DSA@DUNC EQU   X'01'                   DELETE MODE=UNCOND indicator
         DS    0X
DSAFLG2  DS    XL1                     flags
DSA@LOCK EQU   X'80'                   CPT lock held indicator
DSA@HOME EQU   X'40'                   running in ECF address space
DSA@2RZ2 EQU   X'20'                   -available
DSA@2RZ3 EQU   X'10'                   -available
DSA@2RZ4 EQU   X'08'                   -available
DSA@2RZ5 EQU   X'04'                   -available
DSA@2RZ6 EQU   X'02'                   -available
DSA@2RZ7 EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL2                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSACKEY  DS    F                       caller's protect key        @02A
         DS    0F
DSAOPAR  DS    F                       output PARM reg
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
         DS    0F
DSAPARM  DS    F                       parm ptr
DSASVR0  DS    F                       reg R0
DSASVR1  DS    F                       reg R1
         DS    0F
DSAXKEY  DS    F                       cell pool key
DSASKEY  DS    F                       protect key
DSAPRIXT DS    F                       primary extent address
DSASECXT DS    F                       primary extent address
DSACURXT DS    F                       current extent address
DSACHPTR DS    F                       CPT chain pointer
DSACLSZE DS    F                       cell size w/CPE prefix
DSACPSZE DS    F                       cell pool size w/CPT prefix
         DS    0F
DSACPID  DS    F                       CPID address
DSACELL  DS    F                       cell address
DSACELLS DS    F                       CELLS number
DSACSIZE DS    F                       CSIZE number
DSASP    DS    F                       SP number
DSAXTNT  DS    F                       XTNT number
DSAKEY   DS    F                       KEY
DSAHDR   DS    CL24                    cell pool BUILD header
DSAHDR2  DS    CL24                    cell pool DELETE header
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*
**    BUILD MF=L map
*
LST      DSECT ,
LSTCPID  DS    A                       .CPID address
LSTCELLS DS    AL4                     .CELLS address
LSTCSIZE DS    AL4                     .CSIZE address
LSTSP    DS    AL4                     .SP address
LSTXTNT  DS    AL4                     .XTNT address
LSTKEY   DS    AL4                     .storage key
LSTHDR   DS    CL24                    .HDR name
LST@SIZE EQU   *-LST
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IKJTCB DSECT=YES
         IKJRB DSECT=YES,LIST=YES
         CVT   DSECT=YES
         END
./ ADD NAME=ECFCSA   0199-21068-21304-1642-00924-00710-00918-BENMAR  53
ECFCSA   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFCSA                                                     */
*/*                                                                  */
*/* Function: ECF Dynamic-LPA support service routine                */
*/*                                                                  */
*/* Description: Add/delete modules to/from pageable/fixed E/CSA     */
*/*              virtual storage.                                    */
*/*                                                                  */
*/* Input Regs: R0  SRID                                             */
*/*                 04 - add request                                 */
*/*                 08 - delete request                              */
*/*             R1  LMOD name address                                */
*/*             R9  STK address                                      */
*/*             R11 Local EVT address                                */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*   m                                                              */
*/* Regs Usage: R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R11 Local EVT address                                */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, key=0                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
* @03 | V2R2 | 06072021 | Ben Marino  | zOS security server support   *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
         COPY  $GLBLS
ECFCSA   $SRVINI                       module ID
         STM   R0,R1,DSAIPAR           save parm regs
         MVC   DSALMOD,0(R1)           copy LMOD name
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN2008)    set error RSN
         $RETRY LPAEXIT,               activate retry                  +
               RSN=DSARSN,             RSN code                        +
               SDUMP=NO                skip SVC dump
*
**       DYNLPA add service request
*
         CLC   DSAIGR0,ADDSRID         DYNLPA add equest?
         BNE   LPA0010                 no, test further
         TM    STKFLG1,STK@HZOS        zOS host system?
         BNZ   LPA0099                 yes, exit w/errors
         MVC   DSARQST,=CL8'CSALOAD'   set request ID
         $CALL ADDLPA                  call service routine
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    LPAEXIT                 no, exit
         OI    STKFLG2,STK@191I        msg issued indicator
         $WTO  MID=ECF191I,                                            +
               VAR1=DSALMOD,           show LMOD name                  +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN,            show RSN                        +
               VAR4=DSASIZE            show module size
         TM    DSAFLG1,DSA@DACT        LOAD listener diactivated?
         BZ    LPAEXIT                 no, skip msg
         $WTO  MID=ECF111I,                                            +
               VAR1==CL11'deactivated'
         B     LPAEXIT                 exit
*
**       DYNLPA delete service request
*
LPA0010  DS    0H
         CLC   DSAIGR0,DELSRID         DYNLPA delete request?
         BNE   LPA0020                 no, test further
         TM    STKFLG1,STK@HZOS        zOS host system?
         BNZ   LPA0099                 yes, exit w/errors
         MVC   DSARQST,=CL8'CSADEL'    set request ID
         $CALL DELLPA                  call service routine
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    LPAEXIT                 no, exit
         $WTO  MID=ECF192I,                                            +
               VAR1=DSALMOD,           show LMOD name                  +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN,            show RSN                        +
               VAR4=DSASIZE            show module size
         B     LPAEXIT                 exit
*
**       Dynamic-LPA add service request                           @02A
*
LPA0020  DS    0H
         CLC   DSAIGR0,CSVADDID        add reuest?
         BNE   LPA0040                 no, test further
         TM    STKFLG1,STK@HZOS        zOS host system?
         BZ    LPA0099                 no, exit w/errors
         MVC   DSAZSSM,ECFSSM          init major
         MVC   DSAEQDQ(SSMENQL),SSMENQ init listform
         LA    R2,DSAZSSM              major name
         LA    R3,DSALMOD              minor name
         ENQ   ((R2),(R3)),MF=(E,DSAEQDQ)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 SSI module in use?
         BZ    LPA0030                 no, carry on
         $WTO  MID=ECF068E,                                            +
               VAR1==CL6'Add',         show request                    +
               VAR2=DSARC,             show RC                         +
               VAR3=DSALMOD            show LMOD
         B     LPAEXIT                 exit
*
LPA0030  DS    0H
         MVC   DSARQST,=CL8'LPALOAD'   set request ID
         $CALL CSVADD                  call service routine
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    LPAEXIT                 no, exit
         $WTO  MID=ECF192I,                                            +
               VAR1=DSALMOD,           show LMOD name                  +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN,            show RSN                        +
               VAR4=DSASIZE            show module size
         B     LPAEXIT                 exit
*
**       Dynamic-LPA delete service request                        @02A
*
LPA0040  DS    0H
         CLC   DSAIGR0,CSVDELID        delete request?
         BNE   LPA0099                 no, error
         TM    STKFLG1,STK@HZOS        zOS host system?
         BZ    LPA0099                 no, exit w/errors
         TM    EVTFLG1,EVT@TERM        subsystem terminating?
         BNZ   LPA0050                 yes, skip serialization
         MVC   DSAZSSM,ECFSSM          init major
         MVC   DSAEQDQ(SSMENQL),SSMENQ init listform
         LA    R2,DSAZSSM              major name
         LA    R3,DSALMOD              minor name
         ENQ   ((R2),(R3)),MF=(E,DSAEQDQ)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 SSI module in use?
         BZ    LPA0050                 no, carry on
         $WTO  MID=ECF068E,                                            +
               VAR1==CL6'Delete',      show request                    +
               VAR2=DSARC,             show RC                         +
               VAR3=DSALMOD            show LMOD
         B     LPAEXIT                 exit
*
LPA0050  DS    0H
         MVC   DSARQST,=CL8'LPADEL'    set request ID
         $CALL CSVDEL                  call service routine
         TM    EVTFLG1,EVT@TERM        subsystem terminating?
         BNZ   LPA0060                 yes, skip resource release
         MVC   DSAEQDQ(SSMDEQL),SSMDEQ init listform
         LA    R2,DSAZSSM              major name
         LA    R3,DSALMOD              minor name
         DEQ   ((R2),(R3)),MF=(E,DSAEQDQ)
*
LPA0060  DS    0H
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    LPAEXIT                 no, exit
         $WTO  MID=ECF192I,                                            +
               VAR1=DSALMOD,           show LMOD name                  +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN,            show RSN                        +
               VAR4=DSASIZE            show module size
         B     LPAEXIT                 exit
*
**       Process invalid service request
*
LPA0099  DS    0H
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN2012)    set error RSN
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    LPAEXIT                 no, exit
         $WTO  MID=ECF190I,                                            +
               VAR1=DSALMOD,           show LMOD name                  +
               VAR2=DSARQST,           show LOAD/DELETE id             +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN code
         B     LPAEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
LPAEXIT  DS    0H
         $SRVXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ADDSRID  DC    AL4(4)                  GLOBAL=CSA load ID
DELSRID  DC    AL4(8)                  GLOBAL=CSA delete ID
CSVADDID DC    AL4(12)                 GLOBAL=LPA load ID
CSVDELID DC    AL4(16)                 GLOBAL=LPA delete ID
*---------------------------------------------------------------------*
*        Subsystem Load Module serialization                          *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
SSMENQ   ENQ   (ECFSSM,0,E,8,SYSTEM),RET=USE,MF=L
SSMENQL  EQU   *-SSMENQ
         DS    0F
SSMDEQ   DEQ   (ECFSSM,0,8,SYSTEM),MF=L
SSMDEQL  EQU   *-SSMDEQ
         DS    0C
ECFSSM   DC    CL8'ECFSSM'             Major name
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ADDLPA                                                     */
*/*                                                                  */
*/* Function: Add load module to SP=228 fixed CSA.                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ADDLPA   $SUBINI
         STM   R9,R11,DSAREGS          protect regs
*
**       Search Job Pack area queue
*
         USING PSA,0                   PSA addressability
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         LA    R9,DSALMOD              LMOD name address
         L     R8,PSATOLD              jobstep TCB address
         USING TCB,R8                  set addressability
         LA    R8,TCBJPQ               JPQ address
         L     R15,CVTQCDSR            active JPQ search routine
         BALR  R14,R15                 LMOD found?
         B     ADD0070                 yes, carry on
*
**       Search Link Pack Area queue
*
         L     R8,CVTQLPAQ             CDE chain header
         LA    R9,DSALMOD              LMOD name address
         L     R15,CVTQCDSR            active LPA search routine
         BALR  R14,R15                 LMOD found?
         B     ADD0080                 yes, carry on
*
**       Load caller requeted load module
*
ADD0010  DS    0H
         XC    DSACDEA,DSACDEA         zero CDE address
         LM    R9,R11,DSAREGS          restore regs
         $CALL LOADMOD                 load LMOD
         B     ADDEXIT                 exit
*
**       LMOD found in Job Pack queue area
*
ADD0070  DS    0H
         ST    R11,DSACDEA             returned CDE address
         LM    R9,R11,DSAREGS          restore regs
         OI    DSAFLG1,DSA@JPQQ        set JPQ indicator
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN2024)    set error RSN
         B     ADDEXIT                 exit
*
**       LMOD found in Link Pack Area queue
*
ADD0080  DS    0H
         ST    R11,DSACDEA             returned CDE address
         LM    R9,R11,DSAREGS          restore regs
         OI    DSAFLG1,DSA@LPAQ        set LPA indicator
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN2028)    set error RSN
         B     ADDEXIT                 exit
*
ADD0099  DS    0H
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN2016)    set error RSN
*
ADDEXIT  DS    0H
         LM    R9,R11,DSAREGS          restore regs
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DELLPA                                                     */
*/*                                                                  */
*/* Function: Delete load module from SP=228 fixed CSA.              */
*/*                                                                  */
*/* Description: Prior to loading the load module via the LOAD       */
*/*              Supervisor call, we intercepted IEWFETCH and        */
*/*              altered the Contents Supervisor supplied subpool    */
*/*              from SP=252 to SP=228 as follows:                   */
*/*                                                                  */
*/*              1. Replace CVTFETCH with ECFIEW intercept routine   */
*/*              2. Issue LOAD EPLOC=LMOD-name                       */
*/*              3. ECFIEW checks for the specified LMOD and changes */
*/*                 SP=252 to SP=228.                                */
*/*              4. Restore CVTFETCH with original IEWFETCH entry    */
*/*                 point.                                           */
*/*                                                                  */
*/*              When the DELETE Supervisor call is issued, the      */
*/*              Contents Supervisor successfully deletes the CDE    */
*/*              and extent list from the Job Pack Queue area, but   */
*/*              quietly fails to release the load module storage    */
*/*              block and returns to the DELETE caller with RC=4    */
*/*              in R15. RC=4 means that the load module storage     */
*/*              block was only partially released. Extensive tests  */
*/*              show that the complete load module storage block    */
*/*              still resides in CSA SP=228. Therefore, it's the    */
*/*              responsibility of this routine to issue FREEMAIN    */
*/*              to release the CSA storage block.                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DELLPA   $SUBINI
         STM   R9,R11,DSAREGS          protect regs
*
**       Search Job Pack area queue
*
         USING PSA,0                   PSA addressability
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         LA    R9,DSALMOD              LMOD name address
         L     R8,PSATOLD              jobstep TCB address
         USING TCB,R8                  set addressability
         LA    R8,TCBJPQ               JPQ address
         L     R15,CVTQCDSR            active JPQ search routine
         BALR  R14,R15                 LMOD found?
         B     DEL0010                 yes, carry on
         MVC   DSARC,=AL4(RC8)         no, set error RC
         MVC   DSARSN,=AL4(RSN2040)    set error RSN
         B     DELEXIT                 exit
*
**       LMOD found in Job Pack Queue area
*
DEL0010  DS    0H
         ST    R11,DSACDEA             returned CDE address
         LM    R9,R11,DSAREGS          restore regs
         L     R8,DSACDEA              load CDE address
         USING CDENTRY,R8              set addessability
         L     R7,CDXLMJP              get extent list address
         TM    CDATTR,CDMIN            minor CDE?
         BZ    DEL0020                 no, carry on
         LR    R8,R7                   copy major CDE address
         L     R7,CDXLMJP              get extent list address
         USING XTLST,R7                set addressability
*
DEL0020  DS    0H
         CLC   CDUSE,=H'1'             single use count?
         BE    DEL0030                 yes, delete storage block
         DELETE EPLOC=DSALMOD          no, decrement use count
         ST    R15,DSARC               save RC
         XC    DSARSN,DSARSN           set RSN
         B     DELEXIT                 exit
*
**       Delete CDE/XTNT from Job Pack Queue area
*
DEL0030  DS    0H
         XC    DSAMODA,DSAMODA         zero storage address
         MVC   DSAMODA+1(3),XTLMSBAD   copy LMOD storage address
         XC    DSAMODL,DSAMODL         zero storage size
         MVC   DSAMODL+1(3),XTLMSBLN   copy LMOD storage length
         MVC   DSASIZE,DSAMODL         copy it here as well
         DELETE EPLOC=DSALMOD          delete LMOD from JPQ
*
**       Storage release LMOD from CSA SP=228
*
         L     R1,DSAMODA              LMOD size
         L     R0,DSAMODL              LMOD address
         FREEMAIN RC,                                                  +
               A=(1),                  address                         +
               LV=(0),                 length                          +
               SP=228                  subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    DEL0040                 yes, exit
         $WTO  MID=ECF095E,            no, issue error msg             +
               VAR1==CL3'CSA',                                         +
               VAR2==CL7'release',VAR3=DSARC,VAR4==CL8'ECFCSA'
         B     DELEXIT                 exit
*
DEL0040  DS    0H
         XC    DSARSN,DSARSN           set RSN
*
DELEXIT  DS    0H
         LM    R9,R11,DSAREGS          restore regs
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: LOADMOD                                                    */
*/*                                                                  */
*/* Function: This routine hooks CVTFETCH with the ECFIEW fron-end   */
*/*           entry point. Its purpose is to allow load modules to   */
*/*           be loaded into fixed or pageable CSA.                  */
*/*                                                                  */
*/*                                                                  */
*/* Why? The MVS 3.8j Contents Supervisor does not support loading   */
*/*      load modules to fixed or pageable CSA storage. Code changes */
*/*      to load modules that must reside in common storage require  */
*/*      you to IPL MVS 3.8j with either CLPA or MLPA.               */
*/*                                                                  */
*/* Solution: Intercept MVS 3.8j program fetch IEWFETCH entry point  */
*/*           with the ECFIEW routine to alter the subpool suplied   */
*/*           by the LOAD supervisor call SVC from SP=252 to SP=228. */
*/*           The requested load module is loaded via the LOAD macro */
*/*           and the program fetch IEWFETCH entry point is restored.*/
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
LOADMOD  $SUBINI
         USING PSA,0                   FLC addressability
*
**       Activate recovery
*
         XC    DSAOPAR,DSAOPAR         zero LMOD address
         XC    DSASIZE,DSASIZE         zero LMOD size
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN2036)    set error RSN
         $RETRY LOADEXIT,              set retry address               +
               RSN=DSARSN,             RSN code                        +
               SDUMP=NO                skip SVC dump
*
**       Intercept IEWFETCH entry point
*
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R7,CVTFETCH             get IEWFETCH EPA
         USING IEW,R7                  set addressability
         CLC   IEWNAME,=CL8'ECFIEW'    intercept in place?
         BNE   LOAD000                 no, intercept it
         MVC   IEWSSM,DSALMOD          yes, set target LMOD
         MVC   IEWSPN,=AL4(228)        set fixed CSA subpool
         B     LOAD020                 load it
*
LOAD000  DS    0H
         L     R7,=V(ECFIEW)           ECFIEW EPA
         L     R3,IEWFTCL              ECFIEW size
         GETMAIN RC,                   obtain SQA storage              +
               LV=(R3),                size                            +
               SP=245                  subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    LOAD010                 yes, carry on
         $WTO  MID=ECF095E,            no, issue error msg             +
               VAR1==CL3'SQA',                                         +
               VAR2==CL7'obtain',VAR3=DSARC,VAR4==CL8'ECFCSA'
         B     LOADEXIT                exit w/errors
*
LOAD010  DS    0H
         ST    R1,DSAIEWA              save ECFIEW SQA address
         LR    R2,R1                   copy storage address
         LR    R15,R3                  ECFIEW SQA length
         LR    R14,R7                  local ECFIEW EPA
         MVCL  R2,R14                  relocate ECFIEW to SQA
         L     R3,FLCCVT               restore CVT addressability
         L     R7,DSAIEWA              get relocated ECFIEW EPA
         MVC   IEWFTCH,CVTFETCH        save real IEWFETCH EPA
         MVC   IEWSSM,DSALMOD          load LMOD in SP=228
         MVC   IEWSPN,=AL4(228)        set fixed CSA subpool
         L     R0,CVTFETCH             IEWFETCH EPA
         L     R2,DSAIEWA              ECFIEW EPA
         CS    R0,R2,CVTFETCH          intercept IEWFETCH
         DROP  R3,R7
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    LOAD020                 no, skip msg
         $WTO  MID=ECF111I,                                            +
               VAR1==CL11'activated'
*
**       Load requested LMOD in CSA SP=228
*
LOAD020  DS    0H
         LOAD  EPLOC=DSALMOD,          requested LMOD                  +
               ERRET=LOAD030           error exit
         ST    R0,DSAOPAR              save LMOD address
         XC    DSASIZE,DSASIZE         zero size word
         STCM  R1,7,DSASIZE+1          save size(doublewords)
         L     R3,DSASIZE              LMOD doublewords size
         LA    R0,8                    multiply * 8
         MR    R2,R0                   R3 now has SSI module size
         ST    R3,DSASIZE              save true LMOD size
         OI    DSAFLG1,DSA@LOAD        LMOD loaded indicator
         XC    DSARC,DSARC             set RC
         B     LOAD040                 carry on
*
**       Requested LMOD load failed
*
LOAD030  DS    0H
         ST    R15,DSARC               save error RC
         MVC   DSARSN,=AL4(RSN2032)    set error RSN
         XC    DSAOPAR,DSAOPAR         zero LMOD address
         XC    DSASIZE,DSASIZE         zero LMOD size
         OI    DSAFLG1,DSA@FAIL        LMOD load failed
*
**       Restore IEWFETCH entry point
*
LOAD040  DS    0H
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R7,CVTFETCH             get IEWFETCH EPA
         USING IEW,R7                  set addressability
         CLC   IEWNAME,=CL8'ECFIEW'    IEWFETCH hooked?
         BNE   LOAD099                 no, exit
         ST    R7,DSAIEWA              ECFIEW storage address
         MVC   DSAIEWL,IEWFTCL         ECFIEW storage length
         L     R0,CVTFETCH             ECFIEW EPA
         L     R2,IEWFTCH              IEWFETCH real EPA
         CS    R0,R2,CVTFETCH          restore IEWFETCH EPA
         L     R0,DSAIEWL              set storage length
         L     R1,DSAIEWA              set storage address
         FREEMAIN RC,                                                  +
               A=(R1),                 address                         +
               LV=(R0),                length                          +
               SP=245                  SQA subpool
         ST    R15,DSAXRC              save RC
         LTR   R15,R15                 successful?
         BZ    LOAD050                 yes, carry on
         $WTO  MID=ECF095E,            no, issue error msg             +
               VAR1==CL3'SQA',                                         +
               VAR2==CL7'release',VAR3=DSAXRC,VAR4==CL8'ECFCSA'
         B     LOAD099                 carry on
*
LOAD050  DS    0H
         OI    DSAFLG1,DSA@DACT        deactivate successful
*
LOAD099  DS    0H
         TM    DSAFLG1,DSA@FAIL        LMOD load failed?
         BNZ   LOADEXIT                yes, exit
         MVC   DSARSN,DSASIZE          return LMOD size in R0
         XC    DSARC,DSARC             set RC
*
LOADEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: CSVADD                                                     */
*/*                                                                  */
*/* Function: Add load module via CSVDYLPA z/OS service              */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
CSVADD   $SUBINI
         USING EVT,R11
*
**       Serialize CSVDYLPA add request
*
         MVC   DSAEQDQ(CSVENQL),CSVENQ init listform
         ENQ   MF=(E,DSAEQDQ)          serialize resource
         OI    DSAFLG1,DSA@LENQ        set ENQ indicator
*
**       Activate recovery
*
         $RETRY CSVA099,               activate retry                  +
               RSN=DSARSN,             RSN code                        +
               SDUMP=NO                skip SVC dump
*
**       Add subsysytem load module to LPA
*
         LA    R7,DSADYLPA
         USING LPMEA,R7
         XC    DSADYLPA(LPMEA_LEN),DSADYLPA
         MVC   LPMEANAME,DSALMOD            module name
         OI    LPMEAINPUTFLAGS0,LPMEAFIXED  page fix it
         OI    LPMEAINPUTFLAGS0,LPMEASTORAGEOWNERSYSTEM
         SAM31 ,
         CSVDYLPA REQUEST=ADD,                                         +
               MODINFO=(R7),                                           +
               MODINFOTYPE=MEMBERLIST, by member name                  +
               BYADDR=NO,              fetch required                  +
               NUMMOD=LMODACT,         module add count                +
               DDNAME=STEPLIB,         fetch LMOD from STEPLIB         +
               APFREQUIRED=YES,        STEPLIB must be APF-authorized  +
               SECMODCHECK=YES,        do RACF FACILITY class check    +
               REQUESTOR=LMODREQ,      requesting subsysytem ID        +
               RETCODE=DSARC,          return RC here                  +
               RSNCODE=DSARSN,         return RSN here                 +
               MF=(E,DYLPAL)           listform
         SAM24 ,
*
**       Release CSVDYLPA add serialization
*
CSVA099  DS    0H
         MVC   DSAEQDQ(CSVDEQL),CSVDEQ init listform
         DEQ   MF=(E,DSAEQDQ)          release serialization
         NI    DSAFLG1,XFF-DSA@LENQ    reset ENQ indicator
*
**       Init load module address, size & token
*
         CLC   DSARC,=AL4(RC0)         CSVDYLPA successful?
         BNE   CSVAXIT                 no, exit
         MVC   EVTLPATK,LPMEADELETETOKEN  copy delete token
         MVC   EVTSSMA,LPMEALOADPOINTADDR  copy LMOD address
         MVC   EVTSSMSZ,LPMEAMODLEN    copy LMOD size
         OI    EVTFLG5,EVT@HLPA        ECFCSM loaded indicator
*
CSVAXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
LMODACT  DC    F'1'                    module fetch count
STEPLIB  DC    CL8'STEPLIB'            fetch module from STEPLIB
LMODREQ  DC    CL16'zECF&REL.ECFCSA'   LPA add requestor           @03C
*---------------------------------------------------------------------*
*        Dynamic-LPA ADD serialization                                *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
CSVENQ   ENQ   (CSVMAJ,CSVMIN,E,8,SYSTEM),RET=HAVE,MF=L
CSVENQL  EQU   *-CSVENQ
         DS    0F
CSVDEQ   DEQ   (CSVMAJ,CSVMIN,8,SYSTEM),MF=L
CSVDEQL  EQU   *-CSVDEQ
         DS    0C
CSVMAJ   DC    CL8'SYSZCSV'            Major name
CSVMIN   DC    CL8'CSVDYLPA'           Minor name
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: CSVDEL                                                     */
*/*                                                                  */
*/* Function: delete load module via CSVDYLPA z/OS service           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
CSVDEL   $SUBINI
         USING EVT,R11
*
**       Serialize CSVDYLPA delete request
*
         MVC   DSAEQDQ(CSDENQL),CSDENQ init listform
         ENQ   MF=(E,DSAEQDQ)          serialize resource
         OI    DSAFLG1,DSA@LENQ        set ENQ indicator
*
**       Activate recovery
*
         $RETRY CSVD099,               activate retry                  +
               RSN=DSARSN,             RSN code                        +
               SDUMP=NO                skip SVC dump
*
**       Delete LPA load module by token
*
         TM    STKFLG2,STK@CURR
         BNZ   CSVD010
         LA    R7,DSADYLPA
         USING LPMED,R7
         XC    DSADYLPA(LPMED_LEN),DSADYLPA
         MVC   LPMEDNAME,DSALMOD
         MVC   LPMEDDELETETOKEN,STKLPATK
         SAM31 ,
         CSVDYLPA REQUEST=DELETE,                                      +
               MODINFO=(R7),                                           +
               TYPE=BYTOKEN,           delete using supplied token     +
               NUMMOD=LMODDCT,         module delete count             +
               SECMODCHECK=YES,        do RACF FACILITY class check    +
               RETCODE=DSARC,          return RC here                  +
               RSNCODE=DSARSN,         return RSN here                 +
               MF=(E,DYLPAL)           listform
         SAM24 ,
         CLC   DSARC,=AL4(RC0)         successful?
         BE    CSVD099                 yes, exit
         CLC   DSARC,=XL4'00000004'    warning RC?
         BNE   CSVD099                 no, exit
         CLC   DSARSN,=XL4'00000401'   not found RSN?
         BNE   CSVD099                 no, exit
         XC    DSARC,DSARC             set RC
         B     CSVD099                 exit
*
**       Delete current LPA load module instance
*
CSVD010  DS    0H
         LA    R7,DSADYLPA
         USING LPMED,R7
         XC    DSADYLPA(LPMED_LEN),DSADYLPA
         MVC   LPMEDNAME,DSALMOD
         SAM31 ,
         CSVDYLPA REQUEST=DELETE,                                      +
               MODINFO=(R7),                                           +
               TYPE=CURRENT,           delete current instance         +
               NUMMOD=LMODDCT,         module delete count             +
               SECMODCHECK=YES,        do RACF FACILITY class check    +
               RETCODE=DSARC,          return RC here                  +
               RSNCODE=DSARSN,         return RSN here                 +
               MF=(E,DYLPAL)           listform
         SAM24 ,
         CLC   DSARC,=AL4(RC0)         successful?
         BE    CSVD099                 yes, exit
         CLC   DSARC,=XL4'00000004'    warning RC?
         BNE   CSVD099                 no, exit
         CLC   DSARSN,=XL4'00000401'   not found RSN?
         BNE   CSVD099                 no, exit
         XC    DSARC,DSARC             set RC
*
**       Release CSVDYLPA delete serialization
*
CSVD099  DS    0H
         MVC   DSAEQDQ(CSDDEQL),CSDDEQ init listform
         DEQ   MF=(E,DSAEQDQ)          release serialization
         NI    DSAFLG1,XFF-DSA@LENQ    reset ENQ indicator
*
CSVDXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
LMODDCT  DC    F'1'                    module delete count
*---------------------------------------------------------------------*
*        Dynamic-LPA DELETE serialization                             *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
CSDENQ   ENQ   (CSVMAJ,CSDMIN,E,8,SYSTEM),RET=HAVE,MF=L
CSDENQL  EQU   *-CSDENQ
         DS    0F
CSDDEQ   DEQ   (CSDMAJ,CSDMIN,8,SYSTEM),MF=L
CSDDEQL  EQU   *-CSDDEQ
         DS    0C
CSDMAJ   DC    CL8'SYSZCSV'            Major name
CSDMIN   DC    CL8'CSVDYLPA'           Minor name
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFSTK ,
         $ECFVT ,
         $ECFEQU ,
         $IEWFID ID=IEW,DSECT=YES
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAREGS  DS    3F                      regs R9,R10,R11 savearea
DSAFLG1  DS    XL1                     flags
DSA@LOAD EQU   X'80'                   LMOD LOADed indicator
DSA@FAIL EQU   X'40'                   LMOD load failed indicator
DSA@JPQQ EQU   X'20'                   LMOD found in JPQ indicator
DSA@LPAQ EQU   X'10'                   LMOD found in LPA indicator
DSA@PASS EQU   X'08'                   1st LMOD char indicator
DSA@DACT EQU   X'04'                   LOAD listener status indicator
DSA@LENQ EQU   X'02'                   CSVDYLPA ENQ/DEQ indicator
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSAXRC   DS    F                       return code
DSARSN   DS    F                       reason code
DSACDEA  DS    F                       CDE address
DSAIEWA  DS    F                       ECFIEW storage address
DSAIEWL  DS    F                       ECFIEW storage length
DSAMODA  DS    F                       LMOD storage address
DSAMODL  DS    F                       LMOD storage size
         DS    0F
DSAOPAR  DS    F                       output parm reg
DSASIZE  DS    F                       load module size
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               keep it together
         DS    0F
DSAEQDQ  DS    CL(CSVENQL)             ENQ/DEQ listform
         DS    0D
DSAZSSM  DS    CL8                     ENQ major name
DSALMOD  DS    CL8                     load module name
DSARQST  DS    CL8                     LOAD/DELETE ID
         DS    0D
DSADYLPA DS    CL(LPMED_LEN)           CSVDYLPA listform
         DS    0D
DSADYLST CSVDYLPA MF=(L,DYLPAL)        CSVDYLPA listform
DSARQLPA DS    0D                      CSVDYLPA
DSARQSUB DS    CL4                     -subsystem name
DSARQREL DS    CL6                     -subsystem release level
DSARQMOD DS    CL6                     -subsystem load module
DSA@RQSZ EQU   *-DSARQLPA              keep it together
         DS    0D
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHACDE ,
         IHAXTLST ,
         IHAPSA ,
         IKJTCB ,
         CVT   DSECT=YES
         CSVLPRET LIST=YES
         END
./ ADD NAME=ECFDIE   0130-21056-21321-0857-00467-00461-00467-BENMAR  28
ECFDIE   CSECT
ECFDIE   AMODE 31
ECFDIE   RMODE 24
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFDIE                                                     */
*/*                                                                  */
*/* Function: Capture Address Space Resource Utilization Data        */
*/*                                                                  */
*/* Description: Receives control from timer SLIH upon completion    */
*/*              of the timer interval and schedules an SRB into     */
*/*              the currently dispatched address space to capture   */
*/*              resource utilization data.                          */
*/*                                                                  */
*/* Restrictions: Must reside in LPA/CSA.                            */
*/*               Executes disabled, supervisor state, key zero.     */
*/*               Cannot request any suspend locks.                  */
*/*               Cannot execute any SVCs.                           */
*/*                                                                  */
*/* Input Regs: R1  Dequeued TQE address                             */
*/*             R14 Timer SLIH return address                        */
*/*             R15 DIE routine entry address                        */
*/*                                                                  */
*/* Regs Usage: R5  FRR address                                      */
*/*             R6  base address                                     */
*/*             R7  TQX address                                      */
*/*             R8  TQE address                                      */
*/*             R14 return address                                   */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*                                                                  */
*/* Attributes: Supervisor State, Key=0, Fixed, Disabled             */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*--------------------------CHANGE LOG---------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03142021 | Ben Marino  | zOS serviceability support    *
* @03 | V2R3 | 09072021 | Ben Marino  | Fixed jobname checking bug    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFDIE   $ENTRY SAVE=NO                entry
         LR    R6,R15                  copy base
         USING ECFDIE,R6               base addressability
         LR    R8,R1                   TQE address
         USING TQE,R8                  set addressability
         LA    R7,TQELEN(,R8)          TQX address
         USING TQX,R7                  set addressability
*
**       Establish FRR recovery
*
         USING PSA,0
         LA    R3,FRREPA
         SETFRR A,FRRAD=(3),                                           +
               PARMAD=(5),MODE=FULLXM,WRKREGS=(4,15)
         USING FRR,R5                  set addressability
         ST    R8,FRRTQEA              TQE address
         ST    R14,FRRGR14             SLIH return address
         OI    FRRFLG1,FRR@DIE         DIE indicator
         ICM   R3,15,TQXDINTV          timer enabled?
         BZ    DIEEXIT                 no, exit
*
**       Increment timer pop count
*
         L     R1,TQXDIPOP             timer pop count
         LA    R1,1(,R1)               add one
         ST    R1,TQXDIPOP             update count
*
**       Validity check ECF instance
*
         L     R15,FLCCVT              CVT
         USING CVT,R15                 set addressability
         L     R15,CVTASVT             ASVT
         USING ASVT,R15                set addressability
         L     R4,TQXEASCB             ASCB
         LH    R1,TQXEASID             ASID
         SLL   R1,2                    multiply by four
         CL    R4,ASVTFRST(R1)         same ECF instance?
         BNE   DIEEXIT                 no, exit
*
**       Wait ASCB dispatch check
*
         L     R4,PSAAOLD              ASCB
         USING ASCB,R4                 set addressability
         LH    R0,ASCBASID             ASID
         LTR   R0,R0                   wait ASCB dispatched?
         BNZ   DIE0000                 no, carry on
         L     R1,TQXW070E             get wait count
         LA    R1,1(,R1)               add one
         ST    R1,TQXW070E             update count
         B     DIE0070                 requeue timer
*
**       RSM monitored address space check
*
DIE0000  DS    0H
         ICM   R9,15,ASCBOUCB          OUCB init?
         BZ    DIE0070                 no, requeue timer
         USING OUCB,R9                 set addressability
         TM    OUCBMFL3,OUCBPMON       address space monitored?    @02C
         BNZ   DIE0010                 yes, capture utilization
         TM    TQXFLG1,TQX@ACAP        CAPTURE=YES option set?
         BZ    DIE0070                 no, requeue timer
*
**       Locate SRX element slot
*
DIE0010  DS    0H
         LA    R3,SRX@SIZE             SRX slot size
         MR    R2,R0                   compute slot offset
         LA    R4,TQXSRXVT(R3)         SRX slot address
         USING SRX,R4                  set addressability
         XR    R0,R0                   zero
         L     R1,PSAAOLD              ASCB address
         CS    R0,R1,SRXLOCK           slot available?
         BZ    DIE0020                 yes, carry on
         L     R1,TQXSRBFL             get failed count
         LA    R1,1(,R1)               add one
         ST    R1,TQXSRBFL             update count
         B     DIE0070                 requeue timer
*
**       Capture significant CPU user data
*
DIE0020  DS    0H
         MVC   SRXID,=CL4'SRX'         ID SRX
         MVC   SRXEVTA,TQXEVTAD        EVT address
         XC    SRXAS(SRX@AS),SRXAS     clear utilization data
         MVC   SRXAASCB,PSAAOLD        ASCB address
         MVC   SRXASTCB,PSATOLD        TCB address/zero
         MVC   SRXCPULA,PSACPULA       logical CPU ID
         MVC   SRXASPSW,FLCEOPSW       interrupted PSW             @02C
         ICM   R1,15,PSATOLD           SRB mode?
         BNZ   DIE0030                 no, carry on
         OI    SRXFLG1,SRX@SRB         set SRB indicator
*
DIE0030  DS    0H
         MVC   SRXASWMS,OUCBWMS        interval service accum
         MVC   SRXASCPU,OUCBCPU        interval CPU service accum
         MVC   SRXASIOC,OUCBIOC        interval I/O service accum
         MVC   SRXASMSO,OUCBMSO        interval MSO service accum
         OI    SRXFLG1,SRX@CPU         set indicator
         L     R3,PSAAOLD              ASCB address
         USING ASCB,R3                 set addressability
         ICM   R1,15,ASCBJBNS          STC address space?
         BZ    DIE0050                 no, initiated job
         CLC   0(8,R1),=CL8'INIT'      JES initiator?              @03A
         BE    DIE0050                 yes, ASCBJBNI has jobname   @03A
         MVC   SRXASJOB,0(R1)          set job name
         ICM   R1,15,ASCBTSB           TSU address space?
         BZ    DIE0040                 no, carry on
         OI    SRXASTP,SRX@TSU         yes, set job type
         B     DIE0060                 carry on
*
DIE0040  DS    0H
         OI    SRXASTP,SRX@STC         set job type
         B     DIE0060                 carry on
*
DIE0050  DS    0H
         L     R1,ASCBJBNI             job name address
         MVC   SRXASJOB,0(R1)          set job name
         OI    SRXASTP,SRX@JOB         set job type
         DROP  R3
*
**       Initialize SRB element
*
DIE0060  DS    0H
         LA    R3,SRXSRB               SRB address
         USING SRB,R3                  set addressability
         MVC   SRBID,=CL4'SRB'         ID SRB
         LA    R1,SRBSRV               init,
         ST    R1,SRBEP                routine address.
         ST    R4,SRBPARM              SRX address
         L     R15,FLCCVT              CVT address
         USING CVT,R15                 set addressability
         LA    R15,CVTBRET             init RMTR,
         ST    R15,SRBRMTR             routine address.
         MVC   SRBASCB,TQXEASCB        ECF subsysytem ASCB
         DROP  R3,R4,R15
*
**       Schedule SRB service routine
*
         SCHEDULE SRB=(3),                                             +
               SCOPE=LOCAL,DISABLED
         L     R1,TQXSRBCT             schedule count
         LA    R1,1(,R1)               add one
         ST    R1,TQXSRBCT             update count
*
**       Set next timer interval
*
DIE0070  DS    0H
         ICM   R3,15,TQXDINTV          timer enabled?
         BZ    DIEEXIT                 no, exit
         STCK  FRRSTCK                 functioning clock?
         BC    12,DIE0080              yes, compute new value
         MVC   FRRSTCK,TQEVAL          no, use original value
DIE0080  DS    0H
         AL    R3,FRRSTCK              add to clock value
         ST    R3,TQEVAL               update new interval
*
**       Requeue TQE on timer queue
*
         SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,                         +
               RELATED=('Serialize timer SLIH resources')
         OI    FRRFLG1,FRR@DSP         set held indicator
*
         L     R15,FLCCVT              CVT address
         USING CVT,R15                 set addressability
         L     R1,FRRTQEA              TQE address
         L     R15,CVTQTE00            timer SLIH enqueue EPA
         BASR  R2,R15                  enqueue TQE
         OI    FRRFLG1,FRR@REQ         TQE requeued
         L     R1,TQXDIECT             enqueue count
         LA    R1,1(,R1)               add one
         ST    R1,TQXDIECT             update count
*
         SETLOCK RELEASE,TYPE=DISP,                                    +
               RELATED=('Release timer SLIH resources serialization')
         NI    FRRFLG1,XFF-FRR@DSP     reset held indicator
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
DIEEXIT  DS    0H
         TM    FRRFLG1,FRR@REQ         TQE requeued?
         BNZ   DIEXT99                 yes, I'll be back
         OI    TQXFLG1,TQX@EXIT        no, never return
*
DIEXT99  DS    0H
         L     R14,FRRGR14             timer SLIH return address
         SETFRR D,WRKREGS=(4,15)       delete FRR
         BR    R14                     return to timer SLIH
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
MASTER   DC    CL8'*MASTER*'           MSAS STC name
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SRBSRV                                                     */
*/*                                                                  */
*/* Function: SRB Service Routine                                    */
*/*                                                                  */
*/* Description: Capture Address Space Resource Utilization Data.    */
*/*                                                                  */
*/* Input Regs: R0  SRB address                                      */
*/*             R1  SRX address                                      */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* Regs Usage: R5  FRR address                                      */
*/*             R6  base address                                     */
*/*             R7  SRX address                                      */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SRBSRV   DS    0H
         ENTRY SRBSRV
         BASR  R6,0                    entry
         USING *,R6                    set addressability
         LR    R7,R1                   SRX address
         USING SRX,R7                  set addressability
*
**       Establish recovery
*
         LA    R3,FRREPA
         SETFRR A,FRRAD=(3),                                           +
               PARMAD=(5),MODE=FULLXM,WRKREGS=(4,15)
         USING FRR,R5                  FRR addressability
         ST    R7,FRRSRXA              init SRX address
         ST    R14,FRRGR14             save return address
         OI    FRRFLG1,FRR@SRB         SRB indicator
         CLC   SRXID,=CL4'SRX'         valid indeed?
         BNE   SRBEXIT                 no, exit
*
**       Processing code goes here...
*






*
**       Release SRX slot lock
*
SRB0099  DS    0H
         L     R7,FRRSRXA              SRX address
         XC    SRXLOCK,SRXLOCK         release SRX lock
*
SRBEXIT  DS    0H
         L     R14,FRRGR14             return address
         SETFRR D,WRKREGS=(4,15)       delete FRR
         BR    R14                     exit
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: FRREPA                                                     */
*/*                                                                  */
*/* Function: FRR Recovery Routine                                   */
*/*                                                                  */
*/* Input Regs: R0  workarea address                                 */
*/*             R1  SDWA address                                     */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* Regs Usage: R5  FRR address                                      */
*/*             R6  base address                                     */
*/*             R9  SDWA address                                     */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*                                                                  */
*/********************************************************************/
FRREPA   DS    0H
         ENTRY FRREPA
         BASR  R6,0                    base
         USING *,R6                    set addressability
         LR    R9,R1                   SDWA address
         USING SDWA,R9                 set addressability
         L     R5,SDWAPARM             FRR parm area
         USING FRR,R5                  set addressability
         TM    SDWAERRD,SDWACLUP       clean up only?
         BNZ   ABEND                   yes, percolate
         TM    FRRFLG1,FRR@REC         recursive ABEND?
         BNZ   ABEND                   yes, percolate
         OI    FRRFLG1,FRR@REC         set recursive indicator
*
**       Attempt retry
*
RETRY    DS    0H
         ST    R5,SDWASR05             refresh FRR work area
         LA    R3,RCVY                 retry routine
         SETRP RC=4,                   attempt retry                   +
               RETADDR=(3),RETREGS=YES,                                +
               RECORD=NO,DUMP=NO,WKAREA=(9)
         BR    R14
*
**       Unexpected ABEND
*
ABEND    DS    0H
         MVC   SDWARECP,RECPARM        LOGREC data
         TM    FRRFLG1,FRR@SRB         SRB indicator
         BZ    ABENDXT                 no, carry on
         MVC   SDWACSCT,RECSRBCT       yes, set SRB CSECT
*
ABENDXT  DS    0H
         SETRP RC=0,                   percolate ABEND                 +
               DUMP=NO,RECORD=YES,WKAREA=(9)
         BR    R14                     return to RTM
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
RECPARM  DS    0CL24
         DC    CL8'ECF'                ECF subsysytem
         DC    CL8'ECFDIE'             CSECT name
         DC    CL8'FRREPA'             FRR recovery routine name
ZECF@SZE EQU   *-RECPARM
RECSRBCT DC    CL8'SRBSRV'             SRB CSECT name
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RCVY                                                       */
*/*                                                                  */
*/* Function: FRR Retry Routine                                      */
*/*                                                                  */
*/* Description: Release the Dispatacher spin lock.                  */
*/*                                                                  */
*/* Restrictions: To avoid recursive ABENDs, this routine only       */
*/*               references and updates fields within the FRR work  */
*/*               area supplied by the SETFRR ADD macro call.        */
*/*                                                                  */
*/* Input Regs: R5  FRR address                                      */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* Regs Usage: R5  FRR address                                      */
*/*             R6  base address                                     */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*              R15 return code                                     */
*/*                                                                  */
*/********************************************************************/
RCVY     DS    0H
         ENTRY RCVY
         BASR  R6,0
         USING *,R6
         USING PSA,0
         USING FRR,R5
*
         TM    FRRFLG1,FRR@DSP
         BZ    RCVYXIT
         SETLOCK RELEASE,                                              +
               TYPE=DISP,                                              +
               RELATED=('Release Dispatcher lock')
         NI    FRRFLG1,XFF-FRR@DSP
*
RCVYXIT  DS    0H
         L     R14,FRRGR14             SLIH return address
         SETFRR D,WRKREGS=(4,15)       delete FRR
         BR    R14                     return to timer SLIH
*---------------------------------------------------------------------*
*        Constants & Literals                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        SETFRR work area                                             *
*--------+---------+---------+---------+---------+---------+---------+*
FRR      DSECT
FRRSTCK  DS    2F                      DIE interval value
FRRGR14  DS    F                       SLIH return address
FRRTQEA  DS    F                       TQE element address
FRRSRXA  DS    F                       SRX address
FRRFLG1  DS    XL1                     flags
FRR@REC  EQU   X'80'                   recursion indicator
FRR@DSP  EQU   X'40'                   DISP lock held indicator
FRR@REQ  EQU   X'20'                   TQE requeued indicator
FRR@DIE  EQU   X'10'                   DIE control indicator
FRR@SRB  EQU   X'08'                   SRB control indicator
FRR@RV5  EQU   X'04'                   -available
FRR@RV6  EQU   X'02'                   -available
FRR@RV7  EQU   X'01'                   -available
FRR@AVAL DS    XL3                     -available
FRR@SZE  EQU   *-FRR
*
*        The following statement will cause assembly errors when
*        the FRR size exceeds 24-bytes.
*
         DS    0XL(24-FRR@SZE+1)       set SETFRR macro restriction
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         IHATQE ,
         PRINT NOGEN
         IHAPSA LIST=YES
         IHAASVT ,
         CVT   DSECT=YES
         IHASRB ,
         IHAFRRS ,
         IHAASCB ,
         IRAOUCB ,
         IHASDWA ,
         IEAVVTPC ,
         IHAWSAVT CLASS=GLOBAL
         CSVEXRET DSECT=YES                                        @03A
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFTQX ,
         $ECFEQU ,
         END
./ ADD NAME=ECFDYN   0111-21116-21304-1643-00997-00996-00212-BENMAR  10
ECFDYN   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFDYN                                                     */
*/*                                                                  */
*/* Function: Event Capture Dynamic Allocation Processor             */
*/*                                                                  */
*/* Description: Performs dynamic allocation requests on behalf      */
*/*              of all subsystem components.                        */
*/*                                                                  */
*/* Input Regs: R1  ZIO address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  ZIO address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Suprevisor State, key=Callerkey           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R3 | 08312021 | Ben Marino  | Serviceability enhancements   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFDYN   $SRVINI
         ST    R1,DSAIPAR              save parm reg
         USING EVT,R11                 EVT addressability
*
**       Trace service request entry
*
         $TRACE $SRVINI,                                               +
               MID=ECFDYN,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0580)    set error RSN
         $RETRY DYNEXIT,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Validity check request
*
         L     R8,DSAIPAR              ZIO address
         USING ZIO,R8                  set addressability
         CLC   ZIOID,=CL4'ZIO'         valid indeed?
         BE    DYN0000                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0648)    set error RSN
         B     DYNEXIT                 exit
*
**       Allocate permanent data set
*
DYN0000  DS    0H
         CLI   ZIOFUNC,ZIO@TSIN        SYSTSIN request?
         BE    DYN0010                 yes, carry on
         CLI   ZIOFUNC,ZIO@TSPR        SYSTSPRT request?
         BE    DYN0010                 yes, carry on
         CLI   ZIOFUNC,ZIO@JOBS        ECFJOBS request?
         BE    DYN0010                 yes, carry on
         CLI   ZIOFUNC,ZIO@RCVY        RECOVERY request?
         BE    DYN0010                 yes, carry on
         CLI   ZIOFUNC,ZIO@MSAS        MSAS request?
         BNE   DUN0030                 no, test further
         $CALL MASALLO                 allocate dataset
         B     DYN0040                 carry on
*
DYN0010  DS    0H
         $CALL SYSUNAL                 unallocate
         $CALL SYSALLO                 then allocate
         B     DYN0040                 carry on
*
**       Allocate temporary dataset
*
DUN0030  DS    0H
         CLI   ZIOFUNC,ZIO@TEMP        temp dataset request?
         BNE   DYN0099                 no, error
         $CALL TEMPDSN                 yes, allocate dataset
*
**       Retrieve allocation information
*
DYN0040  DS    0H
         $CALL RETRIEVL                retrieve info
         B     DYNEXIT                 exit
*
**       Invalid allocation request
*
DYN0099  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0656)    set error RSN
         $WTO  MID=ECF052E,                                            +
               VAR1==CL8'DYNALLOC',    show request                    +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN,            show RSN                        +
               VAR4==CL8'ECFDYN'       show caller
         B     DYNEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
DYNEXIT  DS    0H
         $TRACE $SRVXIT,                                               +
               MID=ECFDYN,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
         $SRVXIT PARM=DSAOPAR,RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SYSALLO                                                    */
*/*                                                                  */
*/* Function: DSName/Member name allocation subroutine               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  ZIO address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SYSALLO  $SUBINI
         USING ZIO,R8                  ZIO addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Build allocation text units
*
         LA    R4,DSARB                S99RB address
         USING S99RB,R4                set addressability
         LA    R6,DSARBP               S99RBP address
         USING S99RBP,R6               set addressability
         ST    R4,S99RBPTR             point S99RBP to S99RB
         OI    S99RBPTR,S99RBPND       set high bit on in S99RBP
         XC    S99RB(RBLEN),S99RB      clear entire S99RB block
         MVI   S99RBLN,RBLEN           set RB length field
         MVI   S99VERB,S99VRBAL        set allocation verb code
         MVC   DSAALLOC(DSAALLSZ),DYNALLOC
*
         LA    R5,DSATUPL              S99TUPL address
         USING S99TUPL,R5              set addressability
         ST    R5,S99TXTPP             point S99TUPL to S99RB
         LA    R1,DSADSNTU             DSName TU address
         ST    R1,S99TUPTR             set S99TUPL address
         MVC   DSADSN,ZIODSNAM         init supplied DSName
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DSAMEMTU             MEMBER TU address
         ST    R1,S99TUPTR             set S99TUPL address
         MVC   DSAMEM,ZIOMEMBR         init supplied member name
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DSADDNTU             DDname TU address
         ST    R1,S99TUPTR             set S99TUPL address
         MVC   DSADDN,ZIODDNAM         init supplied DDname
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DSASTSTU             Status TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DSACLSTU             Close TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
**       Allocate requested dataset
*
         OI    S99TUPTR,S99TUPLN       set last S99TUPL indicator
         LR    R1,R6                   set DYNALLOC parm ptr
         DYNALLOC ,
         ST    R15,DSARC               save RC
         XC    DSARSN,DSARSN           set RSN
         LTR   R15,R15                 allocate successful?
         BZ    SYSTEXIT                yes, exit
*
**       Issue allocation failed debug msg
*
         LH    R1,S99INFO              info code
         ST    R1,DSAINFO              save info code
         LH    R1,S99ERROR             error code
         ST    R1,DSAERROR             init error code
         $WTO  MID=ECF903E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSAINFO,           show info code                  +
               VAR3=DSAERROR,          show error code                 +
               VAR4=DSADSN             show DSName
*
SYSTEXIT DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        DSName allocation text units                                 *
*--------+---------+---------+---------+---------+---------+---------+*
DYNALLOC DS    0F
DSNTU    DC    AL2(DALDSNAM)
         DC    X'0001'
         DC    X'002C'
         DC    CL44' '                      DSName
*
MEMTU    DC    AL2(DALMEMBR)
         DC    X'0001'
         DC    X'0008'
         DC    CL8' '                       Member Name
*
DDNTU    DC    AL2(DALDDNAM)
         DC    X'0001'
         DC    X'0008'
         DC    CL8'SYSnnnnn'                DDname
*
STATTU   DC    AL2(DALSTATS)
         DC    X'0001'
         DC    X'0001'
         DC    X'08'                        DISP=SHR
*
CLOSETU  DC    AL2(DALCLOSE)
         DC    X'0000'                      Deallocate at CLOSE
DYNALLSZ EQU   *-DYNALLOC
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MASALLO                                                    */
*/*                                                                  */
*/* Function: DSName dynamic allocation rubroutine                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  ZIO address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MASALLO  $SUBINI
         USING ZIO,R8                  ZIO addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Unallocate requested dataset
*
         LA    R4,DSARB                S99RB address
         USING S99RB,R4                set addressability
         LA    R6,DSARBP               S99RBP address
         USING S99RBP,R6               set addressability
         ST    R4,S99RBPTR             point S99RBP to S99RB
         OI    S99RBPTR,S99RBPND       set high bit on in S99RBP
         XC    S99RB(RBLEN),S99RB      clear entire S99RB block
         MVI   S99RBLN,RBLEN           set RB length field
         MVI   S99VERB,S99VRBUN        set unallocation verb code
         MVC   DSAMUNAL(MASDEALZ),MASDEALL
         LA    R5,DSATUPL              S99TUPL address
         USING S99TUPL,R5              set addressability
         ST    R5,S99TXTPP             point S99TUPL to S99RB
         LA    R1,DSAUDNTU             DDname TU address
         ST    R1,S99TUPTR             set S99TUPL address
         MVC   DSAUDDN,ZIODDNAM        init supplied DDName
         OI    S99TUPTR,S99TUPLN       set last S99TUPL indicator
         LR    R1,R6                   set DYNALLOC parm ptr
         DYNALLOC ,
         ST    R15,DSARC               save RC
         LTR   R15,R15                 unallocate successfu?
         BZ    MAS0040                 yes, carry on
         CLC   DSARC,=AL4(RC4)         possibly unallocated?
         BNE   MAS0030                 no, error
         CLC   S99ERROR,=XL2'0438'     DDname not found?
         BE    MAS0040                 yes, carry on
         CLC   S99ERROR,=XL2'0440'     already unallocated?
         BE    MAS0040                 yes, carry on
*
**       Issue unallocation failed msg
*
MAS0030  DS    0H
         LH    R1,S99INFO              info code
         ST    R1,DSAINFO              save info code
         LH    R1,S99ERROR             error code
         ST    R1,DSAERROR             init error code
         $WTO  MID=ECF903E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSAINFO,           show info code                  +
               VAR3=DSAERROR,          show error code                 +
               VAR4=ZIODSNAM           show DSName
         B     MASEXIT                 exit
*
**       Build allocation text units
*
MAS0040  DS    0H
         LA    R4,DSARB                S99RB address
         USING S99RB,R4                set addressability
         LA    R6,DSARBP               S99RBP address
         USING S99RBP,R6               set addressability
         ST    R4,S99RBPTR             point S99RBP to S99RB
         OI    S99RBPTR,S99RBPND       set high bit on in S99RBP
         XC    S99RB(RBLEN),S99RB      clear entire S99RB block
         MVI   S99RBLN,RBLEN           set RB length field
         MVI   S99VERB,S99VRBAL        set allocation verb code
         MVC   DSAMASAL(DSAMASLZ),MASALLOC
*
         LA    R5,DSATUPL              S99TUPL address
         USING S99TUPL,R5              set addressability
         ST    R5,S99TXTPP             point S99TUPL to S99RB
         LA    R1,DSAMDSNU             DSName TU address
         ST    R1,S99TUPTR             set S99TUPL address
         MVC   DSAMDSN,ZIODSNAM        init supplied DSName
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DSAMDDNU             DDname TU address
         ST    R1,S99TUPTR             set S99TUPL address
         MVC   DSAMDDN,ZIODDNAM        init supplied DDname
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DSAATTU              Status TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         CLC   ZIODDNAM,=CL8'PARMLIB'  PARMLIB DDname?
         BE    MAS0050                 yes, do not deallocate
         TM    ZIOFLG1,ZIO@SOUT        ECFCOM(DYNLPA) caller?      @02A
         BNZ   MAS0050                 yes, do not deallocate      @02A
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DSAOSETU             Close TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
**       Allocate requested dataset
*
MAS0050  DS    0H
         OI    S99TUPTR,S99TUPLN       set last S99TUPL indicator
         LR    R1,R6                   set DYNALLOC parm ptr
         DYNALLOC ,
         ST    R15,DSARC               save RC
         XC    DSARSN,DSARSN           set RSN
         LTR   R15,R15                 allocate successful?
         BZ    MASEXIT                 yes, exit
*
**       Issue allocation failed debug msg
*
         LH    R1,S99INFO              info code
         ST    R1,DSAINFO              save info code
         LH    R1,S99ERROR             error code
         ST    R1,DSAERROR             init error code
         $WTO  MID=ECF903E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSAINFO,           show info code                  +
               VAR3=DSAERROR,          show error code                 +
               VAR4=DSADSN             show DSName
*
MASEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        DSName allocation text units                                 *
*--------+---------+---------+---------+---------+---------+---------+*
MASALLOC DS    0F
MDSNTU   DC    AL2(DALDSNAM)
         DC    X'0001'
         DC    X'002C'
         DC    CL44' '                      DSName
*
MDDNTU   DC    AL2(DALDDNAM)
         DC    X'0001'
         DC    X'0008'
         DC    CL8' '                       DDname
*
MSTATTU  DC    AL2(DALSTATS)
         DC    X'0001'
         DC    X'0001'
         DC    X'08'                        DISP=SHR
*
MCLOSETU DC    AL2(DALCLOSE)
         DC    X'0000'                      Deallocate at CLOSE
MASALOCZ EQU   *-MASALLOC
*---------------------------------------------------------------------*
*        DDname unallocation text units                               *
*--------+---------+---------+---------+---------+---------+---------+*
MASDEALL DS    0F
MDDNTUU  DC    AL2(DUNDDNAM)
         DC    X'0001'
         DC    X'0008'
         DC    CL8' '                       DDName
MASDEALZ EQU   *-MASDEALL
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SYSUNAL                                                    */
*/*                                                                  */
*/* Function: DDname dynamic unallocation subroutine                 */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  ZIO address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SYSUNAL  $SUBINI
         USING ZIO,R8                  ZIO addressability
         USING EVT,R11                 EVT addressability
*
**       Unallocate requested DDname
*
         LA    R4,DSARB                S99RB address
         USING S99RB,R4                set addressability
         LA    R6,DSARBP               S99RBP address
         USING S99RBP,R6               set addressability
         ST    R4,S99RBPTR             point S99RBP to S99RB
         OI    S99RBPTR,S99RBPND       set high bit on in S99RBP
         XC    S99RB(RBLEN),S99RB      clear entire S99RB block
         MVI   S99RBLN,RBLEN           set RB length field
         MVI   S99VERB,S99VRBUN        set unallocation verb code
         MVC   DSAMUNAL(DEALLOCZ),DEALDEAL
         LA    R5,DSATUPL              S99TUPL address
         USING S99TUPL,R5              set addressability
         ST    R5,S99TXTPP             point S99TUPL to S99RB
         LA    R1,DSAUDNTU             DDname TU address
         ST    R1,S99TUPTR             set S99TUPL address
         MVC   DSAUDDN,ZIODDNAM        init supplied DDName
         OI    S99TUPTR,S99TUPLN       set last S99TUPL indicator
         LR    R1,R6                   set DYNALLOC parm ptr
         DYNALLOC ,
         ST    R15,DSARC               save RC
         ST    R15,DSAXRC              save RC
         LTR   R15,R15                 unallocate successfu?
         BZ    UNALEXIT                yes, exit
         CLC   DSARC,=AL4(RC4)         possibly unallocated?
         BNE   UNALERR                 no, error
         XC    DSARC,DSARC             set RC
         CLC   S99ERROR,=XL2'0438'     DDname not found?
         BE    UNALEXIT                yes, exit
         CLC   S99ERROR,=XL2'0440'     already unallocated?
         BE    UNALEXIT                yes, exit
*
**       Issue unallocation failed msg
*
UNALERR  DS    0H
         LH    R1,S99INFO              info code
         ST    R1,DSAINFO              save info code
         LH    R1,S99ERROR             error code
         ST    R1,DSAERROR             init error code
         $WTO  MID=ECF903E,                                            +
               VAR1=DSAXRC,            show RC                         +
               VAR2=DSAINFO,           show info code                  +
               VAR3=DSAERROR,          show error code                 +
               VAR4=ZIODSNAM           show DSName
*
UNALEXIT DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        DDname unallocation text units                               *
*--------+---------+---------+---------+---------+---------+---------+*
DEALDEAL DS    0F
         DC    AL2(DUNDDNAM)
         DC    X'0001'
         DC    X'0008'
         DC    CL8' '                       DDName
DEALLOCZ EQU   *-DEALDEAL
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TEMPDSN                                                    */
*/*                                                                  */
*/* Function: Temporary dataset allocation subroutine                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  ZIO address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TEMPDSN  $SUBINI
         USING ZIO,R8                  ZIO addressability
         USING EVT,R11                 EVT addressability
*
**       Initialize DYNALLOC structure
*
         LA    R4,DSARB                S99RB address
         USING S99RB,R4                set addressability
         LA    R6,DSARBP               S99RBP address
         USING S99RBP,R6               set addressability
         ST    R4,S99RBPTR             point S99RBP to S99RB
         OI    S99RBPTR,S99RBPND       set high bit on in S99RBP
         XC    S99RB(RBLEN),S99RB      clear entire S99RB block
         MVI   S99RBLN,RBLEN           set RB length field
         MVI   S99VERB,S99VRBAL        set allocation verb code
         MVC   DSAALSUB(DSAALSBZ),DYNALSUB
*
         LA    R5,DSATUPL              S99TUPL address
         USING S99TUPL,R5              set addressability
         ST    R5,S99TXTPP             point S99TUPL to S99RB
         LA    R1,DSADDNTX             DDname TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DSADSNTX             DSName TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DSATMPTX             DSName TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DSORG                DSORG TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,RECFM                RECFM TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,LRECL                LRECL TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,BLKSIZE              BLKSIZE TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,UNIT                 UNIT TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,TRACKS               TRKS TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,PRIMARY              primary TRKS TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,SECNDARY             secondary TRK TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DISP                 DISP TRK TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,NDISP                NDISP TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,CDISP                CDISP TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,CLOSETX              CLOSE TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
**       Allocate requested dataset
*
         OI    S99TUPTR,S99TUPLN       set last S99TUPL indicator
         LR    R1,R6                   set DYNALLOC parm ptr
         DYNALLOC ,
         ST    R15,DSARC               save RC
         XC    DSARSN,DSARSN           set RSN
         LTR   R15,R15                 allocate successful?
         BNZ   TEMP099                 no, error
         MVC   ZIODDNAM,DSARTDDN       return DDname to caller
         MVC   ZIODSNAM,DSARTDSN       return DSName to caller
         B     TEMPDXIT                exit
*
**       Issue allocation failed debug msg
*
TEMP099  DS    0H
         TM    STKFLG1,STK@DBUG        DBBUG=ON?
         BZ    TEMPDXIT                no, skip msg
         LH    R1,S99INFO              info code
         ST    R1,DSAINFO              save info code
         LH    R1,S99ERROR             error code
         ST    R1,DSAERROR             init error code
         $WTO  MID=ECF903E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSAINFO,           show info code                  +
               VAR3=DSAERROR,          show error code                 +
               VAR4=DSATDSN            show DSName
*
TEMPDXIT DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Temporary DSName allocation                                  *
*--------+---------+---------+---------+---------+---------+---------+*
DYNALSUB DS    0F
DDNAME   DC    AL2(DALRTDDN)           Return DDName
         DC    X'0001'
         DC    X'0008'
         DC    CL8' '
*
DSNAME   DC    AL2(DALRTDSN)           Return DSName
         DC    X'0001'
         DC    X'002C'
         DC    CL44' '
*
TDSNAME  DC    AL2(DALDSNAM)           Temp DSName
         DC    X'0001'
         DC    X'0007'
         DC    X'50',CL43'ECFSUB'
DYNALSBZ EQU   *-DYNALSUB
*
DSORG    DC    AL2(DALDSORG)           DSORG=PS
         DC    X'0001'
         DC    X'0002'
         DC    X'4000'
*
RECFM    DC    AL2(DALRECFM)           RECFM=F
         DC    X'0001'
         DC    X'0001'
         DC    X'80'
*
LRECL    DC    AL2(DALLRECL)           LRECF=80
         DC    X'0001'
         DC    X'0002'
         DC    X'0050'
*
BLKSIZE  DC    AL2(DALBLKSZ)           BLKSIZE=80
         DC    X'0001'
         DC    X'0002'
         DC    X'0050'
*
UNIT     DC    AL2(DALUNIT)            UNIT=SYSDA
         DC    X'0001'
         DC    X'0005'
         DC    C'SYSDA'
*
TRACKS   DC    AL2(DALTRK)             TRK=
         DC    X'0000'
*
PRIMARY  DC    AL2(DALPRIME)           primary TRK=(7,3)
         DC    X'0001'
         DC    X'0003'
         DC    X'000007'
*
SECNDARY DC    AL2(DALSECND)           secondary TRK=(3,3)
         DC    X'0001'
         DC    X'0003'
         DC    X'000003'
*
DISP     DC    AL2(DALSTATS)           DISP=NEW
         DC    X'0001'
         DC    X'0001'
         DC    X'04'
*
NDISP    DC    AL2(DALNDISP)           {02=CATLG|04=DELETE|08=KEEP}
         DC    X'0001'
         DC    X'0001'
         DC    X'02'                   CATLG
*
CDISP    DC    AL2(DALCDISP)           {01=UNCATLG|04=DELETE|08=KEEP}
         DC    X'0001'
         DC    X'0001'
         DC    X'01'                   UNCATLG
*
CLOSETX  DC    AL2(DALCLOSE)
         DC    X'0000'                 Deallocate at CLOSE
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RETRIEVL                                                   */
*/*                                                                  */
*/* Function: Retrieve data set information subroutine               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  ZIO address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RETRIEVL $SUBINI
         USING ZIO,R8                  ZIO addressability
         USING EVT,R11                 EVT addressability
*
**       Initialize DYNALLOC structure
*
         LA    R4,DSARB                S99RB address
         USING S99RB,R4                set addressability
         LA    R6,DSARBP               S99RBP address
         USING S99RBP,R6               set addressability
         ST    R4,S99RBPTR             point S99RBP to S99RB
         OI    S99RBPTR,S99RBPND       set high bit on in S99RBP
         XC    S99RB(RBLEN),S99RB      clear entire S99RB block
         MVI   S99RBLN,RBLEN           set RB length field
         MVI   S99VERB,S99VRBIN        set retrieval verb code
         MVC   DSADINRT(DSADINLL),DINRTDYN
*
         LA    R5,DSATUPL              S99TUPL address
         USING S99TUPL,R5              set addressability
         ST    R5,S99TXTPP             point S99TUPL to S99RB
         LA    R1,DSADINTU             DDname TU address
         ST    R1,S99TUPTR             set S99TUPL address
*
         LA    R5,4(,R5)               next S99TUPL pointer
         LA    R1,DSADINTP             DSORG TU address
         ST    R1,S99TUPTR             set S99TUPL address
         MVC   DSADINDD,ZIODDNAM       init DDName
         OI    S99TUPTR,S99TUPLN       set last S99TUPL indicator
*
**       Retrieve dataset information
*
         LR    R1,R6                   set DYNALLOC parm ptr
         DYNALLOC ,
         ST    R15,DSAXRC              save RC
         LTR   R15,R15                 allocate successful?
         BNZ   RETR099                 no, error
         MVC   ZIODSORG,DSADINDS       return DSORG to caller
         B     RETREXIT                exit
*
**       Issue allocation failed debug msg
*
RETR099  DS    0H
         TM    STKFLG1,STK@DBUG        DBBUG=ON?
         BZ    RETREXIT                no, skip msg
         LH    R1,S99INFO              info code
         ST    R1,DSAINFO              save info code
         LH    R1,S99ERROR             error code
         ST    R1,DSAERROR             init error code
         $WTO  MID=ECF903E,                                            +
               VAR1=DSAXRC,            show RC                         +
               VAR2=DSAINFO,           show info code                  +
               VAR3=DSAERROR,          show error code                 +
               VAR4=DSATDSN            show DSName
*
RETREXIT DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Dataset information retrieval                                *
*--------+---------+---------+---------+---------+---------+---------+*
DINRTDYN DS    0F
         DC    AL2(DINDDNAM)
         DC    X'0001'
         DC    X'0008'
         DC    CL8' '                  DDName
*
DINTUORG DC    AL2(DINRTORG)
         DC    X'0001'
         DC    X'0002'
         DC    XL2'0'                  DSORG
DINRTSZE EQU   *-DINRTDYN
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFEQU ,
         $ECFZIO ,
         IEFZB4D0 ,
         IEFZB4D2 ,
RBLEN    EQU   (S99RBEND-S99RB)
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@RV0  EQU   X'80'                   -available
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSAXRC   DS    F                       return code
DSARSN   DS    F                       reason code
DSAINFO  DS    F                       DYNALLOC info code
DSAERROR DS    F                       DYNALLOC error code
         DS    0F
DSAIPAR  DS    F                       input parm reg
DSAOPAR  DS    F                       output parm reg
DSARBP   DS    F                       S99RBP
DSARB    DS    CL(RBLEN)               S99RB block
DSATUPL  DS    16F                     S99TUPL block
DSATUPLZ EQU   *-DSATUPL               block length
         DS    0F
DSAPLST  DS    XL128                   $WTO parmlist
*
**       DSName allocation text units
*
DSAALLOC DS    0F
DSADSNTU DS    AL2(DALDSNAM)
         DS    X'0001'
         DS    X'002C'
DSADSN   DS    CL44' '                 DSName
*
DSAMEMTU DS    AL2(DALMEMBR)
         DS    X'0001'
         DS    X'0008'
DSAMEM   DS    CL8' '                  Member Name
*
DSADDNTU DC    AL2(DALDDNAM)
         DS    X'0001'
         DS    X'0008'
DSADDN   DS    CL8' '                  DDname
*
DSASTSTU DC    AL2(DALSTATS)
         DC    X'0001'
         DC    X'0001'
         DC    X'08'                   DISP=SHR
*
DSACLSTU DC    AL2(DALCLOSE)
         DC    X'0000'                 Deallocate at CLOSE
DSAALLSZ EQU   *-DSAALLOC
*
**       MSAS DSName allocation text units
*
DSAMASAL DS    0F
DSAMDSNU DS    AL2(DALDSNAM)
         DS    X'0001'
         DS    X'002C'
DSAMDSN  DS    CL44' '                 DSName
*
DSAMDDNU DC    AL2(DALDDNAM)
         DS    X'0001'
         DS    X'0008'
DSAMDDN  DS    CL8' '                  DDname
*
DSAATTU  DC    AL2(DALSTATS)
         DC    X'0001'
         DC    X'0001'
         DC    X'08'                   DISP=SHR
*
DSAOSETU DC    AL2(DALCLOSE)
         DC    X'0000'                 Deallocate at CLOSE
DSAMASLZ EQU   *-DSAMASAL
*
**       Temporary DSName allocation text units
*
DSAALSUB DS    0F
DSADDNTX DS    AL2(DALRTDDN)
         DS    X'0001'
         DS    X'0008'
DSARTDDN DS    CL8' '                  Returned DDname
*
DSADSNTX DS    AL2(DALRTDSN)
         DS    X'0001'
         DS    X'002C'
DSARTDSN DS    CL44' '                 Returned DSName
*
DSATMPTX DS    AL2(DALDSNAM)           Temporary DSName
         DS    X'0001'
         DS    X'0007'
DSATDSN  DS    CL44' '
DSAALSBZ EQU   *-DSAALSUB
*
**       DDName unallocation text units
*
DSAMUNAL DS    0F
DSAUDNTU DS    AL2(DALDDNAM)
         DS    X'0001'
         DS    X'0008'
DSAUDDN  DS    CL8' '                  DDName
DSAMUNLL EQU   *-DSAMUNAL
*
**       DDName information retrievel text units
*
DSADINRT DS    0F
DSADINTU DS    AL2(DINDDNAM)
         DS    X'0001'
         DS    X'0008'
DSADINDD DS    CL8' '                  DDName
*
DSADINTP DS    AL2(DINRTORG)
         DS    X'0001'
         DS    X'0002'
DSADINDS DS    XL2'0'                  DSORG
DSADINLL EQU   *-DSADINRT
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         CVT   DSECT=YES
         END
./ ADD NAME=ECFENV   0116-21068-21304-1643-00384-00355-00064-BENMAR  32
ECFENV   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFENV                                                     */
*/*                                                                  */
*/* Function: Event Capture Entry/Exit Environment Routines          */
*/*                                                                  */
*/* Description: Performs service routines and subroutines entry     */
*/*              and exit conventions. The following routines are    */
*/*              currently defined:                                  */
*/*                                                                  */
*/*              SRIENV - Service request entry conventions          */
*/*              SRXENV - Service request exit conventions           */
*/*              SBIENV - Subroutine entry conventions               */
*/*              SBXENV - Subroutine exit conventions                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 10282020 | Ben Marino  | Serviceability enhancements   *
* @03 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
*---------------------------------------------------------------------*
*                                                                     *
***********************************************************************
*/*                                                                  */
*/* NAME: SRIENV                                                     */
*/*                                                                  */
*/* FUNCTION: Service routine entry conventions                      */
*/*                                                                  */
*/* Caller: SRIENV is exclusively called by the $SRVINI macro        */
*/*                                                                  */
*/* Input Regs  R9  STK address                                      */
*/*             R10 caller's base address                            */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R10 caller's base address                            */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R15 my base address                                  */
*/*                                                                  */
*/* Output Regs: R9  STK address                                     */
*/*              R10 caller's base address                           */
*/*              R11 EVT address                                     */
*/*              R12 DSA address                                     */
*/*              R13 save area address                               */
*/*                                                                  */
*/* Output Regs: R15 return code                                     */
*/*                                                                  */
*/* Restrictions: R10 must point to caller's base register           */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*--------+---------+---------+---------+---------+---------+---------+*
SRIENV   DS    0H
         ENTRY SRIENV
         BALR  R15,0                   entry
         USING *,R15                   set addressability
         B     SRIINIT
         DC    CL8'SRIENV'             module ID
*
**       Obtain service routine stack entry
*
SRIINIT  DS    0H
         USING STK,R9                  STK addressability
         L     R3,STKSTKEC             current STKE address
         LA    R3,STKE@SZE(,R3)        get next STKE address
         CL    R3,STKSTKEL             stack overflow?
         BH    SRIABEND                yes, ABEND
         USING STKE,R3                 set addressability
         MVC   STKEKEY,SRIPROB         set Problem state key
         TM    STKFLG1,STK@SUPR        Supervisor caller?          @02A
         BZ    SRI0000                 no, in problem state        @02A
         XR    R2,R2                   zero                        @02A
         IPK   ,                       get entry PSW key           @02A
         ST    R2,STKEKEY              save key in STKE entry      @02A
*
**       Obtain service routine DSA entry
*
SRI0000  DS    0H                                                  @02A
         L     R12,STKSDSAC            current DSA address
         LA    R12,SDSA@SZE(,R12)      get next DSA address
         CL    R12,STKSDSAL            DSA overflow?
         BH    SRIABEND                yes, exit w/errors
         USING SDSA,R12                set addessability
         XC    SDSADSA,SDSADSA         zero DSA
         XC    SDSADSAX,SDSADSAX       zero DSA extention-I        @02C
         XC    SDSADSAY,SDSADSAY       zero DSA extention-II       @02A
         XC    SDSADSAZ,SDSADSAZ       zero DSA extention-III      @03A
         ST    R3,STKSTKEC             set current STKE address
         ST    R12,STKSDSAC            set current DSA address
*
**       Init SRWA recovery work area
*
         LA    R4,STKESRWA             current SRWA address
         USING SRWA,R4                 set addressability
         MVC   SRWAID,=CL4'SRWA'       ID SRWA
         XC    SRWAFLG1,SRWAFLG1       zero all flags
         XC    SRWARTRY,SRWARTRY       zero retry address
         MVC   SRWASECT,4(R10)         ID service routine
         MVC   SRWALMOD,STKLMOD        ID LMOD
         MVC   SRWARECR,=CL8'ECFRTM'   ID recovery routine
*
**       Chain save areas
*
         ST    R13,GPR@BWD(,R3)        chain,
         ST    R3,GPR@FWD(,R13)        save areas.
         LR    R13,R3                  set save area address
*
**       Load parm regs & destroyed regs
*
         L     R3,GPR@BWD(,R13)        caller's save area
         LM    R0,R4,GPR@R0(R3)        load parms & detroyed R2-R4
         SLR   R15,R15                 set RC
         BR    R14                     exit
*
**       ABEND Exit
*
SRIABEND DS    0H
         L     R2,=AL4(RSN0100)        set ABEND RSN
         L     R15,=AL4(RC12)          set ABEND RC
         ABEND X'FF9',DUMP,REASON=(R2) stack overflow              @02C
*---------------------------------------------------------------------*
*        Constants & Literals                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
SRIPROB  DC    XL4'00000080'           Problem state key
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* NAME: SRXENV                                                     */
*/*                                                                  */
*/* FUNCTION: Service routine exit point conventions                 */
*/*                                                                  */
*/* Caller: SRXENV is exclusively called by the $SRVXIT macro        */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R10 caller's base address                            */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R10 caller's base address                            */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R15 my base address                                  */
*/*                                                                  */
*/* Output Regs: R9  STK address                                     */
*/*              R10 caller's base address                           */
*/*              R11 EVT address                                     */
*/*              R12 DSA address                                     */
*/*              R13 save area address                               */
*/*                                                                  */
*/* Output Regs: R15 return code                                     */
*/*                                                                  */
*/* Restrictions: R10 must point to caller's base register           */
*/*                                                                  */
*/********************************************************************/
*--------+---------+---------+---------+---------+---------+---------+*
SRXENV   DS    0H
         ENTRY SRXENV
         BALR  R15,0                   entry
         USING *,R15                   set addressability
         B     SRX0000
         DC    CL8'SRXENV'             module ID
*
**       Delete recovery environment
*
SRX0000  DS    0H
         USING STK,R9                  STK addressability
         $RETRY OFF,REG=R3             delete recovery
*
**       Restore service routine stack entry
*
         USING STKE,R13                set addressability
         LR    R3,R13                  copy STKE entry address
         LA    R2,STKE@SZE             STKE entry size
         SLR   R3,R2                   get previous STKE address
         ST    R3,STKSTKEC             reset current STKE address
*
**       Restore service routine DSA entry
*
         L     R3,STKSDSAC             current DSA address
         LA    R2,SDSA@SZE             DSA entry size
         SLR   R3,R2                   get previous DSA address
         ST    R3,STKSDSAC             reset current DSA address
         TM    STKFLG1,STK@SUPR        Supervisor caller?          @02A
         BZ    SRXEXIT                 no, skip key restore        @02A
         L     R2,STKEKEY              subroutine entry key        @02A
         SPKA  0(R2)                   restore key                 @02A
*
SRXEXIT  DS    0H
         SLR   R15,R15                 set RC
         BR    R14                     exit
*---------------------------------------------------------------------*
*        Constants & Literals                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* NAME: SBIENV                                                     */
*/*                                                                  */
*/* FUNCTION: Subroutine entry point conventions                     */
*/*                                                                  */
*/* Caller: SBIENV is exclusively called by the $SUBINI macro        */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R10 caller's base address                            */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R10 caller's base address                            */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R15 my base address                                  */
*/*                                                                  */
*/* Output Regs: R9  STK address                                     */
*/*              R10 caller's base address                           */
*/*              R11 EVT address                                     */
*/*              R12 DSA address                                     */
*/*              R13 save area address                               */
*/*                                                                  */
*/* Output Regs: R15 return code                                     */
*/*                                                                  */
*/* Restrictions: R10 must point to caller's base register           */
*/*                                                                  */
*/********************************************************************/
*--------+---------+---------+---------+---------+---------+---------+*
SBIENV   DS    0H
         ENTRY SBIENV
         BALR  R15,0                   entry
         USING *,R15                   set addressability
         B     SBI0000
         DC    CL8'SBIENV'             module ID
*
**       Obtain subroutine stack entry
*
SBI0000  DS    0H
         USING STK,R9                  STK addressability
         L     R3,STKSTKEC             current STKE address
         LA    R3,STKE@SZE(,R3)        get next STKE address
         CL    R3,STKSTKEL             stack overflow?
         BH    SBIERROR                yes, exit w/errors
         USING STKE,R3                 set addressability
         ST    R3,STKSTKEC             set current stack entry
         MVC   STKEKEY,SBIPROB         set Problem state key
         TM    STKFLG1,STK@SUPR        Supervisor caller?          @02A
         BZ    SBI0010                 no, in Problem state        @02A
         XR    R2,R2                   zero                        @02A
         IPK   ,                       get entry PSW key           @02A
         ST    R2,STKEKEY              save key in STKE entry      @02A
*
**       Init SRWA recovery work area
*
SBI0010  DS    0H                                                  @02A
         LA    R4,STKESRWA             current SRWA address
         USING SRWA,R4                 set addressability
         MVC   SRWAID,=CL4'SRWA'       ID SRWA
         XC    SRWAFLG1,SRWAFLG1       zero all flags
         XC    SRWARTRY,SRWARTRY       zero retry address
         MVC   SRWASECT,4(R10)         ID service routine
         MVC   SRWALMOD,STKLMOD        ID LMOD
         MVC   SRWARECR,=CL8'ECFRTM'   ID recovery routine
*
**       Chain save areas
*
         ST    R13,GPR@BWD(,R3)        chain,
         ST    R3,GPR@FWD(,R13)        save areas.
         LR    R13,R3                  set save area address
*
**       Load parm regs & destroyed regs
*
         L     R3,GPR@BWD(,R13)        caller's save area
         LM    R0,R4,GPR@R0(R3)        load parms & detroyed R2-R4
         SLR   R15,R15                 set RC
         BR    R14                     exit
*
**       Error Exit
*
SBIERROR DS    0H
         L     R2,=AL4(RSN0102)        set ABEND RSN
         L     R15,=AL4(RC12)          set ABEND RC
         ABEND X'FF8',DUMP,REASON=(R2) stack overflow              @02C
*---------------------------------------------------------------------*
*        Constants & Literals                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
SBIPROB  DC    XL4'00000080'           Problem state key
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* NAME: SBXENV                                                     */
*/*                                                                  */
*/* FUNCTION: Subroutine exit point conventions                      */
*/*                                                                  */
*/* Caller: SBXENV is exclusively called by the $SUBXIT macro        */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R10 caller's base address                            */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R10 caller's base address                            */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R15 my base address                                  */
*/*                                                                  */
*/* Output Regs: R9  STK address                                     */
*/*              R10 caller's base address                           */
*/*              R11 EVT address                                     */
*/*              R12 DSA address                                     */
*/*              R13 save area address                               */
*/*                                                                  */
*/* Output Regs: R15 return code                                     */
*/*                                                                  */
*/* Restrictions: R10 must point to caller's base register           */
*/*                                                                  */
*/********************************************************************/
*--------+---------+---------+---------+---------+---------+---------+*
SBXENV   DS    0H
         ENTRY SBXENV
         BALR  R15,0                   entry
         USING *,R15                   set addressability
         B     SBX0000
         DC    CL8'SBXENV'             module ID
*
**       Delete recovery environment
*
SBX0000  DS    0H
         USING STK,R9                  STK addressability
         $RETRY OFF,REG=R3             delete recovery
*
**       Restore subroutine stack entry
*
         USING STKE,R13                set addressability
         LR    R3,R13                  copy STKE entry address
         LA    R2,STKE@SZE             STKE entry size
         SLR   R3,R2                   get previous stack entry
         ST    R3,STKSTKEC             update current tack entry
         TM    STKFLG1,STK@SUPR        Supervisor caller?          @02A
         BZ    SBXEXIT                 no, skip key restore        @02A
         L     R2,STKEKEY              subroutine entry key        @02A
         SPKA  0(R2)                   restore key                 @02A
*
SBXEXIT  DS    0H
         SLR   R15,R15                 set RC
         BR    R14                     exit
*---------------------------------------------------------------------*
*        Constants & Literals                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFSTK ,
         $ECFEQU ,
         END
./ ADD NAME=ECFEOM   0137-21068-21304-1643-00218-00181-00055-BENMAR  40
ECFEOM   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFEOM                                                     */
*/*                                                                  */
*/* Function: Event Capture End-of-Memory Listener and Router        */
*/*                                                                  */
*/* Description: Receives control from the MVS memory termination    */
*/*              resource manager when an address space is normally  */
*/*              or abnormally terminated.                           */
*/*                                                                  */
*/* Input Regs: R0  SSCT address                                     */
*/*             R1  SSOB address                                     */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/*                                                                  */
*/* Regs Usage: R6  SSEB address                                     */
*/*             R7  SSCT address                                     */
*/*             R8  SSOB address                                     */
*/*             R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, key=0 LPA-resident      */
*/*                                                                  */
*/* Restrictions: 1. R9 thru R12 are permanently assigned            */
*/*               2. $TRACE macro calls CANNOT be issued             */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFEOM   $ENTRY SPN=230,STACK=SSITCB   entry
         STM   R0,R1,DSAIPAR           save PARM regs
         USING PSA,0                   FLC addressability
         LR    R7,R0                   SSCT address
         USING SSCT,R7                 set addressability
         LR    R8,R1                   SSOB address
         USING SSOB,R8                 set addressability
         L     R6,SSOBINDV             SSEN address
         USING SSOBEXT,R6              set addressability
*
**       Establish recovery environment
*
         L     R4,STKRTMA              ECFRTM EPA
         MVC   DSAESTAE(ESTAEL),ESTAE  listform
         ESTAE (R4),                                                   +
               PARAM=(R9),             STK address                     +
               TOKEN=DSATOKN,          store token here            @02A+
               MF=(E,DSAESTAE)         establish recovery
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   EOMEXIT                 no, error
         OI    DSAFLG1,DSA@STA         recovery established
         MVC   DSARSN,=AL4(RSN0940)    set RSN
         $RETRY EOMEXIT,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Validity check ECF vector table
*
         L     R11,SSCTSUSE            EVT address
         USING EVT,R11                 set addressability
         CLC   EVTID,=CL4'EVT'         valid indeed?
         BNE   EOMEXIT                 no, exit
         ST    R11,STKEVTA             save EVT in stack
         OI    DSAFLG1,DSA@EVTA        EVT is valid                @02A
         TM    EVTFLG4,EVT@CWTO        COMPWTO init option set?    @02A
         BZ    EOM0000                 no, carry on                @02A
         OI    STKFLG1,STK@CWTO        yes, propagate indicator    @02A
*                                                                  @02A
**       Update active listener count
*
EOM0000  DS    0H                                                  @02A
         L     R2,EVTSSICT             active listeners count      @02A
         LA    R3,1(,R2)               add one                     @02A
         CS    R2,R3,EVTSSICT          update count                @02A
         BNE   EOM0000                 changed: try again          @02A
         OI    DSAFLG1,DSA@SSIC        set update indicator        @02A
*
**       Validity check ECF instance
*
         MVC   STKWTOA,EVTWTOA         enable message service
         MVC   STKASCB,EVTASCB         copy subsysytm ASCB         @02A
         MVC   STKSYSID,EVTSYSID       copy system name            @02A
         MVC   STKSUBNM,EVTSUBNM       copy subsysytem name        @02A
         CLC   SSENASCB,EVTASCB        subsystem ASCB?
         BNE   EOMEXIT                 no, exit
         CLC   SSENASID,EVTASID        subsystem ASID?
         BNE   EOMEXIT                 no, exit
*
**       Deactivate Event Capture listeners
*
         ICM   R1,15,SSCTSSVT          listeners deactivated?
         BZ    EOMEXIT                 yes, exit
         XC    SSCTSSVT,SSCTSSVT       deactivate zECF
*
**       Issue Event Capture listeners deactivated msg
*
         $WTO  MID=ECF997I,            arrisentirci                    +
               VAR1==CL3'EOM'          ID issuer
         B     EOMEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
EOMEXIT  DS    0H
         TM    DSAFLG1,DSA@STA         recovery established?
         BZ    EOMXIT00                no
         ESTAE 0,TOKEN=DSATOKN         delete recovery             @02C
*
EOMXIT00 DS    0H
         TM    DSAFLG1,DSA@EVTA        EVT valid?                  @02C
         BZ    EOMXIT99                no                          @02C
         TM    DSAFLG1,DSA@SSIC        listen count updated?       @02A
         BZ    EOMXIT99                no, exit                    @02C
*
EOMXIT10 DS    0H
         L     R2,EVTSSICT             active listeners count      @02A
         LR    R3,R2                   copy count                  @02A
         BCTR  R3,0                    subtract one                @02A
         CS    R2,R3,EVTSSICT          decrement count             @02A
         BNE   EOMXIT10                changed: try again          @02A
*
EOMXIT99 DS    0H                                                  @02C
         XC    DSARC,DSARC             set RC
         $EXIT SPN=230,RC=DSARC        exit
*---------------------------------------------------------------------*
*        VCONs                                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFRTMA  DC    V(ECFRTM)               ECFRTM recovery routine EPA
SRIENVA  DC    V(SRIENV)               ECFENV SRVentry environment EPA
SRXENVA  DC    V(SRXENV)               ECFENV SRVexit environment EPA
SBIENVA  DC    V(SBIENV)               ECFENV SUBentry environment EPA
SBXENVA  DC    V(SBXENV)               ECFENV SUBexit environment EPA
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ESTAE    ESTAE 0,MF=L                  listform
ESTAEL   EQU   *-ESTAE
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFEQU ,
         $ECFSTK ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASVA   DS    18F                     save area
         DS    0X
DSAFLG1  DS    XL1                     flags
DSA@STA  EQU   X'80'                   ESTAE established
DSA@EVTA EQU   X'40'                   valid EVT indicator
DSA@SSIC EQU   X'20'                   listener count indiator
DSA@RV4  EQU   X'10'                   -available
DSA@RV5  EQU   X'08'                   -available
DSA@RV6  EQU   X'04'                   -available
DSA@RV7  EQU   X'02'                   -available
DSA@STK  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSAREBA  DS    F                       EOM-REB address
DSATOKN  DS    F                       ESTAE token                 @02A
         DS    0F
DSAOPAR  DS    F                       output parm reg
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
         DS    0F
DSAESTAE DS    CL(ESTAEL)              ESTAE listform
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         IHAASSB ,
         CVT   DSECT=YES
         IEFJESCT ,
         IEFJSCVT ,
         IEFJSSIB ,
         IEFJSSOB (EN),CONTIG=NO
         END
./ ADD NAME=ECFEOT   0130-21068-21304-1643-00222-00183-00051-BENMAR  48
ECFEOT   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFEOT                                                     */
*/*                                                                  */
*/* Function: Event Capture End-of-Task Listener and Router          */
*/*                                                                  */
*/* Decription: receives control from the end-of-task resource       */
*/*             termination manager when any address space task      */
*/*             is normally or abnormally terminated.                */
*/*                                                                  */
*/* Input Regs: R0  SSCT address                                     */
*/*             R1  SSOB address                                     */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R6  SSET address                                     */
*/*             R7  SSCT address                                     */
*/*             R8  SSOB address                                     */
*/*             R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=0 LPA-resident      */
*/*                                                                  */
*/* Restrictions: 1. R9 thru R12 are permanently assigned            */
*/*               2. $TRACE macro calls CANNOT be issued             */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
* @03 | V2R2 | 07072021 | Ben Marino  | Added STOKEN validity check   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFEOT   $ENTRY SPN=230,STACK=SSITCB   entry
         STM   R0,R1,DSAIPAR           save PARM regs
         LR    R7,R0                   SSCT address
         USING SSCT,R7                 set addressability
         LR    R8,R1                   SSOB address
         USING SSOB,R8                 set addressability
         L     R6,SSOBINDV             SSET address
         USING SSOBEXT,R6              set addressability
*
**       Establish recovery environment
*
         L     R4,STKRTMA              ECFRTM EPA
         MVC   DSAESTAE(ESTAEL),ESTAE  listform
         ESTAE (R4),                                                   +
               PARAM=(R9),             STK address                     +
               TOKEN=DSATOKN,          store token here            @02A+
               MF=(E,DSAESTAE)         establish recovery
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   EOTEXIT                 no, exit
         OI    DSAFLG1,DSA@STA         recovery established
         MVC   DSARSN,=AL4(RSN0944)    set RSN
         $RETRY EOTEXIT,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Validity check Event Capture instance
*
         L     R11,SSCTSUSE            EVT address
         USING EVT,R11                 set addressability
         CLC   EVTID,=CL4'EVT'         valid indeed?
         BNE   EOTEXIT                 no, exit
         ST    R11,STKEVTA             save EVT in stack
         OI    DSAFLG1,DSA@EVTA        EVT valid indicator         @02A
         TM    EVTFLG4,EVT@CWTO        COMPWTO init option set?    @02A
         BZ    EOT0000                 no, carry on                @02A
         OI    STKFLG1,STK@CWTO        yes, propagate indicator    @02A
*                                                                  @02A
**       Update active listener count
*
EOT0000  DS    0H                                                  @02A
         L     R2,EVTSSICT             active listeners count      @02A
         LA    R3,1(,R2)               add one                     @02A
         CS    R2,R3,EVTSSICT          update count                @02A
         BNE   EOT0000                 changed: try again          @02A
         OI    DSAFLG1,DSA@SSIC        set update indictor         @02A
*
**       Identify terminating address space
*
         MVC   STKWTOA,EVTWTOA         enable message service
         MVC   STKASCB,EVTASCB         copy subsysytm ASCB         @02A
         MVC   STKSYSID,EVTSYSID       copy sysytem name           @02A
         MVC   STKSUBNM,EVTSUBNM       copy subsysytem name        @02A
         TM    EVTFLG1,EVT@TERM        subsystem terminated?
         BNZ   EOTEXIT                 yes, exit
         CLC   SSETASCB,EVTASCB        subsystem ASCB?
         BNE   EOTEXIT                 no, exit
         CLC   SSETASID,EVTASID        subsystem ASID?
         BNE   EOTEXIT                 no, exit
         CLC   SSETCBA,EVTJSTCB        subsystem jobstep TCB?
         BNE   EOTEXIT                 no, exit
*
**       Deactivate Event Capture listeners
*
         ICM   R1,15,SSCTSSVT          listeners deactivated?
         BZ    EOTEXIT                 yes, exit
         XC    SSCTSSVT,SSCTSSVT       deactivate zECF
*
**       Issue Event Capture listeners deactivated msg
*
         $WTO  MID=ECF997I,            arrisentirci                    +
               VAR1==CL3'EOT'          ID caller
         B     EOTEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
EOTEXIT  DS    0H
         TM    DSAFLG1,DSA@STA         recovery established?
         BZ    EOTXIT00                no
         ESTAE 0,TOKEN=DSATOKN         delete recovery             @02C
*
EOTXIT00 DS    0H
         TM    DSAFLG1,DSA@EVTA        EVT valid?                  @02C
         BZ    EOTXIT99                no                          @02C
         TM    DSAFLG1,DSA@SSIC        listen count updated?       @02A
         BZ    EOTXIT99                no                          @02C
*
EOTXIT10 DS    0H
         L     R2,EVTSSICT             active listeners count      @02A
         LR    R3,R2                   copy count                  @02A
         BCTR  R3,0                    subtract one                @02A
         CS    R2,R3,EVTSSICT          decrement count             @02A
         BNE   EOTXIT10                changed: try again          @02A
*
EOTXIT99 DS    0H                                                  @02C
         XC    DSARC,DSARC             set RC
         $EXIT SPN=230,RC=DSARC        exit
*---------------------------------------------------------------------*
*        VCONs                                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFRTMA  DC    V(ECFRTM)               ECFRTM recovery manager
SRIENVA  DC    V(SRIENV)               ECFENV SRVentry environment EPA
SRXENVA  DC    V(SRXENV)               ECFENV SRVexit environment EPA
SBIENVA  DC    V(SBIENV)               ECFENV SUBentry environment EPA
SBXENVA  DC    V(SBXENV)               ECFENV SUBexit environment EPA
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ESTAE    ESTAE 0,MF=L                  listform
ESTAEL   EQU   *-ESTAE
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASVA   DS    18F                     save area
         DS    0X
DSAFLG1  DS    XL1                     flags
DSA@STA  EQU   X'80'                   ESTAE established
DSA@EVTA EQU   X'40'                   EVT valid indicator
DSA@SSIC EQU   X'20'                   listener indicator
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSAREBA  DS    F                       EOT-REB address
DSATOKN  DS    F                       ESTAE token                 @02A
         DS    0F
DSAOPAR  DS    F                       output parm reg
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
         DS    0F
DSAESTAE DS    CL(ESTAEL)              ESTAE listform
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         IHAASSB ,
         CVT   DSECT=YES
         IEFJESCT ,
         IEFJSCVT ,
         IEFJSSIB ,
         IEFJSSOB (ET),CONTIG=NO
         END
./ ADD NAME=ECFFRR   0118-21269-21304-1643-00129-00015-00114-BENMAR  55
ECFFRR   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFFRR                                                     */
*/*                                                                  */
*/* Description: ECF Locked Recovery Termination Manager             */
*/*                                                                  */
*/* Function: Performs recovery support functions on behalf of all   */
*/*           locked subsystem service routines.                     */
*/*                                                                  */
*/* Input Regs: R1  SDWA address                                     */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs Usage: R7  FRR address                                      */
*/*             R8  SDWA address                                     */
*/*             R10 Base address                                     */
*/*                                                                  */
*/* Output Regs: R14 Return address                                  */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=0 LPA-resident      */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V2R3 | 09272021 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFFRR   $ENTRY SAVE=NO
         LR    R10,R15                 base
         USING ECFFRR,R10              set addressability
         LR    R8,R1                   SDWA address
         USING SDWA,R8                 set addressability
         L     R7,SDWAPARM             FRR parm area
         USING FRR,R7                  set addressability
         TM    SDWAERRD,SDWACLUP       clean up only?
         BNZ   ABEND                   yes, percolate
         TM    FRRFLG1,FRR@RECR        recursive ABEND?
         BNZ   ABEND                   yes, percolate
         OI    FRRFLG1,FRR@RECR        set recursion indicator
*
**       Program Interrupt Code Test
*
         TM    FRRFLG1,FRR@PICC        PIC requested?
         BZ    RETRY                   no
         TM    SDWAERRA,SDWAPCHK       program check?
         BZ    ABEND                   no, percolate
         MVI   FRRXRC,X'04'            set RC
         CLI   SDWAICD1,PIC4           protection exception?
         BE    RETRY                   yes, retry
         MVI   FRRXRC,X'08'            set RC
         CLI   SDWAICD1,PIC5           addressing exception?
         BE    RETRY                   yes, retry
         MVI   FRRXRC,X'12'            set RC
         CLI   SDWAICD1,PIC10          segment translation exception?
         BE    RETRY                   yes, retry
         MVI   FRRXRC,X'16'            set RC
         CLI   SDWAICD1,PIC11          page transaltion exception
         BNE   ABEND                   no, percolate
*
**       RETRY Routine
*
RETRY    DS    0H
         ICM   R3,15,FRRRETRY          retry address init?
         BZ    ABEND                   no, percolate
         OI    FRRFLG1,FRR@RTRY        set retry indicator
         ICM   R4,15,FRRSAVE           retry regs address init?
         BZ    ABEND                   no, percolate
         MVC   SDWASRSV,0(R4)          restore retry regs
         SETRP RC=4,                   retry                           +
               RETADDR=(R3),           retry address                   +
               RETREGS=YES,            restore registers               +
               RECORD=NO,              LOGREC not required             +
               DUMP=NO,                SDUMP not required              +
               WKAREA=(R8)             SDWA address
         BR    R14                     return to RTM
*
**       ABEND Routine
*
ABEND    DS    0H
         OI    FRRFLG1,FRR@ABND        ABEND indicator
         TM    FRRFLG1,FRR@DUMP        SDUMP requested?
         BZ    ABEND00                 no
         SETRP DUMP=YES,WKAREA=(R8)    yes
*
ABEND00  DS    0H
         TM    FRRFLG1,FRR@LOGR        LOGREC requested?
         BZ    ABEND10                 no
         SETRP RECORD=YES,WKAREA=(R8)  yes
*
ABEND10  DS    0H
         MVC   SDWARECP,ZFRRPARM       recovery parm
         SETRP RC=0,WKAREA=(R8)        percolate ABEND
         BR    R14                     return to RTM
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
ZFRRPARM DS    0CL24
         DC    CL8'ECFCSM'             Module name
         DC    CL8'ECFFRR'             Routine name
         DC    CL8'ECFFRR'             FRR recovery routine name
ZFRR@SZE EQU   *-ZFRRPARM              parms size
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem Data Areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFFRR ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         CVT   DSECT=YES
         IHAFRRS ,
         IHASDWA ,
         END
./ ADD NAME=ECFIDI   0121-21056-21304-1644-00401-00385-00368-BENMAR  05
ECFIDI   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Nname ECFIDI                                                     */
*/*                                                                  */
*/* Function: SETDIE Enable/Disable Service Routine                  */
*/*                                                                  */
*/* Description: Enables and disables the ECFDIE disabled interrupt  */
*/*              exit routine. Enable processing is controlled by    */
*/*              the TIMER=interval parameter option specified in    */
*/*              the ECFMSTR member of the ECF PARMLIB dataset.      */
*/*                                                                  */
*/*              When TIMER=00 is specified, ECF does not enable     */
*/*              the disabled interrupt exit and does not attach     */
*/*              ECFSRV(DIESRV) subtask in the ECF address space.    */
*/*                                                                  */
*/*              When a timer value in the range of 01 to 60 is      */
*/*              specified, ECF enables ECFDIE disabled interrupt    */
*/*              exit and attaches the ECFSRV(DIESRV) subtask.       */
*/*                                                                  */
*/*              The default specified in ECFMSTR is TIMER=00        */
*/*                                                                  */
*/* Input Regs: R1  FCID                                             */
*/*                 00 - enable                                      */
*/*                 04 - disable                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor state, Key=0, Fixed            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 02252021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFIDI   $SRVINI
         ST    R1,DSAIPAR              save PARM reg
         USING EVT,R11                 EVT addressability
*
**       Enable timer interrupt exit
*
         LTR   R1,R1                   enable request?
         BNZ   IDI0010                 no, test further
         USING PSA,0
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BNE   IDI0000                 no, carry on
         XC    DSARC,DSARC             set RC
         B     IDIEXIT                 exit
*
IDI0000  DS    0H
         $CALL SETDIE                  activate DIE
         B     IDIEXIT                 exit
*
**       Disable timer interrupt exit
*
IDI0010  DS    0H
         LA    R3,4                    FCID
         CLR   R1,R3                   disable request?
         BNE   IDI0099                 no, error
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BNE   IDI0020                 no, carry on
         XC    DSARC,DSARC             set RC
         B     IDIEXIT                 exit
*
IDI0020  DS    0H
         $CALL DELDIE                  deactivate DIE
         B     IDIEXIT                 exit
*
**       Invalid function code ID specified
*
IDI0099  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN2072)    set error RSN
         B     IDIEXIT
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
IDIEXIT  DS    0H
         $SRVXIT RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SETDIE                                                     */
*/*                                                                  */
*/* Function: Enable Timer Interrupt Exit Subroutine                 */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  TQX address                                      */
*/*             R6  TQE address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SETDIE   $SUBINI
         USING EVT,R11
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set RC
         MVC   DSARSN,=AL4(RSN2060)    set RSN
         $RETRY SETDEXIT,              set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Storage obtain timer elements
*
         USING PSA,0
         L     R3,FLCCVT               CVT
         USING CVT,R3                  set addressability
         L     R3,CVTASVT              ASVT
         USING ASVT,R3                 set addressability
         L     R0,ASVTMAXU             IEASYS00(MAXUSER) slots
         AL    R0,=F'1'                add one slot
         LA    R3,SRX@SIZE             SRX slot size
         MR    R2,R0                   get number of slots
         LA    R3,TQELEN+TQX@SZE(,R3)  add TQE+TQX size
         ST    R3,EVTDSTOR             save storage size
         GETMAIN RC,                                                   +
               LV=(R3),                size                            +
               SP=245                  subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    SETD000                 yes, carry on
         $WTO  MID=ECF059E,                                            +
               VAR1==CL7'obtain',VAR2=DSARC
         B     SETDEXIT                exit
*
**       Initialize timer queue elements
*
SETD000  DS    0H
         LR    R2,R1                   clear,
         XR    R15,R15                 storage,
         MVCL  R2,R14                  block.
         LR    R6,R1                   set TQE address
         USING TQE,R6                  set addressability
         ST    R6,EVTTQEAD             save TQE address
         MVC   TQEVAL,EVTDINTV         set timer interval
         MVC   TQEEXIT,EVTDIEA         set ECFDIE EPA
         OI    TQEEXIT,TQEXMODE        AMODE=31                    @02A
         OI    TQEFLGS3,TQEAMODE       AMODE=31                    @02A
         LA    R5,TQELEN(,R6)          TQX address
         USING TQX,R5                  set addressability
         ST    R5,EVTTQXAD             save TQX address
         MVC   TQXID,=CL4'TQX'         ID TQX
         ST    R11,TQXEVTAD            set EVT address
         MVC   TQXEASID,EVTASID        set ECF ASID
         MVC   TQXEASCB,EVTASCB        set ECF ASCB address
         MVC   TQXDINTV,EVTDINTV       set timer interval
         TM    EVTFLG4,EVT@ACAP        CAPTURE=YES specified?
         BZ    SETD010                 no, carry on
         OI    TQXFLG1,TQX@ACAP        yes, set capture indicator
*
**       Enable timer interrupt exit
*
SETD010  DS    0H
         STM   R10,R13,STKDIESV        protect these regs
         USING PSA,0                   FLC addressability
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTTPC               timer SLIH TPC address
         USING TPC,R3                  set addressability
         L     R15,TPCSDIE             DIE enqueue EPA
         BASR  R14,R15                 add TQE to real timer queue
         LM    R10,R13,STKDIESV        restore these regs
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   SETD020                 no, error
*
**       Issue enable complete debug msg
*
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    SETDEXIT                no, skip debug msg
         $WTO  MID=ECF108I,                                            +
               VAR1==CL8'enabled'      timer enabled
         B     SETDEXIT                exit
*
**       Disable timer interrupt exit
*
SETD020  DS    0H
         L     R2,EVTTQEAD             TQE address
         L     R3,EVTDSTOR             TQE+TQX size
         FREEMAIN RU,                                                  +
               A=(R2),                 storage address                 +
               LV=(R3),                storage size                    +
               SP=245                  SQA subpool
         XC    EVTTQEAD,EVTTQEAD       storage released
*
**       Issue enabled failed error msg
*
         MVC   DSARSN,=AL4(RSN2064)    set RSN
         $WTO  MID=ECF060E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSARSN             show RSN
*
SETDEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DELDIE                                                     */
*/*                                                                  */
*/* Function: Disable Timer Interrupt Exit Subroutine                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  TQX address                                      */
*/*             R6  TQE address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DELDIE   $SUBINI
         USING PSA,0
         USING EVT,R11
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set RC
         MVC   DSARSN,=AL4(RSN2068)    set RSN
         $RETRY DELDEXIT,              set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Validity check timer elements
*
         ICM   R6,15,EVTTQEAD          TQE address init?
         BZ    DELDEXIT                no, exit
         USING TQE,R6                  set addressability
         LA    R5,TQELEN(,R6)          TQX address
         USING TQX,R5                  set addressability
         XC    TQXDINTV,TQXDINTV       disable timer exit
*
**       Disable timer interrupt exit
*
         STM   R10,R13,STKDIESV        protect these regs
         SETLOCK OBTAIN,TYPE=DISP,                                     +
               MODE=UNCOND,                                            +
               RELATED=('Serialize timer SLIH environment')
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         LR    R1,R6                   TQE address
         L     R15,CVTQTD00            dequeue EPA
         BASR  R2,R15                  disable timer
         SETLOCK RELEASE,TYPE=DISP,                                    +
               RELATED=('Release timer SLIH serialization')
         LM    R10,R13,STKDIESV        restore these regs
*
**       Allow in-flight timer completion
*
         CLC   EVTXINTV,XZEROS         ECFSUB(PREINI) call?
         BE    DELD010                 yes, skip stimer wait
         STIMER WAIT,                                                  +
               DINTVL=EVTXINTV         timer inteval
*
**       Storage release timer elements
*
DELD010  DS    0H
         L     R3,EVTDSTOR             TQE+TQX size
         FREEMAIN RU,                                                  +
               A=(R6),                 storage address                 +
               LV=(R3),                storage size                    +
               SP=245                  subpool
         XC    EVTTQEAD,EVTTQEAD       zero TQE address
         XC    EVTTQXAD,EVTTQXAD       zero TQX address
*
**       Issue timer disabled debug msg
*
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DELDEXIT                no, skip debug msg
         $WTO  MID=ECF108I,                                            +
               VAR1==CL8'disabled'     DIE disabled
*
DELDEXIT DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
XZEROS   DC    XL8'0000000000000000'   xzeros
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@1RV0 EQU   X'80'                   -available
DSA@1RV1 EQU   X'40'                   -available
DSA@1RV2 EQU   X'20'                   -available
DSA@1RV3 EQU   X'10'                   -available
DSA@1RV4 EQU   X'08'                   -available
DSA@1RV5 EQU   X'04'                   -available
DSA@1RV6 EQU   X'02'                   -available
DSA@1RV7 EQU   X'01'                   -available                 r
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSAIPAR  DS    F                       input PARM register
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         CVT   DSECT=YES
         IHAPSA ,
         IHAASVT ,
         IHATQE ,
         IEAVVTPC ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFTQX ,
         $ECFEQU ,
         END
./ ADD NAME=ECFIEW   0107-21068-21304-1644-00111-00110-00044-BENMAR  14
ECFIEW   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFIEW                                                     */
*/*                                                                  */
*/* Function: IEWFETCH Program Fetch Front-End Routine               */
*/*                                                                  */
*/* Description: This routine is a program fetch front-end. Its      */
*/*              purpose is to allow load modules to be loaded into  */
*/*              fixed or pageable CSA.                              */
*/*                                                                  */
*/* Problem: the MVS 3.8j LOAD supervisor call does not support      */
*/*          loading modules to fixed and pageable CSA storage.      */
*/*          Code changes to modules that must reside in common      */
*/*          storage require IPLing MVS 3.8j with CLPA or MLPA.      */
*/*                                                                  */
*/* Solution: Intercept MVS 3.8j program fetch resident module       */
*/*           IEWFETCH with this ECFIEW routine to alter the subpool */
*/*           suplied by the LOAD supervisor call from SP=251/252 to */
*/*           pageable subpool 241 or fixed subpool 228 as specified */
*/*           by IEWSPN.                                             */
*/*                                                                  */
*/* Input Regs: R5  - SVRB address                                   */
*/*             R6  - base register (IEAVLK01)                       */
*/*             R7  - DCB address                                    */
*/*             R8  - DEB address (input)                            */
*/*             R9  - CDE address (complemented)                     */
*/*             R10 - subpool (251 or 252)                           */
*/*             R12 - relocated entry point passed back by fetch     */
*/*             R13 - work area                                      */
*/*             R14 - retuen reg                                     */
*/*             R15 - return code                                    */
*/*                                                                  */
*/* Regs Usage: R11 - base register (ECFIEW)                         */
*/*             R15 - work register                                  */
*/*                                                                  */
*/* Output Regs: R5  - SVRB address                                  */
*/*              R6  - base register (IEAVLK01)                      */
*/*              R7  - DCB address                                   */
*/*              R8  - DEB address (input)                           */
*/*              R9  - CDE address (complemented)                    */
*/*              R10 - subpool (228 for selected modules)            */
*/*              R12 - relocated entry point passed back by fetch    */
*/*              R13 - work area                                     */
*/*              R14 - retuen reg                                    */
*/*              R15 - return code                                   */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=0, SQA resident.    */
*/*                                                                  */
*/* Restrictions: 1. Routine runs without a save area.               */
*/*               2. Routine does NOT use address constants, since   */
*/*                  it is relocated to SQA by the ECFCSA intercept  */
*/*                  processing routine.                             */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFIEW   $ENTRY SAVE=NO,IEWF=YES       entry
         USING ECFIEW,R15              set addressability
*
**       Load SSI-support load module in CSA
*
         LR    R1,R9                   copy CDE address
         LPR   R1,R1                   make it positive
         USING CDENTRY,R1              CDE addressability
         CLC   CDNAME,IEWSSM           SSI-support module?
         BNE   IEWEXIT                 no, exit
         L     R10,IEWSPN              set requested supool        @02C
         DROP  R1
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
IEWEXIT  DS    0H
         L     R15,IEWFTCH             real IEWFETCH EPA
         BR    R15                     branch enter IEWFETCH
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        ECFIEW storage size                                          *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0D
ECFIEWLN EQU   *-ECFIEW
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $IEWFID ID=XEW,DSECT=YES
         $ECFEQU ,
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHACDE ,
         IHAPSA ,
         IHAASCB ,
         CVT   DSECT=YES
         END
./ ADD NAME=ECFIIO   0120-21068-21304-1644-00306-00298-00272-BENMAR  22
ECFIIO   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFIIO                                                     */
*/*                                                                  */
*/* Function: Event Capture Input Access Service Processor           */
*/*                                                                  */
*/* Decription: Performs input/output requests on behalf of all      */
*/*             Event Capture subsystem components.                  */
*/*                                                                  */
*/* Input Regs: R0  DDname/ZIO address                               */
*/*             R1  member name address                              */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=Callerkey           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 03172020 | Ben Marino  | Serviceability enhancements   *
* @03 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFIIO   $SRVINI                       module ID
         USING EVT,R11                 EVT addressability
         STM   R0,R1,DSAIPAR           save parm regs
*
**       Trace service request entry
*
         $TRACE $SRVINI,                                               +
               MID=ECFIIO,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0584)    set error RSN
         $RETRY IIO0099,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Extract DDName/member name from ZIO
*
         L     R8,DSAIGR0              DDName/ZIO address
         USING ZIO,R8                  set addressability
         CLC   ZIOID,=CL4'ZIO'         ZIO address?
         BNE   IIO0000                 no, DDname address
         MVC   DSADDNAM,ZIODDNAM       copy DDName
         MVC   DSAMEMBR,ZIOMEMBR       copy member name
         MVC   DSAPRLIB,ZIOPRLIB       copy I/O buffer address
         MVC   DSAPREND,ZIOPREND       copy I/O buffer-end address
         MVC   DSAPRBUF,ZIOPRBUF       copy I/O buffer size
         OI    DSAFLG1,DSA@ZIOA        set ZIO indicator
         B     IIO0010                 carry on
*
**       Extract DDName/member name from regs
*
IIO0000  DS    0H
         MVC   DSAPRLIB,STKPRLIB       I/O buffer address          @02C
         MVC   DSAPREND,STKPREND       I/O buffer-end address      @02C
         MVC   DSAPRBUF,STKPRBUF       I/O buffer size             @02C
         L     R1,DSAIGR0              DDName address
         MVC   DSADDNAM,0(R1)          copy DDName
         L     R1,DSAIGR1              PARM address
         MVC   DSAMEMBR,0(R1)          copy member name
         CLC   DSAMEMBR,EVTINITP       initialization call?
         BNE   IIO0010                 no, use supplied member
         MVC   DSAMEMBR,EVTMASTR       yes, use init call member
*
**       Validity check I/O buffer block
*
IIO0010  DS    0H
         ICM   R1,15,DSAPRLIB          I/O buffer init?
         BNZ   IIO0020                 yes, carry on
         MVC   DSARSN,=AL4(RSN0212)    set error RSN
         $WTO  MID=ECF050E,                                            +
               VAR1=DSADDNAM,          show DDname                     +
               VAR2=DSARC,             show error RC                   +
               VAR3==CL8'ECFIIO'       show caller
         B     IIO0099                 exit
*
**       Open specified dataset
*
IIO0020  DS    0H
         TM    DSAFLG1,DSA@ZIOA        ZIO address supplied?
         BNZ   IIO0025                 yes, skip flag reset
         NI    STKFLG2,XFF-STK@GREC    reset records found         @03C
*
IIO0025  DS    0H
         LA    R3,DSAPDCB              DCB address
         USING IHADCB,R3               set addressability
         LA    R4,DSADECB              DECB address                @02A
         USING DECB,R4                 set addressability          @02A
         MVC   DSAOLST,OPENLST
         MVC   0(DATASETL,R3),DATASET  DCB
         MVC   DCBDDNAM,DSADDNAM       init requested DDname
         OPEN  ((R3)),MF=(E,DSAOLST)
         TM    DCBOFLGS,DCBOFOPN       successful?
         BNZ   IIO0030                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set RC
         MVC   DSARSN,=AL4(RSN0200)    set RSN
         $WTO  MID=ECF025E,            no, issue error msg             +
               VAR1=DSADDNAM,          show DDname                     +
               VAR2=DSARSN             show error RSN
         B     IIO0099                 exit
*
**       Locate requested member
*
IIO0030  DS    0H
         MVC   ZIOLRECL,DCBLRECL       copy LRECL                  @02A
         OI    DSAFLG1,DSA@OPEN        set open indicator
         NI    DSAFLG1,XFF-DSA@RECR    reset record found
         LA    R3,DSAPDCB              DCB address
         FIND  ((R3)),DSAMEMBR,D       find member
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    IIO0040                 yes, carry on
         $WTO  MID=ECF026E,            no, issue error msg             +
               VAR1=DSADDNAM,          show DDname                     +
               VAR2=DSAMEMBR,          show member name                +
               VAR3=DSARC,             show error RC                   +
               VAR4=DSARSN             show error RSN
         B     IIO0099                 exit
*
**       Clear I/O buffer block
*
IIO0040  DS    0H
         L     R2,DSAPRLIB             I/O buffer address
         L     R3,DSAPRBUF             I/O buffer size
         XR    R15,R15
         MVCL  R2,R14                  clear I/O buffer
         L     R5,DSAPRLIB             I/O buffer address
*
**       Read requested member data
*
IIO0050  DS    0H
         LA    R3,DSAPDCB              DCB address
         MVC   DSADECB(READ@SZE),READPAR DECB listform
         READ  DSADECB,SF,(R3),(R5),'S',MF=E
         CHECK DSADECB
         LH    R1,DCBBLKSI             block size
         L     15,DECIOBPT             IOB address                 @02A
         LH    R0,14(,R15)             residual count              @02A
         SR    R1,R0                   records read                @02A
         LA    R5,0(R1,R5)             next buffer address
         CL    R5,DSAPREND             end of buffer reached?
         BNL   IIO0060                 yes, error
         TM    DSAFLG1,DSA@ZIOA        ZIO address supplied?
         BNZ   IIO0050                 yes, skip flag reset
         OI    STKFLG2,STK@GREC        set records found indicator @02C
         B     IIO0050                 read
*
**       I/O buffer block overflow error
*
IIO0060  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0208)    set error RSN
         $WTO  MID=ECF027E,                                            +
               VAR1=DSADDNAM,          show DDname                     +
               VAR2=DSAMEMBR,          show member name                +
               VAR3=DSARSN             show RSN
         MVC   DSAOPAR,DSAPRLIB        buffer address              @02A
         B     IIO0099                 exit
*
**       End of data address routine
*
IIOZEOD  DS    0H
         MVC   DSAOPAR,DSAPRLIB        buffer address
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
**       Close specified dataset
*
IIO0099  DS    0H
         TM    DSAFLG1,DSA@OPEN        data set opened?
         BZ    IIOEXIT                 no, skip close
         MVC   DSACLST,CLOSLST         listform
         LA    R3,DSAPDCB              address
         CLOSE ((R3)),MF=(E,DSACLST)
         NI    DSAFLG1,XFF-DSA@OPEN    reset open indicator
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
IIOEXIT  DS    0H
         $TRACE $SRVXIT,                                               +
               MID=ECFIIO,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
         $SRVXIT PARM=DSAOPAR,                                         +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
OPENLST  OPEN  (,),MF=L                OPEN listform
         DS    0F
CLOSLST  CLOSE (,),MF=L                CLOSE listform
         DS    0F
READPAR  READ  READDECB,SF,,,'S',MF=L  DECB list form
READ@SZE EQU   *-READPAR
         DS    0F
DATASET  DCB   DDNAME=DATASET,         DDname                          +
               DSORG=PO,               read sequentially               +
               MACRF=R,                macro format                    +
               BUFNO=1,                just one buffer             @02A+
               EODAD=IIOZEOD           EODAD routinine
DATASETL EQU   *-DATASET               DCB listform
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFZIO ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@RECR EQU   X'80'                   records found indicator
DSA@OPEN EQU   X'40'                   dataset open indicator
DSA@ZIOA EQU   X'20'                   ZIO address indicator
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSAWORD  DS    F                       work area
DSAPRLIB DS    F                       I/O buffer address
DSAPREND DS    F                       I/O buffer end-address
DSAPRBUF DS    F                       I/O buffer size
         DS    0F
DSAOPAR  DS    F                       output Parm reg
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
DSABUFA  DS    F                       buffer address
DSARCNT  DS    F                       record count
         DS    0F
DSADDNAM DS    CL8                     DDName
DSAMEMBR DS    CL8                     member name
         DS    0F
DSAOLST  OPEN  (,),MF=L                OPEN listform
         DS    0F
DSACLST  CLOSE (,),MF=L                CLOSE listform
         DS    0F
DSADECB  DS    CL(READ@SZE)            DECB
         DS    0D
DSAPDCB  DS    CL100                   DCB address
DSAPDCBL EQU   *-DSAPDCB
         DS    0D
DSAPLST  DS    CL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         DCBD  DSORG=PO,DEVD=DA
         IHADECB DSECT=YES                                         @02A
         END
./ ADD NAME=ECFIOT   0106-21287-21304-1644-00140-00001-00140-BENMAR  29
ECFIOT   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFIOT                                                     */
*/*                                                                  */
*/* Description: Locate specified DDname service routine             */
*/*                                                                  */
*/* Input Regs: R1  DDname address                                   */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R3  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  DDname entry address                            */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor state, key=8                   */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V2R3 | 10172021 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFIOT   $SRVINI                       entry
         USING EVT,R11                 EVT addressability
         ST    R1,DSAIPAR              save DDname parm
*
         USING PSA,0                   FLC addressability
         L     R3,PSAAOLD              ASCB address
         USING ASCB,R3                 set addressability
         L     R3,ASCBXTCB             jobstep task TCB
         USING TCB,R3                  set addressability
         ICM   R3,15,TCBTIO            TIOT init?
         BZ    IOT0010                 no, error
         USING TIOT,R3                 set addressability
         XR    R2,R2                   zero
         ICM   R2,1,TIOELNGH           any DDnames?
         BZ    IOT0010                 no, error
         LA    R3,TIOENTRY             1st DDname entry
         USING TIOENTRY,R3             DDname addressability
*
IOT0000  DS    0H
         CLI   0(R3),X'00'             last DDname?
         BE    IOT0010                 yes, error
         CLC   TIOEDDNM,0(R1)          DDname match?
         BE    IOT0099                 yes, carry on
         LA    R3,0(R2,R3)             next DDname
         B     IOT0000                 loop
*
IOT0010  DS    0H
         XC    DSAOPAR,DSAOPAR         zero DDname entry address
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN0892)    set error RSN
         B     IOTEXIT                 exit
*
IOT0099  DS    0H
         ST    R3,DSAOPAR              return DDname entry address
         MVC   DSARC,=AL4(RC0)         set RC
         MVC   DSARSN,=AL4(RSN0)       set RSN
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
IOTEXIT  DS    0H
         $SRVXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem Data Areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@RV0  EQU   X'80'                   -available
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
         DS    0F
DSAIPAR  DS    F                       input parm reg
DSAOPAR  DS    F                       output Parm reg
DSAWORD  DS    F                       work area
         DS    0D
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         CVT   DSECT=YES
         IKJTCB ,
TIOT     DSECT ,
         IEFTIOT1 ,
         END
./ ADD NAME=ECFIRB   0120-21068-21304-1644-00494-00489-00091-BENMAR  39
ECFIRB   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFIRB                                                     */
*/*                                                                  */
*/* Function: Asynchronous Exit Routine Scheduler                    */
*/*                                                                  */
*/* Description:                                                     */
*/*           Schedule a SRB/IRB into the any address space to       */
*/*           process the specified IRB exit routine.                */
*/*                                                                  */
*/*           This routine exploits the following Exit Effector      */
*/*           support functions:                                     */
*/*                                                                  */
*/* Stage 1 Initialization:                                          */
*/*           Interface with Stage 1 Exit Effector to create IRB     */
*/*           and IQE control blocks. Stage 1 initializes these      */
*/*           IRB fields:                                            */
*/*                                                                  */
*/*           RBEP     - entry address of the IRB exit routine.      */
*/*           RBSTAB   - flags indicationg how the IRB is treated    */
*/*                      upon termination of the exit routine.       */
*/*           RBOPSW   - PSW to be loaded to initialize execution    */
*/*                      of the exit routine.                        */
*/*           RBSIZE   - size of the IRB (including) the size of     */
*/*                      the IQE.                                    */
*/*           RBNEXAV  - address of the IQE.                         */
*/*           RBPPSAV1 - address of save area.                       */
*/*                                                                  */
*/* Stage 2 Scheduling:                                              */
*/*           Initialization of the IQE is the responsibility of     */
*/*           this routine and is necessary to define to the system  */
*/*           the task the exit routine is to execute under. These   */
*/*           fields are initialized by this routine:                */
*/*                                                                  */
*/*           IQEPARM  - address of ZIRB to be passed to the exit    */
*/*                      routine.                                    */
*/*           IQEIRB   - address of the IRB as returned in R1 by the */
*/*                      Stage 1 Exit Effector.                      */
*/*           IQETCB   - address of the TCB under which the exit     */
*/*                      routine will execute.                       */
*/*                                                                  */
*/*           This routine invokes the Stage 2 Exit Effector to      */
*/*           queue the IQE to the system asynchronous exit queue.   */
*/*           Stage 2 entry is via the CVT0EF00 branch entry point.  */
*/*           The registers are loaded as follows:                   */
*/*                                                                  */
*/*           R0     - Irrelevant                                    */
*/*           R1     - Twos-complement form of the IQE address       */
*/*           R2-R13 - Irrelevant                                    */
*/*           R14    - Return address                                */
*/*           R15    - Irrelevant                                    */
*/*                                                                  */
*/*           Upon return from the Stage 2 Exit Effector, R0 and R2  */
*/*           thru R14 are unchanged.                                */
*/*           R1 contains a true (non-complemented) form of the IQE  */
*/*           address.                                               */
*/*                                                                  */
*/* Stage 3 Execution:                                               */
*/*           Once scheduled by stage 2, the exit routine is ready   */
*/*           for dispatch. Stage 3, effectively a subroutine of     */
*/*           the MVS dispatcher, is called to queue the IRB to the  */
*/*           task indicated by the IQE. The scheduled IRB executes  */
*/*           the requested exit routine.                            */
*/*                                                                  */
*/* Input Regs:                                                      */
*/*           R1  ZIRB address                                       */
*/*           R13 save area address                                  */
*/*           R14 return address                                     */
*/*           R15 entry point address                                */
*/*                                                                  */
*/* Regs Usage:                                                      */
*/*           R5  ZIRB address                                       */
*/*           R6  SRB address                                        */
*/*           R9  STK address                                        */
*/*           R11 EVT address                                        */
*/*           R10 base address                                       */
*/*           R12 DSA address                                        */
*/*           R13 save area address                                  */
*/*                                                                  */
*/* Output Regs:                                                     */
*/*           R0  reason code                                        */
*/*           R1  output parameter                                   */
*/*           R15 return code                                        */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, State, Key=0,           */
*/*             LPA-resident.                                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
* @03 | V2R3 | 08022021 | Ben Marino  | Added TCB token support       *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFIRB   $SRVINI
         USING PSA,0                   FLC addressability
         STM   R0,R1,DSAIPAR           save PARM regs
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0644)    set error RSN
         $RETRY IRBEXIT,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Check subsystem availability
*
         MVC   DSARC,=AL4(RC12)        set error RC
         L     R5,DSAIGR1              copy ZIRB address
         USING ZIRB,R5                 set addressability
         L     R11,ZIRBEVT             get EVT address
         USING EVT,R11                 set addressability
         DROP  R5
         MVC   DSARSN,=AL4(RSN0500)    set error RSN
         CLC   EVTID,=CL4'EVT'         valid indeed?
         BNE   IRBEXIT                 no, exit
         MVC   DSARSN,=AL4(RSN0504)    set error RSN
         TM    EVTFLG1,EVT@TERM        subsystem terminating?
         BNZ   IRBEXIT                 yes, exit
*
**       Obtain SRB Cell element
*
         $CPOOL GET,                   get SRB cell                    +
               CPID=EVTSRBCP,          cell pool ID                    +
               CELL=DSASRBA,           return SRB cell here            +
               MODE=COND               conditional request
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         LTR   R15,R15                 successful?
         BNZ   IRBEXIT                 no, exit
*
**       Relocate ZIRB element
*
         L     R3,FLCCVT               get CVT address
         USING CVT,R3                  set addressability
         L     R6,DSASRBA              SRB cell address
         USING SRB,R6                  establish addressability
         LA    R5,SRBSIZE(,R6)         get ZIRB address
         USING ZIRB,R5                 set addressability
         L     R1,DSAIGR1              ZIRB address
         MVC   0(ZIRB@SZE,R5),0(R1)    relocate ZIRB
*
**       Initialize Service Request block
*
         XC    SRB(SRBSIZE),SRB        scrub SRB block
         MVC   SRBID,=CL4'SRB'         ID SRB
         LA    R1,SRBENTRY             SRB routine EPA
         ST    R1,SRBEP                set EPA
         LA    R1,CVTBRET              get RMTR address
         ST    R1,SRBRMTR              set RMTR address
         ST    R6,SRBPARM              SRBPARM has SRB cell address
         MVI   SRBPRIOR,SRBPSYS        set system priority level
         MVC   SRBASCB,ZIRBASCB        set target ASCB
         SCHEDULE SRB=(R6),                                            +
               SCOPE=LOCAL             schedule service routine
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         B     IRBEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
IRBEXIT  DS    0H
         $SRVXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SRBENTRY                                                   */
*/*                                                                  */
*/* Function: SRB service routine                                    */
*/*                                                                  */
*/* Restrictions: SVCs cannot be issued, except for ABEND.           */
*/*                                                                  */
*/* Input Regs: R0  SRB block address                                */
*/*             R1  SRB cell address                                 */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* Regs Usage: R5  ZIRB address                                     */
*/*             R6  ZFRR address                                     */
*/*             R7  IQE address                                      */
*/*             R8  IRB address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SRBENTRY DS    0H
         BALR  R10,0                   entry
         USING *,R10                   set addressability
         LR    R9,R14                  protect return address
*
**       Establish FRR recovery
*
         LA    R3,FRRENTRY             FRR routine EPA
         SETFRR A,                     add FRR                         +
               FRRAD=(3),              FRR address                     +
               PARMAD=(6),             ZFRR address                    +
               WRKREGS=(14,15)
         USING ZFRR,R6                 set addressability
         MVC   ZFRRID,=CL4'ZFRR'       ID ZFRR
         LA    R2,SRBUNLK              retry address
         ST    R2,ZFRRETRY             set retry address
         ST    R1,ZFRRSRB              init SRB cell address
         LA    R5,SRBSIZE(,R1)         get ZIRB address
         USING ZIRB,R5                 set addressability
         MVC   ZFRREVT,ZIRBEVT         init EVT address
*
**       Check subsystem availability
*
         L     R11,ZIRBEVT             EVT address
         USING EVT,R11                 set addressability
         CLC   EVTID,=CL4'EVT'         valid indeed?
         BNE   SRBEXIT                 no, exit
         TM    EVTFLG1,EVT@TERM        subsystem terminating?
         BNZ   SRBEXIT                 yes, exit
         LOCASCB STOKEN=EVTSTOKN       locate zECF                 @02C
         LTR   R15,R15                 zECF instance active?       @02A
         BNZ   SRBEXIT                 no, exit                    @02A
*
**       Copy SRB cell address to REB
*
         USING PSA,0                   FLC addressability
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         ICM   R4,15,ZIRBREB           REB address init?
         BZ    SRB0000                 no, carry on
         USING REB,R4                  REB addressability
         CLC   REBID,=CL4'REB'         valid indeed?
         BNE   SRB0000                 no, carry on
         MVC   REBSRBA,ZFRRSRB         init SRB cell address
         B     SRB0010                 carry on
         DROP  R4
*
**       Copy SRB cell address to SRE
*
SRB0000  DS    0H
         ICM   R4,15,ZIRBSRE           SRE address init?
         BZ    SRB0010                 no, carry on
         USING SRE,R4                  SRE addressability
         CLC   SREID,=CL4'SRE'         valid indeed?
         BNE   SRB0010                 no, carry on
         MVC   SRESRBA,ZFRRSRB         init SRB cell address
         DROP  R4
*
**       Obtain LOCAL address space lock
*
SRB0010  DS    0H
         SETLOCK OBTAIN,                                               +
               REGS=USE,                                               +
               TYPE=LOCAL,                                             +
               MODE=UNCOND,                                            +
               RELATED=('CIRB branch entry requirement')
         OI    ZFRRFLG1,ZFRR@LCK       lock held
*
**       Schedule IRB service request
*
         L     R4,ZIRBTCB              TCB
         L     R7,ZIRBASCB             ASCB
         L     R1,ZIRBEP               Exit routine EPA
         CIRB  EP=(R1),                build IRB/IQE                   +
               KEY=SUPR,               Supervisor key                  +
               MODE=SUPR,              Supervisor state                +
               SVAREA=YES,             save area required              +
               WKAREA=IQELEN*2,        work area size                  +
               RETIQE=NO,              IQE interrupt element           +
               STAB=(DYN),             free WKAREA when IRB terminates +
               BRANCH=YES              branch enter CIRB service
         LR    R8,R1                   copy IRB address
         USING RBBASIC,R8              set addressability
         OI    ZFRRFLG1,ZFRR@CRB       CIRB service called
*
**       Initialize required IQE fields
*
         L     R7,RBNEXAV              get IQE address
         USING IQESECT,R7              set addressability
         ST    R5,IQEPARAM             set ZIRB parameter
         STCM  R8,7,IQEIRBA            set IRB address
         MVC   IQETCBA,ZIRBTCB+1       set target TCB
         LR    R1,R7                   copy IQE address
         LNR   R1,R1                   set twos compliment
         L     R15,CVT0EF00            Stage 2 entry address
         BALR  R14,R15                 queue IQE
         OI    ZFRRFLG1,ZFRR@STG       Stage 2 called
*
**       Release LOCAL address space lock
*
SRBUNLK  DS    0H
         TM    ZFRRFLG1,ZFRR@LCK       LOCAL lock held?
         BZ    SRBEXIT                 no, exit
         SETLOCK RELEASE,                                              +
               REGS=USE,                                               +
               TYPE=LOCAL,                                             +
               RELATED=('LOCAL lock no longer needed')
         NI    ZFRRFLG1,XFF-ZFRR@LCK   lock released
*
**       Exit
*
SRBEXIT  DS    0H
         SETFRR D,WRKREGS=(14,15)      delete FRR
         LR    R14,R9                  set return address
         BR    R14                     exit
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: FRRENTRY                                                   */
*/*                                                                  */
*/* Function: FRR recovery routine                                   */
*/*                                                                  */
*/* Restrictions: SVCs cannot be issued, except for ABEND.           */
*/*                                                                  */
*/* Input Regs: R0  address of 200-byte work area                    */
*/*             R1  SDWA address                                     */
*/*             R13 SDWAVRA address                                  */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* Regs Usage: R7  ZFRR address                                     */
*/*             R8  SDWA address                                     */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*                                                                  */
*/* Notes: FRRs need not restore registers upon return.              */
*/*                                                                  */
*/********************************************************************/
FRRENTRY DS    0H
         BALR  R10,0                   entry
         USING *,R10                   set addressability
         LR    R9,R14                  protect return address
*
**       Establish addressability
*
         LR    R8,R1                   copy SDWA address
         USING SDWA,R8                 set addessability
         MVC   SDWARECP,RECPARM        set error recording
         L     R7,SDWAPARM             ZFRR address
         USING ZFRR,R7                 set addressability
         CLC   ZFRRID,=CL4'ZFRR'       valid indeed?
         BNE   ABEND                   no, ABEND
         TM    ZFRRFLG1,ZFRR@PER       retry failed?
         BNZ   ABEND                   yes, ABEND
         OI    ZFRRFLG1,ZFRR@PER       percolation indicator
         TM    SDWAERRC,SDWAPERC       percolated ABEND?
         BNZ   ABEND                   yes, ABEND
*
**       Retry
*
RETRY    DS    0H
         ICM   R3,15,ZFRRETRY          retry address init?
         BZ    ABEND                   no, percolate
         SETRP RC=4,                   retry                           +
               WKAREA=(8),             SDWA address                    +
               RETREGS=YES,            restore regs                    +
               RETADDR=(3),            retry address                   +
               RECORD=NO,              LOGREC not required             +
               DUMP=NO                 SDUMP not required
         B     FRREXIT                 exit
*
**       ABEND
*
ABEND    DS    0H
         SETRP RC=0,                   percolate                       +
               FRELOCK=LOCAL,          release LOCAL lock              +
               WKAREA=(8),             SDWA address                    +
               RECORD=YES,             LOGREC required                 +
               DUMP=NO                 SDUMP not required
         B     FRREXIT                 exit
*
**       Exit
*
FRREXIT  DS    0H
         LR    R14,R9                  set return address
         BR    R14                     exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
RECPARM  DS    0CL24
         DC    CL8'ECF'                load module name
         DC    CL8'ECFIRB'             service routine name
         DC    CL8'FRRENTRY'           recovery routine name       @02C
ZECF@SZE EQU   *-RECPARM
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFSRE ,
         $ECFREB ,
         $ECFEQU ,
         $XMPOST MAP=YES
ZFRR     DSECT ,
ZFRRID   DS    CL4                     ID
ZFRRFLG1 DS    XL1                     flags
ZFRR@PER EQU   X'80'                   percolation indicator
ZFRR@LCK EQU   X'40'                   LOCAL lock held indicator
ZFRR@CRB EQU   X'20'                   CIRB called indicator
ZFRR@STG EQU   X'10'                   Stage 2 Exit Effector called
ZFRR@VR4 EQU   X'08'                   -reserved
ZFRR@VR5 EQU   X'04'                   -reserved
ZFRR@VR6 EQU   X'02'                   -reserved
ZFRR@VR7 EQU   X'01'                   -reserved
         DS    0X
ZFRRVRZ  DS    XL3                     -reserved
         DS    0F
ZFRREVT  DS    F                       EVT address
ZFRRSRB  DS    F                       SRB element address
ZFRRETRY DS    F                       retry address
ZFRRVR3  DS    F                       -reserved
ZFRR@SZE EQU   *-ZFRR                  24-bytes max
*
*        The following statement will cause assembly errors when
*        the ZFRR size exceeds 24-bytes.
*
         DS    0XL(24-ZFRR@SZE+1)      set SETFRR macro restriction
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASVA   DS    18F                     save area
DSAFLG1  DS    XL1                     flags
DSA@RV0  EQU   X'80'                   -available
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSASRBA  DS    F                       SRB cell element
         DS    0F
DSAOPAR  DS    F                       output PARM reg
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHASRB ,
         IHAFRRS ,
         IHASDWA ,
         IHAIQE ,
         IHAASCB ,
         CVT   DSECT=YES
         IHARB DSECT=YES
         END
./ ADD NAME=ECFLCK   0108-21068-21304-1644-00117-00117-00006-BENMAR  46
ECFLCK   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFLCK                                                     */
*/*                                                                  */
*/* Function: Event Capture Suspend Locks Manager                    */
*/*                                                                  */
*/* Description: Obtain/release LOCAL and CMS locks.                 */
*/*                                                                  */
*/* Input Regs: R1  Lock request ID                                  */
*/*                  0  - Obtain LOCAL lock                          */
*/*                  4  - Release LOCAL lock                         */
*/*                  8  - Obtain LOCAL & CMS locks                   */
*/*                 12  - Release CMS & LOCAL locks                  */
*/*             R13 Caller's register save area address              */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R3  Request ID                                       */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*                                                                  */
*/* Output Regs: R0 - R15 restored                                   */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=0                   */
*/*                                                                  */
*/* Restrictions: Routine runs without a save area.                  */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFLCK   $ENTRY SAVE=NO                entry
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 copy base
         USING ECFLCK,R10              base addressability
         LR    R8,R13                  protect R13
*
**       Obtain LOCAL lock
*
GETLOCAL DS    0H
         LTR   R3,R1                   LOCAL lock obtain?
         BNZ   FRELOCAL                no, test further
         SETLOCK OBTAIN,TYPE=LOCAL,                                    +
               MODE=UNCOND,REGS=USE,RELATED=('FRELOCAL')
         B     LCKEXIT                 exit
*
**       Release LOCAL lock
*
FRELOCAL DS    0H
         CL    R3,=F'4'                LOCAL lock release?
         BNE   GETCMS                  no, test further
         SETLOCK RELEASE,TYPE=LOCAL,                                   +
               REGS=USE,RELATED=('GETLOCAL')
         B     LCKEXIT                 exit
*
**       Obtain LOCAL & CMS locks
*
GETCMS   DS    0H
         CL    R3,=F'8'                LOCAL & CMS obtain?
         BNE   FRECMS                  no, test further
         SETLOCK OBTAIN,TYPE=LOCAL,                                    +
               MODE=UNCOND,REGS=USE,RELATED=('FRECMS')
*
         SETLOCK OBTAIN,TYPE=CMS,                                      +
               MODE=UNCOND,REGS=USE,RELATED=('FRECMS')
         B     LCKEXIT                 exit
*
**       Release LOCAL & CMS locks
*
FRECMS   DS    0H
         CL    R3,=F'12'               CMS & LOCAL release?
         BNE   LCKFAIL                 no, ABEND
         SETLOCK RELEASE,TYPE=CMS,                                     +
               REGS=USE,RELATED=('GETCMS')
*
         SETLOCK RELEASE,TYPE=LOCAL,                                   +
               REGS=USE,RELATED=('GETCMS')
         B     LCKEXIT                 exit
*
LCKFAIL  DS    0H
         L     R3,=AL4(RSN2056)        show RSN in R3
         ABEND X'FFC',DUMP,REASON=(R3)                             @02C
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
LCKEXIT  DS    0H
         LR    R13,R8                  restore R13
         LM    R14,R12,GPR@R14(R13)    restore regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFVT ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         END
./ ADD NAME=ECFLOG   0110-21304-21334-0930-01236-00129-01236-BENMAR  57
ECFLOG   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFLOG                                                     */
*/*                                                                  */
*/* DESCRIPTION: Event Capture SVC Screening log processor           */
*/*                                                                  */
*/* FUNCTION: Called by front-end routine ECFSVS to capture SVC      */
*/*           entry input data and back-end routine SCFSVC to        */
*/*           to capture SVC exit output data.                       */
*/*                                                                  */
*/* Input Regs: R1  SVX address                                      */
*/*             R13 savearea address                                 */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  SVX address                                      */
*/*             R8  SVR address                                      */
*/*             R9  SVCE address                                     */
*/*             R10 base address                                     */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  Reason code                                     */
*/*              R1  Output parameter                                */
*/*              R15 Return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor state, key=0                   */
*/*                                                                  */
*/* Restrictions: SVCs cannot be issued                              */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V2R3 | 09272021 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFLOG   $ENTRY SAVE=NO
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         LR    R10,R15                 set base address
         USING ECFLOG,R10              base addressability
         LR    R7,R1                   SVX address
         USING SVX,R7                  set addressability
         L     R9,SVXSVCEA             SVCE address
         USING SVCE,R9                 set addressability
         L     R11,SVCEEVTA            EVT address
         USING EVT,R11                 set addressability
*
         LA    R1,SVXSVRM              my savearea
         ST    R13,GPR@BWD(,R1)        chain,
         ST    R1,GPR@FWD(,R13)        save,
         LR    R13,R1                  areas.
         LA    R8,SVXSVRDA             SVR record address
         USING SVR,R8                  set addressability
*
**       Initialize SVR data record
*
         CLC   SVXSRID,=CL3'INI'       init request?
         BNE   SVR0000                 no
         XC    SVR(SVR@ZERO),SVR       scrub SVR
         XC    SVRCLR(SVR@ZEND),SVRCLR scrub section2
         MVC   SVRID,=CL4'SVR'         ID SVR
         MVC   SVRTRTAB,SVR$CNVX       TRanslate table
         L     R15,=A(INISVR)          EPA
         BALR  R14,R15                 call routine
         B     SVREXIT                 exit
*
**       Finalize SVR data record
*
SVR0000  DS    0H
         CLC   SVXSRID,=CL3'END'       end request?
         BNE   SVR0099                 no, error
         L     R15,=A(ENDSVR)          EPA
         BALR  R14,R15                 call routine
*
**       Log data record to SVC log
*
         TM    SVCEFLG1,SVCE@OPN       SVC log opened?
         BZ    SVR0010                 no
         L     R15,=A(LOGSVR)          EPA
         BALR  R14,R15                 call routine
         B     SVREXIT                 exit
*
**       Write data record to SMF
*
SVR0010  DS    0H
         L     R15,=A(SMFSVR)          EPA
         BALR  R14,R15                 call routine
         B     SVREXIT                 exit
*
**       Invalid log request
*
SVR0099  DS    0H
         MVC   SVXRC,=AL4(RC8)         error RC
         MVC   SVXRSN,=AL4(RSN3064)    error RSN
         B     SVREXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
SVREXIT  DS    0H
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
SVR$CNVX DC    CL16'0123456789ABCDEF'
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: INISVR                                                     */
*/*                                                                  */
*/* Function: SVR record initialization subroutine                   */
*/*                                                                  */
*/* Input Regs: R7  SVX address                                      */
*/*             R8  SVR address                                      */
*/*             R9  SVCE address                                     */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  SVX address                                      */
*/*             R8  SVR address                                      */
*/*             R9  SVCE address                                     */
*/*             R10 base address                                     */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  Reason code                                     */
*/*              R1  Output parameter                                */
*/*              R15 Return code                                     */
*/*                                                                  */
*/********************************************************************/
INISVR   DS    0H
         USING SVX,R7                  SVX addressability
         USING SVR,R8                  set addressability
         USING SVCE,R9                 SVCE addressability
         USING EVT,R11                 EVT addressability
         B     12(,R15)
         DC    CL8'INISVR'             ID
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 set base address
         USING INISVR,R10              base addressability
         LA    R1,SVXSVRS
         ST    R13,GPR@BWD(,R1)        chain
         ST    R1,GPR@FWD(,R13)         save
         LR    R13,R1                    areas
*
**       Capture SVC number
*
         XR    R1,R1
         IC    R1,SVXSVCNM             SVC number
         ST    R1,SVRWORD              fullword
         $CNVD SVRVAR,SVRWORD,DWORD=SVRDWORD
         MVC   SVRSVCN,SVRVAR+5        save it
*
**       Capture SVC macro name
*
         XR    R3,R3                   scrub
         IC    R3,SVXSVCNM             get SVC number
         SLL   R3,5                    multiply by 32
         L     R1,=V(ECFSVN)           macro name table
         LA    R3,0(R1,R3)             macro name entry
         MVC   SVRMACRO,0(R3)          copy macro name
*
**       Capture SVC Type
*
         LA    R3,SVXSVCEN             SVC entry
         USING SVCENTRY,R3             set addressability
         CLI   SVCTP,SVCTP1            T1 SVC?
         BNE   INI0000                 no
         MVI   SVRTYPE,C'1'            yes
         B     INI0015                 carry on
*
INI0000  DS    0H
         CLI   SVCTP,SVCTP2            T2 SVC?
         BNE   INI0005                 no
         MVI   SVRTYPE,C'2'            yes
         B     INI0015                 carry on
*
INI0005  DS    0H
         CLI   SVCTP,SVCTP34           T3/4 SVC?
         BNE   INI0010                 no
         MVI   SVRTYPE,C'3'            yes
         B     INI0015                 carry on
*
INI0010  DS    0H
         CLI   SVCTP,SVCTP6            T6 SVC?
         BNE   INI0015                 no
         MVI   SVRTYPE,C'6'            yes
*
**       Capture SVC attributes
*
INI0015  DS    0H
         MVC   SVRAPF,=CL3'NO'
         TM    SVCTP,SVCAPF            APF-authorized?
         BZ    INI0020                 no
         MVC   SVRAPF,=CL3'YES'        yes
         B     INI0030                 carry on
*
INI0020  DS    0H
         MVI   SVRNONP,C'N'
         TM    SVCTP,SVCNP             non-preemptive?
         BZ    INI0025                 no
         MVI   SVRNONP,C'Y'            yes
         B     INI0030                 carry on
*
INI0025  DS    0H
         MVI   SVRAR,C'N'
         TM    SVCATTR3,SVCAR          AR-mode allowed?
         BZ    INI0030                 no
         MVI   SVRAR,C'Y'              yes
*
**       Capture SVC locks
*
INI0030  DS    0H
         MVC   SVRLOCK,=CL8'NONE'
         TM    SVCLOCKS,SVCLL          LOCAL lock needed?
         BZ    INI0035                 no
         MVC   SVRLOCK,=CL8'LOCAL'     yes
         B     INI0055                 carry on
*
INI0035  DS    0H
         TM    SVCLOCKS,SVCCMS         CMS lock needed?
         BZ    INI0040                 no
         MVC   SVRLOCK,=CL8'CMS'       yes
         B     INI0055                 carry on
*
INI0040  DS    0H
         TM    SVCLOCKS,SVCOPT         OPT lock needed?
         BZ    INI0045                 no
         MVC   SVRLOCK,=CL8'OPT'       yes
         B     INI0055                 carry on
*
INI0045  DS    0H
         TM    SVCLOCKS,SVCALLOC       SALLOC lock needed
         BZ    INI0050                 no
         MVC   SVRLOCK,=CL8'SALLOC'    yes
         B     INI0055                 carry on
*
INI0050  DS    0H
         TM    SVCLOCKS,SVCDISP        DISP lock needed
         BZ    INI0055                 no
         MVC   SVRLOCK,=CL8'DISP'      yes
*
**       Capture SVC entry CPU
*
INI0055  DS    0H
         USING PSA,0
         LH    R1,PSACPULA             logical CPU
         ST    R1,SVRWORD              fullword
         $CNVX SVRVAR,SVRWORD,TR=SVRTRTAB  convert it
         MVC   SVRCPILA,SVRVAR+4       save it
*
         LH    R1,PSACPUPA             physical CPU
         ST    R1,SVRWORD              fullword
         $CNVX SVRVAR,SVRWORD,TR=SVRTRTAB  convert it
         MVC   SVRCPIPA,SVRVAR+4       save it
*
**       Capture workunit type
*
         MVC   SVRBTYPE,=CL4'PRB'
         TM    SVXFLG3,SVX@SVRB        SVC issued by SVRB caller?
         BZ    INI0060                 no
         MVC   SVRBTYPE,=CL4'SVRB'     yes
*
**       Capture caller authorization
*
INI0060  DS    0H
         L     R4,PSATOLD              TCB
         USING TCB,R4                  set addressability
         L     R3,TCBJSCB              JSCB address
         USING IEZJSCB,R3              set addressability
         MVC   SVRAC01,=CL6'AC(0)'     SETCODE AC(0)
         TM    JSCBOPTS,JSCBAUTH       authorized caller?
         BZ    INI0065                 no
         MVC   SVRAC01,=CL6'AC(1)'     SETCODE AC(1)
         DROP  R4
*
**       Capture caller system state
*
INI0065  DS    0H
         LA    R5,SVXCPSW              caller PSW
         USING PSW,R5                  set addressability
         MVC   SVRSTATE,=CL12'Problem'
         TM    PSWBYTE1,PSWPROB        problem state?
         BNZ   INI0070                 yes
         MVC   SVRSTATE,=CL12'Supervisor'
         DROP  R5
*
**       Capture JOBname/STEPname
*
INI0070  DS    0H
         L     R3,PSAAOLD              ASCB
         USING ASCB,R3                 set addressability
         MVC   SVRJOBNM,SVCEJOBN       job name
         MVC   SVRSTEPN,=CL8'N/A'      ste name
         L     R4,PSATOLD              TCB
         USING TCB,R4                  set addressability
         ICM   R4,15,TCBTIO            TIOT init?
         BZ    INI0075                 no
         USING TIOT,R4                 set addressability
         MVC   SVRSTEPN,TIOCSTPN       copy step name
         DROP  R3,R4
*
**       Capture program EPA
*
INI0075  DS    0H
         L     R3,SVXRB                caller RB
         USING RBSECT,R3               set addressability
         ICM   R3,15,RBCDE             CDE address init?
         BZ    INI0080                 yes
         USING CDENTRY,R3              set addressability
         $CNVX SVRVAR,CDENTPT,TR=SVRTRTAB  convert it
         MVC   SVRPGMEP,SVRVAR         save it
*
**       Find program using CSVQUERY
*
INI0080  DS    0H
         MVC   SVRDWORD,SVXCPSW        caller PSW
         LA    R5,SVRDWORD             PSW address
         USING PSW,R5                  set addressability
         NI    PSWIA,XFF-PSWAMODE31    turn off AMODE bit
         MVC   SVRWORD,SVRDWORD+4      PSW NSI
         DROP  R5
         CSVQUERY INADDR=SVRWORD,SEARCH=JPALPA,SEARCHMINOR=YES,        +
               OUTEPNM=SVREPNM,OUTMJNM=SVRMJNM,                        +
               OUTLOADPT=SVRLODPT,OUTEPA=SVREPA,                       +
               OUTATTR1=SVRATTR1,OUTATTR2=SVRATTR2,OUTATTR3=SVRATTR3,  +
               PLISTVER=MAX,DIRLOAD=YES,RETCODE=SVRRC,                 +
               MF=(E,SVRPLIST,COMPLETE)
         LTR   R15,R15                 successful?
         BNZ   INI0085                 no, use NUCLKUP
         $CNVX SVRVAR,SVREPA,TR=SVRTRTAB  convert it
         MVC   SVRPGMEP,SVRVAR         save it
         $CNVX SVRVAR,SVRLODPT,TR=SVRTRTAB  convert it
         MVC   SVRLODEP,SVRVAR         save it
         B     INI0100                 carry on
*
**       Capture debug data
*
INI0085  DS    0H
         MVC   EVTXDATA+8(4),SVRRC     debug
         MVC   EVTXDATA+12(1),SVRATTR1 debug
         MVC   EVTXDATA+13(1),SVRATTR2 debug
         MVC   EVTXDATA+14(1),SVRATTR3 debug
         MVC   EVTXDATA+16(4),SVRLODPT debug
         MVC   EVTXDATA+20(4),SVREPA   debug
         MVC   EVTXDATA+24(8),SVREPNM  debug
         MVC   EVTXDATA+32(8),SVRMJNM  debug
         MVC   EVTXDATA+40(8),SVREPNM  debug
*
**       Find program using NUCLKUP
*
INI0090  DS    0H
         MVC   SVRDWORD,SVXCPSW        caller PSW
         LA    R5,SVRDWORD             PSW address
         USING PSW,R5                  set addressability
         NI    PSWIA,XFF-PSWAMODE31    turn off AMODE bit
         MVC   SVRWORD,SVRDWORD+4      PSW NSI
         DROP  R5
         NUCLKUP BYADDR,ADDR=SVREPA,NAME=SVRMJNM
         ST    R15,SVRRC               save RC
         LTR   R15,R15                 successful?
         BNZ   INI0095                 no, leave blank
         $CNVX SVRVAR,SVREPA,TR=SVRTRTAB  convert it
         MVC   SVRPGMEP,SVRVAR         save it
         B     INI0100                 carry on
*
**       Capture debug data
*
INI0095  DS    0H
         MVC   EVTXDATA+48(4),SVRRC    debug
         MVC   EVTXDATA+52(4),SVREPA   debug
         MVC   EVTXDATA+56(8),SVRMJNM  debug
         MVC   EVTXDATA+64(8),SVREPNM  debug
*
**       Capture program offset
*
INI0100  DS    0H
         MVC   SVRDWORD,SVXCPSW        caller PSW
         LA    R5,SVRDWORD             PSW address
         USING PSW,R5                  set addressability
         NI    PSWIA,XFF-PSWAMODE31    turn off AMODE bit
         MVC   SVRWORD,SVRDWORD+4      PSW NSI
         DROP  R5
         $CNVX SVRVAR,SVRWORD,TR=SVRTRTAB  convert it
         MVC   SVRPGMOF,SVRVAR         save it
*
**       Capture access registers
*
         $CNVX SVRVAR,SVXIAR0,TR=SVRTRTAB  convert it
         MVC   SVRIAR0,SVRVAR          save it
         $CNVX SVRVAR,SVXIAR1,TR=SVRTRTAB  convert it
         MVC   SVRIAR1,SVRVAR          save it
         $CNVX SVRVAR,SVXIAR14,TR=SVRTRTAB  convert it
         MVC   SVRIAR14,SVRVAR         save it
         $CNVX SVRVAR,SVXIAR15,TR=SVRTRTAB  convert it
         MVC   SVRIAR15,SVRVAR         save it
*
**       Capture general registers
*
         $CNVX SVRVAR,SVXIHR0,TR=SVRTRTAB  convert it
         MVC   SVRIHR0,SVRVAR          save it
         $CNVX SVRVAR,SVXILR0,TR=SVRTRTAB  convert it
         MVC   SVRILR0,SVRVAR          save it
*
         $CNVX SVRVAR,SVXIHR1,TR=SVRTRTAB  convert it
         MVC   SVRIHR1,SVRVAR          save it
         $CNVX SVRVAR,SVXILR1,TR=SVRTRTAB  convert it
         MVC   SVRILR1,SVRVAR          save it
*
         $CNVX SVRVAR,SVXIHR14,TR=SVRTRTAB  convert it
         MVC   SVRIHR14,SVRVAR         save it
         $CNVX SVRVAR,SVXILR14,TR=SVRTRTAB  convert it
         MVC   SVRILR14,SVRVAR         save it
*
         $CNVX SVRVAR,SVXIHR15,TR=SVRTRTAB  convert it
         MVC   SVRIHR15,SVRVAR         save it
         $CNVX SVRVAR,SVXILR15,TR=SVRTRTAB  convert it
         MVC   SVRILR15,SVRVAR         save it
*
**       Convert UTC to LOCAL clock
*
         L     R1,FLCCVT               CVT
         USING CVT,R1                  set addressability
         L     R1,CVTEXT2              CVT extension
         USING CVTXTNT2,R1             set addressability
         STCK  SVRSTIME                UTC/GMT clock value
         LM    R2,R3,SVRSTIME          load clock value
         LM    R4,R5,CVTLDTO           load offset value
         ALR   R3,R5                   add time offset
         ALCR  R2,R4                   add w/carry offset
         LM    R4,R5,CVTLSO            load leap seconds
         SLR   R3,R5                   subtract leap seconds
         SLBR  R2,R4                   subtract w/borrow leap seconds
         STM   R2,R3,SVRSTIME          store LOCAL time clock
*
**       Convert LOCAL clock to decimal
*
         MVC   SVRCCONV(STCK@ILN),STCKILST
         STCKCONV STCKVAL=SVRSTIME,                                    +
               CONVVAL=SVRISTCK,TIMETYPE=DEC,DATETYPE=MMDDYYYY,        +
               MF=(E,SVRCCONV)
*
**       Capture time and date
*
         LA    R3,SVRTMAP              TMAP addrss
         USING TMAP,R3                 set addressability
         MVC   TIMESTR,TMODEL          time & date skeleton
         MVC   SVRWORD,SVRISTCK        time
         $CNVX SVRVAR,SVRWORD,TR=SVRTRTAB  convert it
         MVC   TIMEHH,SVRVAR           show hours
         MVC   TIMEMM,SVRVAR+2         show minutes
         MVC   TIMESS,SVRVAR+4         show seconds
         MVC   TIMETH,SVRVAR+6         show hundreds
         MVC   SVRWORD,SVRISTCK+8      date
         $CNVX SVRVAR,SVRWORD,TR=SVRTRTAB  convert it
         MVC   DATEMM,SVRVAR           month
         MVC   DATEDD,SVRVAR+2         day
         MVC   DATEYY,SVRVAR+4         year
         MVC   SVRTIMED,TIMESTR        init time & date
*
**       Subroutine Exit
*
INIEXIT  DS    0H
         XC    SVXRC,SVXRC             set RC
         XC    SVXRSN,SVXRSN           set RSN
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
STCKILST STCKCONV MF=L
STCK@ILN EQU   *-STCKILST
         DS    0C
TMODEL   DC    CL38'hh:mm:ss:th mm/dd/yyyy'
TMODL@SZ EQU   *-TMODEL
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ENDSVR                                                     */
*/*                                                                  */
*/* Function: SVR record termination subroutine                      */
*/*                                                                  */
*/* Input Regs: R7  SVX address                                      */
*/*             R8  SVR address                                      */
*/*             R9  SVCE address                                     */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  SVX address                                      */
*/*             R8  SVR address                                      */
*/*             R9  SVCE address                                     */
*/*             R10 base address                                     */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  Reason code                                     */
*/*              R1  Output parameter                                */
*/*              R15 Return code                                     */
*/*                                                                  */
*/********************************************************************/
ENDSVR   DS    0H
         USING SVX,R7                  SVX addressability
         USING SVR,R8                  set addressability
         USING SVCE,R9                 SVCE addressability
         USING EVT,R11                 EVT addressability
         B     12(,R15)
         DC    CL8'ENDSVR'             ID
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 set base address
         USING ENDSVR,R10              base addressability
         LA    R1,SVXSVRS
         ST    R13,GPR@BWD(,R1)        chain
         ST    R1,GPR@FWD(,R13)         save
         LR    R13,R1                    areas
*
**       Capture SVC exit CPU
*
         USING PSA,0
         LH    R1,PSACPULA             logical CPU
         ST    R1,SVRWORD              fullword
         $CNVX SVRVAR,SVRWORD,TR=SVRTRTAB  convert it
         MVC   SVRCPOLA,SVRVAR+4       save it
*
         LH    R1,PSACPUPA             physical CPU
         ST    R1,SVRWORD              fullword
         $CNVX SVRVAR,SVRWORD,TR=SVRTRTAB  convert it
         MVC   SVRCPOPA,SVRVAR+4       save it
*
**       Capture access registers
*
         $CNVX SVRVAR,SVXOAR0,TR=SVRTRTAB  convert it
         MVC   SVROAR0,SVRVAR          save it
         $CNVX SVRVAR,SVXOAR1,TR=SVRTRTAB  convert it
         MVC   SVROAR1,SVRVAR          save it
         $CNVX SVRVAR,SVXOAR14,TR=SVRTRTAB  convert it
         MVC   SVROAR14,SVRVAR         save it
         $CNVX SVRVAR,SVXOAR15,TR=SVRTRTAB  convert it
         MVC   SVROAR15,SVRVAR         save it
*
**       Capture general registers
*
         $CNVX SVRVAR,SVXOHR0,TR=SVRTRTAB  convert it
         MVC   SVROHR0,SVRVAR          save it
         $CNVX SVRVAR,SVXOLR0,TR=SVRTRTAB  convert it
         MVC   SVROLR0,SVRVAR          save it
*
         $CNVX SVRVAR,SVXOHR1,TR=SVRTRTAB  convert it
         MVC   SVROHR1,SVRVAR          save it
         $CNVX SVRVAR,SVXOLR1,TR=SVRTRTAB  convert it
         MVC   SVROLR1,SVRVAR          save it
*
         $CNVX SVRVAR,SVXOHR14,TR=SVRTRTAB  convert it
         MVC   SVROHR14,SVRVAR         save it
         $CNVX SVRVAR,SVXOLR14,TR=SVRTRTAB  convert it
         MVC   SVROLR14,SVRVAR         save it
*
         $CNVX SVRVAR,SVXOHR15,TR=SVRTRTAB  convert it
         MVC   SVROHR15,SVRVAR         save it
         $CNVX SVRVAR,SVXOLR15,TR=SVRTRTAB  convert it
         MVC   SVROLR15,SVRVAR         save it
*
**       Subroutine Exit
*
ENDEXIT  DS    0H
         XC    SVXRC,SVXRC             set RC
         XC    SVXRSN,SVXRSN           set RSN
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
STCKOLST STCKCONV MF=L
STCK@OLN EQU   *-STCKOLST
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP ,
*/********************************************************************/
*/*                                                                  */
*/* Name: LOGSVR                                                     */
*/*                                                                  */
*/* Function: Log SVR records subroutine                             */
*/*                                                                  */
*/* Input Regs: R7  SVX address                                      */
*/*             R8  SVR address                                      */
*/*             R9  SVCE address                                     */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  SVX address                                      */
*/*             R8  SVR address                                      */
*/*             R9  SVCE address                                     */
*/*             R10 base address                                     */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  Reason code                                     */
*/*              R1  Output parameter                                */
*/*              R15 Return code                                     */
*/*                                                                  */
*/********************************************************************/
LOGSVR   DS    0H
         USING SVX,R7                  SVX addressability
         USING SVR,R8                  set addressability
         USING SVCE,R9                 SVCE addressability
         USING EVT,R11                 EVT addressability
         B     12(,R15)
         DC    CL8'LOGSVR'             ID
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 set base address
         USING LOGSVR,R10              base addressability
         LA    R1,SVXSVRS
         ST    R13,GPR@BWD(,R1)        chain
         ST    R1,GPR@FWD(,R13)         save
         LR    R13,R1                    areas
*
**       Log separator line
*
         LA    R3,SVCEDCB              DCB
         USING IHADCB,R3               set addressability
         MVC   SVRECORD,IDLINE         log record
         $PUT  (R3),SVRECORD           log record
*
**       Log blank line
*
         MVI   SVRECORD,BLANK
         MVC   SVRECORD+1(L'SVRECORD-1),SVRECORD
         $PUT  (R3),SVRECORD           log record
*
**       Log SVC data line
*
         LA    R4,SVRECORD
         USING ZSVC,R4
         MVI   ZSVC,BLANK
         MVC   ZSVC+1(ZSVC@SZE-1),ZSVC
         MVC   ZSVCID,IDSVC            record ID
         MVC   ZSVCID2,IDSVC2          record ID2
         MVC   ZSVCNUM,SVRSVCN         SVC number
         MVC   ZSVCTYPE,SVRTYPE        SVC type
         MVC   ZSVCAPF,SVRAPF          APF-authorization
         MVC   ZSVCLOCK,SVRLOCK        Locks
         MVC   ZSVCNONP,SVRNONP        non-preemptive status
         $PUT  (R3),(R4)               log record
*
**       Log SVC macro name
*
         USING ZMAC,R4
         MVI   ZMAC,BLANK
         MVC   ZMAC+1(ZMAC@SZE-1),ZMAC
         MVC   ZMACID,IDMAC            record ID
         MVC   ZMACID2,SVRMACRO        record data
         $PUT  (R3),(R4)               log record
*
**       Log job name
*
         USING ZJOB,R4
         MVI   ZJOB,BLANK
         MVC   ZJOB+1(ZJOB@SZE-1),ZJOB
         MVC   ZJOBID,IDJOB            record ID
         MVC   ZJOBID+2(3),SVCEJTYP    {JOB|STC|TSU}
         MVC   ZJOBID2,SVRJOBNM        record data
         $PUT  (R3),(R4)               log record
*
**       Log step name
*
         USING ZSTP,R4
         MVI   ZSTP,BLANK
         MVC   ZSTP+1(ZSTP@SZE-1),ZSTP
         MVC   ZSTPID,IDSTP            record ID
         MVC   ZSTPID2,SVRSTEPN        record data
         $PUT  (R3),(R4)               log record
*
**       Log Program name
*
         USING ZPGM,R4
         MVI   ZPGM,BLANK
         MVC   ZPGM+1(ZPGM@SZE-1),ZPGM
         MVC   ZPGMID,IDPGM            record ID
         MVC   ZPGMID2,SVRMJNM         record data
         CLI   ZPGMID2,X'00'           PGM name?
         BNE   LOG0010                 no
         MVC   ZPGMID2,SVREPNM         record data
         CLI   ZPGMID2,X'00'           PGM name?
         BNE   LOG0010                 no
         MVC   ZPGMID2,=CL8'Unknown'   yes
*
LOG0010  DS    0H
         $PUT  (R3),(R4)               log record
*
**       Log program entry address
*
         USING ZEPA,R4
         MVI   ZEPA,BLANK
         MVC   ZEPA+1(ZEPA@SZE-1),ZEPA
         MVC   ZEPAID,IDEPA            record ID
         MVC   ZEPAID2,SVRPGMEP        record data
         CLC   SVRPGMEP,=XL4'00000000' EPA zero?
         BNE   LOG0020                 no
         MVC   ZEPAID2,SVRLODEP        record data
         CLC   SVRLODEP,=XL4'00000000' load point zero?
         BNE   LOG0020                 no
         MVC   ZEPAID2,=CL8'Unknown'   yes
*
LOG0020  DS    0H
         $PUT  (R3),(R4)               log record
*
**       Log program offset address
*
         USING ZOFF,R4
         MVI   ZOFF,BLANK
         MVC   ZOFF+1(ZOFF@SZE-1),ZOFF
         MVC   ZOFFID,IDOFF            record ID
         MVC   ZOFFID2,SVRPGMOF        record data
         $PUT  (R3),(R4)               log record
*
**       Log unit of work type
*
         USING ZUOW,R4
         MVI   ZUOW,BLANK
         MVC   ZUOW+1(ZUOW@SZE-1),ZUOW
         MVC   ZUOWID,IDUOW            record ID
         MVC   ZUOWID2,SVRBTYPE        record data
         $PUT  (R3),(R4)               log record
*
**       Log Program authorization
*
         USING ZACC,R4
         MVI   ZACC,BLANK
         MVC   ZACC+1(ZACC@SZE-1),ZACC
         MVC   ZACCID,IDACC            record ID
         MVC   ZACCID2,SVRAC01         record data
         $PUT  (R3),(R4)               log record
*
**       Log unit of work state
*
         USING ZSYS,R4
         MVI   ZSYS,BLANK
         MVC   ZSYS+1(ZSYS@SZE-1),ZSYS
         MVC   ZSYSID,IDSYS            record ID
         MVC   ZSYSID2,SVRSTATE        record data
         $PUT  (R3),(R4)               log record
*
**       Log time and date
*
         USING ZTME,R4
         MVI   ZTME,BLANK
         MVC   ZTME+1(ZTME@SZE-1),ZTME
         MVC   ZTMEID,IDTME            record ID
         MVC   ZTMEID2,SVRTIMED        record data
         $PUT  (R3),(R4)               log record
*
**       Log SVC issued on CPU
*
         USING ZICP,R4
         MVI   ZICP,BLANK
         MVC   ZICP+1(ZICP@SZE-1),ZICP
         MVC   ZICPID,IDICP            record ID
         MVC   ZICPID2,SVRCPIPA        record data
         $PUT  (R3),(R4)               log record
*
**       Log SVC completed on CPU
*
         USING ZOCP,R4
         MVI   ZOCP,BLANK
         MVC   ZOCP+1(ZOCP@SZE-1),ZOCP
         MVC   ZOCPID,IDOCP            record ID
         MVC   ZOCPID2,SVRCPOPA        record data
         $PUT  (R3),(R4)               log record
*
**       Log SVC duration interval
*
         USING ZDUR,R4
         MVI   ZDUR,BLANK
         MVC   ZDUR+1(ZDUR@SZE-1),ZDUR
         MVC   ZDURID,IDURR            record ID
         MVC   ZDURID2,=CL8'0.000001'  record data - testing
         $PUT  (R3),(R4)               log record
*
**       Log blank data line
*
         MVI   SVRECORD,BLANK
         MVC   SVRECORD+1(L'SVRECORD-1),SVRECORD
         $PUT  (R3),(R4)               log record
*
**       Log AR0/R0 entry regs
*
         USING ZGRS,R4
         MVI   ZGRS,BLANK
         MVC   ZGRS+1(ZGRS@SZE-1),ZGRS
         MVC   ZGRID,IDIGR
         MVC   ZAR,IDAR0               log ID
         MVC   ZARVAL,SVRIAR0          log AR0
         MVC   ZGR,IDR0                log ID
         MVC   ZGRVALH,SVRIHR0         log high R0
         MVC   ZGRVALL,SVRILR0         log low R0
         $PUT  (R3),(R4)               log record
*
**       Log AR1/R1 entry regs
*
         USING ZGRS,R4
         MVI   ZGRS,BLANK
         MVC   ZGRS+1(ZGRS@SZE-1),ZGRS
         MVI   ZGRID,BLANK
         MVC   ZGRID+1(IDIGR@LN-1),ZGRID
         MVC   ZAR,IDAR1               log ID
         MVC   ZARVAL,SVRIAR1          log AR1
         MVC   ZGR,IDR1                log ID
         MVC   ZGRVALH,SVRIHR1         log high R1
         MVC   ZGRVALL,SVRILR1         log low R1
         $PUT  (R3),(R4)               log record
*
**       Log AR14/R14 entry regs
*
         USING ZGRS,R4
         MVI   ZGRS,BLANK
         MVC   ZGRS+1(ZGRS@SZE-1),ZGRS
         MVC   ZAR,IDAR14              log ID
         MVC   ZARVAL,SVRIAR14         log AR14    a
         MVC   ZGR,IDR14               log ID
         MVC   ZGRVALH,SVRIHR14        log high R14
         MVC   ZGRVALL,SVRILR14        log low R14
         $PUT  (R3),(R4)               log record
*
**       Log AR15/R15 entry regs
*
         USING ZGRS,R4
         MVI   ZGRS,BLANK
         MVC   ZGRS+1(ZGRS@SZE-1),ZGRS
         MVC   ZAR,IDAR15              log ID
         MVC   ZARVAL,SVRIAR15         log AR15
         MVC   ZGR,IDR15               log ID
         MVC   ZGRVALH,SVRIHR15        log high R15
         MVC   ZGRVALL,SVRILR15        log low R15
         $PUT  (R3),(R4)               log record
*
**       Log blank line
*
         MVI   SVRECORD,BLANK
         MVC   SVRECORD+1(L'SVRECORD-1),SVRECORD
         $PUT  (R3),SVRECORD           log record
*
**       Log AR0/R0 return regs
*
         USING ZGRS,R4
         MVI   ZGRS,BLANK
         MVC   ZGRS+1(ZGRS@SZE-1),ZGRS
         MVC   ZGRID,IDOGR
         MVC   ZAR,IDAR0               log ID
         MVC   ZARVAL,SVROAR0          log AR0
         MVC   ZGR,IDR0                log ID
         MVC   ZGRVALH,SVROHR0         log high R0
         MVC   ZGRVALL,SVROLR0         log low R0
         $PUT  (R3),(R4)               log record
*
**       Log AR1/R1 return regs
*
         USING ZGRS,R4
         MVI   ZGRS,BLANK
         MVC   ZGRS+1(ZGRS@SZE-1),ZGRS
         MVI   ZGRID,BLANK
         MVC   ZGRID+1(IDOGR@LN-1),ZGRID
         MVC   ZAR,IDAR1               log ID
         MVC   ZARVAL,SVROAR1          log AR1     a
         MVC   ZGR,IDR1                log ID
         MVC   ZGRVALH,SVROHR1         log high R1
         MVC   ZGRVALL,SVROLR1         log low R1
         $PUT  (R3),(R4)               log record
*
**       Log AR14/R14 return regs
*
         USING ZGRS,R4
         MVI   ZGRS,BLANK
         MVC   ZGRS+1(ZGRS@SZE-1),ZGRS
         MVC   ZAR,IDAR14              log ID
         MVC   ZARVAL,SVROAR14         log AR14    a
         MVC   ZGR,IDR14               log ID
         MVC   ZGRVALH,SVROHR14        log high R14
         MVC   ZGRVALL,SVROLR14        log low R14
         $PUT  (R3),(R4)               log record
*
**       Log AR15/R15 return regs
*
         USING ZGRS,R4
         MVI   ZGRS,BLANK
         MVC   ZGRS+1(ZGRS@SZE-1),ZGRS
         MVC   ZAR,IDAR15              log ID
         MVC   ZARVAL,SVROAR15         log AR15
         MVC   ZGR,IDR15               log ID
         MVC   ZGRVALH,SVROHR15        log high R15
         MVC   ZGRVALL,SVROLR15        log low R15
         $PUT  (R3),(R4)               log record
*
**       Log blank line
*
         MVI   SVRECORD,BLANK
         MVC   SVRECORD+1(L'SVRECORD-1),SVRECORD
         $PUT  (R3),SVRECORD           log record
*
**       Subroutine Exit
*
LOGEXIT  DS    0H
         XC    SVXRC,SVXRC             set RC
         XC    SVXRSN,SVXRSN           set RSN
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
LOGDATA  DS    0C
IDSVC    DC    CL31' SVC .........................'
IDMAC    DC    CL31' MACRO .......................'
IDJOB    DC    CL31'  Jobname ....................'
IDSTP    DC    CL31'  Step name ..................'
IDPGM    DC    CL31'  Program name ...............'
IDEPA    DC    CL31'  Entry address ..............'
IDOFF    DC    CL31'   Issued at address .........'
IDUOW    DC    CL31'   Unit of work ..............'
IDACC    DC    CL31'   Authorization .............'
IDSYS    DC    CL31'   System state ..............'
IDTME    DC    CL31'   Time and date .............'
IDICP    DC    CL31'   Issued on CPU .............'
IDOCP    DC    CL31'   Completed on CPU ..........'
IDURR    DC    CL31'   Duration ..................'
*
IDIGR    DC    CL31'   SVC entry registers........'
IDIGR@LN EQU   *-IDIGR
*
IDOGR    DC    CL31'   SVC return registers.......'
IDOGR@LN EQU   *-IDOGR
*
IDR0     DC    CL05'R0:'
IDR1     DC    CL05'R1:'
IDR14    DC    CL05'R14:'
IDR15    DC    CL05'R15:'
*
IDAR0    DC    CL05'AR0:'
IDAR1    DC    CL05'AR1:'
IDAR14   DC    CL05'AR14:'
IDAR15   DC    CL05'AR15:'
*
IDLINE   DS    0CL80
         DC    CL1' '
         DC    69C'-'
         DC    CL10' '
IDLINESZ EQU   *-IDLINE
*
IDSVC2   DC    CL38'???  TYPE=? APF=??? NP=? LOCKS=????????'
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SMFSVR                                                     */
*/*                                                                  */
*/* Function: Write SMF record subroutine                            */
*/*                                                                  */
*/* Input Regs: R7  SVX address                                      */
*/*             R8  SVR address                                      */
*/*             R9  SVCE address                                     */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  SVX address                                      */
*/*             R8  SVR address                                      */
*/*             R9  SVCE address                                     */
*/*             R10 base address                                     */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  Reason code                                     */
*/*              R1  Output parameter                                */
*/*              R15 Return code                                     */
*/*                                                                  */
*/********************************************************************/
SMFSVR   DS    0H
         USING SVX,R7                  SVX addressability
         USING SVR,R8                  set addressability
         USING SVCE,R9                 SVCE addressability
         USING EVT,R11                 EVT addressability
         B     12(,R15)
         DC    CL8'SMFSVR'             ID
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 set base address
         USING SMFSVR,R10              base addressability
         LA    R1,SVXSVRS
         ST    R13,GPR@BWD(,R1)        chain
         ST    R1,GPR@FWD(,R13)         save
         LR    R13,R1                    areas
*
**       Write SMF record code goes here...
*







*
**       Subroutine Exit
*
SMFEXIT  DS    0H
         XC    SVXRC,SVXRC             set RC
         XC    SVXRSN,SVXRSN           set RSN
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem Data Areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFVT ,
         $ECFSVX ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Time and date map                                            *
*--------+---------+---------+---------+---------+---------+---------+*
TMAP     DSECT
TIMESTR  DS    0CL38
TIMEHH   DS    CL2                      hours
         DS    CL1                      :
TIMEMM   DS    CL2                      minutes
         DS    CL1                      :
TIMESS   DS    CL2                      seconds
         DS    CL1                      :
TIMETH   DS    CL2                      hundreds
         DS    CL1
*
DATEMM   DS    CL2                      month
         DS    CL1                      /
DATEDD   DS    CL2                      day
         DS    CL1                      /
DATEYY   DS    CL4                      year
         DS    CL16                     filler
TIME@DTE EQU   *-TMAP
*---------------------------------------------------------------------*
*        SVC line data map                                            *
*--------+---------+---------+---------+---------+---------+---------+*
ZSVC     DSECT ,
ZSVCID   DS    CL31'SVC..........................'
ZSVCID2  DS    0CL33
ZSVCNUM  DS    CL3'???'
         DS    CL7'  TYPE='
ZSVCTYPE DS    CL1'?'
         DS    CL5' APF='
ZSVCAPF  DS    CL3'???'
         DS    CL4' NP='
ZSVCNONP DS    CL1'?'
         DS    CL7' LOCKS='
ZSVCLOCK DS    CL8'????????'
         DS    CL10' '
ZSVC@SZE EQU   *-ZSVCID
*---------------------------------------------------------------------*
*        MACRO line data map                                          *
*--------+---------+---------+---------+---------+---------+---------+*
ZMAC     DSECT ,
ZMACID   DS    CL31'MACRO........................'
ZMACID2  DS    CL32' '
         DS    CL17' '
ZMAC@SZE EQU   *-ZMAC
*---------------------------------------------------------------------*
*        JOB name data map                                            *
*--------+---------+---------+---------+---------+---------+---------+*
ZJOB     DSECT ,
ZJOBID   DS    CL31'  Job name...................'
ZJOBID2  DS    CL08' '
         DS    CL41' '
ZJOB@SZE EQU   *-ZJOB
*---------------------------------------------------------------------*
*        STEP name data map                                           *
*--------+---------+---------+---------+---------+---------+---------+*
ZSTP     DSECT ,
ZSTPID   DS    CL31'  Step name..................'
ZSTPID2  DS    CL08' '
         DS    CL41' '
ZSTP@SZE EQU   *-ZSTP
*---------------------------------------------------------------------*
*        Program name data map                                        *
*--------+---------+---------+---------+---------+---------+---------+*
ZPGM     DSECT ,
ZPGMID   DS    CL31'   Program name..............'
ZPGMID2  DS    CL08' '
         DS    CL41' '
ZPGM@SZE EQU   *-ZPGM
*---------------------------------------------------------------------*
*        Program entry address data map                               *
*--------+---------+---------+---------+---------+---------+---------+*
ZEPA     DSECT ,
ZEPAID   DS    CL31'     Entry address............'
ZEPAID2  DS    CL08' '
         DS    CL41' '
ZEPA@SZE EQU   *-ZEPA
*---------------------------------------------------------------------*
*        Program offset address data map                              *
*--------+---------+---------+---------+---------+---------+---------+*
ZOFF     DSECT ,
ZOFFID   DS    CL31'     Offset address...........'
ZOFFID2  DS    CL08' '
         DS    CL41' '
ZOFF@SZE EQU   *-ZOFF
*---------------------------------------------------------------------*
*        Program Authorization data map                               *
*--------+---------+---------+---------+---------+---------+---------+*
ZACC     DSECT ,
ZACCID   DS    CL31'     Authorization............'
ZACCID2  DS    CL06' '
         DS    CL43' '
ZACC@SZE EQU   *-ZACC
*---------------------------------------------------------------------*
*        Unit of work data map                                        *
*--------+---------+---------+---------+---------+---------+---------+*
ZUOW     DSECT ,
ZUOWID   DS    CL31'     Workunit.................'
ZUOWID2  DS    CL04' '
         DS    CL45' '
ZUOW@SZE EQU   *-ZUOW
*---------------------------------------------------------------------*
*        Unit of work state map                                       *
*--------+---------+---------+---------+---------+---------+---------+*
ZSYS     DSECT ,
ZSYSID   DS    CL31'     System state.............'
ZSYSID2  DS    CL12' '
         DS    CL37' '
ZSYS@SZE EQU   *-ZSYS
*---------------------------------------------------------------------*
*        Time and date data map                                       *
*--------+---------+---------+---------+---------+---------+---------+*
ZTME     DSECT ,
ZTMEID   DS    CL31'   Time and Date..............'
ZTMEID2  DS    CL38' '
         DS    CL11' '
ZTME@SZE EQU   *-ZTME
*---------------------------------------------------------------------*
*        SVC issued CPU data map                                      *
*--------+---------+---------+---------+---------+---------+---------+*
ZICP     DSECT ,
ZICPID   DS    CL31'   Issued on CPU..............'
ZICPID2  DS    CL04' '
         DS    CL45' '
ZICP@SZE EQU   *-ZICP
*---------------------------------------------------------------------*
*        SVC comple CPU data map                                      *
*--------+---------+---------+---------+---------+---------+---------+*
ZOCP     DSECT ,
ZOCPID   DS    CL31'   Completed on CPU...........'
ZOCPID2  DS    CL04' '
         DS    CL45' '
ZOCP@SZE EQU   *-ZOCP
*---------------------------------------------------------------------*
*        SVC duration data map                                        *
*--------+---------+---------+---------+---------+---------+---------+*
ZDUR     DSECT ,
ZDURID   DS    CL31'   Duration...................'
ZDURID2  DS    CL08' '
         DS    CL41' '
ZDUR@SZE EQU   *-ZDUR
*---------------------------------------------------------------------*
*        SVC entry regs data map                                      *
*--------+---------+---------+---------+---------+---------+---------+*
ZGRS     DSECT ,
ZGRID    DS    CL31'   SVC entry registers........'
ZAR      DS    CL5'AR15:'
         DS    CL1' '
ZARVAL   DS    CL8'00000000'
         DS    CL2' '
ZGR      DS    CL5'GR15:'
ZGRVALH  DS    CL8'00000000'
         DS    CL1' '
ZGRVALL  DS    CL8'00000000'
         DS    CL11' '
ZGRS@SZE EQU   *-ZGRS
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         IKJTCB ,
         IKJRB DSECT=YES
         IHACDE ,
         IHASVC ,
         IHAPSW ,
         IHAFRRS ,
         CVT   DSECT=YES
         IEZJSCB ,
         IEEBASEA ,
CSCB     DSECT ,
         IEECHAIN ,
TIOT     DSECT ,
         IEFTIOT1 ,
         DCBD  DSORG=PS,DEVD=DA
         IEZBITS ,
         END
./ ADD NAME=ECFMST   0121-21068-21304-1645-00300-00245-00295-BENMAR  04
ECFMST   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFMST                                                     */
*/*                                                                  */
*/* Description: MVS Reset Command Front-End Processor               */
*/*                                                                  */
*/* Function: Allows you to issue Master Scheduler commands that     */
*/*           define the required Event Capture Facility subsystem   */
*/*           and start it as a jobstep task of the Master Scheduler */
*/*           Address Space (MSAS).                                  */
*/*                                                                  */
*/*           This facility comes in handy when you only have one    */
*/*           system and are unable to start the required started    */
*/*           tasks (JES, NET, TSO, ECF) due to JCL errors or data   */
*/*           sets allocation errors.                                */
*/*                                                                  */
*/*           Of course, in order for this facility to work, you     */
*/*           need to plan for it ahead of time by simply relinking  */
*/*           the MVS Reset command processor to include this module */
*/*           (ECFMST) and designate it as the main entry point of   */
*/*           the Reset command processor load module IEEMB810.      */
*/*                                                                  */
*/*           Prior to zOS IEEMB810 resided in SYS1.LPALIB, now it   */
*/*           resides in SYS1.LINKLIB. Make a copy of IEEMB810 and   */
*/*           call it ECFMB810. Then use the JCL procedure located   */
*/*           in INSTLIB(ECFMSAS) to relink it into its LPALIB or    */
*/*           LINKLIB library.                                       */
*/*                                                                  */
*/* Recovery  When you're unable to start the required started       */
*/* Session:  tasks during a system IPL, start ECF as a jobstep      */
*/*           task of the Master Scheduler address space by          */
*/*           following this procedure:                              */
*/*                                                                  */
*/*           1. Define subsystem name ECF and ECFR to the SSI by    */
*/*              issuing the following reset commands:               */
*/*                                                                  */
*/*              E ADD,SUB=ECF                                       */
*/*              E ADD,SUB=ECFR                                      */
*/*                                                                  */
*/*              An alternate way to define the ECF and ECFR to the  */
*/*              MVS SSI can be accomplished during normal system    */
*/*              operation by adding them to the IEFJSSNT subsystem  */
*/*              name table. However, this only works for MVS 3.8j.  */
*/*              If you choose this method, the JCL procedure is     */
*/*              located in INSTLIB(ECFSSNT).                        */
*/*                                                                  */
*/*              For later MVS releases you can define ECF and ECFR  */
*/*              to the MVS SSI by adding them to PARMLIB(IEFSSNxx)  */
*/*              subsysytem definition member.                       */
*/*                                                                  */
*/*           2. Start the ECF subsystem jobstep task by issuing the */
*/*              following Reset command:                            */
*/*                                                                  */
*/*              E START,SUB=ECF                                     */
*/*                                                                  */
*/*           3. ECF attaches itself as a jobstep task of the Master */
*/*              Scheduler address space and issue the following     */
*/*              message:                                            */
*/*                                                                  */
*/*              ECF810I ECF System recovery in progress             */
*/*                                                                  */
*/*           4. After successful initialization ECF issues the      */
*/*              following WTOR action message:                      */
*/*                                                                  */
*/*              ECF800A Specify ECF initialization PARMLIB DSName   */
*/*                      or reply EXIT                               */
*/*                                                                  */
*/*           5. Reply to message ECF800A by specifying the fully    */
*/*              qualified ECF PARMLIB initialization dataset name.  */
*/*                                                                  */
*/*           6. ECF then issues the following initialization        */
*/*              informational messages:                             */
*/*                                                                  */
*/*              ECF002I ECF Event Capture initialization in         */
*/*                      progress                                    */
*/*                                                                  */
*/*              ECF004I ECF Using PARM='SUB=ECF,CMD=?,INI=ECFMSTR,  */
*/*                      SSM=ECFCSM'                                 */
*/*                                                                  */
*/*              ECF002I ECF Event Capture initialization complete   */
*/*                                                                  */
*/*           7. ECF is now ready to process started task recovery   */
*/*              session commands.                                   */
*/*                                                                  */
*/*           8. Refer to INSTLIB($$RCVY) for a description of how   */
*/*              to use the following started task recovery session  */
*/*              commands:                                           */
*/*                                                                  */
*/*              EDIT                                                */
*/*              BROWSE                                              */
*/*              COPY                                                */
*/*              COMPRESS                                            */
*/*              TSO commands                                        */
*/*                                                                  */
*/* ---------------------------------------------------------------- */
*/*                                                                  */
*/* Input Regs: R1  CSCB address                                     */
*/*             R13 Caller's save area address                       */
*/*             R14 return address                                   */
*/*             R15 ECFMST entry address                             */
*/*                                                                  */
*/* Regs Usage: R3  MSAS address                                     */
*/*             R10 base address                                     */
*/*             R11 CSCB address                                     */
*/*                                                                  */
*/* Output Regs: R1  CSCB address                                    */
*/*              R13 Caller's save area address                      */
*/*              R14 caller's return address                         */
*/*              R15 IEEMB810 entry address                          */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=0                   */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFMST   $ENTRY SAVE=NO                entry
         LR    R10,R15                 copy base
         USING ECFMST,R10              set addressability
*
**       Validity check request
*
         LR    R11,R1                  CSCB address
         USING CSCB,R11                set addressability
         CLC   =CL08'ADD,SUB=',CHBUF   add subsystem?
         BE    MST0030                 yes, carry on
         CLC   =CL14'START,SUB=ECF',CHBUF subsystem start?
         BE    MST0020                 yes, carry on
         CLC   =CL14'START,SUB=ECF,',CHBUF subsystem start?
         BE    MST0020                 yes, carry on
         CLC   =CL11'CHANGE,SUB=',CHBUF JES name change?
         BNE   MSTEXIT                 no, exit
*
**       Alter primary subsystem name
*
         USING PSA,0
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTJESCT             JES control table
         USING JESCT,R3                set addressability
         L     R4,JESSSCT              SSCT address
         USING SSCT,R4                 set addressability
*
MST0000  DS    0H
         CLC   =CL4'JES2',SSCTSNAM     JES2?
         BE    MST0010                 yes, carry on
         ICM   R4,15,SSCTSCTA          get next SSCT
         BNZ   MST0000                 loop
         B     MSTEXIT                 exit
*
MST0010  DS    0H
         MVC   JESPJESN,CHBUF+11       alter,
         MVC   SSCTSNAM,CHBUF+11       JES2 name.
         WTO   MF=(E,ECF801I)          issue msg                   @02A
         DROP  R3,R4
*
**       Free command CSCB control block
*
         OI    CHSTS,CHFC              set free indicator
         LR    R1,R11                  CSCB address
         MGCR  (1),CHAIN               free it
         BR    R14                     exit
*
**       Relocate CSCB command buffer
*
MST0020  DS    0H
         GETMAIN RU,LV=MSAS@SZE,SP=245
         LR    R3,R1                   MSAS address
         USING MSAS,R3                 set addressability
         XC    MSAS(MSAS@SZE),MSAS     scrub MSAS
         MVC   MSASID,=CL4'MSAS'       ID MSAS
         MVC   MSASCBUF,CHBUF+6        copy command buffer
*
**       Free command CSCB control block
*
         OI    CHSTS,CHFC              set free indicator
         LR    R1,R11                  CSCB address
         MGCR  (1),CHAIN               free it
*
**       Invoke Event Capture Facility
*
         WTO   MF=(E,ECF810I)          issue msg
         LR    R1,R3                   MSAS address
         LA    R13,MSASAVE             set save area address
         XCTL  EPLOC=ECFSUB            transfer control to ECF
         ABEND 4096,DUMP               should never happen
*
**       Define secondary subsystem
*
MST0030  DS    0H
         CLI   CHBUF+8,BLANK           valid name?
         BE    MSTEXIT                 no, exit
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTJESCT             JES control table
         USING JESCT,R3                set addressability
         XR    R1,R1                   no GETMAIN issued
*
MST0040  DS    0H
         L     R4,JESSSCT              SSCT address
         USING SSCT,R4                 set addressability
*
MST0050  DS    0H
         CLC   SSCTSNAM,CHBUF+8        subsystem defined?
         BE    MST0070                 yes, exit
         LR    R5,R4                   copy SSCT address
         ICM   R4,15,SSCTSCTA          get next SSCT
         BNZ   MST0050                 loop
*
         LTR   R1,R1                   SSCT?
         BNZ   MST0060                 yes, carry on
         GETMAIN RU,LV=SSCTSIZE,SP=241 no, obtain SSCT
         LR    R4,R1                   SSCT address
         USING SSCT,R4                 set addressability
         XC    SSCT(SSCTSIZE),SSCT     zero SSCT
         MVC   SSCTID,=CL4'SSCT'       ID SSCT
         MVC   SSCTSNAM,CHBUF+8        set subsystem name
*
MST0060  DS    0H
         LR    R4,R5                   last SSCT address
         XR    R0,R0                   prime for compare & swap
         CS    R0,R1,SSCTSCTA          chain subsystem SSCT
         BNZ   MST0040                 changed, try again
         DROP  R3,R4
         WTO   MF=(E,ECF805I)          subsystem defined msg
         B     MST0099                 exit
*
**       Subsystem already defined
*
MST0070  DS    0H
         WTO   MF=(E,ECF811I)          issued defined msg
*
**       Free command CSCB control block
*
MST0099  DS    0H
         OI    CHSTS,CHFC              set free indicator
         LR    R1,R11                  CSCB address
         MGCR  (1),CHAIN               free it
         BR    R14                     exit
*
**       Invoke Reset command processor
*
MSTEXIT  DS    0H
         L     R15,IEEMB810            IEEMB810 EPA
         BR    R15                     exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
IEEMB810 DC    V(IEEMB810)             IEEMB810 EPA
         DS    0C
ECFSUB   DC    CL8'ECFSUB'             ECF jobstep task
*---------------------------------------------------------------------*
*        WTO messages                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECF801I  WTO   'ECF801I ECF Primary subsystem name altered',MF=L
ECF801IL EQU   *-ECF801I
         DS    0F
ECF805I  WTO   'ECF805I ECF Secondary subsystem successfully defined', +
               MF=L
         DS    0F
ECF811I  WTO   'ECF811I ECF Secondary subsystem already defined',MF=L
ECF811IL EQU   *-ECF811I
         DS    0F
ECF810I  WTO   'ECF810I ECF System recovery in progress',MF=L
ECF810IL EQU   *-ECF810I
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFMAS ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
CSCB     DSECT ,
         IEECHAIN ,
         IEFJESCT ,
         IEFJSCVT ,
         IHAPSA ,
         CVT   DSECT=YES
         END
./ ADD NAME=ECFOIO   0118-21068-21304-1645-00366-00375-00040-BENMAR  07
ECFOIO   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFOIO                                                     */
*/*                                                                  */
*/* Function: Event Capture Input/Output Service Processor           */
*/*                                                                  */
*/* Description: Performs input/output service requests on behalf    */
*/*              of all Event Capture subsystem components.          */
*/*                                                                  */
*/* Input Regs: R1  ZIO address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  DCB address                                      */
*/*             R8  ZIO address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=Callerkey           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 05022020 | Ben Marino  | Serviceability enhancements   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFOIO   $SRVINI
         USING EVT,R11                 EVT addressability
         ST    R1,DSAIPAR              save parm reg
*
**       Trace service request entry
*
         $TRACE $SRVINI,                                               +
               MID=ECFOIO,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
**       Validity check request
*
         L     R8,DSAIPAR              RIO address
         USING ZIO,R8                  set addressability
         CLC   ZIOID,=CL4'ZIO'         valid indeed?
         BE    OIO0010                 yes, carry on
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN0652)    set error RSN
         B     OIOEXIT                 exit
*
**       Process service request
*
OIO0010  DS    0H
         CLI   ZIOFUNC2,ZIO@GET        read?
         BNE   OIO0020                 no, it's write
         $CALL READ                    read it
         B     OIOEXIT                 exit
*
OIO0020  DS    0H
         $CALL WRITE                   write request
         B     OIOEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
OIOEXIT  DS    0H
         $TRACE $SRVXIT,                                           @02A+
               MID=ECFOIO,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
         $SRVXIT PARM=DSAOPAR,RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: READ                                                       */
*/*                                                                  */
*/* Function: Input access service subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  ZIO address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
READ     $SUBINI
         USING PSA,0
         USING ZIO,R8                  ZIO addressability
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0688)    set error RSN
         $RETRY READEXIT,              activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Open input dataset
*
         MVC   DSAOLST,ROPENLST        listform
         MVC   DSAPDCB(INFILEL),INFILE
         LA    R7,DSAPDCB              address
         USING IHADCB,R7               set addressability
         MVC   DCBDDNAM,ZIODDNAM       init DDname
         OPEN  ((R7),INPUT),MF=(E,DSAOLST)
         TM    DCBOFLGS,DCBOFOPN       successful?
         BNZ   READ010                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set RC
         MVC   DSARSN,=AL4(RSN2052)    set RSN
         $WTO  MID=ECF025E,            no, issue error msg             +
               VAR1=ZIODDNAM,          show DDname                     +
               VAR2=DSARSN             show error RSN
         B     READEXIT                exit
*
READ010  DS    0H
         OI    DSAFLG1,DSA@OPN         data set is open
         SLR   R2,R2
         L     R3,ZIORECT              get record count
         L     R4,ZIORECA              get record data address
         MVC   ZIOLRECL,DCBLRECL       copy LRECL                  @02A
*
READ020  DS    0H
         GET   (R7)                    read record
         MVC   0(80,R4),0(R1)          copy 80-bytes *ONLY*
         LA    R2,1(,R2)               add record count
         LA    R4,80(,R4)              next record slot
         BCT   R3,READ020              loop
*
**       End-of-data address routine
*
READEOD  DS    0H
         ST    R2,ZIORECS              save record count
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
READEXIT DS    0H
         TM    DSAFLG1,DSA@OPN         data set open?
         BZ    READEX00                no, skip close
         MVC   DSACLST,RCLOSLST        listform
         LA    R7,DSAPDCB              address
         CLOSE ((R7)),MF=(E,DSACLST)   close INFILE
         NI    DSAFLG1,XFF-DSA@OPN     reset open indicator
*
READEX00 DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Costants                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ROPENLST OPEN  (,),MF=L                OPEN listform
         DS    0F
RCLOSLST CLOSE (,),MF=L                CLOSE listform
         DS    0F
INFILE   DCB   DDNAME=INFILE,          DDNAME                          +
               DSORG=PS,               read sequentially               +
               MACRF=GL,               macro format                    +
               EODAD=READEOD           EODAD routine
INFILEL  EQU   *-INFILE                DCB listform
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: WRITE                                                      */
*/*                                                                  */
*/* Function: Output access service subroutine                       */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  ZIO address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
WRITE    $SUBINI
         USING PSA,0
         USING ZIO,R8                  ZIO addressability
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0588)    set error RSN
         $RETRY WRITEXIT,              activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Open output dataset
*
         MVC   DSAOLST,WOPENLST        listform
         MVC   DSAPDCB(OUTFILEL),OUTFILE
         LA    R7,DSAPDCB              address
         USING IHADCB,R7               set addressability
         MVC   DCBDDNAM,ZIODDNAM       init requested DDname
         OPEN  ((R7),OUTPUT),MF=(E,DSAOLST)
         TM    DCBOFLGS,DCBOFOPN       successful?
         BNZ   WRITE10                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set RC
         MVC   DSARSN,=AL4(RSN2000)    set RSN
         $WTO  MID=ECF025E,            no, issue error msg             +
               VAR1=ZIODDNAM,          show DDname                     +
               VAR2=DSARSN             show error RSN
         B     WRITEXIT                exit
*
**       Write output data records
*
WRITE10  DS    0H
         OI    DSAFLG1,DSA@OPN         data set is open
         L     R3,ZIORECT              get record count
         L     R4,ZIORECA              get recod data address
         TM    ZIOFLG1,ZIO@EDIT        edit recovery caller?
         BZ    WRITE30                 no, carry on
*
WRITE20  DS    0H
         USING EDT,R4                  EDT addressability
         LA    R5,EDT@PRFX             edit prefex size
         LA    R5,0(R5,R4)             point to record data
         PUT   (R7),(R5)               write record
         LA    R4,EDT@SIZE(,R4)        get next record
         BCT   R3,WRITE20              loop loop
         B     WRITE99                 exit
*
WRITE30  DS    0H
         PUT   (R7),(R4)               write record
         LA    R4,80(,R4)              get next record
         BCT   R3,WRITE30              loop
*
WRITE99  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
WRITEXIT DS    0H
         TM    DSAFLG1,DSA@OPN         data set open?
         BZ    WRITEX00                no, skip close
         MVC   DSACLST,WCLOSLST        listform
         LA    R7,DSAPDCB              address
         CLOSE ((R7)),MF=(E,DSACLST)   close OUTFILE
         NI    DSAFLG1,XFF-DSA@OPN     reset open indicator
*
WRITEX00 DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Costants                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
WOPENLST OPEN  (,),MF=L                OPEN listform
         DS    0F
WCLOSLST CLOSE (,),MF=L                CLOSE listform
         DS    0F
OUTFILE  DCB   DDNAME=OUTFILE,         DDNAME                          +
               DSORG=PS,               read sequentially               +
               LRECL=80,               record length                   +
               MACRF=PM                macro format
OUTFILEL EQU   *-OUTFILE               DCB listform
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFEQU ,
         $ECFZIO ,
         $ECFRCT ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@OPN  EQU   X'80'                   open indicator
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
         DS    0F
DSAIPAR  DS    0F                      input parm reg
DSAOPAR  DS    F                       output parm reg
         DS    0F
DSAPDCB  DS    CL(OUTFILEL)            OUTFILE DCB
         DS    0F
DSAOLST  OPEN  (,),MF=L                OPEN listform
         DS    0F
DSACLST  CLOSE (,),MF=L                CLOSE listform
         DS    0D
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         DCBD  DSORG=PS,DEVD=DA
         END
./ ADD NAME=ECFPAR   0196-21068-21304-1645-03596-03005-03563-BENMAR  15
ECFPAR   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFPAR                                                     */
*/*                                                                  */
*/* Function: Event Capture Parameters Parse Processor               */
*/*                                                                  */
*/* Description: Performs parsing of all initialization parameters   */
*/*              specified in PARMLIB member ECFMSTR.                */
*/*                                                                  */
*/* Input Regs: R1  input parm                                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=Callerkey           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 03172020 | Ben Marino  | Serviceability enhancements   *
* @03 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
* @04 | V2R3 | 08062021 | Ben Marino  | Added MONITOR rule trigger    *
* @05 | V2R3 | 08172021 | Ben Marino  | Added PERSIST option support  *
* @06 | V2R3 | 09272021 | Ben Marino  | Added SVC screening support   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFPAR   $SRVINI
         USING EVT,R11                 EVT addressability
         ST    R1,DSAIPAR              save parm reg
*
**       Trace service request entry
*
         $TRACE $SRVINI,                                               +
               MID=ECFPAR,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0596)    set error RSN
         $RETRY PAREXIT,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Set all parm defaults
*
         TM    STKFLG2,STK@GREC        any records read?           @02C
         BNZ   PAR0020                 yes, test further
         OI    DSAFLG1,DSA@DEF         set default procesing flag
         LA    R8,KEYTAB               keyword table address
         USING KEY,R8                  set addressability
*
PAR0000  DS    0H
         CLI   KEYFLG1,KEY@LST         end of keyword table?
         BE    PAR0010                 yes, exit loop
         L     R15,KEYEPA              keyword routine EPA
         BALR  R14,R15                 call routine
         LA    R8,KEYTABSZ(,R8)        next keyword table entry
         B     PAR0000                 loop
*
PAR0010  DS    0H
         $WTO  MID=ECF010I             issue defaults taken msg
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         B     PAREXIT                 exit
*
**       Set user-defined parms
*
PAR0020  DS    0H
         L     R7,STKPRLIB             PARMLIB buffer address
         L     R4,STKPRCNT             number of records
*
PAR0030  DS    0H
         CLI   0(R7),X'00'             null record
         BE    PAR0070                 yes, loop
         CLI   0(R7),C'*'              comment record?
         BE    PAR0070                 yes, loop
         CLC   0(2,R7),=CL2'/*'        comment record?
         BE    PAR0070                 yes, loop
         MVC   DSARECR,0(R7)           copy member data
         LA    R8,KEYTAB               keyword table address
         USING KEY,R8                  set addressability
*
PAR0040  DS    0H
         CLI   KEYFLG1,KEY@LST         end of keyword table?
         BE    PAR0060                 yes, get next record
         LH    R5,KEYSIZE              keyword length
         BCTR  R5,0                    decrement for EX
         EX    R5,KEYCOMP              keyword match?
         BE    PAR0090                 yes, call keyword routine
*
PAR0050  DS    0H
         LA    R8,KEYTABSZ(,R8)        get next keyword entry
         B     PAR0040                 loop
*
PAR0060  DS    0H
         $WTO  MID=ECF014W,            issue keyword unknown msg       +
               VAR1=DSARECR            show keyword
         XC    DSARC,DSARC             set RC
*
PAR0070  DS    0H
         LA    R7,80(,R7)              get next parm record
         BCT   R4,PAR0030              loop
         TM    EVTFLG5,EVT@HZOS        zOS host system?            @03A
         BNZ   PAR0075                 yes, skip error             @03A
         TM    EVTFLG4,EVT@USVC        SVC=number specified?
         BNZ   PAR0075                 yes, carry on
         $WTO  MID=ECF062E             no, issue error msg
         MVC   DSARC,=AL4(RC12)        set error RC
         B     PAREXIT                 exit w/errors
*
**       Trace initialization parms
*
PAR0075  DS    0H
         $TRACE $ECFMSTR,                                              +
               MID=ECFPAR,             trace caller                    +
               A=STKPRLIB              trace storage addrss
*
         MVC   DSADLOG,=CL8'inactive'  DBUGLOG inactive
         TM    STKFLG2,STK@DLOG        DBUGLOG active?             @02C
         BZ    PAR0080                 no, exit
         MVC   DSADLOG,=CL8'active'    DBUGLOG is active
*
PAR0080  DS    0H
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    PAR0099                 no, skip msg
         $WTO  MID=ECF039I,                                            +
               VAR1=DSADLOG            show status
         B     PAR0099                 exit
*
PAR0090  DS    0H
         L     R15,KEYEPA              keyword routine EPA
         BALR  R14,R15                 call routine
         CLC   DSARC,=AL4(RC0)         parm processed?
         BE    PAR0070                 yes, loop
         $WTO  MID=ECF015E,                                            +
               VAR1=DSARSN,            show RSN                        +
               VAR2=DSARECR            show record
         B     PAREXIT                 exit
*
PAR0099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         B     PAREXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
PAREXIT  DS    0H
         $TRACE $SRVXIT,                                               +
               MID=ECFPAR,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
         $SRVXIT PARM=DSAOPAR,RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
KEYCOMP  CLC   0(*-*,R7),KEYWORD       executed instruction
*---------------------------------------------------------------------*
*        Keyword Table                                                *
*                                                                     *
*        DS    XL1     flags                                          *
*        EQU   X'80'   -defined keyword                               *
*        EQU   X'FF'   -last keyword entry                            *
*        DS    AL1     keyword data length                            *
*        DS    AL2     keyword length                                 *
*        DS    A       keyword routine EPA                            *
*        DS    CL12    keyword name                                   *
*                                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
KEYTAB   DS    0F
         DC    XL1'80',AL1(08),AL2(04),A(TSOTMP),CL16'TMP='
         DC    XL1'80',AL1(03),AL2(04),A(USRSVC),CL16'SVC='
         DC    XL1'80',AL1(04),AL2(05),A(MASTER),CL16'MSAS='
         DC    XL1'80',AL1(06),AL2(06),A(RUNRUL),CL16'RUNAS='
         DC    XL1'80',AL1(03),AL2(06),A(TRCOPT),CL16'TRACE='
         DC    XL1'80',AL1(03),AL2(06),A(DBGOPT),CL16'DEBUG='
         DC    XL1'80',AL1(03),AL2(06),A(DMPOPT),CL16'SDUMP='
         DC    XL1'80',AL1(03),AL2(06),A(IEFREQ),CL16'SSREQ='
         DC    XL1'80',AL1(02),AL2(06),A(DTIMER),CL16'TIMER='
         DC    XL1'80',AL1(04),AL2(07),A(TSOSUB),CL16'TSOSUB='
         DC    XL1'80',AL1(08),AL2(07),A(TMPSTC),CL16'TMPSTC='
         DC    XL1'80',AL1(04),AL2(07),A(SETCON),CL16'SETCON='     @06A
         DC    XL1'80',AL1(08),AL2(08),A(SVCTRP),CL16'TRAPSVC='    @06A
         DC    XL1'80',AL1(01),AL2(08),A(RPLYID),CL16'REPLYID='
         DC    XL1'80',AL1(05),AL2(08),A(REBCPL),CL16'REBPOOL='
         DC    XL1'80',AL1(05),AL2(08),A(SRBCPL),CL16'SRBPOOL='
         DC    XL1'80',AL1(05),AL2(08),A(SRECPL),CL16'SREPOOL='
         DC    XL1'80',AL1(06),AL2(08),A(SHWREB),CL16'SHOWREB='
         DC    XL1'80',AL1(03),AL2(08),A(CAPDTA),CL16'CAPTURE='
         DC    XL1'80',AL1(03),AL2(08),A(CMPWTO),CL16'COMPWTO='
         DC    XL1'80',AL1(03),AL2(08),A(PRSIST),CL16'PERSIST='    @05A
         DC    XL1'80',AL1(03),AL2(08),A(Q10ENQ),CL16'Q10LOCK='    @04A
         DC    XL1'80',AL1(02),AL2(09),A(MTIMER),CL16'MONTIMER='   @04A
         DC    XL1'80',AL1(04),AL2(09),A(MONMSG),CL16'MONMSGCT='   @04A
         DC    XL1'80',AL1(44),AL2(08),A(SYSPAR),CL16'PARMLIB='
         DC    XL1'80',AL1(44),AL2(08),A(SYSJOB),CL16'ECFJOBS='
         DC    XL1'80',AL1(44),AL2(08),A(SYSPRC),CL16'SYSPROC='
         DC    XL1'80',AL1(44),AL2(06),A(SYSINP),CL16'SYSIN='
         DC    XL1'80',AL1(44),AL2(08),A(SYSTSN),CL16'SYSTSIN='
         DC    XL1'80',AL1(44),AL2(09),A(SYSPRT),CL16'SYSTSPRT='
         DC    XL1'80',AL1(44),AL2(09),A(SYSOUT),CL16'SYSPRINT='
         DC    XL1'80',AL1(08),AL2(05),A(EVNTDF),CL16'RULE='
KEYLAST  DC    XL1'FF',AL1(00),AL2(00),A(0),CL16'LAST-ENTRY'
KEYTABSZ EQU   *-KEYLAST
KEYTABNM EQU   (*-KEYTAB)/KEYTABSZ
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TMPSTC                                                     */
*/*                                                                  */
*/* Function: TMPSTC parameter subroutine                            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TMPSTC   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    TSOTM00                 no,  test further
         XC    DSARC,DSARC             set RC
         B     TSOTMXT                 exit
*
TSOTM00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid program name?
         BNE   TSOTM10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0136)    set error RSN
         B     TSOTMXT                 exit
*
TSOTM10  DS    0H
         CLI   0(R7),DOLLAR            valid program name?
         BE    TSOTM30                 yes, carry on
         CLI   0(R7),ASHTAG            valid program name?
         BE    TSOTM30                 yes, carry on
         CLI   0(R7),ATSIGN            valid program name?
         BE    TSOTM30                 yes, carry on
         CLI   0(R7),ALPHA             valid program name?
         BL    TSOTM20                 no, error
         CLI   0(R7),ZEBRA             valid program name?
         BNH   TSOTM30                 yes, carry on
*
TSOTM20  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0148)    set error RSN
         B     TSOTMXT                 exit
*
TSOTM30  DS    0H
         $MVC  EVTMPSTC,0(R7)          save TMP JCL procedure name
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    TSOTM40                 no, skip msg
         $WTO  MID=ECF007I,                                            +
               VAR1=EVTMPSTC           show JCL procedure name
*
TSOTM40  DS    0H
         XC    DSARC,DSARC             set RC
*
TSOTMXT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TSOSUB                                                     */
*/*                                                                  */
*/* Function: TSOSUB parameter subroutine                            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TSOSUB   $SUBINI
         USING PSA,0                   FLC addressability
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    TSOSU00                 no, test further
         XC    DSARC,DSARC             set RC
         B     TSOSUXT                 exit
*
TSOSU00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid subsystem name?
         BNE   TSOSU10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0153)    set error RSN
         B     TSOSUXT                 exit
*
TSOSU10  DS    0H
         $MVC  EVTECFRS,0(R7)          save subsystem name
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BE    TSOSU20                 yes, show msg
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    TSOSU99                 no, skip msg
*
TSOSU20  DS    0H
         $WTO  MID=ECF054I,                                            +
               VAR1=EVTECFRS           show subsystem name
*
TSOSU99  DS    0H
         XC    DSARC,DSARC             set RC
*
TSOSUXT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TSOTMP                                                     */
*/*                                                                  */
*/* Function: TMP parameter subroutine                               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TSOTMP   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    TSOZC00                 no, test further
         XC    DSARC,DSARC             set RC
         B     TSOZCPX                 exit
*
TSOZC00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid program name?
         BNE   TSOZC10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0146)    set error RSN
         B     TSOZCPX                 exit
*
TSOZC10  DS    0H
         CLI   0(R7),DOLLAR            valid?
         BE    TSOZC30                 yes, carry on
         CLI   0(R7),ASHTAG            valid?
         BE    TSOZC30                 yes, carry on
         CLI   0(R7),ATSIGN            valid?
         BE    TSOZC30                 yes, carry on
         CLI   0(R7),ALPHA             valid?
         BL    TSOZC20                 no, error
         CLI   0(R7),ZEBRA             valid?
         BNH   TSOZC30                 yes, carry on
*
TSOZC20  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0154)    set error RSN
         B     TSOZCPX                 exit
*
TSOZC30  DS    0H
         $MVC  EVTTMPNM,0(R7)          save TMP program name
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    TSOZC40                 no, skip msg
         $WTO  MID=ECF053I,                                            +
               VAR1=EVTTMPNM           show TMP program name
*
TSOZC40  DS    0H
         XC    DSARC,DSARC             set RC
*
TSOZCPX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SVCTRP                                                     */
*/*                                                                  */
*/* Function: SVC screening option subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SVCTRP   $SUBINI                                                 99@06A
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    SVCTR00                 no, test further
         $MVC  EVTRPSVC,=CL8'NO'       set TRAPSVC=NO default
         $OI   EVTFLG5,EVT@SVCN        set TRAPSVC=NO indicator
         $NI   EVTFLG5,XFF-EVT@SVCD    reset TRAPSVC=DDname indicator
         $NI   EVTFLG5,XFF-EVT@SVCS    reset TRAPSVC=SMFnnn indicator
         XC    DSARC,DSARC             set RC
         B     SVCTRXT                 exit
*
SVCTR00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid TRAPSVC= option?
         BNE   SVCTR10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0186)    set error RSN
         B     SVCTRXT                 exit
*
SVCTR10  DS    0H
         CLC   0(3,R7),=CL3'NO'        TRAPSVC=NO specified?
         BNE   SVCTR20                 no, test further
         $MVC  EVTRPSVC,=CL8'NO'       set TRAPSVC=NO option
         $OI   EVTFLG5,EVT@SVCN        set TRAPSVC=NO indicator
         $NI   EVTFLG5,XFF-EVT@SVCD    reset TRAPSVC=DDname indicator
         $NI   EVTFLG5,XFF-EVT@SVCS    reset TRAPSVC=SMFnnn indicator
         XC    DSARC,DSARC             set RC
         B     SVCTR60                 carry on
*
SVCTR20  DS    0H
         CLI   0(R7),DOLLAR            valid?
         BE    SVCTR30                 yes, carry on
         CLI   0(R7),ASHTAG            valid?
         BE    SVCTR30                 yes, carry on
         CLI   0(R7),ATSIGN            valid?
         BE    SVCTR30                 yes, carry on
         CLI   0(R7),ALPHA             valid?
         BL    SVCTR50                 no, error
         CLI   0(R7),ZEBRA             valid?
         BH    SVCTR40                 no, error
*
SVCTR30  DS    0H
         $MVC  EVTRPSVC,0(R7)          save TRAPSVC=DDname
         $OI   EVTFLG5,EVT@SVCD        set TRAPSVC=DDname indicator
         $NI   EVTFLG5,XFF-EVT@SVCN    reset TRAPSVC=NO indicator
         $NI   EVTFLG5,XFF-EVT@SVCS    reset TRAPSVC=SMFnnn indicator
         XC    DSARC,DSARC             set RC
         B     SVCTR60                 carry on
*
SVCTR40  DS    0H
         CLI   3(R7),BLANK             SMF=nnn GT 3 digits?
         BNE   SVCTR50                 yes, error
         MVC   DSASMFN,0(R7)           copy SMF number
         CLC   DSASMFN,=CL3'200'       valid SMF number?
         BL    SVCTR50                 no, error
         CLC   DSASMFN,=CL3'255'       valid SMF number?
         BH    SVCTR50                 no, error
         MVC   DSADWRD,SMFNUMBR        move zones
         MVN   DSADWRD(3),DSASMFN      move SMF numerics
         CLC   DSADWRD(3),DSASMFN      valid SMF number?
         BNE   SVCTR50                 no, error
         PACK  DSADWRD,DSASMFN         pack SMF number
         CVB   R1,DSADWRD              convert it to binary
         $STC  R1,EVTUSMFN             init SMF number
         $MVC  EVTRPSVC(3),DSASMFN     init decimal SMF number
         $OI   EVTFLG5,EVT@SVCS        set TRAPSVC=SMFnnn indicator
         $NI   EVTFLG5,XFF-EVT@SVCN    reset TRAPSVC=NO indicator
         $NI   EVTFLG5,XFF-EVT@SVCD    reset TRAPSVC=DDname indicator
         B     SVCTR60                 exit
*
SVCTR50  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0206)    set error RSN
         B     SVCTRXT                 exit
*
SVCTR60  DS    0H
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SVCTR70                 no, skip msg
         $WTO  MID=ECF077I,                                            +
               VAR1=EVTRPSVC           show TRAPSVC={NO|nnn|DDname}
*
SVCTR70  DS    0H
         XC    DSARC,DSARC             set RC
*
SVCTRXT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
SMFNUMBR DC    CL8'00000000'           numerics
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SETCON                                                     */
*/*                                                                  */
*/* Function: SETCON MN,JOBNAMES=(ON,LOG) subroutine                 */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SETCON   $SUBINI                                                 88@06A
         USING PSA,0                   FLC addressability
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BNZ   SETCON10                yes
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLC   0(3,R7),=CL3'NO'        SETCON=NO specified?
         BE    SETCON00                no
         CLC   0(4,R7),=CL4'YES'       SETCON=YES specified?
         BE    SETCON10                yes
         MVC   DSARC,=AL4(RC8)         set error RC
         B     SETCONX                 exit
*
SETCON00 DS    0H
         $MVC  EVTSETCN,=CL3'NO'       SETCON=NO specified
         XC    DSARC,DSARC             set RC
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SETCONX                 no, skip msg
         $WTO  MID=ECF079I,            yes, issue msg                  +
               VAR1==CL12'Not issued'
         B     SETCONX                 exit
*
SETCON10 DS    0H
         TM    EVTFLG6,EVT@SETC        command issued?
         BZ    SETCON20                no
         XC    DSARC,DSARC             set RC
         B     SETCONX                 exit
*
SETCON20 DS    0H
         MVC   DSAMGCR(ZSETCLN),ZSETCON
         XR    R0,R0                   console ID
         $MGCR DSAMGCR                 issue command
         $OI   EVTFLG6,EVT@SETC        set issued indicator
         $MVC  EVTSETCN,=CL3'YES'      SETCON=YES specified
         XC    DSARC,DSARC             set RC
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SETCONX                 no, skip msg
         $WTO  MID=ECF079I,            yes, issue msg                  +
               VAR1==CL12'Issued'
*
SETCONX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ZSETCON  DS    0XL80                   MGCR buffer
         DC    AL2(ZSETCLN)            -buffer length
         DC    AL2(0)                  -buffer options
         DC    CL76'SETCON MN,JOBNAMES=(ON,LOG)'
ZSETCLN  EQU   *-ZSETCON               MGCR buffer size
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SYSTSN                                                     */
*/*                                                                  */
*/* Function: SYSTSIN dataset subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SYSTSN   $SUBINI
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    SYTSN00                 no, test further
         XC    DSARC,DSARC             set RC
         B     SYTSNPX                 exit
*
SYTSN00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid DSN?
         BNE   SYTSN10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0540)    set error RSN
         B     SYTSNPX                 exit
*
SYTSN10  DS    0H
         CLI   0(R7),DOLLAR            valid DSN?
         BE    SYTSN30                 yes, carry on
         CLI   0(R7),ASHTAG            valid DSN?
         BE    SYTSN30                 yes, carry on
         CLI   0(R7),ATSIGN            valid DSN?
         BE    SYTSN30                 yes, carry on
         CLI   0(R7),ALPHA             valid DSN?
         BL    SYTSN20                 no, error
         CLI   0(R7),ZEBRA             valid DSN?
         BNH   SYTSN30                 yes, carry on
*
SYTSN20  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0544)    set error RSN
         B     SYTSNPX                 exit
*
SYTSN30  DS    0H
         MVI   DSADSNAM,BLANK          scrub DSName
         MVC   DSADSNAM+1(DSADSNMZ-1),DSADSNAM
         LA    R2,44                   DSN length
         LR    R3,R7                   copy DSN address
*
SYTSN40  DS    0H
         CLI   0(R3),BLANK             DSN end?
         BE    SYTSN50                 yes, carry on
         LA    R3,1(,R3)               walk thru text
         BCT   R2,SYTSN40              loop
*
SYTSN50  DS    0H
         CLR   R3,R7                   valid DSN?
         BNE   SYTSN60                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0548)    set error RSN
         B     SYTSNPX                 exit
*
SYTSN60  DS    0H
         SLR   R3,R7                   compute DSN length
         BCTR  R3,0                    subtract for EXecute
         EX    R3,COPYTSIN             copy SYSTSIN DSN
         $MVC  EVTSYSTI,DSADSNAM       override SYSTSIN default
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BE    SYTSN70                 yes, show msg
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SYTSN99                 no, skip msg
*
SYTSN70  DS    0H
         $WTO  MID=ECF030I,                                            +
               VAR1==CL8'SYSTSIN',     show DDName                     +
               VAR2=DSADSNAM           show DSName
*
SYTSN99  DS    0H
         XC    DSARC,DSARC             set RC
*
SYTSNPX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYTSIN MVC   DSADSNAM(*-*),0(R7)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SYSINP                                                     */
*/*                                                                  */
*/* Function: SYSIN dataset subroutine                               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SYSINP   $SUBINI
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    SYSIN00                 no, test further
         XC    DSARC,DSARC             set RC
         B     SYSINPX                 exit
*
SYSIN00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid DSN?
         BNE   SYSIN10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0566)    set error RSN
         B     SYSINPX                 exit
*
SYSIN10  DS    0H
         CLI   0(R7),DOLLAR            valid DSN?
         BE    SYSIN30                 yes, carry on
         CLI   0(R7),ASHTAG            valid DSN?
         BE    SYSIN30                 yes, carry on
         CLI   0(R7),ATSIGN            valid DSN?
         BE    SYSIN30                 yes, carry on
         CLI   0(R7),ALPHA             valid DSN?
         BL    SYSIN20                 no, error
         CLI   0(R7),ZEBRA             valid DSN?
         BNH   SYSIN30                 yes, carry on
*
SYSIN20  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0566)    set error RSN
         B     SYSINPX                 exit
*
SYSIN30  DS    0H
         MVI   DSADSNAM,BLANK          scrub DSName
         MVC   DSADSNAM+1(DSADSNMZ-1),DSADSNAM
         LA    R2,44                   DSN length
         LR    R3,R7                   copy DSN address
*
SYSIN40  DS    0H
         CLI   0(R3),BLANK             DSN end?
         BE    SYSIN50                 yes, carry on
         LA    R3,1(,R3)               walk thru text
         BCT   R2,SYSIN40              loop
*
SYSIN50  DS    0H
         CLR   R3,R7                   valid DSN?
         BNE   SYSIN60                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0570)    set error RSN
         B     SYSINPX                 exit
*
SYSIN60  DS    0H
         SLR   R3,R7                   compute DSN length
         BCTR  R3,0                    subtract for EXecute
         EX    R3,COPYSYSN             copy SYSIN DSN
         $MVC  EVTSYSIN,DSADSNAM       override SYSIN default
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BE    SYSIN70                 yes, show msg
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SYSIN99                 no, skip msg
*
SYSIN70  DS    0H
         $WTO  MID=ECF030I,                                            +
               VAR1==CL8'SYSIN',       show DDName                     +
               VAR2=DSADSNAM           show DSName
*
SYSIN99  DS    0H
         XC    DSARC,DSARC             set RC
*
SYSINPX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYSYSN MVC   DSADSNAM(*-*),0(R7)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SYSPRT                                                     */
*/*                                                                  */
*/* Function: SYSTSPRT dataset Subroutine                            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SYSPRT   $SUBINI
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         USING PSA,0
         XC    DSARC,DSARC             set RC
         TM    DSAFLG1,DSA@DEF         process default parm?
         BNZ   SYSPTPX                 yes, exit
         CLC   PSAAOLD,EVTMSAS         MSAS caller?
         BE    SYSPT00                 yes, carry on
         TM    EVTFLG4,EVT@MSAS        MSAS=TEST specified?
         BZ    SYSPTPX                 no, exit
*
SYSPT00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid DSN?
         BNE   SYSPT10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0574)    set error RSN
         B     SYSPTPX                 exit
*
SYSPT10  DS    0H
         CLI   0(R7),DOLLAR            valid DSN?
         BE    SYSPT30                 yes, carry on
         CLI   0(R7),ASHTAG            valid DSN?
         BE    SYSPT30                 yes, carry on
         CLI   0(R7),ATSIGN            valid DSN?
         BE    SYSPT30                 yes, carry on
         CLI   0(R7),ALPHA             valid DSN?
         BL    SYSPT20                 no, error
         CLI   0(R7),ZEBRA             valid DSN?
         BNH   SYSPT30                 yes, carry on
*
SYSPT20  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0578)    set error RSN
         B     SYSPTPX                 exit
*
SYSPT30  DS    0H
         MVI   DSADSNAM,BLANK          scrub DSName
         MVC   DSADSNAM+1(DSADSNMZ-1),DSADSNAM
         LA    R2,44                   DSN length
         LR    R3,R7                   copy DSN address
*
SYSPT40  DS    0H
         CLI   0(R3),BLANK             DSN end?
         BE    SYSPT50                 yes, carry on
         LA    R3,1(,R3)               walk thru text
         BCT   R2,SYSPT40              loop
*
SYSPT50  DS    0H
         CLR   R3,R7                   valid DSN?
         BNE   SYSPT60                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0502)    set error RSN
         B     SYSPTPX                 exit
*
SYSPT60  DS    0H
         SLR   R3,R7                   compute DSN length
         BCTR  R3,0                    subtract for EXecute
         EX    R3,COPYTSPT             copy SYSTSPRT DSN
         $MVC  EVTSYSPT,DSADSNAM       override SYSTSPRT default
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BE    SYSPT70                 yes, show msg
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SYSPT99                 no, skip msg
*
SYSPT70  DS    0H
         $WTO  MID=ECF030I,                                            +
               VAR1==CL8'SYSTSPRT',    show DDName                     +
               VAR2=DSADSNAM           show DSName
*
SYSPT99  DS    0H
         XC    DSARC,DSARC             set RC
*
SYSPTPX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYTSPT MVC   DSADSNAM(*-*),0(R7)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SYSOUT                                                     */
*/*                                                                  */
*/* Function: SYSPRINT dataset Subroutine                            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SYSOUT   $SUBINI
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    SYSOT00                 no, carry on
         XC    DSARC,DSARC             set RC
         BNE   SYSOTPX                 no, exit
*
SYSOT00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid DSN?
         BNE   SYSOT10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0574)    set error RSN
         B     SYSOTPX                 exit
*
SYSOT10  DS    0H
         CLI   0(R7),DOLLAR            valid DSN?
         BE    SYSOT30                 yes, carry on
         CLI   0(R7),ASHTAG            valid DSN?
         BE    SYSOT30                 yes, carry on
         CLI   0(R7),ATSIGN            valid DSN?
         BE    SYSOT30                 yes, carry on
         CLI   0(R7),ALPHA             valid DSN?
         BL    SYSOT20                 no, error
         CLI   0(R7),ZEBRA             valid DSN?
         BNH   SYSOT30                 yes, carry on
*
SYSOT20  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0578)    set error RSN
         B     SYSOTPX                 exit
*
SYSOT30  DS    0H
         MVI   DSADSNAM,BLANK          scrub DSName
         MVC   DSADSNAM+1(DSADSNMZ-1),DSADSNAM
         LA    R2,44                   DSN length
         LR    R3,R7                   copy DSN address
*
SYSOT40  DS    0H
         CLI   0(R3),BLANK             DSN end?
         BE    SYSOT50                 yes, carry on
         LA    R3,1(,R3)               walk thru text
         BCT   R2,SYSOT40              loop
*
SYSOT50  DS    0H
         CLR   R3,R7                   valid DSN?
         BNE   SYSOT60                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0502)    set error RSN
         B     SYSOTPX                 exit
*
SYSOT60  DS    0H
         SLR   R3,R7                   compute DSN length
         BCTR  R3,0                    subtract for EXecute
         EX    R3,COPYOUT              copy SYSPRINT DSN
         $MVC  EVTSYSOT,DSADSNAM       override SYSPRINT default
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BE    SYSOT70                 yes, show msg
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SYSOT99                 no, skip msg
*
SYSOT70  DS    0H
         $WTO  MID=ECF030I,                                            +
               VAR1==CL8'SYSPRINT',    show DDName                     +
               VAR2=DSADSNAM           show DSName
*
SYSOT99  DS    0H
         XC    DSARC,DSARC             set RC
*
SYSOTPX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYOUT  MVC   DSADSNAM(*-*),0(R7)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SYSPAR                                                     */
*/*                                                                  */
*/* Function: PARMLIB dataset subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SYSPAR   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    SPARM00                 no, test further
         XC    DSARC,DSARC             set RC
         B     SPARMPX                 exit
*
SPARM00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid DSN?
         BNE   SPARM10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0666)    set error RSN
         B     SPARMPX                 exit
*
SPARM10  DS    0H
         CLI   0(R7),DOLLAR            valid DSN?
         BE    SPARM30                 yes, carry on
         CLI   0(R7),ASHTAG            valid DSN?
         BE    SPARM30                 yes, carry on
         CLI   0(R7),ATSIGN            valid DSN?
         BE    SPARM30                 yes, carry on
         CLI   0(R7),ALPHA             valid DSN?
         BL    SPARM20                 no, error
         CLI   0(R7),ZEBRA             valid DSN?
         BNH   SPARM30                 yes, carry on
*
SPARM20  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0670)    set error RSN
         B     SPARMPX                 exit
*
SPARM30  DS    0H
         MVI   DSADSNAM,BLANK          scrub DSName
         MVC   DSADSNAM+1(DSADSNMZ-1),DSADSNAM
         LA    R2,44                   DSN length
         LR    R3,R7                   copy DSN address
*
SPARM40  DS    0H
         CLI   0(R3),BLANK             DSN end?
         BE    SPARM50                 yes, carry on
         LA    R3,1(,R3)               walk thru text
         BCT   R2,SPARM40              loop
*
SPARM50  DS    0H
         CLR   R3,R7                   valid DSN?
         BNE   SPARM60                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0674)    set error RSN
         B     SPARMPX                 exit
*
SPARM60  DS    0H
         SLR   R3,R7                   compute DSN length
         BCTR  R3,0                    subtract for EXecute
         EX    R3,COPYPARM             copy PARMLIB DSN
         $MVC  EVTPARML,DSADSNAM       override PARMLIB default
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SPARM70                 no, skip msg
         $WTO  MID=ECF030I,                                            +
               VAR1==CL8'PARMLIB',     show DDName                     +
               VAR2=DSADSNAM           show DSName
*
SPARM70  DS    0H
         XC    DSARC,DSARC             set RC
*
SPARMPX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYPARM MVC   DSADSNAM(*-*),0(R7)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SYSJOB                                                     */
*/*                                                                  */
*/* Function: ECFJOBS dataset subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SYSJOB   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    SYSJB00                 no, test further
         XC    DSARC,DSARC             set RC
         B     SYSJBPX                 exit
*
SYSJB00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid DSN?
         BNE   SYSJB10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0664)    set error RSN
         B     SYSJBPX                 exit
*
SYSJB10  DS    0H
         CLI   0(R7),DOLLAR            valid DSN?
         BE    SYSJB30                 yes, carry on
         CLI   0(R7),ASHTAG            valid DSN?
         BE    SYSJB30                 yes, carry on
         CLI   0(R7),ATSIGN            valid DSN?
         BE    SYSJB30                 yes, carry on
         CLI   0(R7),ALPHA             valid DSN?
         BL    SYSJB20                 no, error
         CLI   0(R7),ZEBRA             valid DSN?
         BNH   SYSJB30                 yes, carry on
*
SYSJB20  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0668)    set error RSN
         B     SYSJBPX                 exit
*
SYSJB30  DS    0H
         MVI   DSADSNAM,BLANK          scrub DSName
         MVC   DSADSNAM+1(DSADSNMZ-1),DSADSNAM
         LA    R2,44                   DSN length
         LR    R3,R7                   copy DSN address
*
SYSJB40  DS    0H
         CLI   0(R3),BLANK             DSN end?
         BE    SYSJB50                 yes, carry on
         LA    R3,1(,R3)               walk thru text
         BCT   R2,SYSJB40              loop
*
SYSJB50  DS    0H
         CLR   R3,R7                   valid DSN?
         BNE   SYSJB60                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0672)    set error RSN
         B     SYSJBPX                 exit
*
SYSJB60  DS    0H
         SLR   R3,R7                   compute DSN length
         BCTR  R3,0                    subtract for EXecute
         EX    R3,COPYJOBS             copy ECFJOBS DSN
         $MVC  EVTSJOBS,DSADSNAM       override ECFJOBS default
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SYSJB70                 no, skip msg
         $WTO  MID=ECF030I,                                            +
               VAR1==CL8'ECFJOBS',     show DDName                     +
               VAR2=DSADSNAM           show DSName
*
SYSJB70  DS    0H
         XC    DSARC,DSARC             set RC
*
SYSJBPX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYJOBS MVC   DSADSNAM(*-*),0(R7)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SYSPRC                                                     */
*/*                                                                  */
*/* Function: SYSPROC dataset subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SYSPRC   $SUBINI
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         USING PSA,0
         XC    DSARC,DSARC             set RC
         TM    DSAFLG1,DSA@DEF         process default parm?
         BNZ   SYSPOPX                 yes, exit
         CLC   PSAAOLD,EVTMSAS         MSAS caller?
         BE    SYSPO00                 yes, carry on
         TM    EVTFLG4,EVT@MSAS        MSAS=TEST specified?
         BZ    SYSPOPX                 no, exit
*
SYSPO00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid DSN?
         BNE   SYSPO10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0676)    set error RSN
         B     SYSPOPX                 exit
*
SYSPO10  DS    0H
         CLI   0(R7),DOLLAR            valid DSN?
         BE    SYSPO30                 yes, carry on
         CLI   0(R7),ASHTAG            valid DSN?
         BE    SYSPO30                 yes, carry on
         CLI   0(R7),ATSIGN            valid DSN?
         BE    SYSPO30                 yes, carry on
         CLI   0(R7),ALPHA             valid DSN?
         BL    SYSPO20                 no, error
         CLI   0(R7),ZEBRA             valid DSN?
         BNH   SYSPO30                 yes, carry on
*
SYSPO20  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0680)    set error RSN
         B     SYSPOPX                 exit
*
SYSPO30  DS    0H
         MVI   DSADSNAM,BLANK          scrub DSName
         MVC   DSADSNAM+1(DSADSNMZ-1),DSADSNAM
         LA    R2,44                   DSN length
         LR    R3,R7                   copy DSN address
*
SYSPO40  DS    0H
         CLI   0(R3),BLANK             DSN end?
         BE    SYSPO50                 yes, carry on
         LA    R3,1(,R3)               walk thru text
         BCT   R2,SYSPO40              loop
*
SYSPO50  DS    0H
         CLR   R3,R7                   valid DSN?
         BNE   SYSPO60                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0684)    set error RSN
         B     SYSPOPX                 exit
*
SYSPO60  DS    0H
         SLR   R3,R7                   compute DSN length
         BCTR  R3,0                    subtract for EXecute
         EX    R3,COPYPROC             copy SYSPROC DSN
         $MVC  EVTSYSPR,DSADSNAM       override SYSPROC default
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BE    SYSPO70                 yes, showmsg
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SYSPO99                 no, skip msg
*
SYSPO70  DS    0H
         $WTO  MID=ECF030I,                                            +
               VAR1==CL8'SYSPROC',     show DDName                     +
               VAR2=DSADSNAM           show DSName
*
SYSPO99  DS    0H
         XC    DSARC,DSARC             set RC
*
SYSPOPX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYPROC MVC   DSADSNAM(*-*),0(R7)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RUNRUL                                                     */
*/*                                                                  */
*/* Function: RUNAS parameter subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RUNRUL   $SUBINI
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    RUNRL00                 no, test further
         XC    DSARC,DSARC             set RC
         B     RUNRLXT                 exit
*
RUNRL00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid RUNAS operand?
         BNE   RUNRL10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0140)    set error RSN
         B     RUNRLXT                 exit
*
RUNRL10  DS    0H
         CLC   0(4,R7),=CL4'STC'       RUNAS=STC specified?
         BE    RUNRN20                 yes, carry on
         CLC   0(4,R7),=CL4'JOB'       RUNAS=JOB specified?
         BE    RUNRN20                 yes, carry on
         CLC   0(4,R7),=CL4'SUB'       RUNAS=SUB specified?
         BE    RUNRN20                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0144)    set error RSN
         B     RUNRLXT                 exit
*
RUNRN20  DS    0H
         $MVC  EVTRUNAS,0(R7)          save RUNAS operand value
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BNE   RUNRN30                 no, carry on
         CLC   EVTRUNAS,=CL3'SUB'      RUNAS=SUB specified?
         BE    RUNRN30                 yes, carry on
         $MVC  EVTRUNAS,=CL3'SUB'      no, set RUNAS=SUB default
*
RUNRN30  DS    0H
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    RUNRN40                 no, skip msg
         $WTO  MID=ECF008I,                                            +
               VAR1=EVTRUNAS           show RUNAS value
*
RUNRN40  DS    0H
         XC    DSARC,DSARC             set RC
*
RUNRLXT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: EVNTDF                                                     */
*/*                                                                  */
*/* Function: RULE parameter subroutine                              */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
EVNTDF   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    EVNTD00                 no, test further
         XC    DSARC,DSARC             set RC
         B     EVNTDXT                 exit
*
EVNTD00  DS    0H
         ICM   R6,15,EVTRTBAD          RTB init?
         BNZ   EVNTD02                 yes, carry on
         $WTO  MID=ECF056E             no, error
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0248)    set error RSN
         B     EVNTDXT                 exit
*
EVNTD02  DS    0H
         L     R6,EVTRTBAD             RTB address
         USING RTB,R6                  RTB addressability
         L     R2,RTBCURR              get current RTBE address
         CL    R2,RTBTEND              end of RTB table?
         BL    EVNTD05                 yes, ABEND
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0244)    set error RSN
         $WTO  MID=ECF005E,VAR1=DSARSN
         B     EVNTDXT                 exitD
*
EVNTD05  DS    0H
         LR    R6,R2                   RTBE address
         USING RTBE,R6                 RTBE addressability
         ST    R6,DSARTBE              save RTBE address
         MVC   RTBEID,=CL4'RTBE'       ID RTBE
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid RULE operand?
         BNE   EVNTD10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0220)    set error RSN
         B     EVNTDXT                 exit
*
EVNTD10  DS    0H
         LA    R3,8                    max rule name length
         LR    R4,R7                   current record address
         MVI   RTBEMEMB,BLANK          scrub rule member name
         MVC   RTBEMEMB+1(RTBEMEMZ-1),RTBEMEMB
*
EVNTD20  DS    0H
         CLI   0(R4),C','              end of rule member name?
         BE    EVNTD30                 yes, test further
         LA    R4,1(,R4)               next byte
         BCT   R3,EVNTD20              loop
*
EVNTD30  DS    0H
         LR    R2,R4                   current record address
         SLR   R2,R7                   rule member name length
         BCTR  R2,0                    decrement for EXecute
         EX    R2,COPYEVNT             save rule member name
         CLI   RTBEMEMB,C'@'           valid name?
         BE    EVNTD38                 yes, test further
         CLI   RTBEMEMB,C'#'           valid name?
         BE    EVNTD38                 yes, test further
         CLI   RTBEMEMB,C'$'           valid name?
         BE    EVNTD38                 yes, test further
         CLI   RTBEMEMB,C'A'           valid name?
         BNL   EVNTD38                 no, error
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0236)    set error RSN
         B     EVNTDXT                 exit
*
EVNTD38  DS    0H
         CLC   0(12,R4),=CL12',MODE=ACTIVE' active mode?
         BE    EVNTD40                 yes, test further
         CLC   0(14,R4),=CL14',MODE=INACTIVE' inactive mode?
         BE    EVNTD50                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0224)    set error RSN
         B     EVNTDXT                 exit
*
EVNTD40  DS    0H
         OI    RTBEFLG1,RTBE@ACT       set active mode
         LA    R4,12(,R4)              next operand address
         B     EVNTD60                 test further
*
EVNTD50  DS    0H
         NI    RTBEFLG1,XFF-RTBE@ACT   set inactive mode
         LA    R4,14(,R4)              next operand address
*
EVNTD60  DS    0H
         MVC   RTBERUNS,EVTRUNAS       set RUNAS default
         CLI   0(R4),C','              valid separator?
         BE    EVNTD65                 yes, carry on
         CLI   0(R4),C' '              valid separator?
         BE    EVNTD90                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0228)    set error RSN
         B     EVNTDXT                 exit
*
EVNTD65  DS    0H
         CLC   0(11,R4),=CL11',RUNAS=STC'
         BNE   EVNTD70                 no, test further
         MVC   RTBERUNS,=CL3'STC'      run EVENT as started task
         B     EVNTD90                 carry on
*
EVNTD70  DS    0H
         CLC   0(11,R4),=CL11',RUNAS=SUB'
         BNE   EVNTD72                 no, test further
         MVC   RTBERUNS,=CL3'SUB'      run EVENT in subsystem
         B     EVNTD90                 carry on
*
EVNTD72  DS    0H
         MVC   RTBEJOBN,RTBEMEMB       set JOBNAME default
         CLC   0(10,R4),=CL10',RUNAS=JOB'
         BNE   EVNTD85                 no, error
         MVC   RTBERUNS,=CL3'JOB'      run EVENT as batch job
         LA    R4,10(,R4)              next operand address
         CLI   0(R4),C' '              end of operands?
         BE    EVNTD90                 yes, carry on
         CLC   0(9,R4),=CL9',JOBNAME=' valid operand?
         BE    EVNTD74                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0230)    set error RSN
         B     EVNTDXT                 exit
*
EVNTD74  DS    0H
         LA    R4,9(,R4)               next operand address
         CLI   0(R4),C' '              valid operand data?
         BNE   EVNTD76                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0234)    set error RSN
         B     EVNTDXT                 exit
*
EVNTD76  DS    0H
         LA    R2,8                    jobname loop value
         LR    R1,R4                   copy operand address
         MVI   RTBEJOBN,BLANK          scrub rule jobname
         MVC   RTBEJOBN+1(RTBEJOBZ-1),RTBEJOBN
*
EVNTD78  DS    0H
         CLI   0(R4),C' '              end jobnmae?
         BE    EVNTD80                 yes, carry on
         LA    R1,1(,R1)               walk thru text
         BCT   R2,EVNTD78              loop
*
EVNTD80  DS    0H
         SLR   R1,R4                   compute jobname length
         BCTR  R1,0                    decrement for execute
         EX    R1,COPYJOBN             extract jobname
         B     EVNTD90                 carry on
*
EVNTD85  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0232)    set error RSN
         B     EVNTDXT                 exit
*
EVNTD90  DS    0H
         USING PSA,0
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BNE   EVNTD99                 no, carry on
         CLC   RTBERUNS,=CL3'SUB'      yes, RUNAS=SUB set?
         BE    EVNTD99                 yes, carry on
         OI    RTBEFLG1,RTBE@DIS       set disable indicator
         NI    RTBEFLG1,XFF-RTBE@ACT   set inactive indicator
         DROP  0
*
EVNTD99  DS    0H
         L     R6,EVTRTBAD             get RTB address
         USING RTB,R6                  RTB addressability
         L     R2,RTBENTY              number of RTBEs in use
         LA    R2,1(,R2)               add one
         ST    R2,RTBENTY              update count
         L     R2,DSARTBE              get RTBE address
         LA    R2,RTBE@SZE(,R2)        get next RTBE address
         ST    R2,RTBCURR              make it current
         L     R6,DSARTBE              get RTBE address
         USING RTBE,R6                 RTBE addressability
*
         XC    DSARC,DSARC             set RC
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    EVNTDXT                 no, skip msg
         $WTO  MID=ECF006I,VAR1=DSARECR
*
EVNTDXT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYEVNT MVC   RTBEMEMB(*-*),0(R7)     EXecuted instruction
COPYJOBN MVC   RTBEJOBN(*-*),0(R4)     EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: REBCPL                                                     */
*/*                                                                  */
*/* Function: REBPOOL parameter subroutine                           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
REBCPL   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    REBCPL0                 no, test further
         XC    DSARC,DSARC             set RC
         B     REBCPLX                 exit
*
REBCPL0  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),OPAREN            valid REBPOOL operand?
         BE    REBCP10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0188)    set error RSN
         B     REBCPLX                 exit
*
REBCP10  DS    0H
         CLI   6(R7),CPAREN            valid REBPOOL operand?
         BE    REBCP20                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0192)    set error RSN
         B     REBCPLX                 exit
*
REBCP20  DS    0H
         CLI   3(R7),COMMA             valid REBPOOL value separator?
         BE    REBCP30                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0476)    set error RSN
         B     REBCPLX                 exit
*
REBCP30  DS    0H
         PACK  DSADWRD,1(2,R7)         pack REBPOOL cells
         CVB   R1,DSADWRD              convert it to binary
         $ST   R1,EVTREBCL             init primary cells
         PACK  DSADWRD,4(2,R7)         pack REBPOOL extents
         CVB   R1,DSADWRD              convert it to binary
         $ST   R1,EVTREBXT             init secondary extents
*
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    REBCP40                 no, skip msg
         $WTO  MID=ECF009I,                                            +
               VAR1==CL7'REBPOOL',     show cell pool type             +
               VAR2=EVTREBCL,          show hex cells                  +
               VAR3=EVTREBXT           show hex extents
*
REBCP40  DS    0H
         XC    DSARC,DSARC             set RC
*
REBCPLX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SRBCPL                                                     */
*/*                                                                  */
*/* Function: SRBPOOL parameter subroutine                           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SRBCPL   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    SRBCPL0                 no, test further
         XC    DSARC,DSARC             set RC
         B     SRBCPLX                 exit
*
SRBCPL0  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),OPAREN            valid SRBPOOL operand?
         BE    SRBCP10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0464)    set error RSN
         B     SRBCPLX                 exit
*
SRBCP10  DS    0H
         CLI   6(R7),CPAREN            valid SRBPOOL operand?
         BE    SRBCP20                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0468)    set error RSN
         B     SRBCPLX                 exit
*
SRBCP20  DS    0H
         CLI   3(R7),COMMA             valid SRBPOOL value separator?
         BE    SRBCP30                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0472)    set error RSN
         B     SRBCPLX                 exit
*
SRBCP30  DS    0H
         PACK  DSADWRD,1(2,R7)         pack SRBPOOL cells
         CVB   R1,DSADWRD              convert it to binary
         $ST   R1,EVTSRBCL             init primary cells
         PACK  DSADWRD,4(2,R7)         pack SRBPOOL extents
         CVB   R1,DSADWRD              convert it to binary
         $ST   R1,EVTSRBXT             init secondary extents
*
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SRBCP40                 no, skip msg
         $WTO  MID=ECF009I,                                            +
               VAR1==CL7'SRBPOOL',     show cell pool type             +
               VAR2=EVTSRBCL,          show hex cells                  +
               VAR3=EVTSRBXT           show hex extents
*
SRBCP40  DS    0H
         XC    DSARC,DSARC             set RC
*
SRBCPLX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SRECPL                                                     */
*/*                                                                  */
*/* Function: SREPOOL parameter subroutine                           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SRECPL   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    SRECPL0                 no, test further
         XC    DSARC,DSARC             set RC
         B     SRECPLX                 exit
*
SRECPL0  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),OPAREN            valid SREPOOL operand?
         BE    SRECP10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0564)    set error RSN
         B     SRECPLX                 exit
*
SRECP10  DS    0H
         CLI   6(R7),CPAREN            valid SREPOOL operand?
         BE    SRECP20                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0568)    set error RSN
         B     SRECPLX                 exit
*
SRECP20  DS    0H
         CLI   3(R7),COMMA             valid SREPOOL value separator?
         BE    SRECP30                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0572)    set error RSN
         B     SRECPLX                 exit
*
SRECP30  DS    0H
         PACK  DSADWRD,1(2,R7)         pack SREPOOL cells
         CVB   R1,DSADWRD              convert it to binary
         $ST   R1,EVTSRECL             init primary cells
         PACK  DSADWRD,4(2,R7)         pack SREPOOL extents
         CVB   R1,DSADWRD              convert it to binary
         $ST   R1,EVTSREXT             init secondary extents
*
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SRECP40                 no, skip msg
         $WTO  MID=ECF009I,                                            +
               VAR1==CL7'SREPOOL',     show cell pool type             +
               VAR2=EVTSRECL,          show hex cells                  +
               VAR3=EVTSREXT           show hex extents
*
SRECP40  DS    0H
         XC    DSARC,DSARC             set RC
*
SRECPLX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TRCOPT                                                     */
*/*                                                                  */
*/* Function: TRACE parameter subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TRCOPT   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    TRCOP00                 no, test further
         TM    STKFLG1,STK@TPRM        TRACE= specified by JCL PARM?
         BNZ   TRCOP25                 yes, exit
         $NI   EVTFLG2,XFF-EVT@TRCE    set TRACE=OFF default
         B     TRCOP25                 exit
*
TRCOP00  DS    0H
         TM    STKFLG1,STK@TPRM        TRACE= specified by JCL PARM?
         BNZ   TRCOP25                 yes, exit
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid TRACE operand?
         BNE   TRCOP10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0152)    set error RSN
         B     TRCOPTX                 exit
*
TRCOP10  DS    0H
         CLC   0(3,R7),=CL3'ON'        TRACE=ON specified?
         BNE   TRCOP20                 no, test further
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    TRCOP15                 no, skip msg
         $WTO  MID=ECF019I,            issue msg                       +
               VAR1==CL5'TRACE',       show option name                +
               VAR2==CL3'ON'           show TRACE=ON specified
*
TRCOP15  DS    0H
         OI    STKFLG1,STK@TRCE        set TRACE=ON
         $OI   EVTFLG2,EVT@TRCE        set TRACE=ON
         XC    DSARC,DSARC             set RC
         B     TRCOPTX                 exit
*
TRCOP20  DS    0H
         CLC   0(4,R7),=CL4'OFF'       TRACE=OFF specified?
         BNE   TRCOP30                 no, error
         NI    STKFLG1,XFF-STK@TRCE    set TRACE=OFF
         $NI   EVTFLG2,XFF-EVT@TRCE    set TRACE=OFF
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    TRCOP25                 no, skip msg
         $WTO  MID=ECF019I,            issue msg                       +
               VAR1==CL5'TRACE',       show option name                +
               VAR2==CL3'OFF'          show TRACE=OFF specified
*
TRCOP25  DS    0H
         XC    DSARC,DSARC             set RC
         B     TRCOPTX                 exit
*
TRCOP30  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0156)    set error RSN
*
TRCOPTX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DBGOPT                                                     */
*/*                                                                  */
*/* Function: DEBUG parameter subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DBGOPT   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    DBGOP00                 no, test further
         TM    STKFLG1,STK@DPRM        DEBUG= specified by JCL PARM?
         BNZ   DBGOP25                 yes, exit
         NI    STKFLG1,XFF-STK@DBUG    set DEBUG=OFF default
         $NI   EVTFLG2,XFF-EVT@DBUG    set DEBUG=OFF default
         B     DBGOP25                 exit
*
DBGOP00  DS    0H
         TM    STKFLG1,STK@DPRM        DEBUG= specified by JCL PARM?
         BNZ   DBGOP25                 yes, exit
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid DEBUG operand?
         BNE   DBGOP10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0160)    set error RSN
         B     DBGOPTX                 exit
*
DBGOP10  DS    0H
         CLC   0(3,R7),=CL3'ON'        DEBUG=ON specified?
         BNE   DBGOP20                 no, test further
         OI    STKFLG1,STK@DBUG        set DEBUG=ON
         $OI   EVTFLG2,EVT@DBUG        set DEBUG=ON
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    DBGOP15                 no, skip msg
         $WTO  MID=ECF019I,            issue msg                       +
               VAR1==CL5'DEBUG',       show option name                +
               VAR2==CL3'ON'           show DEBUG=ON specified
*
DBGOP15  DS    0H
         XC    DSARC,DSARC             set RC
         B     DBGOPTX                 exit
*
DBGOP20  DS    0H
         CLC   0(4,R7),=CL4'OFF'       DEBUG=OFF specified?
         BNE   DBGOP30                 no, error
         NI    STKFLG1,XFF-STK@DBUG    set DEBUG=OFF default
         $NI   EVTFLG2,XFF-EVT@DBUG    set DEBUG=OFF
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    DBGOP25                 no, skip msg
         $WTO  MID=ECF019I,            issue msg                       +
               VAR1==CL5'DEBUG',       show option name                +
               VAR2==CL3'OFF'          show DEBUG=OFF specified
*
DBGOP25  DS    0H
         XC    DSARC,DSARC             set RC
         B     DBGOPTX                 exit
*
DBGOP30  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0164)    set error RSN
*
DBGOPTX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MASTER                                                     */
*/*                                                                  */
*/* Function: MSAS parameter subroutinee                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MASTER   $SUBINI
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    MASTR00                 no, test further
         $NI   EVTFLG4,XFF-EVT@MSAS    set MSAS=ONLY default
         MVC   DSAMSAS,=CL4'ONLY'      set option default
         B     MASTR40                 exit
*
MASTR00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid MSAS operand?
         BNE   MASTR10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0174)    set error RSN
         B     MASTRTX                 exit
*
MASTR10  DS    0H
         CLC   0(5,R7),=CL5'TEST'      MSAS=TEST specified?
         BNE   MASTR20                 no, test further
         MVC   DSAMSAS,0(R7)           copy option value
         $OI   EVTFLG4,EVT@MSAS        set MSAS=TEST
         B     MASTR40                 exit
*
MASTR20  DS    0H
         CLC   0(5,R7),=CL5'ONLY'      MSAS=ONLY specified?
         BNE   MASTR99                 no, error
         MVC   DSAMSAS,0(R7)           copy option value
         $NI   EVTFLG4,XFF-EVT@MSAS    set MSAS=ONLY
*
MASTR40  DS    0H
         CLC   PSAAOLD,EVTMSAS         MSAS caller?
         BE    MASTR50                 yes, show msg
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    MASTR60                 no, skip msg
*
MASTR50  DS    0H
         $WTO  MID=ECF055I,            issue msg                       +
               VAR1=DSAMSAS            show option value
*
MASTR60  DS    0H
         XC    DSARC,DSARC             set RC
         B     MASTRTX                 exit
*
MASTR99  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0182)    set error RSN
*
MASTRTX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DMPOPT                                                     */
*/*                                                                  */
*/* Function: SDUMP parameter subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DMPOPT   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    DMPOP00                 no, test further
         NI    STKFLG2,XFF-STK@DUMP    set SDUMP=NO local default
         $NI   EVTFLG2,XFF-EVT@DUMP    set SDUMP=NO global default
         XC    DSARC,DSARC             set RC
         B     DMPOPTX                 exit
*
DMPOP00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid SDUMP operand?
         BNE   DMPOP10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0162)    set error RSN
         B     DMPOPTX                 exit
*
DMPOP10  DS    0H
         CLC   0(4,R7),=CL4'YES'       SDUMP=YES specified?
         BNE   DMPOP20                 no, test further
         OI    STKFLG2,STK@DUMP        set SDUMP=YES locally
         $OI   EVTFLG2,EVT@DUMP        set SDUMP=YES globally
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    DMPOP15                 no, skip msg
         $WTO  MID=ECF019I,            issue msg                       +
               VAR1==CL5'SDUMP',       show option name                +
               VAR2==CL3'YES'          show SDUMP=YES
*
DMPOP15  DS    0H
         XC    DSARC,DSARC             set RC
         B     DMPOPTX                 exit
*
DMPOP20  DS    0H
         CLC   0(3,R7),=CL3'NO'        SDUMP=NO specified?
         BNE   DMPOP30                 no, error
         $NI   STKFLG2,XFF-STK@DUMP    set SDUMP=NO locally
         $NI   EVTFLG2,XFF-EVT@DUMP    set SDUMP=NO globaly
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    DMPOP25                 no, skip msg
         $WTO  MID=ECF019I,            issue msg                       +
               VAR1==CL5'SDUMP',       show option name                +
               VAR2==CL3'NO'           show SDUMP=NO
*
DMPOP25  DS    0H
         XC    DSARC,DSARC             set RC
         B     DMPOPTX                 exit
*
DMPOP30  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0166)    set error RSN
*
DMPOPTX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SHWREB                                                     */
*/*                                                                  */
*/* Function: SHOWREB parse output subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SHWREB   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    SHREB00                 no, test further
         $NI   EVTFLG2,XFF-EVT@EDSP    set SHOWREB=NO default
         XC    DSARC,DSARC             set RC
         B     SHREBTX                 exit
*
SHREB00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid SHOWREB operand?
         BNE   SHREB10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0608)    set error RSN
         B     SHREBTX                 exit
*
SHREB10  DS    0H
         CLC   0(4,R7),=CL4'YES'       SHOWREB=YES spcified?
         BNE   SHREB20                 no, test further
         $OI   EVTFLG2,EVT@EDSP        set SHOWREB=YES
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SHREB15                 no, skip msg
         $WTO  MID=ECF042I,            issue msg                       +
               VAR1==CL3'YES',         show SHOWREB=YES specified      +
               VAR2==CL10' '           show null variable
*
SHREB15  DS    0H
         XC    DSARC,DSARC             set RC
         B     SHREBTX                 exit
*
SHREB20  DS    0H
         CLC   0(3,R7),=CL3'NO'        SHOWREB=NO specified?
         BNE   SHREB30                 no, error
         $NI   EVTFLG2,XFF-EVT@EDSP    set SHOWREB=NO
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    SHREB25                 no, skip msg
         $WTO  MID=ECF042I,            issue msg                       +
               VAR1==CL3'NO',          show SHOWREB=NO specified       +
               VAR2==CL10' '           show null variable
*
SHREB25  DS    0H
         XC    DSARC,DSARC             set RC
         B     SHREBTX                 exit
*
SHREB30  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0612)    set error RSN
*
SHREBTX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: CMPWTO                                                     */
*/*                                                                  */
*/* Function: CAPASTO option parse subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
CMPWTO   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    COMPW00                 no, test further
         $OI   EVTFLG4,EVT@CWTO        set COMPWTO=NO default
         $OI   STKFLG1,STK@CWTO        set COMPWTO=NO default      @02A
         XC    DSARC,DSARC             set RC
         B     COMPWTX                 exit
*
COMPW00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid COMPWTO operand?
         BNE   COMPW10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         B     COMPWTX                 exit
*
COMPW10  DS    0H
         CLC   0(4,R7),=CL4'YES'       COMPWTO=YES spcified?
         BNE   COMPW20                 no, test further
         $NI   EVTFLG4,XFF-EVT@CWTO    set COMPWTO=YES
         $NI   STKFLG1,XFF-STK@CWTO    set COMPWTO=YES             @02A
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    COMPW15                 no, skip msg
         $WTO  MID=ECF057I,            issue msg                       +
               VAR1==CL3'YES',         show COMPWTO=YES specified      +
               VAR2==CL10' '           show null variable
*
COMPW15  DS    0H
         XC    DSARC,DSARC             set RC
         B     COMPWTX                 exit
*
COMPW20  DS    0H
         CLC   0(3,R7),=CL3'NO'        COMPWTO=NO specified?
         BNE   COMPW30                 no, error
         $OI   EVTFLG4,EVT@CWTO        set COMPWTO=NO
         $OI   STKFLG1,STK@CWTO        set COMPWTO=NO              @02A
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    COMPW25                 no, skip msg
         $WTO  MID=ECF057I,            issue msg                       +
               VAR1==CL3'NO',          show COMPWTO=NO specified       +
               VAR2==CL10' '           show null variable
*
COMPW25  DS    0H
         XC    DSARC,DSARC             set RC
         B     COMPWTX                 exit
*
COMPW30  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
*
COMPWTX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: Q10ENQ                                                     */
*/*                                                                  */
*/* Function: Q10LOCK option parse subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
Q10ENQ   $SUBINI                                                 99@04A
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    Q10LK00                 no, test further
         $NI   EVTFLG4,XFF-EVT@CSCB    set Q10LOCK=NO default
         XC    DSARC,DSARC             set RC
         B     Q10LKTX                 exit
*
Q10LK00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid Q10LKTO operand?
         BNE   Q10LK10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         B     Q10LKTX                 exit
*
Q10LK10  DS    0H
         CLC   0(4,R7),=CL4'YES'       Q10LOCK=YES spcified?
         BNE   Q10LK20                 no, test further
         $OI   EVTFLG4,EVT@CSCB        set Q10LOCK=YES option
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    Q10LK15                 no, skip msg
         $WTO  MID=ECF073I,            issue msg                       +
               VAR1==CL3'YES'          show Q10LOCK=YES specified
*
Q10LK15  DS    0H
         XC    DSARC,DSARC             set RC
         B     Q10LKTX                 exit
*
Q10LK20  DS    0H
         CLC   0(3,R7),=CL3'NO'        Q10LOCK=NO specified?
         BNE   Q10LK30                 no, error
         $NI   EVTFLG4,XFF-EVT@CSCB    set Q10LOCK=NO
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    Q10LK25                 no, skip msg
         $WTO  MID=ECF073I,            issue msg                       +
               VAR1==CL3'NO'           show Q10LOCK=NO specified
*
Q10LK25  DS    0H
         XC    DSARC,DSARC             set RC
         B     Q10LKTX                 exit
*
Q10LK30  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
*
Q10LKTX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: PRSIST                                                     */
*/*                                                                  */
*/* Function: PERSIST option parse subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
PRSIST   $SUBINI                                                 99@05A
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    PRSIS00                 no, test further
         $OI   EVTFLG5,EVT@EXIT        set PERSIST=YES default
         XC    DSARC,DSARC             set RC
         B     PRSISTX                 exit
*
PRSIS00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid PERSIST operand?
         BNE   PRSIS10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         B     PRSISTX                 exit
*
PRSIS10  DS    0H
         CLC   0(4,R7),=CL4'YES'       PERSIST=YES spcified?
         BNE   PRSIS20                 no, test further
         $OI   EVTFLG5,EVT@EXIT        set PERSIST=YES option
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    PRSIS15                 no, skip msg
         $WTO  MID=ECF076I,            issue msg                       +
               VAR1==CL3'YES'          show PERSIST=YES specified
*
PRSIS15  DS    0H
         XC    DSARC,DSARC             set RC
         B     PRSISTX                 exit
*
PRSIS20  DS    0H
         CLC   0(3,R7),=CL3'NO'        PERSIST=NO specified?
         BNE   PRSIS30                 no, error
         $NI   EVTFLG5,XFF-EVT@EXIT    set PERSIST=NO
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    PRSIS25                 no, skip msg
         $WTO  MID=ECF076I,            issue msg                       +
               VAR1==CL3'NO'           show PERSIST=NO specified
*
PRSIS25  DS    0H
         XC    DSARC,DSARC             set RC
         B     PRSISTX                 exit
*
PRSIS30  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
*
PRSISTX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: CAPDTA                                                     */
*/*                                                                  */
*/* Function: CAPTURE option parse subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
CAPDTA   $SUBINI
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    CAPAS10                 no, test further
         $NI   EVTFLG4,XFF-EVT@ACAP    set CAPTURE=NO default
         XC    DSARC,DSARC             set RC
         B     CAPASXT                 exit
*
CAPAS10  DS    0H
         MVC   DSARC,=AL4(RC12)        initial RC
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid CAPTURE operand?
         BE    CAPASXT                 no, exit
         CLC   0(4,R7),=CL4'YES'       CAPRURE=YES spcified?
         BNE   CAPAS20                 no, test further
         $OI   EVTFLG4,EVT@ACAP        set CAPTURE=YES
         XC    DSARC,DSARC             set RC
*
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    CAPASXT                 no, exit
         $WTO  MID=ECF065I,            issue msg                       +
               VAR1==CL3'YES',         show CAPTURE=YES specified      +
               VAR2==CL10' '           show null variable
         B     CAPASXT                 exit
*
CAPAS20  DS    0H
         CLC   0(3,R7),=CL3'NO'        CAPTURE=NO specified?
         BNE   CAPASXT                 no, exit
         $NI   EVTFLG4,XFF-EVT@ACAP    set CAPTURE=NO
         XC    DSARC,DSARC             set RC
*
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    CAPASXT                 no, exit
         $WTO  MID=ECF065I,            issue msg                       +
               VAR1==CL3'NO',          show CAPTURE=NO specified       +
               VAR2==CL10' '           show null variable
*
CAPASXT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: IEFREQ                                                     */
*/*                                                                  */
*/* Function: SSREQ parameter subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
IEFREQ   $SUBINI
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    IEFOP00                 no, test further
         $MVC  EVTSSREQ,=CL3'NO'       set SSREQ=NO default
         $NI   EVTFLG2,XFF-EVT@SREQ    set default flag
         XC    DSARC,DSARC             set RC
         B     IEFOPTX                 exit
*
IEFOP00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid SSREQ operand?
         BNE   IEFOP10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0532)    set error RSN
         B     IEFOPTX                 exit
*
IEFOP10  DS    0H
         CLC   0(4,R7),=CL4'YES'       SSREQ=YES specified?
         BNE   IEFOP30                 no, test further
         $MVC  EVTSSREQ,=CL3'YES'      set SSREQ=YES      t
         $OI   EVTFLG2,EVT@SREQ        set indicator
         CLC   PSAAOLD,EVTMSAS         MSAS caller?
         BE    IEFOP15                 yes, show msg
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    IEFOP20                 no, skip msg
*
IEFOP15  DS    0H
         $WTO  MID=ECF019I,            issue msg                       +
               VAR1==CL5'SSREQ',       show option name                +
               VAR2==CL3'YES'          show SSREQ=YES specified
*
IEFOP20  DS    0H
         XC    DSARC,DSARC             set RC
         B     IEFOPTX                 exit
*
IEFOP30  DS    0H
         CLC   0(3,R7),=CL3'NO'        SSREQ=NO specified?
         BNE   IEFOP99                 no, error
         $MVC  EVTSSREQ,=CL3'NO'       set SSREQ=NO
         $NI   EVTFLG2,XFF-EVT@SREQ    set indicator
         CLC   PSAAOLD,EVTMSAS         MSAS caller?
         BE    IEFOP35                 yes, show msg
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    IEFOP40                 no, skip msg
*
IEFOP35  DS    0H
         $WTO  MID=ECF019I,            issue msg                       +
               VAR1==CL5'SSREQ',       show option name                +
               VAR2==CL3'NO'           show SSREQ=NO specified
*
IEFOP40  DS    0H
         XC    DSARC,DSARC             set RC
         B     IEFOPTX                 exit
*
IEFOP99  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0536)    set error RSN
*
IEFOPTX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DTIMER                                                     */
*/*                                                                  */
*/* Function: TIMER parameter subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DTIMER   $SUBINI
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    DTIMR00                 no, test further
         $XC   EVTDINTV,EVTDINTV       set TIMER=0 default
         $NI   EVTFLG3,XFF-EVT@TIMR    set default flag
         XC    DSARC,DSARC             set RC
         B     DTIMRTX                 exit
*
DTIMR00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid TIMER operand?
         BNE   DTIMR10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN1072)    set error RSN
         B     DTIMRTX                 exit
*
DTIMR10  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN1076)    set error RSN
         CLI   2(R7),BLANK             TIMER=value GT 2 digits?
         BNE   DTIMRTX                 yes, error
         CLI   1(R7),BLANK             TIMER=value LT 2 digits?
         BE    DTIMRTX                 yes, error
         MVC   DSATIMR,0(R7)           copy TIMER interval
         CLC   DSATIMR,=CL2'00'        null timer?
         BE    DTIMR99                 yes, timer=0 default
         CLC   DSATIMR,=CL2'60'        TIMER=value GT 60?
         BNH   DTIMR15                 no, carry on
         MVC   DSARSN,=AL4(RSN1080)    set error RSN
         B     DTIMRTX                 error
*
DTIMR15  DS    0H
         MVC   DSATIMER,XTIMER         timer model
         MVC   DSATIMSS,DSATIMR        set timer value
         PACK  DSADWRD,DSATIMR         pack TIMER interval
         CVB   R1,DSADWRD              convert it to binary
         $ST   R1,EVTDINTV             init TIMER interval
         $MVC  EVTXINTV,DSATIMER       init TIMER interval
         $OI   EVTFLG3,EVT@TIMR        set indicator
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    DTIMR99                 no, skip msg
         $WTO  MID=ECF058I,VAR1=DSATIMR show TIMER value
*
DTIMR99  DS    0H
         XC    DSARC,DSARC             set RC
*
DTIMRTX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
XTIMER   DC    CL8'00000000'           timer mask hhmmssth
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MONTIMER                                                   */
*/*                                                                  */
*/* Function: MONTIMER parameter subroutine                          */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MTIMER   $SUBINI                                                 99@04A
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    MTIMR00                 no, test further
         $MVC  EVTSYSTM,MONTIMER       set MONTIMER=10 default
         XC    DSARC,DSARC             set RC
         B     MTIMRTX                 exit
*
MTIMR00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid MONTIMER operand?
         BNE   MTIMR10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN1074)    set error RSN
         B     MTIMRTX                 exit
*
MTIMR10  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN1078)    set error RSN
         CLI   2(R7),BLANK             MONTIMER=value GT 2 digits?
         BNE   MTIMRTX                 yes, error
         CLI   1(R7),BLANK             MONTIMER=value LT 2 digits?
         BE    MTIMRTX                 yes, error
         MVC   DSATIMR,0(R7)           copy MONTIMER interval
         CLC   DSATIMR,=CL2'00'        null timer?
         BE    MTIMR15                 yes, error
         CLC   DSATIMR,=CL2'60'        MONTIMER=value GT 60?
         BNH   MTIMR20                 no, carry on
*
MTIMR15  DS    0H
         MVC   DSARSN,=AL4(RSN1082)    set error RSN
         B     MTIMRTX                 error
*
MTIMR20  DS    0H
         MVC   DSATIMER,MONTIMER       timer model
         MVC   DSATIMSS,DSATIMR        set timer value
         $MVC  EVTSYSTM,DSATIMER       init MONTIMER interval
*
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    MTIMR99                 no, skip msg
         $WTO  MID=ECF074I,VAR1=DSATIMR
*
MTIMR99  DS    0H
         XC    DSARC,DSARC             set RC
*
MTIMRTX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
MONTIMER DC    CL8'00001000'           MONTIMER=10 default
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MONMSG                                                     */
*/*                                                                  */
*/* Function: MONMSGCT parameter subroutine                          */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MONMSG   $SUBINI                                                 99@04A
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    MONMS00                 no, test further
         $MVC  EVTMSGCT,=F'16'         set MONMSGCT=16 default
         XC    DSARC,DSARC             set RC
         B     MONMSGX                 exit
*
MONMS00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid MONMSGCT operand?
         BNE   MONMS10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0876)    set error RSN
         B     MONMSGX                 exit
*
MONMS10  DS    0H
         CLI   4(R7),BLANK             valid MONMSGCT?
         BE    MONMS20                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0880)    set error RSN
         B     MONMSGX                 exit
*
MONMS20  DS    0H
         MVC   DSAMSGCT,0(R7)          copy MONMSGCT value
         MVC   DSADWRD,MONUMBER        move zones
         MVN   DSADWRD(4),DSAMSGCT     move numerics
         CLC   DSADWRD(4),DSAMSGCT     valid MONMSGCT value?
         BE    MONMS30                 yes
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0884)    set error RSN
         B     MONMSGX                 exit
*
MONMS30  DS    0H
         PACK  DSADWRD,DSAMSGCT        pack MONMSGCT
         CVB   R1,DSADWRD              convert it to binary
         LTR   R1,R1                   valid MONMSGCT?
         BNZ   MONMS40                 yes
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0888)    set error RSN
         B     MONMSGX                 exit
*
MONMS40  DS    0H
         $ST   R1,EVTMSGCT             init MONMSGCT value
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    MONMS99                 no, skip msg
         $WTO  MID=ECF075I,VAR1=DSAMSGCT
*
MONMS99  DS    0H
         XC    DSARC,DSARC             set RC
*
MONMSGX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
MONUMBER DC    CL8'00000000'           numerics
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RPLYID                                                     */
*/*                                                                  */
*/* Function: REPLYID parameter subroutine                           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RPLYID   $SUBINI
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    REPLY00                 no, test further
         $MVC  EVTREPLY,=F'2'          REPLYID=2 default
         XC    DSARC,DSARC             set RC
         B     REPLYXT                 exit
*
REPLY00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLI   0(R7),BLANK             valid REPLYID operand?
         BNE   REPLY10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0840)    set error RSN
         B     REPLYXT                 exit
*
REPLY10  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0844)    set error RSN
         CLI   1(R7),BLANK             REPLYID GT one digit?
         BNE   REPLYXT                 yes, error
         MVC   DSAREPLY,0(R7)          copy REPLYID value
         PACK  DSADWRD,DSAREPLY        pack REPLYID value
         CVB   R1,DSADWRD              convert it to binary
         $ST   R1,EVTREPLY             init REPLYID value
*
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    REPLY99                 no, skip msg
         $WTO  MID=ECF064I,VAR1=DSAREPLY show REPLYID value
*
REPLY99  DS    0H
         XC    DSARC,DSARC             set RC
*
REPLYXT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: USRSVC                                                     */
*/*                                                                  */
*/* Function: SVC parameter option subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  record address                                   */
*/*             R8  KEY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
USRSVC   $SUBINI
         USING PSA,0
         USING KEY,R8                  KEY addressability
         USING EVT,R11                 EVT addressability
*
         TM    DSAFLG1,DSA@DEF         process default parm?
         BZ    USRSV00                 no, test further
         $NI   EVTFLG4,XFF-EVT@USVC    not installed
         XC    DSARC,DSARC             set RC
         B     USRSVCX                 exit
*
USRSV00  DS    0H
         LH    R8,KEYSIZE              keyword length
         LA    R7,0(R8,R7)             parm data value
         CLC   0(5,R7),=CL5'NONE'      SVC=NONE?                   @03A
         BNE   USRSV05                 no, test further            @03A
         $NI   EVTFLG4,XFF-EVT@USVC    not installed               @03A
         XC    DSARC,DSARC             set RC                      @03A
         B     USRSVCX                 exit                        @03A
*                                                                  @03A
USRSV05  DS    0H                                                  @03A
         CLI   0(R7),BLANK             valid SVC operand?
         BNE   USRSV10                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN1084)    set error RSN
         B     USRSVCX                 exit
*
USRSV10  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN1088)    set error RSN
         CLI   3(R7),BLANK             SVC=number GT 3 digits?
         BNE   USRSVCX                 yes, error
         MVC   DSASVCN,0(R7)           copy SVC number
         CLC   DSASVCN,=CL3'200'       valid SVC number?
         BL    USRSVCX                 no, error
         CLC   DSASVCN,=CL3'255'       valid SVC number?
         BH    USRSVCX                 no, error
         MVC   DSADWRD,NUMERICS        move zones
         MVN   DSADWRD(3),DSASVCN      move SVC numerics
         CLC   DSADWRD(3),DSASVCN      valid SVC number?
         BNE   USRSVCX                 no, error
         PACK  DSADWRD,DSASVCN         pack SVC number
         CVB   R1,DSADWRD              convert it to binary
         $STC  R1,EVTUSVCN             init SVC number
         $MVC  EVTSVCNM,DSASVCN        init decimal SVC number
         $OI   EVTFLG4,EVT@USVC        set installed indicator
         TM    EVTFLG2,EVT@SHOW        OPT=SHOW set?
         BZ    USRSV99                 no, skip msg
         $WTO  MID=ECF061I,VAR1=DSASVCN show SVC number
*
USRSV99  DS    0H
         XC    DSARC,DSARC             set RC
*
USRSVCX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
NOSVC    DC    CL3'N/A'                SVC=null
NUMERICS DC    CL8'00000000'           numerics
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFREB ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@DEF  EQU   X'80'                   process default parms only
DSA@RTB  EQU   X'40'                   RTB GETMAINd indicator
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSAIPAR  DS    F                       input PARM regs
DSAOPAR  DS    F                       output PARM reg
DSACELL  DS    F                       REB cell address
DSARTBE  DS    F                       RTBE address
         DS    0C
DSAMSAS  DS    CL4                     MSAS={ONLY|TEST}
DSATIMR  DS    CL2                     TIMER={nn}
DSASMFN  DS    CL3                     TRAPSVC=(200-255)
DSASVCN  DS    CL3                     SVC={200-255}
DSAREPLY DS    CL1                     REPLYID={1-4}
DSAMEMN  DS    CL8                     input PARM member name
DSADLOG  DS    CL8                     DBUGLOG status
DSAMSGCT DS    CL4                     MONMSGCT=nnnn value         @04A
         DS    0D
DSADWRD  DS    D                       conversion work area
DSADWRD2 DS    D                       conversion work area
DSATIMER DS    0D                      timer work are
DSATIMHH DS    XL2                     -hh value
DSATIMMM DS    XL2                     -mm value
DSATIMSS DS    XL2                     -ss value
DSATIMTH DS    XL2                     -ss value
DSATIMRL EQU   *-DSATIMR               keet it together
         DS    0F
DSAMGCR  DS    CL96                    MGCR block                  @06A
DSAMGCRL EQU   *-DSAMGCR               MGCR block size             @06A
         DS    0F
DSARECR  DS    CL80                    PARMLIB record
         DS    0F
DSADSNAM DS    CL44                    SYSTSIN DSN
DSADSNMZ EQU   *-DSADSNAM              SYSTSIN DSN length
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*
**       Keyword Table Entry Map
*
KEY      DSECT ,
KEYFLG1  DS    XL1                     keyword flag
KEY@DEF  EQU   X'80'                   -defined keyword
KEY@LST  EQU   X'FF'                   -last keyword entry
KEYVALU  DS    AL1                     keyword data length
KEYSIZE  DS    AL2                     keyword length
KEYEPA   DS    A                       keyword routine EPA
KEYWORD  DS    CL16                    keyword name
KEY@END  EQU   *-KEY                   keyword entry size
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         END
./ ADD NAME=ECFPST   0113-21068-21304-1645-00100-00104-00011-BENMAR  18
ECFPST   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFPST                                                     */
*/*                                                                  */
*/* Function: Event Capture Subsysytem POST Processor                */
*/*                                                                  */
*/* Description: This routine runs in IRB-mode under the Event       */
*/*              Capture subtask specified by the $XMPOST caller.    */
*/*                                                                  */
*/* Input Regs: R0  IQE address                                      */
*/*             R1  ZIRB address (IQEPPARM)                          */
*/*             R13 register save area address                       */
*/*             R14 return address (CVTEXIT)                         */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIRB address                                     */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=0                   */
*/*                                                                  */
*/* Restrictions: Routine runs without a save area.                  */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFPST   $ENTRY SAVE=NO                entry
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 copy base
         USING ECFPST,R10              base addressability
*
**       Check subsystem availability
*
         LR    R7,R1                   ZIRB address
         USING ZIRB,R7                 set addressability
         L     R11,ZIRBEVT             EVT address
         USING EVT,R11                 set addressability
         CLC   EVTID,=CL4'EVT'         valid indeed?
         BE    IRX0000                 yes, carry on
         L     R3,=AL4(RSN0700)        show RSN in R3
         ABEND X'FFA',DUMP,REASON=(R3)                             @02C
*
IRX0000  DS    0H
         USING PSA,0
         TM    EVTFLG1,EVT@TERM        subsystem terminating?
         BNZ   IRXEXIT                 yes, exit
*
**       Post target Event Capture subtask
*
         ICM   R4,15,ZIRBECB           ECB init?
         BNZ   IRX0010                 yes, POST subtask
         L     R3,=AL4(RSN0704)        show RSN in R3
         ABEND X'FFA',DUMP,REASON=(R3)                             @02C
*
IRX0010  DS    0H
         POST  (R4)                    post target ECFSRV subtask
         B     IRXEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
IRXEXIT  DS    0H
         LM    R14,R12,GPR@R14(R13)    restore regs
         BR    R14                     CVTEXIT
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFVT ,
         $ECFEQU ,
         $XMPOST MAP=YES
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         IKJTCB ,
         END
./ ADD NAME=ECFREB   0163-21068-21309-0714-02053-01673-00471-BENMAR  51
ECFREB   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFREB                                                     */
*/*                                                                  */
*/* Function: Event Capture Subsystem Event Rule Processor           */
*/*                                                                  */
*/* Description: Performs the following processing functions:        */
*/*              1. Parse Rule Table Entry (RTBE)                    */
*/*              2. Read Event Rule member                           */
*/*              3. Obtain Rule Event Element (REB) cell             */
*/*              4. Obtain Rule Event Element Extension (REBX) cell  */
*/*              5. Parse Event Rule trigger operands                */
*/*              6. Parse Event Rule EXEC operands                   */
*/*              7. Add Rule Event (REB) cell to staging queue       */
*/*              8. Return to caller                                 */
*/*                                                                  */
*/* Input Regs: R0  FCID                                             */
*/*             R1  member name address                              */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, key=allerkey            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
* @03 | V2R3 | 07292021 | Ben Marino  | Enhanced Event Rule support   *
* @04 | V2R3 | 08022021 | Ben Marino  | Added MONITOR event trigger   *
* @05 | V2R3 | 10272021 | Ben Marino  | Added SVC screening trigger   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFREB   $SRVINI
         USING PSA,0
         USING EVT,R11                 EVT addressability
         STM   R0,R1,DSAIPAR           save PARM regs
*
**       Trace service request entry
*
         $TRACE $SRVINI,                                               +
               MID=ECFREB,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0592)    set error RSN
         $RETRY REBEXIT,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Extract input parameters
*
         L     R1,DSAIGR1              get parm reg
         MVC   DSAMEMBR,0(R1)          copy member name
         MVC   DSARTBAD,STKRTBAD       copy RTB address
         CLC   DSAMEMBR,EVTINITP       initialization call?
         BNE   REB0000                 no, carry on
         MVC   DSAMEMBR,EVTMASTR       yes, copy init member name
         OI    DSAFLG1,DSA@INIT        set init call indicator
*
**       Validity check RTB Table
*
REB0000  DS    0H
         ICM   R5,15,DSARTBAD          RTB address init?
         BNZ   REB0005                 yes, carry on
         $WTO  MID=ECF029I,            no event rules found            +
               VAR1=DSAMEMBR           show member name
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0264)    set error RSN
         B     REBEXIT                 exit
*
REB0005  DS    0H
         USING RTB,R5                  RTB addressability
         CLC   RTBID,=CL4'RTB'         valid indeed?
         BE    REB0010                 yes, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0252)    set error RSN
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    REBEXIT                 no, skip debug msg
         $WTO  MID=ECF103I,            no init event rules found       +
               VAR1==CL4'RTB',         show block name                 +
               VAR2=DSARSN             show RSN
         B     REBEXIT                 exit
*
**       Validity check RTBE table entry
*
REB0010  DS    0H
         ICM   R4,15,RTBENTY           any RTBEs?
         BNZ   REB0020                 yes, carry on
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         $WTO  MID=ECF029I,            no event rules found            +
               VAR1=DSAMEMBR           show member name
         B     REBEXIT                 exit
*
REB0020  DS    0H
         LA    R6,RTB@SIZE(,R5)        RTBE address
         USING RTBE,R6                 RTBE addressability
*
REB0030  DS    0H
         CLC   RTBEID,=CL4'RTBE'       valid indeed?
         BE    REB0040                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0256)    set error RSN
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    REBEXIT                 no, skip debug msg
         $WTO  MID=ECF103I,            no init event rules found   @02A+
               VAR1==CL4'RTBE',        show block name                 +
               VAR2=DSARSN             show RSN
         B     REBEXIT                 exit
*
**       Read specified Event Rule member
*
REB0040  DS    0H
         LA    R1,DSAZIO               ZIO block address
         USING ZIO,R1                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVC   ZIOMEMBR,RTBEMEMB       member name
         MVC   ZIOPRLIB,STKPRLIB       I/O buffer address
         MVC   ZIOPRBUF,STKPRBUF       I/O buffer size
         MVC   ZIOPREND,STKPREND       I/O buffer-end address
         MVC   ZIODDNAM,=CL8'PARMLIB'  DDName name
         LR    R0,R1                   pass ZIO address in R0
         $CALL VR=EVTIIOA
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         LTR   R15,R15                 successful?
         BZ    REB0045                 yes, carry on
         $WTO  MID=ECF987E,                                            +
               VAR1==CL6'ECFREB',      show service caller             +
               VAR2=RTBEMEMB,          show rule member name           +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
         B     REBEXIT                 exit
         DROP  R1
*
**       Trace Event Rule Member data
*
REB0045  DS    0H
         $TRACE $RULEMEM,                                              +
               MID=ECFREB,             trace caller                    +
               A=STKPRLIB              trace storage address
*
**       Obtain REB Cell element
*
REB0050  DS    0H
         $CPOOL GET,                   get REB cell                    +
               CPID=EVTREBCP,          cell pool ID                    +
               CELL=DSAREBA,           return REB cell here            +
               MODE=COND               conditional request
         LTR   R15,R15                 successful?
         BZ    REB0055                 yes, carry on               @05C
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0260)    set error RSN
         B     REB0999                 free REB cells
*
REB0055  DS    0H                                                  @05C
         OI    DSAFLG1,DSA@REB         cell obtained indicator
         L     R2,DSAREBA              REB cell address
         LA    R3,REB@SIZE             REB cell size
         XR    R15,R15                 scrub,
         $MVCL R2,R14                  REB cell element.
*
**       Initialize REB Cell element
*
         L     R7,DSAREBA              REB address
         USING REB,R7                  set addressability
         $MVC  REBID,=CL4'REB'         ID start
         $ST   R11,REBEVTA             set EVT address
         $MVC  REBMEMBR,RTBEMEMB       set event rule
         $MVC  REBRUNAS,RTBERUNS       set RUNAS
         $MVC  REBJOBNM,RTBEJOBN       set RUNAS jobname
         MVC   DSAMEM68,RTBEMEMB       save member name
         MVC   DSASTS68,=CL8'inactive' assume rule is inactive
         TM    RTBEFLG1,RTBE@ACT       MODE=ACTIVE?
         BZ    REB0060                 no, carry on                @05C
         $OI   REBFLG1,REB@ACTV        set active indicator
         MVC   DSASTS68,=CL8'active'   set rule active indicator
         B     REB0065                 carry on                    @05C
*
REB0060  DS    0H                                                  @05C
         TM    RTBEFLG1,RTBE@DIS       rule disabled?
         BZ    REB0065                 no, carry on                @05C
         $OI   REBFLG2,REB@RDIS        yes, set indicator
         MVC   DSASTS68,=CL8'disabled' set rule is disabled
*
**       Parse event rule data
*
REB0065  DS    0H                                                  @05C
         $CALL PARSE                   parse
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         LTR   R15,R15                 successful?
         BNZ   REB0999                 no, free REB cells
*
**       Parse event rule REPLY(data)
*
REB0070  DS    0H                                                  @05M
         $CALL REPLY,                                                  +
               PARMPTR=DSAREBA         parse REPLY()
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         LTR   R15,R15                 successful?
         BNZ   REB0999                 no, free REB cells
*
**       Parse event rule CMD(data)
*
         $CALL COMMAND,                                            @03A+
               PARMPTR=DSAREBA         parse CMD()                 @03A
         ST    R15,DSARC               save RC                     @03A
         ST    R0,DSARSN               save RSN                    @03A
         LTR   R15,R15                 successful?                 @03A
         BNZ   REB0999                 no, free REB cells          @03A
*
**       Parse event rule WTO(data)
*
         $CALL MESSAGE,                                            @03A+
               PARMPTR=DSAREBA         parse WTO()                 @03A
         ST    R15,DSARC               save RC                     @03A
         ST    R0,DSARSN               save RSN                    @03A
         LTR   R15,R15                 successful?                 @03A
         BNZ   REB0999                 no, free REB cells          @03A
*
**       Parse event rule EXEC(data)
*
         $CALL REXEC,                                                  +
               PARMPTR=DSAREBA         parse EXEC()
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         LTR   R15,R15                 successful?
         BNZ   REB0999                 no, free REB cells
*
**       Add REB to active queue
*
         TM    RTBEFLG1,RTBE@ADD       add request
         BNZ   REB0075                 yes, carry on
         TM    RTBEFLG1,RTBE@RFR       refresh request
         BNZ   REB0075                 yes, carry on
         $CALL QUEREB                  queue REB
         CLC   DSARC,=AL4(RC0)         successful?
         BE    REB0080                 yes, carry on
         B     REB0999                 no, exit
*
**       Add REB to staging queue
*
REB0075  DS    0H
         $CALL STGREB                  queue REB
         CLC   DSARC,=AL4(RC0)         successful?
         BNE   REB0999                 no, exit
*
**       Display REB/REBX variable data
*
REB0080  DS    0H
         $CALL DISPLAY                 display REB/REBX data
         CLC   DSARC,=AL4(RC0)         successful?
         BNE   REB0999                 no, exit
*
**       Check for more event rules in member
*
         L     R2,STKPRCNT             number of member records
         L     R3,STKPRLIB             event rule member data address
*
REB0090  DS    0H
         CLI   71(R3),C'#'             processed record?
         BE    REB0100                 yes, loop
         CLI   0(R3),C'*'              comment record?
         BE    REB0100                 yes, loop
         CLC   0(2,R3),=CL2'/*'        comment record?
         BE    REB0100                 yes, loop
         CLC   0(4,R3),=CL4'END'       END record?
         BNE   REB0095                 no, test further
         MVI   71(R3),C'#'             record processed
         B     REB0100                 carry on
*
REB0095  DS    0H
         CLI   0(R3),X'00'             end of records?
         BNE   REB0050                 no, get another REB cell
         TM    DSAFLG1,DSA@INIT        initialization call?
         BZ    REB0200                 no, process next RTBE
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    REB0200                 no, skip debug msg
         $WTO  MID=ECF118I,VAR1=DSAMEM68,VAR2=DSASTS68
         B     REB0200                 process next RTBE
*
REB0100  DS    0H
         LA    R3,80(,R3)              next member record
         BCT   R2,REB0090              loop
*
**       Process next RTBE entry
*
REB0200  DS    0H
         LA    R6,RTBE@SZE(,R6)        next RTBE entry
         BCT   R4,REB0030              loop
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         B     REBEXIT                 exit
*
**       Remove REBs from active queue
*
REB0999  DS    0H
         TM    RTBEFLG1,RTBE@ADD       add request
         BNZ   REB1000                 yes, carry on
         TM    RTBEFLG1,RTBE@RFR       refresh request
         BNZ   REB1000                 yes, carry on
         $CALL DEQREB                  dequeue REBs
         B     REBEXIT                 exit
*
**       Remove REBs from refresh queue
*
REB1000  DS    0H
         $CALL STGDEQ                  dequeue REBs
         B     REBEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
REBEXIT  DS    0H
         $TRACE $SRVXIT,                                               +
               MID=ECFREB,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
         $SRVXIT PARM=DSAOPAR,RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: PARSE                                                      */
*/*                                                                  */
*/* Function: Parse event rule type and event variables              */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
PARSE    $SUBINI
         USING EVT,R11                 EVT addressability
*
         LR    R7,R1                   REB address
         USING REB,R7                  set addressability
         L     R2,STKPRCNT             number of member records
         L     R3,STKPRLIB             event rule member data address
         XC    DSARCNT,DSARCNT         zero record counter
         MVI   DSAEXEC,BLANK           clear EXEC field
         MVC   DSAEXEC+1(DSAEXECZ-1),DSAEXEC
         MVI   DSAETYPE,BLANK          clear event type
         MVC   DSAETYPE+1(DSA@ETSZ-1),DSAETYPE
         MVI   DSAEDATA,BLANK          clear event data
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA
         MVI   DSAREPLY,BLANK          clear REPLY field
         MVC   DSAREPLY+1(DSA@RPLZ-1),DSAREPLY
         MVI   DSACOMND,BLANK          clear CMD field             @03A
         MVC   DSACOMND+1(DSA@CMDZ-1),DSACOMND                     @03A
         MVI   DSAWTOMS,BLANK          clear CMD field             @03A
         MVC   DSAWTOMS+1(DSA@WTOZ-1),DSAWTOMS                     @03A
*
**       Locate Event rule record
*
PAR0000  DS    0H
         LA    R4,PARTAB               events table address
         USING PAR,R4                  PAR addressability
         LA    R5,PARTABNM             number of event entries
         CLI   71(R3),C'#'             processed record?
         BE    PAR0030                 yes, loop
         CLI   0(R3),C'*'              comment record?
         BE    PAR0030                 yes, loop
         CLC   0(2,R3),=CL2'/*'        comment record?
         BE    PAR0030                 yes, loop
         CLI   0(R3),X'00'             end of records?
         BE    PAR0040                 yes, exit loop
         MVI   71(R3),C'#'             set record processed indicator
         L     R1,DSARCNT              get record count
         LA    R1,1(,R1)               add one
         ST    R1,DSARCNT              update count
*
PAR0010  DS    0H
         LH    R1,PARSIZE              event type size
         LTR   R1,R1                   last event type entry?
         BZ    PAR0030                 yes, get next record
         BCTR  R1,0                    decrement for execute
         EX    R1,EVENTCMP             event record found?
         BNE   PAR0020                 no, loop
         MVC   DSARECR,0(R3)           copy record data
         B     PAR0040                 carry on
*
PAR0020  DS    0H
         LA    R4,PAR@SIZE(,R4)        next event type entry
         BCT   R5,PAR0010              loop
*
PAR0030  DS    0H
         LA    R3,80(,R3)              next member record
         BCT   R2,PAR0000              loop
*
PAR0040  DS    0H
         CLC   DSARCNT,=F'1'           1st record?
         BE    PAR0050                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0268)    set error RSN
         $WTO  MID=ECF031E,                                            +
               VAR1=REBMEMBR,          show member name                +
               VAR2=DSARECDA           show misplaced record
         B     PAREXIT                 exit
*
**       Copy Event type & data locally
*
PAR0050  DS    0H
         LH    R1,PAREKEY              event keyword size
         BCTR  R1,0                    decrement for execute
         EX    R1,COPYEVNT             copy event type keyword
*
PAR0055  DS    0H
         LH    R1,PARSIZE              event type size
         LA    R15,DSARECR             record address
         LA    R15,0(R1,R15)           set data address
         LR    R14,R15                 copy data address
         LA    R1,DSA@EDSZ             72-bytes max data limit
*
PAR0060  DS    0H
         CLC   0(2,R14),PARDESC        end of event data?
         BE    PAR0070                 yes, carry on
         LA    R14,1(,R14)             next byte
         BCT   R1,PAR0060              loop
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0272)    set error RSN
         $WTO  MID=ECF032E,                                            +
               VAR1=REBMEMBR,          show member name                +
               VAR2=DSARECDA           show error record
         B     PAREXIT                 exit
*
PAR0070  DS    0H
         CLR   R14,R15                 valid record data?
         BH    PAR0080                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0276)    set error RSN
         $WTO  MID=ECF032E,                                            +
               VAR1=REBMEMBR,          show member name                +
               VAR2=DSARECDA           show error record
         B     PAREXIT                 exit
*
PAR0080  DS    0H
         SLR   R14,R15                 compute data length
         ST    R14,DSAEDATL            init event data length
         BCTR  R14,0                   decrement for EXecute
         EX    R14,COPYDATA            copy event data
*
**       Copy Event type and data to REB
*
         $MVC  REBEDATL,DSAEDATL       move event data length
         $MVC  REBETYPE,DSAETYPE       move event type
         $MVC  REBEDATA,DSAEDATA       move event data
*
**       Parse TSU userID LOGGED ON event
*
         CLC   DSAETYPE,=CL8'TSUINIT'  TSU event type?
         BNE   PAR0090                 no, test further
         $MVC  REBEDATA(8),EVTTSUST    move LOGGED ON msgID
         $MVC  REBEDATA+8(8),DSAEDATA  move in TSU userID
         L     R3,DSAEDATL             event data length
         LA    R3,8(R3)                add smgID length
         $ST   R3,REBEDATL             update event data length
         $MVI  REBTYPE,REB@WTO         ID event type
         $MVI  REBEVENT,REB@TSUI       set TSUINIT event type
         B     PAR0999                 exit
*
**       Parse TSU userID LOGGED OFF event
*
PAR0090  DS    0H
         CLC   DSAETYPE,=CL8'TSUTERM'  TSU event type?
         BNE   PAR0100                 no, test further
         $MVC  REBEDATA(8),EVTTSUEN    move in LOGGED OFF msgID
         $MVC  REBEDATA+8(8),DSAEDATA  move in TSU userID
         L     R3,DSAEDATL             event data length
         LA    R3,8(R3)                add smgID length
         $ST   R3,REBEDATL             update event data length
         $MVI  REBTYPE,REB@WTO         ID event type
         $MVI  REBEVENT,REB@TSUT       set TSUTERM event type
         B     PAR0999                 exit
*
**       Parse started task STARTED event
*
PAR0100  DS    0H
         CLC   DSAETYPE,=CL8'STCINIT'  STC event type?
         BNE   PAR0110                 no, test further
         $MVC  REBEDATA(8),EVTSTCST    move in STARTED msgID
         $MVC  REBEDATA+8(8),DSAEDATA  move in STCname
         L     R3,DSAEDATL             event data length
         LA    R3,8(R3)                add smgID length
         $ST   R3,REBEDATL             update event data length
         $MVI  REBTYPE,REB@WTO         ID event type
         $MVI  REBEVENT,REB@STCI       set STCINIT event type
         B     PAR0999                 exit
*
**       Parse started task ENDED event
*
PAR0110  DS    0H
         CLC   DSAETYPE,=CL8'STCTERM'  STC event type?
         BNE   PAR0120                 no, test further
         $MVC  REBEDATA(8),EVTSTCEN    move in ENDED msgID
         $MVC  REBEDATA+8(8),DSAEDATA  move in STCname
         L     R3,DSAEDATL             event data length
         LA    R3,8(R3)                add smgID length
         $ST   R3,REBEDATL             update event data length
         $MVI  REBTYPE,REB@WTO         ID event type
         $MVI  REBEVENT,REB@STCT       set STCTERM event type
         B     PAR0999                 exit
*
**       Parse initiated job STARTED event
*
PAR0120  DS    0H
         CLC   DSAETYPE,=CL8'JOBINIT'  JOB event type?
         BNE   PAR0130                 no, test further
         $MVC  REBEDATA(8),EVTJOBST    move in STARTED msgID
         $MVC  REBEDATA+8(8),DSAEDATA  move in JOBname
         L     R3,DSAEDATL             event data length
         LA    R3,8(R3)                add smgID length
         $ST   R3,REBEDATL             update event data length
         $MVI  REBTYPE,REB@WTO         ID event type
         $MVI  REBEVENT,REB@JOBI       set JOBINIT event type
         B     PAR0999                 exit
*
**       Parse initiated job ENDED event
*
PAR0130  DS    0H
         CLC   DSAETYPE,=CL8'JOBTERM'  JOB event type?
         BNE   PAR0135                 no, test further            @04A
         $MVC  REBEDATA(8),EVTJOBEN    move in ENDED msgID
         $MVC  REBEDATA+8(8),DSAEDATA  move in JOBname
         L     R3,DSAEDATL             event data length
         LA    R3,8(R3)                add smgID length
         $ST   R3,REBEDATL             update event data length
         $MVI  REBTYPE,REB@WTO         ID event type
         $MVI  REBEVENT,REB@JOBT       set JOBTERM event type
         B     PAR0999                 exit
*
**       Parse system MONITOR event rule
*
PAR0135  DS    0H                                                  @04A
         CLC   DSAETYPE,=CL8'MONITOR'  monitor event?              @04A
         BNE   PAR0140                 no, test further            @04A
         $MVC  REBEDATA(8),=CL8'ECF700E' move in monitor msgID     @04A
         $MVC  REBEDATA+8(8),DSAEDATA  move in monitored job       @04A
         L     R3,DSAEDATL             event data length           @04A
         LA    R3,8(R3)                add smgID length            @04A
         $ST   R3,REBEDATL             update event data length    @04A
         $MVI  REBTYPE,REB@SYS         ID event type               @04A
         $MVI  REBEVENT,REB@MONT       set monitor event type
         B     PAR0999                 exit
*
PAR0140  DS    0H
         CLC   DSAETYPE,=CL8'TRAPMSG'  WTO/R type?
         BNE   PAR0150                 no, test further
         $MVI  REBTYPE,REB@WTO         ID event type
         $MVI  REBEVENT,REB@WTOT       set WTO event type
         B     PAR0999                 exit
*
PAR0150  DS    0H
         CLC   DSAETYPE,=CL8'TRAPCMD'  command type?
         BNE   PAR0160                 no, test further
         $MVI  REBTYPE,REB@CMD         ID event type
         $MVI  REBEVENT,REB@CMDT       set CMD event type
         B     PAR0999                 exit
*
PAR0160  DS    0H
         CLC   DSAETYPE,=CL8'MONITOR'  system monitor type?        @04A
         BNE   PAR0170                 no, test further            @05C
         $MVI  REBTYPE,REB@SYS         ID event type               @04A
         $MVI  REBEVENT,REB@MONT       set monitor event type
         B     PAR0999                 exit
*
PAR0170  DS    0H                                                  @05A
         CLC   DSAETYPE,=CL8'JOBSVCS'  SVC job screening?          @05A
         BNE   PAR0180                 no, test further            @05A
         $MVI  REBTYPE,REB@SVC         ID event type               @05A
         $MVI  REBEVENT,REB@SVCJ       set job event type          @05A
         B     PAR0999                 exit                        @05A
*
PAR0180  DS    0H                                                  @05A
         CLC   DSAETYPE,=CL8'STCSVCS'  SVC STC screening?          @05A
         BNE   PAR0190                 no, test further            @05A
         $MVI  REBTYPE,REB@SVC         ID event type               @05A
         $MVI  REBEVENT,REB@SVCS       set started task event type @05A
         B     PAR0999                 exit                        @05A
*
PAR0190  DS    0H                                                  @05A
         CLC   DSAETYPE,=CL8'TSUSVCS'  SVC TSO screening?          @05A
         BNE   PAR0999                 no, exit                    @05A
         $MVI  REBTYPE,REB@SVC         ID event type               @05A
         $MVI  REBEVENT,REB@SVCT       set TSO user event type     @05A
         B     PAR0999                 exit                        @05A
*
PAR0999  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
PAREXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
EVENTCMP CLC   PAREVENT(*-*),0(R3)     EXecuted instruction
COPYDATA MVC   DSAEDATA(*-*),0(R15)    EXecuted instruction
COPYEVNT MVC   DSAETYPE(*-*),DSARECDA  EXecuted instruction
*---------------------------------------------------------------------*
*        Event Name Table                                             *
*--------+---------+---------+---------+---------+---------+---------+*
PARTAB   DS    0F
         DC    AL2(09),AL2(07),CL12'MONOTOR(''',CL2''')'           @04A
         DC    AL2(09),AL2(07),CL12'TRAPCMD(''',CL2''')'
         DC    AL2(09),AL2(07),CL12'TSUINIT(''',CL2''')'
         DC    AL2(09),AL2(07),CL12'TSUTERM(''',CL2''')'
         DC    AL2(09),AL2(07),CL12'STCINIT(''',CL2''')'
         DC    AL2(09),AL2(07),CL12'STCTERM(''',CL2''')'
         DC    AL2(09),AL2(07),CL12'JOBINIT(''',CL2''')'
         DC    AL2(09),AL2(07),CL12'JOBTERM(''',CL2''')'
         DC    AL2(09),AL2(07),CL12'TRAPMSG(''',CL2''')'
         DC    AL2(09),AL2(07),CL12'JOBSVCS(''',CL2''')'           @05A
         DC    AL2(09),AL2(07),CL12'STCSVCS(''',CL2''')'           @05A
         DC    AL2(09),AL2(07),CL12'TSUSVCS(''',CL2''')'           @05A
         DC    AL2(08),AL2(07),CL12'MONITOR(',CL2')'               @04A
         DC    AL2(08),AL2(07),CL12'TRAPCMD(',CL2')'
         DC    AL2(08),AL2(07),CL12'TSUINIT(',CL2')'
         DC    AL2(08),AL2(07),CL12'TSUTERM(',CL2')'
         DC    AL2(08),AL2(07),CL12'STCINIT(',CL2')'
         DC    AL2(08),AL2(07),CL12'STCTERM(',CL2')'
         DC    AL2(08),AL2(07),CL12'JOBINIT(',CL2')'
         DC    AL2(08),AL2(07),CL12'JOBTERM(',CL2')'
         DC    AL2(08),AL2(07),CL12'JOBSVCS(',CL2')'               @05A
         DC    AL2(08),AL2(07),CL12'STCSVCS(',CL2')'               @05A
         DC    AL2(08),AL2(07),CL12'TSUSVCS(',CL2')'               @05A
         DC    AL2(08),AL2(07),CL12'TRAPMSG(',CL2')'
PARLAST  DC    AL2(00),AL2(00),CL12' ',CL2' '
PARTABSZ EQU   *-PARLAST
PARTABNM EQU   (*-PARTAB)/PARTABSZ
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: REXEC                                                      */
*/*                                                                  */
*/* Function: Parse event rule EXEC variables                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: This routine build variable data elements. The number     */
*/*        of variables is store in the REBX field REBXVCNT and      */
*/*        the variable length and variable data of each variable    */
*/*        is stored in the REBX field REBXVARS.                     */
*/*                                                                  */
*/* REBXVCNT:  4-byres                                               */
*/*           +-------------------+                                  */
*/*           |number of variables|                                  */
*/*           +-------------------+                                  */
*/*                                                                  */
*/* REBXVARS:  2-bytes 62-bytes                                      */
*/*           +------------------------------------+                 */
*/*           |length |variable data               |                 */
*/*           +------------------------------------+                 */
*/*           /                                    /                 */
*/*           +------------------------------------+                 */
*/*           +length |varible data                +                 */
*/*           +------------------------------------+                 */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
REXEC    $SUBINI
         USING EVT,R11                 EVT addressability
         USING REB,R7                  REB addressability
*
**       Storage obtain EXEC vars buffer
*
         L     R3,VARSBUFL             buffer size
         GETMAIN RU,                                                   +
               SP=SP119,               subpool                         +
               LV=(R3)                 storage size
         ST    R1,DSABUFFA             save address
         LR    R2,R1                   scrub,
         XR    R15,R15                 EXEC vars,
         MVCL  R2,R14                  storage buffer.
         L     R3,VARSBUFL             buffer size
         LA    R1,0(R3,R1)             buffer end address
         ST    R1,DSABUFFE             save end address
*
**       Locate event rule EXEC() record
*
         L     R2,STKPRCNT             number of member records
         L     R3,STKPRLIB             event rule member data address
*
REX0010  DS    0H
         MVC   DSARECR,0(R3)           copy record data
         CLI   71(R3),C'#'             processed record?
         BE    REX0020                 yes, loop
         CLI   0(R3),C'*'              comment record?
         BE    REX0020                 yes, loop
         CLC   0(2,R3),=CL2'/*'        comment record?
         BE    REX0020                 yes, loop
         CLI   0(R3),X'00'             end of records?
         BE    REX0030                 yes, exit loop
         MVI   71(R3),C'#'             set record processed
         CLC   EXECID,0(R3)            EXEC() record found?
         BE    REX0040                 yes, carry on
*
REX0020  DS    0H
         LA    R3,80(,R3)              next record
         BCT   R2,REX0010              loop
*
**       EXEC() event rule record not found
*
REX0030  DS    0H
         TM    REBFLG2,REB@RPLY        REPLY(data) available?
         BNZ   REX0065                 yes, carry on
         TM    REBFLG2,REB@CMND        CMD(data) available?        @03A
         BNZ   REX0065                 yes, carry on               @03A
         TM    REBFLG2,REB@WTOM        WTO(data) available?        @03A
         BNZ   REX0065                 yes, carry on               @03A
         CLI   REBTYPE,REB@SYS         MONITOR() event rule?       @04A
         BE    REX0065                 yes, carry on               @04A
         CLI   REBTYPE,REB@SVC         TRAPSVC() event rule?       @05A
         BE    REX0065                 yes, carry on               @05A
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0284)    set error RSN
         $WTO  MID=ECF034E,                                            +
               VAR1=REBMEMBR,          show event rule name            +
               VAR2=DSARECDA           show EXEC record
         B     REXEXIT                 exit
*
REX0040  DS    0H
         LA    R5,EXECIDZ(,R3)         skip EXEC() ID
         LR    R4,R5                   copy data address
         LA    R1,DSAEXECZ+1           member name size
*
REX0050  DS    0H
         CLC   0(2,R4),=CL2')'         EXEC(member name) end?
         BE    REX0060                 yes, carry on
         LA    R4,1(,R4)               next byte
         BCT   R1,REX0050              loop
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0280)    set error RSN
         $WTO  MID=ECF033E,                                            +
               VAR1=REBMEMBR,          show event rule name            +
               VAR2==CL5'EXEC',        show event rule EXEC ID     @03C+
               VAR3=DSARECDA           show EXEC record
         B     REXEXIT                 exit
*
**       Copy EXEC(name) to REB cell
*
REX0060  DS    0H
         ST    R4,DSALOCA              copy record location
         SLR   R4,R5                   compute member name size
         BCTR  R4,0                    decrement for EXecute
         EX    R4,COPYEXEC             copy EXEC(member name)
         $MVC  REBEXEC,DSAEXEC         move it to REB
*
**       Obtain REBX cell element
*
REX0065  DS    0H
         $CPOOL GET,                   get REBX cell                   +
               CPID=EVTREBXC,          REBX cell pool ID               +
               CELL=DSAREBXA,          return REBX cell here           +
               MODE=COND               conditional request
         LTR   R15,R15                 successful?
         BZ    REX0070                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0452)    set error RSN
         B     REXEXIT                 exit
*
REX0070  DS    0H
         OI    DSAFLG1,DSA@REBX        cell obtained indicator
         L     R4,DSAREBXA             REBX cell address
         LA    R5,REBX@SZE             REBX cell size
         XR    R15,R15                 scrub,
         $MVCL R4,R14                  REBX cell.
*
**       Initialize REBX cell element
*
         L     R8,DSAREBXA             get REBX address
         USING REBX,R8                 set addressability
         $ST   R8,REBREBX              chain REBX to REB
         MVC   REBXID,=CL4'REBX'       ID REBX
         MVC   REBXVID,=CL4'VARS'      ID VARS
         MVC   REBXEXEC,REBEXEC        copy member name
         LA    R1,REBX@VRZ(R8)         vars data end-address
         ST    R1,REBXVEND             init end address
*
**       Copy Event Rule CMD() data
*
         TM    REBFLG2,REB@CMND        CMD(data) extracted?        @03A
         BZ    REX0071                 no, carry on                @03A
         MVC   REBXCMND,DSACOMND       copy CMD(data)              @03A
*
**       Copy Event Rule WTO() data
*
REX0071  DS    0H                                                  @03A
         TM    REBFLG2,REB@WTOM        WTO(data) extracted?        @03A
         BZ    REX0072                 no, carry on                @03A
         MVC   REBXWTOM,DSAWTOMS       copy WTO(data)              @03A
*
**       Copy Event Rule REPLY() data
*
REX0072  DS    0H                                                  @03A
         TM    REBFLG2,REB@RPLY        REPLY(data) extracted?
         BZ    REX0073                 no, carry on                @03C
         MVC   REBXRPLY,DSAREPLY       copy REPLY(data)            @03C
*
REX0073  DS    0H                                                  @03A
         CLI   REBEXEC,X'0'            EXEC() record processed?
         BNE   REX0075                 yes, carry on
         $MVC  REBEXEC,=CL8'N/A'       no, EXEC() not supplied
         $OI   REBFLG2,REB@NEXC        set no EXEC() to trigger    @03A
         B     REX0999                 carry on
*
**       Extract EXEC variable data
*
REX0075  DS    0H
         MVI   DSARECR,BLANK           clear buffer
         MVC   DSARECR+1(DSA@RECL-1),DSARECR
         L     R4,DSALOCA              record location address
         LA    R4,2(,R4)               skip past ') '
         LR    R1,R4                   copy location address
         SLR   R1,R3                   get processed length
         LA    R5,71                   record data size max
         SLR   R5,R1                   get remaining record length
         BCTR  R5,0                    decrement for EXecute
         EX    R5,MOVERECR             copy remainder of record
*
**       Copy EXEC var data to buffer
*
         L     R4,DSABUFFA             get vars buffer address
*
REX0080  DS    0H
         CL    R4,DSABUFFE             end of buffer reached?
         BL    REX0090                 no, capy vars to buffer
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0464)    set error RSN
         $WTO  MID=ECF037E,                                            +
               VAR1=REBMEMBR,          show event rule memeber name    +
               VAR2=REBEXEC            show EXEC member name
         B     REXEXIT                 exit
*
REX0090  DS    0H
         MVC   0(80,R4),DSARECR        copy var data to buffer
         LA    R4,80(,R4)              get next buffer location
         B     REX0110                 get next record
*
REX0100  DS    0H
         MVI   71(R3),C'#'             set record processed
         CLC   END,0(R3)               END record?
         BE    REX0120                 yes, exit loop
         CLI   0(R3),X'00'             end of records?
         BE    REX0110                 yes, error
         MVI   DSARECR,BLANK           clear buffer
         MVC   DSARECR+1(DSA@RECL-1),DSARECR
         MVC   DSARECDA,0(R3)          copy var record
         B     REX0080                 loop
*
**       Event rule END record not found
*
REX0110  DS    0H
         LA    R3,80(,R3)              next record
         BCT   R2,REX0100              loop
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0296)    set error RSN
         $WTO  MID=ECF035E,                                            +
               VAR1=REBMEMBR,          show event rule member name     +
               VAR2=REBEXEC            show EXEC member name
         B     REXEXIT                 exit
*
**       Create REBX variable entries
*
REX0120  DS    0H
         LA    R1,REBXVARS             REBX vars data address
         ST    R1,DSAXVARS             save address
         L     R4,DSABUFFA             vars buffer address
         CLI   0(R4),X'00'             any vars in buffer?
         BNE   REX0130                 yes, carry on
*
REX0125  DS    0H
         XC    REBXVCNT,REBXVCNT       zero REBX vars count
         OI    REBXFLG1,REBX@NON       set no vars found indicator
         B     REX0999                 exit
*
REX0130  DS    0H
         MVI   DSAVARE,BLANK           clear var entry
         MVC   DSAVARE+1(DSA@VARZ-1),DSAVARE
*
REX0140  DS    0H
         CLI   0(R4),X'00'             end of vars buffer?
         BE    REX0999                 yes, exit
         CLI   0(R4),BLANK             begining of var found?
         BNE   REX0150                 yes, carry on
         LA    R4,1(R4)                walk thru blanks
         B     REX0140                 loop
*
REX0150  DS    0H
         ST    R4,DSAWORD              var start address
         CLI   0(R4),X'00'             end of var found?
         BE    REX0160                 yes, carry on
         CLI   0(R4),BLANK             end of var found?
         BE    REX0160                 yes, carry on
         LA    R4,1(,R4)               walk thru non blanks
         B     REX0150+4               loop
*
REX0160  DS    0H
         LR    R2,R4                   copy var data end address
         L     R1,DSAWORD              get var data start address
         SLR   R2,R1                   compute var data length
         STH   R2,DSAVARLN             set var length
         BCTR  R2,0                    decrement for EXecute
         EX    R2,COPYVARD             set var data
*
**       Update REBX with variable entry
*
         L     R14,DSAXVARS            REBX vars location address
         LH    R15,DSAVARLN            get var data length
         LA    R15,2(R14,R15)          get var data end + length
         CL    R15,REBXVEND            will var fit in table?
         BL    REX0170                 yes, copy var data to REBX
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0460)    set error RSN
         $WTO  MID=ECF036E,                                            +
               VAR1=REBMEMBR,          show event rule memeber name    +
               VAR2=REBEXEC            show EXEC member name
         B     REXEXIT                 exit
*
REX0170  DS    0H
         L     R15,REBXVCNT            get vars count
         LA    R15,1(,R15)             add one
         ST    R15,REBXVCNT            update count
         LH    R15,DSAVARLN            get var data length
         LA    R15,2(,R15)             add length prefix
         BCTR  R15,0                   decrement of EXecute
         EX    R15,COPYVARE            copy var data to REBX
         L     R14,DSAXVARS            REBX vars location address
         LH    R15,DSAVARLN            get var data length
         LA    R14,2(R15,R14)          set next var location
         ST    R14,DSAXVARS            update var location address
         B     REX0130                 process of vars
*
**       REBX initialization complete
*
REX0999  DS    0H
         OI    REBXFLG1,REBX@INI       REBX init complete
         XC    DSARC,DSARC             yes, set RC
         XC    DSARSN,DSARSN           set RSN
*
**       Storage release EXEC vars buffer
*
REXEXIT  DS    0H
         ICM   R1,15,DSABUFFA          vars buffer init?
         BZ    REXXIT00                no, skip release
         XC    DSABUFFA,DSABUFFA       zero buffer address
         L     R2,VARSBUFL             buffer size
         FREEMAIN RC,                                                  +
               SP=SP119,               subpool                         +
               A=(R1),                 address                         +
               LV=(R2)                 size
*
REXXIT00 DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYEXEC MVC   DSAEXEC(*-*),0(R5)      EXecuted instruction
MOVERECR MVC   DSARECDA(*-*),0(R4)     EXecuted instruction
COPYVARD MVC   DSAVARDA(*-*),0(R1)     EXecuted instruction
COPYVARE MVC   0(*-*,R14),DSAVARE      EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
VARSBUFL DC    AL4(16*80)              vas buffer size
         DS    0C
END      DC    CL4'END'                Event Rule END record
         DS    0C
EXECID   DC    CL5'EXEC('              EXEC() record ID
EXECIDZ  EQU   *-EXECID                ID size
         DS    0C
VARENTRY DC    CL2'V=',AL2(00),C' '
VAR@ENTZ EQU   *-VARENTRY              size
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: REPLY                                                      */
*/*                                                                  */
*/* Function: Parse event rule REPLY('reply-data')                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
REPLY    $SUBINI
         USING EVT,R11                 EVT addressability
         USING REB,R7                  REB addressability
*
**       Locate event rule REPLY() record
*
         L     R2,STKPRCNT             number of member records
         L     R3,STKPRLIB             event rule member data address
*
RPLY010  DS    0H
         MVC   DSARECR,0(R3)           copy record data
         CLI   71(R3),C'#'             processed record?
         BE    RPLY020                 yes, loop
         CLI   0(R3),C'*'              comment record?
         BE    RPLY020                 yes, loop
         CLC   0(2,R3),=CL2'/*'        comment record?
         BE    RPLY020                 yes, loop
         CLI   0(R3),X'00'             end of records?
         BE    RPLY099                 yes, exit loop
*
         LA    R1,6                    REPLY() ID length
         MVC   DSAXRPLY,=CL3')'        set ID end indicator
         CLC   REPLYID,0(R3)           REPLY() record found?
         BE    RPLY030                 yes, carry on
*
         LA    R1,7                    REPLY('') ID length
         MVC   DSAXRPLY,=CL3''')'      set ID end indicator
         CLC   REPLYXD,0(R3)           REPLY('') record found
         BE    RPLY030                 yes, carry on
*
RPLY020  DS    0H
         LA    R3,80(,R3)              next record
         BCT   R2,RPLY010              loop
         B     RPLY099                 exit
*
RPLY030  DS    0H
         MVI   71(R3),C'#'             set record processed
         LA    R5,0(R1,R3)             skip REPLY() or REPLY('') ID
         LR    R4,R5                   copy REPLY data address
         LA    R1,DSA@RPLZ             REPLY data length
*
RPLY040  DS    0H
         CLC   DSAXRPLY,0(R4)          end ID found?
         BE    RPLY050                 yes, carry on
         LA    R4,1(,R4)               next byte
         BCT   R1,RPLY040              loop
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0278)    set error RSN
         $WTO  MID=ECF033E,                                            +
               VAR1=REBMEMBR,          show event rule name            +
               VAR2==CL5'REPLY',       show event rule REPLY ID    @03A+
               VAR3=DSARECDA           show REPLY record
         B     RPLYXIT                 exit
*
**       Extract WTOR REPLY(data)
*
RPLY050  DS    0H
         SLR   R4,R5                   compute REPLY(data) size
         BCTR  R4,0                    decrement for EXecute
         EX    R4,COPYRPLY             copy REPLY(data)
         $OI   REBFLG2,REB@RPLY        set REPLY(data) available
         LA    R3,80(,R3)              next record
         CLC   0(4,R3),ZEND            end record?
         BNE   RPLY099                 no, exit
         MVI   71(R3),C'#'             set record processed
*
RPLY099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
RPLYXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYRPLY MVC   DSAREPLY(*-*),0(R5)     EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
ZEND     DC    CL4'END'                Event Rule END record
REPLYID  DC    CL6'REPLY('             REPLY() record
REPLYXD  DC    CL7'REPLY('''           REPLY('') record
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: COMMAND                                                    */
*/*                                                                  */
*/* Function: Parse event rule CMD('command-data')                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
COMMAND  $SUBINI                                                 99@03A
         USING EVT,R11                 EVT addressability
         USING REB,R7                  REB addressability
*
**       Locate event rule CMD() record
*
         L     R2,STKPRCNT             number of member records
         L     R3,STKPRLIB             event rule member data address
*
CMND010  DS    0H
         MVC   DSARECR,0(R3)           copy record data
         CLI   71(R3),C'#'             processed record?
         BE    CMND020                 yes, loop
         CLI   0(R3),C'*'              comment record?
         BE    CMND020                 yes, loop
         CLC   0(2,R3),=CL2'/*'        comment record?
         BE    CMND020                 yes, loop
         CLI   0(R3),X'00'             end of records?
         BE    CMND099                 yes, exit loop
*
         LA    R1,4                    CMD() ID length
         MVC   DSAXCMID,=CL3')'        set ID end indicator
         CLC   CMNDID,0(R3)            CMD() record found?
         BE    CMND030                 yes, carry on
*
         LA    R1,5                    CMD('') ID length
         MVC   DSAXCMID,=CL3''')'      set ID end indicator
         CLC   CMNDXID,0(R3)           CMD('') record found
         BE    CMND030                 yes, carry on
*
CMND020  DS    0H
         LA    R3,80(,R3)              next record
         BCT   R2,CMND010              loop
         B     CMND099                 exit
*
CMND030  DS    0H
         MVI   71(R3),C'#'             set record processed
         LA    R5,0(R1,R3)             skip CMD() or CMD('') ID
         LR    R4,R5                   copy command data address
         LA    R1,DSA@CMDZ             CMD data length
*
CMND040  DS    0H
         CLC   DSAXCMID,0(R4)          end ID found?
         BE    CMND050                 yes, carry on
         LA    R4,1(,R4)               next byte
         BCT   R1,CMND040              loop
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0298)    set error RSN
         $WTO  MID=ECF033E,                                            +
               VAR1=REBMEMBR,          show event rule name            +
               VAR2==CL5'CMD',         show event rule CMD ID      @03A+
               VAR3=DSARECDA           show CMD record
         B     CMNDXIT                 exit
*
**       Extract CMD(command-data)
*
CMND050  DS    0H
         SLR   R4,R5                   compute CMD() size
         BCTR  R4,0                    decrement for EXecute
         EX    R4,COPYCMND             copy CMD()
         $OI   REBFLG2,REB@CMND        set CMD() available
         LA    R3,80(,R3)              next record
         CLC   0(4,R3),ZCMDEND         end record?
         BNE   CMND099                 no, exit
         MVI   71(R3),C'#'             set record processed
*
CMND099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
CMNDXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYCMND MVC   DSACOMND(*-*),0(R5)     EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
ZCMDEND  DC    CL4'END'                Event Rule END record
CMNDID   DC    CL4'CMD('               CMD() record
CMNDXID  DC    CL5'CMD('''             CMD('') record
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: COMMAND                                                    */
*/*                                                                  */
*/* Function: Parse event rule WTO('message-data')                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MESSAGE  $SUBINI                                                 99@03A
         USING EVT,R11                 EVT addressability
         USING REB,R7                  REB addressability
*
**       Locate event rule WTO() record
*
         L     R2,STKPRCNT             number of member records
         L     R3,STKPRLIB             event rule member data address
*
WTOM010  DS    0H
         MVC   DSARECR,0(R3)           copy record data
         CLI   71(R3),C'#'             processed record?
         BE    WTOM020                 yes, loop
         CLI   0(R3),C'*'              comment record?
         BE    WTOM020                 yes, loop
         CLC   0(2,R3),=CL2'/*'        comment record?
         BE    WTOM020                 yes, loop
         CLI   0(R3),X'00'             end of records?
         BE    WTOM099                 yes, exit loop
*
         LA    R1,4                    WTO() ID length
         MVC   DSAXWTID,=CL3')'        set ID end indicator
         CLC   WTOMID,0(R3)            WTO() record found?
         BE    WTOM030                 yes, carry on
*
         LA    R1,5                    WTO('') ID length
         MVC   DSAXWTID,=CL3''')'      set ID end indicator
         CLC   WTOMXID,0(R3)           WTO('') record found
         BE    WTOM030                 yes, carry on
*
WTOM020  DS    0H
         LA    R3,80(,R3)              next record
         BCT   R2,WTOM010              loop
         B     WTOM099                 exit
*
WTOM030  DS    0H
         MVI   71(R3),C'#'             set record processed
         LA    R5,0(R1,R3)             skip WTO() or WTO('') ID
         LR    R4,R5                   copy command data address
         LA    R1,DSA@WTOZ             WTO data length
*
WTOM040  DS    0H
         CLC   DSAXWTID,0(R4)          end ID found?
         BE    WTOM050                 yes, carry on
         LA    R4,1(,R4)               next byte
         BCT   R1,WTOM040              loop
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0286)    set error RSN
         $WTO  MID=ECF033E,                                            +
               VAR1=REBMEMBR,          show event rule name            +
               VAR2==CL5'WTO',         show event rule WTO ID      @03A+
               VAR3=DSARECDA           show WTO record
         B     WTOMXIT                 exit
*
**       Extract WTO(command-data)
*
WTOM050  DS    0H
         SLR   R4,R5                   compute WTO() size
         BCTR  R4,0                    decrement for EXecute
         EX    R4,COPYWTOM             copy WTO()
         $OI   REBFLG2,REB@WTOM        set WTO() available
         LA    R3,80(,R3)              next record
         CLC   0(4,R3),ZWTOEND         end record?
         BNE   WTOM099                 no, exit
         MVI   71(R3),C'#'             set record processed
*
WTOM099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
WTOMXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYWTOM MVC   DSAWTOMS(*-*),0(R5)     EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
ZWTOEND  DC    CL4'END'                Event Rule END record
WTOMID   DC    CL4'WTO('               WTO() record
WTOMXID  DC    CL5'WTO('''             WTO('') record
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: QUEREB                                                     */
*/*                                                                  */
*/* Function: Add REB element to active REB queue                    */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
QUEREB   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING REB,R7                  REB addressability
*
**       Establish recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0288)    set RSN
         $RETRY QUE0099,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Trace queued REB element
*
         $TRACE $QUEREB,                                               +
               MID=ECFREB,             trace caller                    +
               A=(R7),                 trace storage addrss            +
               LN=REB@SIZE             trace storage size
*
**       Serialize active REB queue
*
QUE0000  DS    0H
         XR    R2,R2                   scrub reg
         L     R3,PSAAOLD              ASCB address
         $CS   R2,R3,EVTREBLK          locked?
         $MVC  EVTREBL2,PSATOLD        set TCB owner
*
**       Queue REB to active queue
*
         L     R3,EVTREBQA             get queued REB
         $ST   R3,REBCHPTR             chain queued REB to my REB
         $ST   R7,EVTREBQA             make my REB top REB
*
**       Update active REB queue count
*
         L     R1,EVTREBAC             get active REB count
         LA    R1,1(,R1)               add one
         $ST   R1,EVTREBAC             update count
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
**       Release REB queue serialization
*
QUE0099  DS    0H
         CLC   EVTREBLK,PSAAOLD        lock held?
         BNE   QUEEXIT                 no, exit
         CLC   EVTREBL2,PSATOLD        lock owner?
         BNE   QUEEXIT                 no, exit
         $XC   EVTREBL2,EVTREBL2       zero lock owner
         $XC   EVTREBLK,EVTREBLK       release lock
*
QUEEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DEQREB                                                     */
*/*                                                                  */
*/* Function: Remove all REBs from active REB queue                  */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DEQREB   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING REB,R7                  REB addressability
*
**       Serialize active REB queue
*
         XR    R2,R2                   scrub reg
         L     R3,PSAAOLD              ASCB address
         $CS   R2,R3,EVTREBLK          locked?
         $MVC  EVTREBL2,PSATOLD        set TCB owner
*
**       Remove REB from active REB queue
*
DEQ0010  DS    0H
         ICM   R7,15,EVTREBQA          any REBs queued?
         BZ    DEQ0099                 no, release lock
         ST    R7,DSAREBA              set REB cell address
         MVC   DSAREBXA,REBREBX        copy REBX address
         $MVC  EVTREBQA,REBCHPTR       update REB chain ptr
*
**       Trace dequeued REB element
*
         $TRACE $DEQREB,                                               +
               MID=ECFREB,             trace caller                    +
               A=(R7),                 trace storage addrss            +
               LN=REB@SIZE             trace storage size
*
**       Free REB cell element
*
         $CPOOL FREE,                                                  +
               CPID=EVTREBCP,          REB cell pool ID                +
               CELL=DSAREBA            REB cell element address
         XC    DSAREBA,DSAREBA         zero cell address
*
**       Free REBX cell element
*
         ICM   R1,15,DSAREBXA          any REBX cell?
         BZ    DEQ0010                 no, loop
         $CPOOL FREE,                                                  +
               CPID=EVTREBXC,          REBX cell pool ID               +
               CELL=DSAREBXA           REBX cell element address
         XC    DSAREBXA,DSAREBXA       zero cell address
         B     DEQ0010                 loop
*
**       Release REB queue serialization
*
DEQ0099  DS    0H
         CLC   EVTREBLK,PSAAOLD        lock held?
         BNE   DEQEXIT                 no, exit
         CLC   EVTREBL2,PSATOLD        lock owner?
         BNE   DEQEXIT                 no, exit
         $XC   EVTREBL2,EVTREBL2       zero lock owner
         $XC   EVTREBLK,EVTREBLK       release lock
*
DEQEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: STGREB                                                     */
*/*                                                                  */
*/* Function: Add REB element to staging REB queue                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R7  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
STGREB   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING REB,R7                  REB addressability
*
**       Establish recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0290)    set RSN
         $RETRY STG0099,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Trace staged REB element
*
         $TRACE $QSTGREB,                                              +
               MID=ECFREB,             trace caller                    +
               A=(R7),                 trace storage addrss            +
               LN=REB@SIZE             trace storage size
*
**       Serialize staging REB queue
*
STG0000  DS    0H
         XR    R2,R2                   zero reg
         L     R3,PSAAOLD              ASCB address
         $CS   R2,R3,EVTSTGLK          locked?
         $MVC  EVTSTGL2,PSATOLD        set TCB owner
*
**       Queue REB to staging queue
*
         L     R3,EVTSTGQA             get queued REB
         $ST   R3,REBCHPTR             chain queued REB to my REB
         $ST   R7,EVTSTGQA             make my REB top REB
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
**       Release REB queue serialization
*
STG0099  DS    0H
         CLC   EVTSTGLK,PSAAOLD        lock held?
         BNE   STGEXIT                 no, exit
         CLC   EVTSTGL2,PSATOLD        lock owner?
         BNE   STGEXIT                 no, exit
         $XC   EVTSTGL2,EVTSTGL2       zero lock owner
         $XC   EVTSTGLK,EVTSTGLK       release lock
*
STGEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: STGDEQ                                                     */
*/*                                                                  */
*/* Function: Remove all REBs from staging REB queue                 */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
STGDEQ   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING REB,R7                  REB addressability
*
**       Serialize staging REB queue
*
         XR    R2,R2                   scrub reg
         L     R3,PSAAOLD              ASCB address
         $CS   R2,R3,EVTSTGLK          locked?
         $MVC  EVTSTGL2,PSATOLD        set TCB owner
*
**       Remove REB from staging queue
*
STGD010  DS    0H
         ICM   R7,15,EVTSTGQA          any REBs queued?
         BZ    STGD099                 no, release lock
         ST    R7,DSAREBA              set REB cell address
         MVC   DSAREBXA,REBREBX        copy REBX address
         $MVC  EVTSTGQA,REBCHPTR       update REB chain ptr
*
**       Trace dequeued staged REB element
*
         $TRACE $DSTGREB,                                              +
               MID=ECFREB,             trace caller                    +
               A=(R7),                 trace storage addrss            +
               LN=REB@SIZE             trace storage size
*
**       Free REB cell element
*
         $CPOOL FREE,                                                  +
               CPID=EVTREBCP,          REB cell pool ID                +
               CELL=DSAREBA            REB cell element address
         XC    DSAREBA,DSAREBA         zero cell address
*
**       Free REBX cell element
*
         ICM   R1,15,DSAREBXA          any REBX cell?
         BZ    STGD010                 no, loop
         $CPOOL FREE,                                                  +
               CPID=EVTREBXC,          REBX cell pool ID               +
               CELL=DSAREBXA           REBX cell element address
         XC    DSAREBXA,DSAREBXA       zero cell address
         B     STGD010                 loop
*
**       Release REB queue serialization
*
STGD099  DS    0H
         CLC   EVTSTGLK,PSAAOLD        lock held?
         BNE   STGDXIT                 no, exit
         CLC   EVTSTGL2,PSATOLD        lock owner?
         BNE   STGDXIT                 no, exit
         $XC   EVTSTGL2,EVTSTGL2       zero lock owner
         $XC   EVTSTGLK,EVTSTGLK       release lock
*
STGDXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DISPLAY                                                    */
*/*                                                                  */
*/* Function: Display REB/REBX data variables                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Display event rule data when SHOWREB=YES is in effect.    */
*/*                                                                  */
*/********************************************************************/
DISPLAY  $SUBINI
         USING EVT,R11                 EVT addressability
         USING REB,R7
*
**       Display REB element data
*
         TM    EVTFLG2,EVT@EDSP        SHOWREB=YES
         BZ    DISPEXIT                no, exit
*
         MVI   DSAEDATA,BLANK          clear buffer
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA
         MVC   DSAEDATA(8),REBMEMBR    copy REB data
         $WTO  MID=ECF302I,                                            +
               VAR1==CL8'REBMEMBR',    show REB data                   +
               VAR2=DSAEDATA           show REB data
*
         MVI   DSAEDATA,BLANK          clear buffer
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA
         SLR   R1,R1
         IC    R1,REBTYPE              get REB type
         ST    R1,DSAEDATA             set REB type
         $WTO  MID=ECF301I,                                            +
               VAR1==CL8'REBTYPE',     show REB type                   +
               VAR2=DSAEDATA           show REB type data
*
         MVI   DSAEDATA,BLANK          clear buffer
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA
         MVC   DSAEDATA(8),REBETYPE    copy REB type
         $WTO  MID=ECF302I,                                            +
               VAR1==CL8'REBETYPE',    show REB data                   +
               VAR2=DSAEDATA           show REB data
*
         MVI   DSAEDATA,BLANK          clear buffer
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA
         MVC   DSAEDATA(4),REBEDATL    copy REB data length
         $WTO  MID=ECF301I,                                            +
               VAR1==CL8'REBEDATL',    show REB data                   +
               VAR2=DSAEDATA           show REB data
*
         MVI   DSAEDATA,BLANK          clear buffer
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA
         MVC   DSAEDATA,REBEDATA       copy REB data
         $WTO  MID=ECF302I,                                            +
               VAR1==CL8'REBEDATA',    show REB data                   +
               VAR2=DSAEDATA           show REB data
*
         MVI   DSAEDATA,BLANK          clear buffer
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA
         MVC   DSAEDATA(8),REBEXEC     copy EXEC data
         $WTO  MID=ECF302I,                                            +
               VAR1==CL8'REBEXEC',     show EXEC member name           +
               VAR2=DSAEDATA           show REB data
*
**       Display REBX element data
*
         L     R8,REBREBX              REBX address
         USING REBX,R8                 set addressability
         CLC   REBXID,=CL4'REBX'       valid indeed?
         BNE   DISPEXIT                no, exit
*
         TM    REBFLG2,REB@CMND        CMD(data) available?        @03A
         BZ    DISP000                 no, skip display            @03A
         MVI   DSAEDATA,BLANK          clear buffer                @03A
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA                     @03A
         MVC   DSAEDATA,REBXCMND       copy CMD(data)              @03A
         $WTO  MID=ECF302I,                                        @03A+
               VAR1==CL8'REBXCMND',    show REBX data              @03A+
               VAR2=DSAEDATA           show REBX data
*
DISP000  DS    0H                                                  @03A
         TM    REBFLG2,REB@WTOM        WTO(data) available?        @03A
         BZ    DISP002                 no, skip display            @03A
         MVI   DSAEDATA,BLANK          clear buffer                @03A
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA                     @03A
         MVC   DSAEDATA,REBXWTOM       copy WTO(data)              @03A
         $WTO  MID=ECF302I,                                        @03A+
               VAR1==CL8'REBWTOMS',    show REBX data              @03A+
               VAR2=DSAEDATA           show REBX data
*
DISP002  DS    0H                                                  @03A
         TM    REBFLG2,REB@RPLY        REPLY(data) available?
         BZ    DISP005                 no, skip display
         MVI   DSAEDATA,BLANK          clear buffer
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA
         MVC   DSAEDATA,REBXRPLY       copy REPLY(data)
         $WTO  MID=ECF302I,                                            +
               VAR1==CL8'REBXRPLY',    show REBX data                  +
               VAR2=DSAEDATA           show REBX data
*
DISP005  DS    0H
         LA    R4,REBXVARS             vars table address
         MVI   DSAEDATA,BLANK          clear buffer
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA
         MVC   DSAEDATA(4),REBXVCNT    copy number of vars
         $WTO  MID=ECF301I,                                            +
               VAR1==CL8'REBXVCNT',    show REBX data                  +
               VAR2=DSAEDATA           show REBX data
         ICM   R3,15,REBXVCNT          any variables?
         BZ    DISPEXIT                no, exit
         XR    R2,R2                   var length
*
DISP010  DS    0H
         MVI   DSAEDATA,BLANK          clear buffer
         MVC   DSAEDATA+1(DSA@EDSZ-1),DSAEDATA
         ICM   R2,3,0(R4)              get var length
         ST    R2,DSAWORD              save var length
         BCTR  R2,0                    decrement for EXecute
         EX    R2,COPYVARS             copy variable data
*
         $WTO  MID=ECF300I,                                            +
               VAR1==CL8'REBXVARS',    show REBX data                  +
               VAR2=DSAWORD,           show REBX data                  +
               VAR3=DSAEDATA           show REBX data
*
         ICM   R2,3,0(R4)              get var length
         LA    R4,2(R2,R4)             next variable address
         BCT   R3,DISP010              loop
*
DISPEXIT DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYVARS MVC   DSAEDATA(*-*),2(R4)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem Data maps                                          *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFREB ,
         $ECFZIO ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@LOCK EQU   X'80'                   EVTREBLK held indicator
DSA@REB  EQU   X'40'                   REB cell obtained indicator
DSA@REBX EQU   X'20'                   REBX cell obtained indicator
DSA@INIT EQU   X'10'                   ECFINIT initialization call
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSARCNT  DS    F                       record counter
DSALOCA  DS    F                       record location address
DSABUFFA DS    F                       EXEC vars buffer address
DSABUFFE DS    F                       EXEC vars buffer end-address
DSAXVARS DS    F                       REBX vars data address
         DS    0F
DSAOPAR  DS    F                       output Parm reg
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
DSAREBA  DS    F                       REB cell address
DSAREBXA DS    F                       REBX cell address
DSARTBAD DS    F                       RTB address
DSAEDATL DS    F                       event data length
DSAWORD  DS    F                       work area
         DS    0C
DSAMEM68 DS    CL8                     Rule member name
DSASTS68 DS    CL8                     Rule implementation status
         DS    0C
DSAXRPLY DS    CL3                     REPLY() REPLY('') ID
DSAYRPLY DS    CL1                     -reserved *donot use*
DSAXCMID DS    CL3                     CMD() CMD('') ID            @03A
DSAYCMIX DS    CL1                     -reserved *donot use*       @03A
DSAXWTID DS    CL3                     WTO() WTO('') ID            @03A
DSAYWTIX DS    CL1                     -reserved *donot use*       @03A
         DS    0F
DSARECR  DS    0CL80                   record work area
DSARECDA DS    CL71                    -record data
DSARECSP DS    CL1                     -processed indicator
DSARECSQ DS    CL8                     -sequence number
DSA@RECL EQU   *-DSARECR               record work area length
         DS    0F
DSAVARE  DS    0CL64                   variable entry
DSAVARLN DS    AL2                     -variable length
DSAVARDA DS    CL62                    -variable data
DSA@VARZ EQU   *-DSAVARE               entry size
         DS    0C
DSAEXEC  DS    CL8                     event type
DSAEXECZ EQU   *-DSAEXEC               8-bytes max
DSAMEMBR DS    CL8                     input member name
DSA@MEMZ EQU   *-DSAMEMBR              input memeber name size
DSAETYPE DS    CL8                     event type
DSA@ETSZ EQU   *-DSAETYPE              8-bytes max
DSAEDATA DS    CL60                    event data
DSA@EDSZ EQU   *-DSAEDATA              72-bytes max
DSAREPLY DS    CL64                    REPLY(data)
DSA@RPLZ EQU   *-DSAREPLY              64-bytes max
DSACOMND DS    CL64                    CMD(data)                   @03A
DSA@CMDZ EQU   *-DSACOMND              64-bytes max                @03A
DSAWTOMS DS    CL64                    WTO(data)                   @03A
DSA@WTOZ EQU   *-DSAWTOMS              64-bytes max                @03A
         DS    0F
DSAPLST  DS    XL128                   parmlist
DSA@PLSZ EQU   *-DSAPLST               parmlist size
         DS    0F
DSAZIO   DS    CL(ZIO@SIZE)            ZIO block
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*
**       Event type map
*
PAR      DSECT ,
PARSIZE  DS    AL2                     size of event keyword
PAREKEY  DS    AL2                     event keyword size
PAREVENT DS    CL12                    event type
PARDESC  DS    CL2                     event coding
PAR@SIZE EQU   *-PAR                   entry size
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         END
./ ADD NAME=ECFREQ   0106-21068-21304-1645-00136-00136-00004-BENMAR  27
ECFREQ   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFREQ                                                     */
*/*                                                                  */
*/* Function: IEFJSREQ Request Router Front-End Processor            */
*/*                                                                  */
*/* Description: This routine checks the SSOBFUNC for function       */
*/*              code 9 (WTO/R) and for zero SSOBSSIB address.       */
*/*              If both conditions are true, it puts the address    */
*/*              of the Master subsystem SSIB into SSOBSSIB and      */
*/*              exits to SSI routine IEFJSREQ. Else, it exits to    */
*/*              IEFJSREQ unchanged.                                 */
*/*                                                                  */
*/* Input Regs: R1  points to a one-word parameter list with the     */
*/*                 high-order bit on and a pointer to an SSOB in    */
*/*                 the low-order 31 bits.                           */
*/*             R13 Caller's save area address                       */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  SSOB address                                     */
*/*             R10 base address                                     */
*/*                                                                  */
*/* Output Regs: R1  parmlist address                                */
*/*              R14 caller's return address                         */
*/*              R15 IEFJSREQ entry address                          */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=0, SQA resident.    */
*/*                                                                  */
*/* Restrictions: 1. Routine runs without a save area.               */
*/*               2. Routine does NOT use address constants, since   */
*/*                  it is relocated to SQA by the ECFSUB subsystem  */
*/*                  initialization/termination jobstep task.        */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFREQ   $ENTRY SAVE=NO,SREQ=YES       entry
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 copy base address
         USING ECFREQ,R10              set addressability
         USING PSA,0                   FLC addressability
*
**       Prime R15 with real IEFJSREQ EPA
*
         USING ZID,R15                 set addressability
         L     R3,ZIDSREQ              get IEFJSREQ EPA
         ST    R3,GPR@R15(,R13)        save it in caller's save area
         DROP  R15
*
**       Validity check SSOB input parm
*
         XR    R7,R7                   zero reg
         ICM   R7,7,1(R1)              SSOB address init?
         BZ    REQEXIT                 no, branch to IEFJSREQ
         USING SSOB,R7                 set addressability
         CLC   SSOBID,=CL4'SSOB'       Valid indeed?
         BNE   REQEXIT                 no, exit
*
**       Validity check SSOB function code
*
         CLC   SSOBFUNC,=AL2(SSOBWTO)  WTO/R?
         BNE   REQEXIT                 no, exit
*
**       Validity check SSIB address ptr
*
         ICM   R8,15,SSOBSSIB          SSIB supplied?
         BNZ   REQEXIT                 yes, exit
*
**       Initialize SSIB control block
*
         LA    R8,ZSSIB                SSIB address
         USING SSIB,R8                 set addressability
         ST    R8,SSOBSSIB             set MSTR SSIB address ptr
         XC    SSIB(SSIBSIZE),SSIB     zero SSIB
         MVC   SSIBID,=CL4'SSIB'       ID
         MVC   SSIBLEN,=AL2(SSIBSIZE)  init size
         MVC   SSIBSSNM,=CL4'MSTR'     init Master subsystem
         MVI   SSIBJBID,BLANK          clear,
         MVC   SSIBJBID+1(7),SSIBJBID  job identifier
         MVI   SSIBDEST,BLANK          clear,
         MVC   SSIBDEST+1(7),SSIBDEST  SYSOUT destination
         B     REQEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
REQEXIT  DS    0H
         LM    R14,R12,GPR@R14(R13)    restore regs
         BR    R15                     branch enter IEFJSREQ
*---------------------------------------------------------------------*
*        Master SSIB control block                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ZSSIB    DS    XL36                    SSIB
ZSSIBX   DS    XL16                    my SSIB extension
ZSSIBSZE EQU   *-ZSSIB
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        ECFREQ storage size                                          *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0D
ECFREQLN EQU   *-ECFREQ                ECFREQ storage size
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFEQU ,
         $SREQID ID=ZID,DSECT=YES
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         CVT   DSECT=YES
         IEFJESCT ,
         IEFJSCVT ,
         IEFJSSIB ,
         IEFJSSOB (WT),CONTIG=NO
         END
./ ADD NAME=ECFRMT   0116-21068-21304-1645-00066-00119-00031-BENMAR  31
ECFRMT   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFRMT                                                     */
*/*                                                                  */
*/* Function: Event Capture Resource Termination Manager             */
*/*                                                                  */
*/* Description: Receives control from PURGEDQ during address space  */
*/*              termination to free the SRB block and associated    */
*/*              element extension. The total length was stored by   */
*/*              SRB scheduler in the SRBPARM field.                 */
*/*                                                                  */
*/* Input Regs: R1  SRB block address                                */
*/*             R14 PURGEDQ return address                           */
*/*             R15 RMTR entry point address                         */
*/*                                                                  */
*/* Regs Usage: R1  SRB block adress                                 */
*/*             R10 base address                                     */
*/*             R14 return address                                   */
*/*                                                                  */
*/* Output Regs: R14 - return address                                */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=0, TCB mode.        */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R3 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFRMT   $ENTRY SAVE=NO                entry                     99@02C
         LR    R10,R15                 copy base
         USING ECFRMT,R10              base addressability
         LR    R9,R14                  protect return address
         USING SRB,R1                  SRB addressability
         L     R0,SRBPARM              SRB+element length
         STORAGE RELEASE,                                              +
               ADDR=(1),LENGTH=(0),SP=SP245
*
RMTEXIT  DS    0H
         LR    R14,R9                  restore return address
         BR    R14                     return to PURGEDQ
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFEQU ,
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHASRB ,
         END
./ ADD NAME=ECFRTM   0119-21068-21305-1417-00304-00316-00034-BENMAR  53
ECFRTM   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFRTM                                                     */
*/*                                                                  */
*/* Description: Event Capture Recovery Termination Manager          */
*/*                                                                  */
*/* Function: Performs recovery support functions on behalf          */
*/*           of all unlocked subsystem service routines.            */
*/*                                                                  */
*/* Input Regs: When the SDWA is supplied by RTM, the contents       */
*/*             of the registers on entry are as follows:            */
*/*                                                                  */
*/*             R0     Input parameter                               */
*/*             R1     SDWA address                                  */
*/*             R2-R12 Unpredictable                                 */
*/*             R13    Register save area address                    */
*/*             R14    Return Address                                */
*/*             R15    Entry address                                 */
*/*                                                                  */
*/*             When the SDWA is NOT supplied by RTM, the contents   */
*/*             of the registers on entry are as follows:            */
*/*                                                                  */
*/*             R0     12 (decimal)                                  */
*/*             R1     ABEND completion code                         */
*/*             R2     Address of parmlist supplied by ESTAE or 0    */
*/*             R3-R13 Unpredictable                                 */
*/*             R14    Return address                                */
*/*             R15    Entry address                                 */
*/*                                                                  */
*/* Regs Usage: R5  SRWX address                                     */
*/*             R6  STKE address                                     */
*/*             R7  STK address                                      */
*/*             R8  SDWA address                                     */
*/*             R9  SRWA address                                     */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=8/0 LPA-resident    */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Notes: The ABEND is percolated when SDWA is unavailable          */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 11072020 | Ben Marino  | Serviceability enhancements   *
* @03 | V2R3 | 11012021 | Ben Marino  | Added SVC screening support   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFRTM   $ENTRY SAVE=NO
*
**       No SDWA supplied code path
*
         USING PSA,0                flc addressability
         USING ECFRTM,R15           base addressability
         CL    R0,NOSDWA            SDWA available?
         BNE   RTM0010              yes, carry on
         DROP  R15                  release addresability
         LA    R15,0                indicate no retry
         BR    R14                  return to RTM
*
**       SDWA supplied code path
*
RTM0010  DS    0H
         STM   R14,R12,12(R13)      save RTM regs
         LR    R10,R15              copy base address
         USING ECFRTM,R10           set addressability
         LR    R8,R1                get SDWA address
         USING SDWA,R8              set addressability
*
**       Validity check input parm
*
         XR    R9,R9                zero SRWA address
         L     R7,SDWAPARM          STK address
         USING STK,R7               set addressability
         CLC   STKID,=CL4'STK'      valid indeed?
         BNE   ABEND                no, percolate ABEND
*
**       Validity check SRWA work area
*
         ICM   R6,15,STKSTKEC       current STKE init?
         BZ    ABEND                no, percolate ABEND
         USING STKE,R6              set addressability
         LA    R9,STKESRWA          SRWA address
         USING SRWA,R9              set addressability
         CLC   SRWAID,=CL4'SRWA'    valid indeed?
         BE    RTM0020              yes, carry on
         XR    R9,R9                zero SRWA address
         B     ABEND                percolate ABEND
*
RTM0020  DS    0H
         LA    R5,STKSRWX           SRWA extention address
         USING SRWX,R5              set addressability
         MVC   SRWABNRG,SDWAGRSV    copy ABEND regs
*
**       Chain recovery save area
*
         LA    R1,SRWASAVE          get RTMs save area
         ST    R13,4(,R1)           chain save area
         LR    R13,R1               set current save area
         XC    SRWAWORK,SRWAWORK    clear work flags
*
**       Capture diagnostic data
*
         MVC   SRWASUBN,MIDSUB      subsystem name
         ICM   R11,15,STKEVTA       EVT address init?
         BZ    RTM0030              no, carry on
         USING EVT,R11              set addressability
         CLC   EVTID,=CL4'EVT'      valid indeed?
         BNE   RTM0030              no, carry on
         MVC   SRWASUBN,EVTSUBNM    copy subsystem name
         OI    SRWAWORK,SRWA@EVT    valid EVT supplied
*
RTM0030  DS    0H
         XC    SRWXWTO,SRWXWTO      clear WTO listform
         XC    SRWXDUMP,SRWXDUMP    clear SDUMP listform
         MVC   SRWAAPSW,SDWAEC2     copy ABEND PSW
         MVC   SRWABEND,SDWAABCC    copy ABEND code
         MVC   SRWATEA,SDWATRN2     copy translation address
         MVC   SRWAILC,SDWAILC2     copy instruction length code
         MVC   SRWAIC,SDWAICD2      copy interrupt code
         XC    SRWADATA,SRWADATA    clear PSW data
*
**       Issue ABEND WTO message
*
         MVC   SRWXWTO(ECF999EL),ECF999E
         TM    SRWAFLG1,SRWA@NDP    SDUMP=NO?
         BZ    RTM0040              yes
         TM    STKFLG1,STK@DBUG     DEBUG=ON set?
         BZ    RTM0070              no, skip WTO & SDUMP
         MVC   SRWXWMID,=CL8'ECF199I'
*
RTM0040  DS    0H
         MVC   SRWXWSUB,SRWASUBN    show subsystem name
         MVC   SRWXWMOD,SRWALMOD    show load module name
         MVC   SRWXWRTN,SRWASECT    show subroutine name
         $CNVX SRWACONV,SRWABEND,TR=TRTABLE
         MVC   SRWACODE,SRWACONV    save ABEND code
         MVI   SRWXTYPE,C'U'        assume user,
         MVC   SRWXWCOD,SRWAUSER    ABEND code.
         CLI   SRWAUSER,C'0'        user ABEND code?
         BNE   RTM0050              yes, carry on
         MVI   SRWXTYPE,C'S'        set system,
         MVC   SRWXWCOD,SRWASYS     ABEND code.
*
RTM0050  DS    0H
         $CNVX SRWACONV,SRWARSN,TR=TRTABLE
         MVC   SRWXWRSN,SRWACONV    show RSN code
         TM    SRWAFLG1,SRWA@NWT    WTO=NO set?                    @03A
         BNZ   RTM0060              yes, skip WTO                  @03A
         WTO   MF=(E,SRWXWTO)       issue ABEND msg
         OI    SRWAWORK,SRWA@WTO    set message issued
*
**       Take SVC dump
*
RTM0060  DS    0H                                                  @03C
         TM    STKFLG2,STK@DUMP     SDUMP=YES set?                 @02C
         BZ    RTM0070              no, skip SDUMP
         TM    SRWAFLG1,SRWA@NDP    $RETRY SDUMP=NO?
         BNZ   RTM0070              yes, skip SDUMP
         TM    SDWAERRC,SDWAPERC    percolated ABEND?
         BNZ   RTM0070              yes, skip SDUMP
         MVC   SRWXDUMP(SDUMPL),SDUMP
         MVC   SRWXDSUB,SRWASUBN    show subsystem name
         MVC   SRWXDMOD,SRWALMOD    show load module name
         MVC   SRWXDRTN,SRWASECT    show subroutine name
         MVC   SRWXDCOD,SRWXTYPE    show ABEND code                @02C
         MVC   SRWXDRSN,SRWACONV    show RSN code
         LA    R1,SRWXDUSR          show,
         ST    R1,SRWXDATA          dump title
         IPK   ,                    entry protect key
         SPKA  0(0)                 set Supervisor key
         SDUMP MF=(E,SRWXDUMP)
         SPKA  0(R2)                restore entry protect key
         ST    R15,SRWASDRC         save SDUMP RC
         OI    SRWAWORK,SRWA@SDI    SDUMP issued
*
RTM0070  DS    0H
         TM    SDWAERRD,SDWACLUP    clean up only?
         BZ    RETRY                no, attempt retry
         TM    SRWAWORK,SRWA@EVT    EVT supplied?
         BZ    ABEND                no, percolate ABEND
         CLC   PSAAOLD,EVTASCB      in ECF address space?
         BNE   ABEND                no, percolate ABEND
         CLC   PSATOLD,EVTJSTCB     ECF job step TCB?
         BNE   ABEND                no, percolate ABEND
         ICM   R4,15,EVTSSCT        SSCT init?
         BZ    ABEND                no, percolate ABEND
         USING SSCT,R4              set addressability
         CLC   SSCTID,=CL4'SSCT'    valid indeed?
         BNE   ABEND                no, percolate ABEND
         $XC   SSCTSSVT,SSCTSSVT    deactivate subsysytem          @02C
         $OI   EVTFLG1,EVT@NACT     deactivated by ECFRTM          @02C
         B     ABEND                percolate ABEND
         DROP  R4
*
**       Attempt retry
*
RETRY    DS    0H
         ICM   R3,15,SRWARTRY       retry address init?
         BNZ   RETRY10              yes, test further
         CLC   STKSTKEC,STKSTKET    top SRWA address?
         BE    ABEND                yes, ABEND
*
RETRY00  DS    0H
         LA    R1,STKE@SZE          STKE size
         SLR   R6,R1                set previous STKE address
         CL    R6,STKSTKET          beyond top STKE address?
         BL    ABEND                yes, ABEND
         B     RETRY                attempt retry
*
RETRY10  DS    0H
         TM    SRWAFLG1,SRWA@PER    ABEND during retry?
         BNZ   RETRY00              yes, percolate ABEND
         OI    SRWAFLG1,SRWA@PER    indicate attempting retry
*
RETRY99  DS    0H
         MVC   SRWASFLG,SRWAFLG1    copy SRWAFLG1
         XC    SRWAWORK,SRWAWORK    zero wark flags
         MVC   SDWASRSV,SRWAGPRS    set retry regs
         SETRP RC=4,                retry                              +
               WKAREA=(R8),         SDWA address                       +
               RETADDR=(R3),        retry address                      +
               RECPARM=SRWARECP,    recovery data                      +
               RETREGS=YES,         retry regs                         +
               RECORD=YES,          LOGREC recording                   +
               FRESDWA=YES,         release SDWA                       +
               DUMP=NO
         B     RTMEXIT              exit
*
**       Percolate ABEND
*
ABEND    DS    0H
         LTR   R9,R9                SRWA init?
         BZ    ABEND00              no,
         MVC   SRWASFLG,SRWAFLG1    copy SRWAFLG1
*
ABEND00  DS    0H
         SETRP RC=0,                percolate ABEND                    +
               WKAREA=(R8)          SDWA address
         B     RTMEXIT              exit
*---------------------------------------------------------------------*
*        Exit                                                         *
*--------+---------+---------+---------+---------+---------+---------+*
RTMEXIT  DS    0H
         L     R13,4(,R13)          RTM save area address
         LM    R14,R12,12(R13)      restore RTM regs
         BR    R14                  return to RTM
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
NOSDWA   DC    AL4(12)                 no SDWA indicator
TRTABLE  DC    CL16'0123456789ABCDEF'  translate table
*---------------------------------------------------------------------*
*        WTO error message listform                                   *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECF999E  WTO   'ECF999E ECFn Service Error MODnnnnn/SUBnnnnn ABEND=0000+
                RSN=00000000',ROUTCDE=(1,11),DESC=(4),MF=L
ECF999EL EQU   *-ECF999E
*---------------------------------------------------------------------*
*        SDUMP title listform                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
SDUMP    SDUMP HDR='ECFn Service Error MODnnnnn/SUBnnnnn/0000/00000000 +
               ',SDATA=(SQA,PSA,NUC,LSQA,RGN,LPA,TRT,CSA),MF=L
SDUMPL   EQU   *-SDUMP
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHASDWA ,
         IEFJSCVT ,
         END
./ ADD NAME=ECFSAF   0129-21172-21304-1645-00227-00001-00227-BENMAR  40
ECFSAF   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFSAF                                                     */
*/*                                                                  */
*/* Description: System Authorization Facility Processor             */
*/*                                                                  */
*/* Function: Invoke security server to validate issuing authorized  */
*/*           Event Capture Facility service requests.               */
*/*                                                                  */
*/* Input Regs: R1  SAF address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  ZSAF address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor state, key=8                   */
*/*                                                                  */
*/* Restrictions: 1. R9 thru R12 are permanently assigned            */
*/*                                                                  */
*/*               2. $TRACE macro calls CANNOT be issued             */
*/*                                                                  */
*/*               3. WTO and WTOR SVCs CANNOT be issued              */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V2R2 | 05272021 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFSAF   $SRVINI                       entry
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         ST    R1,DSAIPAR              save parm reg
         MVC   DSASAFBF,0(R1)          copy SAF buffer
*
**       Locate issued command profile
*
         LA    R2,ENTITC               table entries
         LA    R8,ENTITY               command table
         USING ZSAF,R8
*
SAF0000  DS    0H
         LH    R1,ZSAFALIL             alias name length
         LTR   R1,R1                   zero?
         BZ    SAF0010                 yes
         BCTR  R1,0
         EX    R1,TSTALIAS             alias name match?
         BE    SAF0030                 yes
*
SAF0010  DS    0H
         LH    R1,ZSAFNAML             command name length
         LTR   R1,R1                   zero?
         BZ    SAF0020                 yes
         BCTR  R1,0
         EX    R1,TSTCOMND             command name match?
         BE    SAF0030                 yes
*
SAF0020  DS    0H
         LA    R8,ENTITZ(,R8)          next entry
         BCT   R2,SAF0000              loop
         MVC   DSARC,=AL4(RC8)         not found RC
         MVC   DSARSN,=AL4(RSN0872)    not found RSN
         B     SAFEXIT                 exit
*
SAF0030  DS    0H
         MVC   DSAENTTL,ZSAFENTL       init entity length
         MVC   DSAENTTY,ZSAFENTY       init entity name
*
**       Check command issuer authorization
*
         $SAF  READ,ENTITY=DSASAF
         ST    R15,DSARC               RACF RC
         ST    R0,DSARSN               RACF RSN
         ST    R1,DSASRC               SAF RC
*
**       Issue SAF call debug message
*
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    SAF0040                 no
         $WTO  MID=ECF121I,VAR1=EVTCLASS,VAR2=DSASRC,                  +
               VAR3=DSARC,VAR4=DSARSN,VAR5=DSAENTTY
*
**       Check SAF call return codes
*
SAF0040  DS    0H
         CLC   DSASRC,=AL4(RC4)        SAF RC ok?
         BH    SAFEXIT                 no, not authorized
         CLC   DSARC,=AL4(RC4)         RACF RC ok?
         BH    SAFEXIT                 no, not authorized
*
**       Command issuer is authorized
*
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
SAFEXIT  DS    0H
         $SRVXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        EXecuted Instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
TSTALIAS CLC   ZSAFALIA(*-*),DSASAFTA  EXecuted instruction
TSTCOMND CLC   ZSAFNAME(*-*),DSASAFTA  EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        ECF Pesources Profile Table                                  *
*--------+---------+---------+---------+---------+---------+---------+*
ENTITY   DS    0F
*
**    ZECF.MODIFY Profile
*
      DC AL2(0),CL4' ',AL2(4),CL8'ADD     ',AL2(11),CL32'ZECF.MODIFY'
      DC AL2(0),CL4' ',AL2(4),CL8'ACT     ',AL2(11),CL32'ZECF.MODIFY'
      DC AL2(0),CL4' ',AL2(4),CL8'REF     ',AL2(11),CL32'ZECF.MODIFY'
      DC AL2(2),CL4'T',AL2(4),CL8'SET     ',AL2(11),CL32'ZECF.MODIFY'
      DC AL2(0),CL4' ',AL2(6),CL8'INACT   ',AL2(11),CL32'ZECF.MODIFY'
      DC AL2(2),CL4'F',AL2(7),CL8'MODIFY  ',AL2(11),CL32'ZECF.MODIFY'
*
**    ZECF.DISPLAY Profile
*
      DC AL2(2),CL4'H',AL2(5),CL8'HELP    ',AL2(12),CL32'ZECF.DISPLAY'
      DC AL2(2),CL4'D',AL2(8),CL8'DISPLAY ',AL2(12),CL32'ZECF.DISPLAY'
*
**    ZECF.RECOVERY Profile
*
      DC AL2(0),CL4' ',AL2(4),CL8'TSO     ',AL2(13),CL32'ZECF.RECOVERY'
      DC AL2(0),CL4' ',AL2(5),CL8'COPY    ',AL2(13),CL32'ZECF.RECOVERY'
      DC AL2(2),CL4'E',AL2(5),CL8'EDIT    ',AL2(13),CL32'ZECF.RECOVERY'
      DC AL2(2),CL4'B',AL2(7),CL8'BROWSE  ',AL2(13),CL32'ZECF.RECOVERY'
      DC AL2(2),CL4'R',AL2(8),CL8'RECOVERY',AL2(13),CL32'ZECF.RECOVERY'
CL    DC AL2(0),CL4' ',AL2(8),CL8'COMPRESS',AL2(13),CL32'ZECF.RECOVERY'
ENTITZ   EQU   *-CL
ENTITC   EQU   (*-ENTITY)/ENTITZ
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem Data Areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFSAF ,
         $ECFVT ,
         $ECFSTK ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@RV0  EQU   X'80'                   -available
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSASRC   DS    F                       SAF retun code
         DS    0F
DSAIPAR  DS    F                       input parm reg
DSAOPAR  DS    F                       output Parm reg
DSAWORD  DS    F                       work area
         DS    0F
DSASAF   DS    0F                      $SAF entity
DSAENTTL DS    AL2                     -RACROUTE ENTITY length
DSAENTTY DS    CL(ZSAF@TTZ)            -RACROUTE ENTITY name
DSASAFL  EQU   *-DSASAF                keep it together
         DS    0F
DSASAFBF DS    0CL120                  SAF buffer
DSASAFID DS    CL1                     SAF character
DSASAFTA DS    CL119                   SAF operands
DSA@SAFZ EQU   *-DSASAFBF              SAF buffer length
         DS    0D
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         CVT   DSECT=YES
         ICHSAFP ,
         END
./ ADD NAME=ECFSRV   0199-21115-21334-1008-03809-02958-03809-BENMAR  36
ECFSRV   CSECT
*/********************************************************************/
*/*                                                                  */
*/* NAME: ECFSRV                                                     */
*/*                                                                  */
*/* FUNCTION:                                                        */
*/*   Event Capture Subsystem Event Rule Processor                   */
*/*                                                                  */
*/* DESCRIPTION:                                                     */
*/*   This subtask is attached by the Event Capture subsystem server */
*/*   jobstep task, ECFSUB, and persists for the life of the address */
*/*   space. The subtask is attached for each event type described   */
*/*   by the SRVEXEC service request table.                          */
*/*                                                                  */
*/*   The following subtasks are attached by the ECFSUB subsystem    */
*/*   jobstep task:                                                  */
*/*                                                                  */
*/*   ECFSRV(S34SRV) - Command scheduler                             */
*/*   ECFSRV(S35SRV) - WTO/R message processor                       */
*/*   ECFSRV(S35COM) - Command processor                             */
*/*   ECFSRV(ADDSRV) - Event rule add processor                      */
*/*   ECFSRV(RFRSRV) - Event rule refresh processor                  */
*/*   ECFSRV(STCSRV) - Started task recovery processor               */
*/*   ECFSRV(DIESRV) - System resources utilization processor        */
*/*   ECFSRV(SVCSRV) - SVC screening log processor                   */
*/*   ECFSRV(SYSSRV) - System address spaces monitor processor       */
*/*                                                                  */
*/* INPUT REGS: R1  EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* REGS USAGE: R8  ZIRB address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* OUTPUT REGS: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* ATTRIBUTES: Reentrant, supervisor State, Key=8                   */
*/*                                                                  */
*/* RESTRICTIONS: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 10102020 | Ben Marino  | WTOR reply ID 4-digit support *
* @03 | V1R1 | 10172020 | Ben Marino  | Resource utilization support  *
* @04 | V1R1 | 10242020 | Ben Marino  | Serviceability enhancements   *
* @05 | V2R1 | 04072021 | Ben Marino  | zOS serviceability support    *
* @06 | V2R3 | 07292021 | Ben Marino  | Enhanced Event Rule support   *
* @07 | V2R3 | 08032021 | Ben Marino  | Added MONITOR rule trigger    *
* @08 | V2R3 | 10272021 | Ben Marino  | Added SVC screening support   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFSRV   $ENTRY STACK=SUBTCB
*
**       Initialize subtask environment
*
         IPK   ,                       entry PSW key
         ST    R2,DSACKEY              save it
         L     R2,STKSTKEC             current STKE entry          @04A
         USING STKE,R2                 set addressability          @04A
         MVC   STKEKEY,DSACKEY         save key in STKE            @04A
         OI    STKFLG1,STK@SUPR        set Supervisor indicator    @04A
         DROP  R2
*
**       Test subsystem availability
*
         ST    R1,DSAIPAR              save parm reg
         LR    R11,R1                  EVT address
         USING EVT,R11                 set addressability
         CLC   EVTID,=CL4'EVT'         valid indeed?
         BE    SRV0000                 yes, carry on
         MVC   DSARSN,=AL4(RSN1068)    set RSN
         B     ABENDXIT                ABEND                       @05C
*
**       Identify Event Capture subtasks
*
SRV0000  DS    0H
         USING PSA,0
         ST    R11,STKEVTA             save EVT in stack
         TM    EVTFLG1,EVT@TERM        subsystem terminating?
         BNZ   SRVEXIT                 yes, exit
         $CALL TASKID                  ID subtask
         LTR   R15,R15                 successful?
         BZ    SRV0005                 yes, carry on
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    SRVABEND                no, ABEND
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1=DSAWTID,           show subtask ID                 +
               VAR2=PSATOLD,           show TCB address                +
               VAR3==CL7'Exiting'      show exiting
         B     SRVABEND                exit
*
**       Storage obtain processing buffers
*
SRV0005  DS    0H                                                10@07A
         OI    STKFLG4,STK@ATTC        set attach entry indicator  @08A
         $CALL INISTOR                 get buffers
         LTR   R15,R15                 successful?
         BZ    SRV0010                 yes, carrry on
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    SRVABEND                no, ABEND
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1=DSAWTID,           show subtask ID                 +
               VAR2=PSATOLD,           show TCB address                +
               VAR3==CL7'Exiting'      show exiting
         B     SRVABEND                exit
*
**       Trace service subtask entry
*
SRV0010  DS    0H
         $TRACE $ENTRY,                                                +
               MID=ECFSRV,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
**       Establish recovery environment
*
         TM    EVTFLG2,EVT@RCVY        RCV=YES?
         BZ    SRV0015                 no, skip recovery
         L     R4,STKRTMA              ECFRTM EPA
         MVC   DSAESTAE(ESTAEL),ESTAE
         ESTAE (R4),                   ECFRTM EPA                      +
               PARAM=(R9),             STK address                     +
               TOKEN=DSATOKN,          store token here            @05A+
               MF=(E,DSAESTAE)         establish recovery
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    SRV0020                 yes, carry on
*
**       Issue recovery create failed debug msg
*
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    SRVEXIT                 no, exit
         MVC   DSARSN,=AL4(RSN0512)    set error RSN
         $WTO  MID=ECF195I,                                            +
               VAR1==CL8'ECFSRV',      show routine name               +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN             show RSN
         B     ABENDXIT                ABEND                       @05C
*
**       Issue recovery bypassed warning msg
*
SRV0015  DS    0H
         $WTO  MID=ECF996W,                                            +
               VAR1=MIDNAME            show routine name
         B     SRV0025                 carry on
*
**       Activate mainline retry routine
*
SRV0020  DS    0H
         OI    DSAFLG1,DSA@STA         ESTAE established
         MVC   DSARSN,=AL4(RSN0936)    ABEND RSN
         $RETRY SRVRETRY,              activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Process TIMER driven service routines
*
SRV0025  DS    0H
         LA    R4,SRVEXEC              service routine table       @07A
         USING SRVE,R4                 set addressability          @07A
*
SRV0030  DS    0H
         CLC   SRVEEPA,SRVTEND         end of table?               @07A
         BE    SRV0040                 yes, exit loop              @07A
         CLI   SRVEFLG1,SRVE@TMR       timer driven service?       @07A
         BNE   SRV0035                 no, loop                    @07A
         CLC   SRVECALL,DSATID         caller ID match?            @07A
         BNE   SRV0035                 no, loop                    @07A
         XC    DSASRVQ(DSA@SRVQ),DSASRVQ clear processing flags    @07A
         L     R14,FLCCVT              CVT address                 @07A
         USING CVT,R14                 set addressability          @07A
         LA    R14,CVTEXIT             SVC-3 exit                  @07A
         L     R15,SRVEEPA             service routine EPA         @07A
         BR    R15                     call routine - no return    @07A
         DROP  R14                                                 @07A
*
SRV0035  DS    0H                                                  @07A
         LA    R4,SRVE@SZE(,R4)        next service routine entry  @07A
         B     SRV0030                 loop
*
SRV0040  DS    0H
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    SRVWAIT                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1=DSAWTID,           show subtask ID                 +
               VAR2=PSATOLD,           show TCB address                +
               VAR3==CL7'waiting'      show waiting
*
**       Wait for POST driven service events
*
SRVWAIT  DS    0H
         L     R3,DSAECBA              ECB word address
         $XC   0(4,R3),0(R3)           zero ECB word
         NI    DSAFLG1,XFF-DSA@SRV     reset service routine called
         OI    DSAFLG1,DSA@WAIT        entering wait state
         $WAIT ECB=(R3)                wait for requests
         NI    DSAFLG1,XFF-DSA@WAIT    reset waiting indicator
         TM    EVTFLG1,EVT@TERM        subsystem terminating?
         BNZ   SRVEXIT                 yes, exit
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    SRV0045                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1=DSAWTID,           show subtask ID                 +
               VAR2=PSATOLD,           show TCB address                +
               VAR3==CL7'working'      show working
*
**       Process POST driven service routines
*
SRV0045  DS    0H
         LA    R4,SRVEXEC              service routine table
         USING SRVE,R4                 set addressability
*
SRV0050  DS    0H
         CLC   SRVEEPA,SRVTEND         end of table?
         BE    SRV0060                 yes, exit loop
         CLI   SRVEFLG1,SRVE@PST       post driven service?        @07A
         BNE   SRV0055                 no, loop                    @07A
         CLC   SRVECALL,DSATID         caller ID match?
         BNE   SRV0055                 no, loop
         XC    DSASRVQ(DSA@SRVQ),DSASRVQ clear processing flags
         L     R15,SRVEEPA             service routine EPA
         BALR  R14,R15                 call service routine
         OI    DSAFLG1,DSA@SRV         service routine called
         B     SRV0060                 exit loop
*
SRV0055  DS    0H
         LA    R4,SRVE@SZE(,R4)        next service routine entry
         B     SRV0050                 loop
*
SRV0060  DS    0H
         TM    DSAFLG1,DSA@SRV         service routine called?
         BNZ   SRV0099                 yes, carry on
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    SRVRETRY                no, skip debug msg
         $WTO  MID=ECF104W             issue warning msg
         B     SRVRETRY                ABEND
*
SRV0099  DS    0H
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    SRVWAIT                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1=DSAWTID,           show subtask ID                 +
               VAR2=PSATOLD,           show TCB address                +
               VAR3==CL7'waiting'      show waiting
         B     SRVWAIT                 wait for requests
*
**       ABEND recovery routine
*
SRVRETRY DS    0H
         TM    EVTFLG1,EVT@TERM        subsystem terminating?
         BNZ   SRVEXIT                 yes, exit
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    SRVABEND                no, ABEND
         $WTO  MID=ECF193I,                                            +
               VAR1=DSAWTID            show task ID
*
**       ABEND recovery routine
*
SRVABEND DS    0H
         $WTO  MID=ECF067E,            subtask init failed             +
               VAR1=DSAWTID            show task ID
         $OI   EVTFLG1,EVT@TERM        set termination indicator
         $POST EVTJSECB                post Jobstep task ECB
         B     SRVEXIT                 no, exit
*---------------------------------------------------------------------*
*        ABEND Exit                                                   *
*--------+---------+---------+---------+---------+---------+---------+*
ABENDXIT DS    0H
         L     R3,DSARSN               show RSN in R3
         ABEND X'FFB',DUMP,REASON=(R3) ABEND                       @05C
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
SRVEXIT  DS    0H
         CLC   EVTID,=CL4'EVT'         EVT init?
         BNE   SRVXIT00                no, skip trace call
         $TRACE $EXIT,                                                 +
               MID=ECFSRV,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
SRVXIT00 DS    0H
         TM    DSAFLG1,DSA@STA         ESTAE active?
         BZ    SRVXIT10                no, delete
         NI    DSAFLG1,XFF-DSA@STA     reset indicator
         ESTAE 0,TOKEN=DSATOKN         yes, delete recovery        @05C
*
SRVXIT10 DS    0H
         $EXIT STACK=SUBTCB,           exit                            +
               PARM=DSAOPAR,RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Service Routine Table                                        *
*--------+---------+---------+---------+---------+---------+---------+*
SRVEXEC  DS    0F
         $SRVCALL TYPE=INITIAL
*
         $SRVCALL TYPE=ENTRY,                                          +
               EP=S34SRV,            service routine EPA               +
               CALLER=S34,           caller ID                         +
               TRIGGER=POST          POST driver service           @07A
*
         $SRVCALL TYPE=ENTRY,                                          +
               EP=S35SRV,            service routine EPA               +
               CALLER=S35,           caller ID                         +
               TRIGGER=POST          POST driver service           @07A
*
         $SRVCALL TYPE=ENTRY,                                          +
               EP=RFRSRV,            service routine EPA               +
               CALLER=RFR,           caller ID                         +
               TRIGGER=POST          POST driver service           @07A
*
         $SRVCALL TYPE=ENTRY,                                          +
               EP=ADDSRV,            service routine EPA               +
               CALLER=ADD,           caller ID                         +
               TRIGGER=POST          POST driver service           @07A
*
         $SRVCALL TYPE=ENTRY,                                          +
               EP=COMSRV,            service routine EPA               +
               CALLER=COM,           caller ID                         +
               TRIGGER=POST          POST driver service           @07A
*
         $SRVCALL TYPE=ENTRY,                                          +
               EP=STCSRV,            service routine EPA               +
               CALLER=STC,           caller ID                         +
               TRIGGER=POST          POST driver service           @07A
*
         $SRVCALL TYPE=ENTRY,                                      @03A+
               EP=DIESRV,            service routine EPA               +
               CALLER=DIE,           caller ID                         +
               TRIGGER=POST          POST driver service           @07A
*
         $SRVCALL TYPE=ENTRY,                                      @08A+
               EP=SVCSRV,            service routine EPA               +
               CALLER=XVC,           caller ID                         +
               TRIGGER=POST          POST driver service           @07A
*
         $SRVCALL TYPE=ENTRY,                                      @07A+
               EP=SYSSRV,            service routine EPA               +
               CALLER=SYS,           caller ID                         +
               TRIGGER=TIMER         TIMER driven service
*
         $SRVCALL TYPE=FINAL
SRV@SIZE EQU   *-SRVEXEC
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ESTAE    ESTAE 0,MF=L                listform
ESTAEL   EQU   *-ESTAE
         DS    0F
SRVTEND  DC    XL4'FFFFFFFF'         end-of table marker
SRVTIMER DC    CL8'00000500'         hhmmssth
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: S34SRV                                                     */
*/*                                                                  */
*/* Function: Command Event rule service routine                     */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  input parameter                                  */
*/*             R1  input parameter                                  */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  recursion value                                  */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
S34SRV   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0916)    set error RSN
         $RETRY S34RETRY,              set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
         LA    R5,16                   recursive loop value
*
**       Serialize event rule execution
*
         MVC   DSAENQ(ENQS34L),ENQS34  init listform
         LA    R2,EVTSRVMJ             major name
         LA    R3,EVTSRVMN             minor name
         ENQ   ((R2),(R3)),MF=(E,DSAENQ)
*
**       Dequeue command REB cell element
*
S340000  DS    0H
         $LOCK EVTCMDLK                lock REB queue
         USING REB,R8                  REB addressability
         ICM   R8,15,EVTCMDQA          queued command REBs?
         BNZ   S340010                 yes, carry on
         $UNLOCK EVTCMDLK              unlock command REB queue
         B     S340030                 exit REB loop
*
S340010  DS    0H
         ST    R8,DSAREBA              save REB address
         $MVC  EVTCMDQA,REBCHPTR       make next REB top REB
         $UNLOCK EVTCMDLK              unlock CMD REB queue
*
**       Free command SRB Cell element
*
         MVC   DSASRBA,REBSRBA         copy SRB cell address
         $XC   REBSRBA,REBSRBA         zero SRB cell address
         ICM   R3,15,DSASRBA           SRB cell init?
         BZ    S340020                 no, carry on
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRBCP,          SRB cell pool ID                +
               CELL=DSASRBA,           SRB cell address                +
               MODE=COND               conditional request
         XC    DSASRBA,DSASRBA         SRB cell freed
*
**       Process command CMD(data)                                 @06A
*
S340020  DS    0H                                                  @06A
         TM    REBFLG2,REB@CMND        CMD('command')?             @06A
         BZ    S340021                 no, carry on                @06C
         $CALL COMMAND                 issue CMD(data) command     @06A
*
**       Process message WTO(data)                                 @06A
*
S340021  DS    0H                                                  @06A
         TM    REBFLG2,REB@WTOM        WTO('command')?             @06A
         BZ    S340022                 no, carry on                @06C
         $CALL MESSAGE                 issue WTO(data) message     @06A
*
**       Process command event rule
*
S340022  DS    0H
         TM    REBFLG2,REB@NEXC        EXEC() supplied?            @06A
         BNZ   S340025                 no                          @06A
         MVC   DSACALLR,4(R10)         ID caller
         $CALL RULPRO                  process rule
         OI    DSAS34FL,DSA@4QUE       function processed
*
**       Free command REB cell element
*
S340025  DS    0H
         $CPOOL FREE,                  free cell                       +
               CPID=EVTREBCP,          cell pool ID                    +
               CELL=DSAREBA            REB cell address
         XC    DSAREBA,DSAREBA         REB cell freed
         B     S340000                 loop
*
**       No MGCR SRE elements found
*
S340030  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         TM    DSAS34FL,DSA@4QUE       element processed?
         BNZ   S34EXIT                 yes, exit
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    S34EXIT                 no, exit
         $WTO  MID=ECF117I,VAR1==CL8'EVTS34QA'
         B     S34EXIT                 exit
*
**       ABEND recovery clean up routine
*
S34RETRY DS    0H
         ICM   R3,15,DSASRBA           SRB cell freed?
         BZ    S34RTY00                yes, carry on
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRBCP,          SRB cell pool ID                +
               CELL=DSASRBA,           SRB cell address                +
               MODE=COND               conditional request
         XC    DSASRBA,DSASRBA         SRB cell element freed
*
S34RTY00 DS    0H
         ICM   R3,15,DSAREBA           REB cell freed?
         BZ    S34RTY10                no, process next REB
         $CPOOL FREE,                  free cell                       +
               CPID=EVTREBCP,          cell pool ID                    +
               CELL=DSAREBA            REB cell address
         XC    DSAREBA,DSAREBA         REB cell element freed
*
S34RTY10 DS    0H
         $UNLOCK EVTCMDLK              unlock REB queue
         BCT   R5,S340000              process next REB
         $WTO  MID=ECF905E,VAR1==CL6'S34SRV'
*
**       Exit
*
S34EXIT  DS    0H
         MVC   DSADEQ(DEQS34L),DEQS34  init listform
         LA    R2,EVTSRVMJ             major name
         LA    R3,EVTSRVMN             minor name
         DEQ   ((R2),(R3)),MF=(E,DSADEQ)
*
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ENQS34   ENQ   (*-*,*-*,E,8,SYSTEM),RET=NONE,MF=L
ENQS34L  EQU   *-ENQS34
         DS    0F
DEQS34   DEQ   (*-*,*-*,8,SYSTEM),MF=L
DEQS34L  EQU   *-DEQS34
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: S35SRV                                                     */
*/*                                                                  */
*/* Function: WTO/R event rule service routine                       */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  input parameter                                  */
*/*             R1  input parameter                                  */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  recursion value                                  */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
S35SRV   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0920)    set error RSN
         $RETRY S35RETRY,              set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
         LA    R5,16                   recursive loop value
*
**       Serialize event rule execution
*
         MVC   DSAENQ(ENQS35L),ENQS35  init listform
         LA    R2,EVTSRVMJ             major name
         LA    R3,EVTSRVMN             minor name
         ENQ   ((R2),(R3)),MF=(E,DSAENQ)
*
**       Dequeue WTO REB cell element
*
S350000  DS    0H
         $LOCK EVTWTOLK                lock WTO REB queue
         USING REB,R8                  set addressability
         ICM   R8,15,EVTWTOQA          queued message REBs?
         BNZ   S350010                 yes, carry on
         $UNLOCK EVTWTOLK              unlock WTO REB queue
         B     S350040                 exit REB queue loop
*
S350010  DS    0H
         ST    R8,DSAREBA              save REB address
         $MVC  EVTWTOQA,REBCHPTR       make next REB top REB
         $UNLOCK EVTWTOLK              unlock WTO REB queue
*
**       Free WTO SRB Cell element
*
         MVC   DSASRBA,REBSRBA         copy SRB cell address
         $XC   REBSRBA,REBSRBA         zero SRB cell address
         ICM   R3,15,DSASRBA           SRB cell init?
         BZ    S350020                 no, carry on
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRBCP,          SRB cell pool ID                +
               CELL=DSASRBA,           SRB cell address                +
               MODE=COND               conditional request
         XC    DSASRBA,DSASRBA         SRB cell element freed
*
**       Process WTOR message REPLY(data)
*
S350020  DS    0H
         TM    REBFLG1,REB@WTOR        WTOR message?
         BZ    S350025                 no, test further            @06C
         TM    REBFLG2,REB@RPLY        REPLY(data)?
         BZ    S350025                 no, test further            @06C
         $CALL REPLY                   yes, process reply
*
**       Process command CMD(data)                                 @06A
*
S350025  DS    0H                                                  @06A
         TM    REBFLG2,REB@CMND        CMD('command')?             @06A
         BZ    S350026                 no, carry on                @06C
         $CALL COMMAND                 issue CMD(data) command     @06A
*
**       Process message WTO(data)                                 @06A
*
S350026  DS    0H                                                  @06A
         TM    REBFLG2,REB@WTOM        WTO('command')?             @06A
         BZ    S350030                 no, carry on                @06C
         $CALL MESSAGE                 issue WTO(data) message     @06A
*
**       Process message event rule
*
S350030  DS    0H
         TM    REBFLG2,REB@NEXC        EXEC() supplied?            @06A
         BNZ   S350035                 no                          @06A
         MVC   DSACALLR,4(R10)         ID caller
         $CALL RULPRO                  process rule
         OI    DSAS35FL,DSA@5QUE       element processed
*
**       Free WTO REB cell element
*
S350035  DS    0H                                                  @06A
         $CPOOL FREE,                  free cell                       +
               CPID=EVTREBCP,          cell pool ID                    +
               CELL=DSAREBA            REB cell address
         XC    DSAREBA,DSAREBA         REB cell element freed
         B     S350000                 process next REB
*
**       No WTO/R SRE elements found
*
S350040  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         TM    DSAS35FL,DSA@5QUE       element processed?
         BNZ   S35EXIT                 yes, exit
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    S35EXIT                 no, exit
         $WTO  MID=ECF117I,VAR1==CL8'EVTS35QA'
         B     S35EXIT                 exit
*
**       ABEND recovery clean up
*
S35RETRY DS    0H
         ICM   R3,15,DSASRBA           SRB cell freed?
         BZ    S35RTY00                yes, carry on
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRBCP,          SRB cell pool ID                +
               CELL=DSASRBA,           SRB cell address                +
               MODE=COND               conditional request
         XC    DSASRBA,DSASRBA         SRB cell element freed
*
S35RTY00 DS    0H
         ICM   R3,15,DSAREBA           REB cell freed?
         BZ    S35RTY10                no, carry on
         $CPOOL FREE,                  free cell                       +
               CPID=EVTREBCP,          cell pool ID                    +
               CELL=DSAREBA            REB cell address
         XC    DSAREBA,DSAREBA         REB cell element freed
*
S35RTY10 DS    0H
         $UNLOCK EVTWTOLK              unlock WTO REB queue
         BCT   R5,S350000              process next REB
         $WTO  MID=ECF905E,VAR1==CL6'S35SRV'
*
**       Exit
*
S35EXIT  DS    0H
         MVC   DSADEQ(DEQS35L),DEQS35  init listform
         LA    R2,EVTSRVMJ             major name
         LA    R3,EVTSRVMN             minor name
         DEQ   ((R2),(R3)),MF=(E,DSADEQ)
*
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ENQS35   ENQ   (*-*,*-*,E,8,SYSTEM),RET=NONE,MF=L
ENQS35L  EQU   *-ENQS35
         DS    0F
DEQS35   DEQ   (*-*,*-*,8,SYSTEM),MF=L
DEQS35L  EQU   *-DEQS35
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ADDSRV                                                     */
*/*                                                                  */
*/* Function: Event rule add service routine                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  input parameter                                  */
*/*             R1  input parameter                                  */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  RTBE addrss                                      */
*/*             R6  RTB address                                      */
*/*             R7  SRE address                                      */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R10 Base address                                     */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ADDSRV   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0928)    set error RSN
         $RETRY ADD0999,               set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Dequeue SRE cell element
*
ADD0000  DS    0H
         $LOCK EVTADDLK                lock add SRE queue
         USING SRE,R7                  SRE addressability
         ICM   R7,15,EVTADDQA          queued SREs?
         BNZ   ADD0005                 yes, carry on
         $UNLOCK EVTADDLK              no, unlock add SRE queue
         B     ADD0140                 exit SRE queue loop
*
ADD0005  DS    0H
         ST    R7,DSASREA              save SRE address
         $MVC  EVTADDQA,SRECHPTR       make next SRE top SRE
         $UNLOCK EVTADDLK              unlock add SRE queue
*
**       Trace rule add request
*
         $TRACE $RULEADD,                                              +
               MID=ECFSRV,             trace caller                    +
               A=(R7),                 trace storage addrss            +
               LN=SRE@SIZE             trace storage size
*
**       Free SRB Cell element
*
         MVC   DSASRBA,SRESRBA         copy SRB cell address
         $XC   SRESRBA,SRESRBA         zero SRE cell address
         ICM   R3,15,DSASRBA           SRB cell init?
         BZ    ADD0010                 no, carry on
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRBCP,          SRB cell pool ID                +
               CELL=DSASRBA,           SRB cell address                +
               MODE=COND               conditional request
         XC    DSASRBA,DSASRBA         SRB cell freed
*
**       Copy SRE element data locally
*
ADD0010  DS    0H
         MVC   DSAMEMBR,SREMEMBR       copy member name
         MVC   DSASREC(SRE@SIZE),SRE   copy SRE block              @05A
         MVC   DSASDATA(DSASDATL),SREDATA copy SRE data buffer
         MVC   DSARUNAS,EVTRUNAS       assume RUNAS default
         OI    DSAADDFL,DSA@RACT       assume MODE=ACTIVE default
*
**       Free SRE cell element
*
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRECP,          cell pool ID                    +
               CELL=DSASREA,           SRE cell address                +
               MODE=COND               conditional request
         XC    DSASREA,DSASREA         SRE cell freed
         DROP  R7
*
**       Validity check add operands
*
         CLI   DSASDATA,COMMA          RUNAS= or MODE= specified?
         BNE   ADD0065                 no, carry on
         LA    R3,DSASDATA             add operand address
         LA    R2,DSASDATL-14          data operand length
*
ADD0015  DS    0H
         OI    DSAADDFL,DSA@RUNS       assume RUNAS found
         MVC   DSARUNAS,=CL3'STC'      assume RUNAS=STC
         CLC   0(9,R3),=CL9'RUNAS=STC' rule runs as STC?
         BE    ADD0020                 yes, carry on
         MVC   DSARUNAS,=CL3'SUB'      assume RUNAS=SUB
         CLC   0(9,R3),=CL9'RUNAS=SUB' rule runs in subsystem?
         BE    ADD0020                 yes, carry on
         OI    DSAADDFL,DSA@RUNJ       assume,
         MVC   DSARUNAS,=CL3'JOB'      RUNAS=JOB.
         CLC   0(9,R3),=CL9'RUNAS=JOB' rule runs as batch JOB?
         BE    ADD0020                 yes, carry on
         NI    DSAADDFL,XFF-DSA@RUNJ   reset RUNAS=JOB indicator
         LA    R3,1(,R3)               walk thru text
         BCT   R2,ADD0015              loop
         MVC   DSARUNAS,EVTRUNAS       use RUNAS default
         NI    DSAADDFL,XFF-DSA@RUNS   RUNAS not specified
*
ADD0020  DS    0H
         LA    R3,DSASDATA             add operand address
         LA    R2,DSASDATL-14          data operand length
*
ADD0025  DS    0H
         OI    DSAADDFL,DSA@MODE       assume MODE found
         OI    DSAADDFL,DSA@RACT       assume MODE=ACTIVE
         CLC   0(11,R3),=CL11'MODE=ACTIVE'  active mode?
         BE    ADD0030                 yes, carry on
         CLC   0(8,R3),=CL8'MODE=ACT'  active mode?
         BE    ADD0030                 yes, carry on
         NI    DSAADDFL,XFF-DSA@RACT   assume MODE=INACTIVE
         CLC   0(13,R3),=CL13'MODE=INACTIVE' inactive mode?
         BE    ADD0030                 yes, carry on
         CLC   0(10,R3),=CL10'MODE=INACT'   inactive mode?
         BE    ADD0030                 yes, carry on
         LA    R3,1(,R3)               walk thru text
         BCT   R2,ADD0025              loop
         OI    DSAADDFL,DSA@RACT       set MODE=ACTIVE default
         NI    DSAADDFL,XFF-DSA@MODE   MODE not specified
*
ADD0030  DS    0H
         TM    DSAADDFL,DSA@RUNJ       RUNAS=JOB specified?
         BZ    ADD0055                 no, carry on
         LA    R3,DSASDATA             add operand address
         LA    R2,DSASDATL-14          data operand length
*
ADD0035  DS    0H
         OI    DSAADDFL,DSA@JOBN       assume JOBNAME found
         CLC   0(8,R3),=CL8'JOBNAME='  jobname specified?
         BE    ADD0040                 yes, carry on
         LA    R3,1(,R3)               walk thru text
         BCT   R2,ADD0035              loop
         MVC   DSAJOBNM,DSAMEMBR       set RUNAS=JOB jobname default
         NI    DSAADDFL,XFF-DSA@JOBN   JOBNAME not specified
         B     ADD0055                 carry on
*
ADD0040  DS    0H
         LA    R2,8                    loop value
         LA    R3,8(,R3)               jobnmae address
         LR    R1,R3                   copy jobname address
         MVI   DSAJOBNM,BLANK          clear,
         MVC   DSAJOBNM+1(7),DSAJOBNM  jobname field.
*
ADD0045  DS    0H
         CLI   0(R1),C' '              valid jobname?
         BE    ADD0050                 no, error
         LA    R1,1(,R1)               walk thru jobname
         BCT   R2,ADD0045              loop
*
ADD0050  DS    0H
         LTR   R1,R1                   null jobname?
         BE    ADD0055                 yes, error
         SLR   R1,R3                   get jobname length
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYJOBN             extract jobname
*
ADD0055  DS    0H
         TM    DSAADDFL,DSA@MODE       valid operand found?
         BNZ   ADD0065                 yes, carry on
         TM    DSAADDFL,DSA@RUNS       valid operand found?
         BNZ   ADD0065                 yes, carry on
         TM    DSAADDFL,DSA@JOBN       valid operand found?
         BNZ   ADD0065                 yes, carry on
*
**       Issue event rule add error msg
*
ADD0060  DS    0H
         MVC   DSARSN,=AL4(RSN1008)    set error RSN
         $WTO  MID=ECF044E,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2=DSARSN             show reason code
         B     ADD0000                 loop
*
**       Process event rule add request
*
ADD0065  DS    0H
         USING RTB,R6                  RTB addressability
         ICM   R6,15,EVTRTADD          RTB table init?             @04C
         BNZ   ADD0070                 yes, carry on
         MVC   DSARSN,=AL4(RSN1004)    set error RSN
         $WTO  MID=ECF044E,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2=DSARSN             show reason code
         B     ADD0000                 loop
*
**       Initialize RTBE rule add entry
*
ADD0070  DS    0H
         LA    R5,RTB@SIZE(,R6)        1st RTBE entry address
         ST    R5,RTBCURR              current RTBE entry address
         USING RTBE,R5                 RTBE addressability
         ST    R5,DSARTBE              save RTBE address
         XC    RTBE(RTBE@SZE),RTBE     scrub RTBE entry
         MVC   RTBEID,=CL4'RTBE'       ID
         LA    R1,1                    get count
         ST    R1,RTBENTY              init count
         OI    RTBEFLG1,RTBE@ADD       init add indicator
         MVC   RTBEMEMB,DSAMEMBR       init member name
         MVC   RTBEJOBN,DSAJOBNM       init job name
         MVC   RTBERUNS,DSARUNAS       init RUNAS setting
         CLC   RTBERUNS,=CL3'SUB'      RUNAS=SUB
         BE    ADD0075                 yes, carry on
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BNE   ADD0075                 no, carry on
         OI    RTBEFLG1,RTBE@DIS       yes, disable rule
         NI    RTBEFLG1,XFF-RTBE@ACT   reset active indicator
         B     ADD0080                 carry on
*
ADD0075  DS    0H
         TM    DSAADDFL,DSA@RACT       MODE=ACTIVE specified?
         BZ    ADD0080                 no, carry on
         OI    RTBEFLG1,RTBE@ACT       set RTBE active indicator
*
**       Add requested event rule(s)
*
ADD0080  DS    0H
         LA    R0,=CL4'ADD'            ADDSRV caller
         LA    R1,DSAMEMBR             member name address
         MVC   STKRTBAD,EVTRTADD       set RTB table address       @04A
         $CALL VR=EVTREBA              create REB/REBX elements
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    ADD0090                 yes, carry on
         MVC   DSARSN,=AL4(RSN1012)    set error RSN
         $WTO  MID=ECF044E,                                            +
               VAR1=DSAMEMBR,          show requested member name      +
               VAR2=DSARSN             show error RSN code
         B     ADD0000                 loop
*
**       Locate REB in staging queue
*
ADD0090  DS    0H
         $LOCK EVTSTGLK                lock staging REB queue
         ICM   R8,15,EVTSTGQA          queued REBs?
         BNZ   ADD0100                 yes, test further
         $UNLOCK EVTSTGLK              unlock staging REB queue
         $UNLOCK EVTADDLK              unlock add SRE queue
         MVC   DSARSN,=AL4(RSN1016)    set error RSN
         $WTO  MID=ECF044E,                                            +
               VAR1=DSAMEMBR,          show requested member name      +
               VAR2=DSARSN             show error RSN code
         B     ADDEXIT                 exit
*
ADD0100  DS    0H
         USING REB,R8                  set addressability
         CLC   REBMEMBR,DSAMEMBR       event member name found?
         BE    ADD0110                 yes, carry on
         ICM   R8,15,REBCHPTR          more REBs?
         BNZ   ADD0100                 yes, loop
         $UNLOCK EVTSTGLK              unlock staging REB queue
         MVC   DSARSN,=AL4(RSN1020)    set error RSN
         $WTO  MID=ECF044E,                                            +
               VAR1=DSAMEMBR,          show requested member name      +
               VAR2=DSARSN             show error RSN code
         B     RFR0000                 loop
*
**       Remove REB from active queue
*
ADD0110  DS    0H
         $UNLOCK EVTSTGLK              unlock staging REB queue
         $CALL REMREB                  dequeue REB from active queue
         LTR   R15,R15                 successful?
         BZ    ADD0120                 yes, carry on
         $WTO  MID=ECF044E,                                            +
               VAR1=DSAMEMBR,          show requested member name      +
               VAR2=DSARSN             show requested RSN code
         B     RFR0000                 loop
*
**       Copy staged REB to active queue
*
ADD0120  DS    0H
         $CALL STGREB                  copy REB to active queue
         LTR   R15,R15                 successful?
         BZ    ADD0130                 yes, carry on
         $WTO  MID=ECF044E,                                            +
               VAR1=DSAMEMBR,          show requested member name      +
               VAR2=DSARSN             show requested RSN code
         B     RFR0000                 loop
*
**       Issue Add completed msg
*
ADD0130  DS    0H
         $WTO  MID=ECF047I,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2==CL32'add completed successfully'
         OI    DSAADDFL,DSA@AQUE       add processed
         B     ADD0000                 loop
*
**       No Add SRE elements found
*
ADD0140  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         TM    DSAADDFL,DSA@AQUE       element processed?
         BNZ   ADDEXIT                 yes, exit
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    ADDEXIT                 no, exit
         $WTO  MID=ECF117I,VAR1==CL8'EVTADDQA'
         B     ADDEXIT                 exit
*
**       ABEND recovery clean up
*
ADD0999  DS    0H
         $UNLOCK EVTADDLK              unlock add SRE queue
         $UNLOCK EVTREBLK              unlock active REB queue
         $UNLOCK EVTSTGLK              unlock staging REB queue
         $WTO  MID=ECF066E,            function ABENDed                +
               VAR1=DSARSN,            show RSN                        +
               VAR2=DSASDATA           show command
*
ADDEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
COPYJOBN MVC   DSAJOBNM(*-*),0(R3)     EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RFRSRV                                                     */
*/*                                                                  */
*/* Function: Event rule refresh service routine                     */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  input parameter                                  */
*/*             R1  input parameter                                  */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  RTBE addrss                                      */
*/*             R6  RTB address                                      */
*/*             R7  SRE address                                      */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RFRSRV   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0932)    set error RSN
         $RETRY RFR0099,               set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Dequeue refresh SRE element
*
RFR0000  DS    0H
         $LOCK EVTRFRLK                lock refresh SRE queue
         ICM   R7,15,EVTRFRQA          queued SREs'
         BNZ   RFR0005                 yes, carry on
         $UNLOCK EVTRFRLK              no, unlock refresh SRE queue
         B     RFR0060                 exit SRE queue loop
*
RFR0005  DS    0H
         USING SRE,R7                  SRE addressability
         ST    R7,DSASREA              save SRE address
         $MVC  EVTRFRQA,SRECHPTR       put next refresh SRE on top
         $UNLOCK EVTRFRLK              unlock refresh SRE queue
*
**       Trace rule refresh request
*
         $TRACE $RULEREF,                                              +
               MID=ECFSRV,             trace caller                    +
               A=(R7),                 trace storage addrss            +
               LN=SRE@SIZE             trace storage size
*
**       Free SRB Cell element
*
         MVC   DSASRBA,SRESRBA         copy SRB cell address
         $XC   SRESRBA,SRESRBA         zero cell address
         ICM   R3,15,DSASRBA           SRB cell init?
         BZ    RFR0010                 no, carry on
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRBCP,          SRB cell pool ID                +
               CELL=DSASRBA,           SRB cell address                +
               MODE=COND               conditional request
         XC    DSASRBA,DSASRBA         SRB cell freed
*
**       Free SRE cell element
*
RFR0010  DS    0H
         MVC   DSARUNAS,SRERUNAS       copy RUNAS setting
         MVC   DSAMEMBR,SREMEMBR       copy rule member name
         MVC   DSAJOBNM,SREJOBNM       copy rule job name
         MVC   DSASREC(SRE@SIZE),SRE   copy SRE block              @05A
         MVC   DSASDATA(DSASDATL),SREDATA copy SRE data
         TM    SREFLG1,SRE@WACT        was REB active?
         BZ    RFR0012                 no, carry on
         OI    DSARFRFL,DSA@WACT       set REB was active
*
RFR0012  DS    0H
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRECP,          cell pool ID                    +
               CELL=DSASREA            SRE cell address
         XC    DSASREA,DSASREA         SRE cell freed
         DROP  R7
*
**       Process event rule refresh request
*
         ICM   R6,15,EVTRTRFR          RTB table init?             @04C
         BNZ   RFR0015                 yes, carry on
         MVC   DSARSN,=AL4(RSN0900)    set error RSN
         $WTO  MID=ECF043E,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2=DSARSN             show reason code
         B     RFR0000                 loop
*
RFR0015  DS    0H
         USING RTB,R6                  RTB addressability
         CLC   RTBID,=CL4'RTB'         valid indeed?
         BE    RFR0020                 yes, carry on
         MVC   DSARSN,=AL4(RSN0904)    set error RSN
         $WTO  MID=ECF043E,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2=DSARSN             show reason code
         B     RFR0000                 loop
*
**       Initialize RTBE refresh entry
*
RFR0020  DS    0H
         LA    R5,RTB@SIZE(,R6)        1st RTBE entry
         ST    R5,RTBCURR              set current RTBE entry
         USING RTBE,R5                 RTBE addressability
         ST    R5,DSARTBE              save RTBE address
         XC    RTBE(RTBE@SZE),RTBE     scrub RTBE entry
         MVC   RTBEID,=CL4'RTBE'       ID
         LA    R1,1                    get count
         ST    R1,RTBENTY              init count
         OI    RTBEFLG1,RTBE@RFR       init refresh indicator
         MVC   RTBEMEMB,DSAMEMBR       init member name
         MVC   RTBEJOBN,DSAJOBNM       init job name
         MVC   RTBERUNS,DSARUNAS       init RUNAS setting
         CLC   RTBERUNS,=CL3'SUB'      RUNAS=SUB?
         BE    RFR0022                 yes, carry on
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BNE   RFR0022                 no, carry on
         OI    RTBEFLG1,RTBE@DIS       yes, disable rule
         NI    RTBEFLG1,XFF-RTBE@ACT   reset active indicator
         B     RFR0025                 carry on
*
RFR0022  DS    0H
         TM    DSARFRFL,DSA@WACT       was REB active?
         BZ    RFR0025                 no, carry on
         OI    RTBEFLG1,RTBE@ACT       set RTBE active indicator
*
**       Refresh requested event rule(s)
*
RFR0025  DS    0H
         LA    R0,=CL4'RFR'            RFRSRV caller
         LA    R1,DSAMEMBR             member name address
         MVC   STKRTBAD,EVTRTRFR       set RTB table address       @04A
         $CALL VR=EVTREBA              create REB/REBX elements
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    RFR0030                 yes, carry on
         MVC   DSARSN,=AL4(RSN0908)    set error RSN
         $CALL UNDORF                  undo refresh & issue $WTO
         B     RFR0000                 loop
*
**       Locate REB in staging queue
*
RFR0030  DS    0H
         $LOCK EVTSTGLK                lock staging REB queue
         ICM   R8,15,EVTSTGQA          queued REBs?
         BNZ   RFR0035                 yes, test further
         $UNLOCK EVTSTGLK              unlock staging REB queue
         MVC   DSARSN,=AL4(RSN0980)    set error RSN
         $CALL UNDORF                  undo refresh & issue $WTO
         B     RFREXIT                 exit
*
RFR0035  DS    0H
         USING REB,R8                  set addressability
         CLC   REBMEMBR,DSAMEMBR       event member name found?
         BE    RFR0040                 yes, carry on
         ICM   R8,15,REBCHPTR          more REBs?
         BNZ   RFR0035                 yes, loop
         $UNLOCK EVTSTGLK              unlock staging REB queue
         MVC   DSARSN,=AL4(RSN0988)    set error RSN
         $CALL UNDORF                  undo refresh & issue $WTO
         B     RFR0000                 loop
*
**       Remove REB from active queue
*
RFR0040  DS    0H
         $UNLOCK EVTSTGLK              unlock staging REB queue
         $CALL REMREB                  dequeue REB from active queue
         LTR   R15,R15                 successful?
         BZ    RFR0045                 yes, carry on
         $WTO  MID=ECF043E,                                            +
               VAR1=DSAMEMBR,          show requested member name      +
               VAR2=DSARSN             show requested RSN code
         B     RFR0000                 loop
*
**       Copy staged REB to active queue
*
RFR0045  DS    0H
         $CALL STGREB                  copy REB to active queue
         LTR   R15,R15                 successful?
         BZ    RFR0050                 yes, carry on
         $WTO  MID=ECF043E,                                            +
               VAR1=DSAMEMBR,          show requested member name      +
               VAR2=DSARSN             show requested RSN code
         B     RFR0000                 loop
*
**       Issue refresh completed msg
*
RFR0050  DS    0H
         $WTO  MID=ECF047I,                                            +
               VAR1=DSAMEMBR,          show member name                +
               VAR2==CL32'refresh completed successfully'
         OI    DSARFRFL,DSA@RQUE       refresh processed
         B     RFR0000                 loop
*
**       No refresh SRE elements foumd
*
RFR0060  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         TM    DSARFRFL,DSA@RQUE       element processed?
         BNZ   RFREXIT                 yes, exit
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    RFREXIT                 no, exit
         $WTO  MID=ECF117I,VAR1==CL8'EVTRFRQA'
         B     RFREXIT                 exit
*
**       ABEND recovery clean up
*
RFR0099  DS    0H
         $UNLOCK EVTRFRLK              unlock refresh SRE queue
         $UNLOCK EVTREBLK              unlock active REB queue
         $UNLOCK EVTSTGLK              unlock staging REB queue
         $WTO  MID=ECF066E,            function ABENDed                +
               VAR1=DSARSN,            show RSN                        +
               VAR2=DSASDATA           show command
*
RFREXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: COMSRV                                                     */
*/*                                                                  */
*/* Function: Display/Modify commands service routine                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  input parameter                                  */
*/*             R1  input parameter                                  */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  SRE address                                      */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
COMSRV   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0934)    set error RSN
         $RETRY COM0099,               set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Dequeue command SRE element
*
COM0000  DS    0H
         $LOCK EVTCOMLK                lock SRE queue
         ICM   R7,15,EVTCOMQA          queued SREs'
         BNZ   COM0010                 yes, carry on
         $UNLOCK EVTCOMLK              unlock SRE queue
         B     COM0030                 exit SRE queue loop
*
COM0010  DS    0H
         USING SRE,R7                  SRE addressability
         ST    R7,DSASREA              save SRE address
         $MVC  EVTCOMQA,SRECHPTR       put next SRE on top
         $UNLOCK EVTCOMLK              unlock SRE queue
*
**       Free SRB Cell element
*
         MVC   DSASRBA,SRESRBA         copy SRB cell address
         $XC   SRESRBA,SRESRBA         zero cell address
         ICM   R3,15,DSASRBA           SRB cell init?
         BZ    COM0020                 no, carry on
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRBCP,          SRB cell pool ID                +
               CELL=DSASRBA,           SRB cell address                +
               MODE=COND               conditional request
         XC    DSASRBA,DSASRBA         SRB cell freed
*
**       Copy issued subsystem command
*
COM0020  DS    0H
         MVC   DSASCID,SRESCID         copy console ID
         MVC   DSASREC(SRE@SIZE),SRE   copy SRE block              @05A
         MVC   DSASDATA(DSASDATL),SREDATA copy SRE data
*
**       Free SRE cell element
*
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRECP,          cell pool ID                    +
               CELL=DSASREA            SRE cell address
         XC    DSASREA,DSASREA         SRE cell freed
         DROP  R7
*
**       Call command service routine
*
         LA    R0,DSASREC              local SRE block address     @05C
         $CALL VR=EVTCOMA,                                             +
               PARMPTR=DSASDATA        command verb & data
         OI    DSACOMFL,DSA@CQUE       element processed
         B     COM0000                 resume processing loop
*
**       No command SRE elements found
*
COM0030  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         TM    DSACOMFL,DSA@CQUE       element processed?
         BNZ   COMEXIT                 yes, exit
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    COMEXIT                 no, exit
         $WTO  MID=ECF117I,VAR1==CL8'EVTCOMQA'
         B     COMEXIT                 exit
*
**       ABEND recovery clean up
*
COM0099  DS    0H
         $UNLOCK EVTCOMLK              unlock command SRE queue
         $WTO  MID=ECF066E,            function ABENDed                +
               VAR1=DSARSN,            show RSN                        +
               VAR2=DSASDATA           show command
*
COMEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: STCSRV                                                     */
*/*                                                                  */
*/* Function: Started task recovery service routine                  */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  input parameter                                  */
*/*             R1  input parameter                                  */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  SRE address                                      */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
STCSRV   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0962)    set error RSN
         $RETRY STC0099,               set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Dequeue SRE service element
*
STC0000  DS    0H
         $LOCK EVTSTCLK                lock SRE queue
         ICM   R7,15,EVTSTCQA          queued SREs'
         BNZ   STC0010                 yes, carry on
         $UNLOCK EVTSTCLK              no, unlock SRE queue
         B     STC0030                 exit SRE loop
*
STC0010  DS    0H
         USING SRE,R7                  SRE addressability
         ST    R7,DSASREA              save SRE address
         $MVC  EVTSTCQA,SRECHPTR       put next SRE on top
         $UNLOCK EVTSTCLK              unlock SRE queue
*
**       Free SRB Cell element
*
         MVC   DSASRBA,SRESRBA         copy SRB cell address
         $XC   SRESRBA,SRESRBA         zero cell address
         ICM   R3,15,DSASRBA           SRB cell init?
         BZ    STC0020                 no, carry on
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRBCP,          SRB cell pool ID                +
               CELL=DSASRBA,           SRB cell address                +
               MODE=COND               conditional request
         XC    DSASRBA,DSASRBA         SRB cell freed
*
**       Copy issued subsystem command
*
STC0020  DS    0H
         MVC   DSASCID,SRESCID         copy console ID
         MVC   DSASREC(SRE@SIZE),SRE   copy SRE block              @05A
         MVC   DSASDATA(DSASDATL),SREDATA copy SRE data
*
**       Free SRE cell element
*
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRECP,          cell pool ID                    +
               CELL=DSASREA            SRE cell address
         XC    DSASREA,DSASREA         SRE cell freed
         DROP  R7
*
**       Call STC service routine
*
         LA    R0,DSASREC              local SRE block address     @05A
         $CALL VR=EVTSTCA,                                             +
               PARMPTR=DSASDATA        command verb & data
         OI    DSASTCFL,DSA@SQUE       element processed
         B     STC0000                 resume processing loop
*
**       No command SRE elements found
*
STC0030  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         TM    DSASTCFL,DSA@SQUE       element processed?
         BNZ   STCEXIT                 yes, exit
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    STCEXIT                 no, exit
         $WTO  MID=ECF117I,VAR1==CL8'EVTSTCQA'
         B     STCEXIT                 exit
*
**       ABEND recovery clean up
*
STC0099  DS    0H
         $UNLOCK EVTSTCLK              unlock STC SRE queue
         $WTO  MID=ECF066E,            function ABENDed                +
               VAR1=DSARSN,            show RSN                        +
               VAR2=DSASDATA           show command
*
STCEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DIESRV                                                     */
*/*                                                                  */
*/* Function: Resource utilization service routine                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  input parameter                                  */
*/*             R1  input parameter                                  */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  SRE address                                      */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DIESRV   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN2092)    set error RSN
         $RETRY DIEEXIT,               set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code


*
**       Resource utilization capture code...
*



*
DIEEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SVCSRV                                                     */
*/*                                                                  */
*/* Function: SVC screening service routine                          */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R0  input parameter                                  */
*/*             R1  input parameter                                  */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SVCSRV   $SUBINI                                                 99@08A
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN2092)    set error RSN
         $RETRY SVCEXIT,               set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Dequeue SVC screening REB element
*
SVC0000  DS    0H
         $LOCK EVTSVCLK                lock REB queue
         ICM   R8,15,EVTSVCQA          queued REBs'
         BNZ   SVC0010                 yes, carry on
         $UNLOCK EVTSVCLK              no, unlock REB queue
         B     SVC0030                 exit REB loop
*
SVC0010  DS    0H
         USING REB,R8                  REB addressability
         ST    R8,DSAREBA              save REB address
         $MVC  EVTSVCQA,REBCHPTR       put next REB on top
         $UNLOCK EVTSVCLK              unlock REB queue
*
**       Free SRB Cell element
*
         MVC   DSASRBA,REBSRBA         copy SRB cell address
         $XC   REBSRBA,REBSRBA         zero cell address
         ICM   R3,15,DSASRBA           SRB cell init?
         BZ    SVC0020                 no, carry on
         $CPOOL FREE,                  free cell                       +
               CPID=EVTSRBCP,          SRB cell pool ID                +
               CELL=DSASRBA,           SRB cell address                +
               MODE=COND               conditional request
         XC    DSASRBA,DSASRBA         SRB cell freed
*
**       Process command CMD(data)
*
SVC0020  DS    0H
         TM    REBFLG2,REB@CMND        CMD('command')?
         BZ    SVC0021                 no, carry on
         $CALL COMMAND                 issue CMD(data) command
*
**       Process message WTO(data)
*
SVC0021  DS    0H
         TM    REBFLG2,REB@WTOM        WTO('command')?
         BZ    SVC0022                 no, carry on
         $CALL MESSAGE                 issue WTO(data) message
*
**       Process command event rule
*
SVC0022  DS    0H
         TM    REBFLG2,REB@NEXC        EXEC() supplied?
         BNZ   SVC0025                 no
         MVC   DSACALLR,4(R10)         ID caller
         $CALL RULPRO                  process rule
         OI    DSASVCFL,DSA@VQUE       function processed
*
**       Free SVC screening REB element
*
SVC0025  DS    0H
         $CPOOL FREE,                  free cell                       +
               CPID=EVTREBCP,          cell pool ID                    +
               CELL=DSAREBA            REB cell address
         XC    DSAREBA,DSAREBA         REB cell freed
         B     SVC0000                 loop
*
**       No SVC screening REB elements found
*
SVC0030  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         TM    DSASVCFL,DSA@VQUE       element processed?
         BNZ   SVCEXIT                 yes, exit
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    SVCEXIT                 no, exit
         $WTO  MID=ECF117I,VAR1==CL8'EVTSVCQA'
         B     SVCEXIT                 exit
*
**       ABEND recovery clean up
*
SVC0099  DS    0H
         $UNLOCK EVTSVCLK              unlock SVC REB queue
         $WTO  MID=ECF066E,            function ABENDed                +
               VAR1=DSARSN,            show RSN                        +
               VAR2=DSASDATA           show command
*
SVCEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SYSSRV                                                     */
*/*                                                                  */
*/* Function: System address spaces monitor processor                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R6  MCT address                                      */
*/*             R7  CSCB address                                     */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SYSSRV   $SUBINI                                                 99@07A
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0922)    set error RSN
         $RETRY SYS0099,               set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Issue debug message
*
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    SYS0000                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1=DSAWTID,           show subtask ID                 +
               VAR2=PSATOLD,           show TCB address                +
               VAR3==CL7'waiting'      show waiting
*
**       Establish asynchronous timer
*
SYS0000  DS    0H
         TM    EVTFLG1,EVT@TERM        subsystem terminating?
         BNZ   SYSEXIT                 yes, exit
         LA    R3,EVTSYECB             ECB word address
         ST    R3,DSASYECB             set parameter
         MVC   DSASYSTM,EVTSYSTM       timer interval
         STIMERM SET,                                                  +
               ID=DSASYTMR,            timer ID                        +
               DINTVL=DSASYSTM,        timer interval                  +
               EXIT=TIMER,             timer exit                      +
               PARM=DSASYECB,          ECB parameter address           +
               WAIT=NO,MF=(E,DSASTIMR)
         $MVC  EVTSYTMR,DSASYTMR       ECFSUB(DETACH) needs it
*
**       Wait for work or termination post
*
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    SYS0005                 no, skip debug msg
         TM    DSAFLG1,DSA@WORK        working indicator set?
         BZ    SYS0005                 no
         NI    DSAFLG1,XFF-DSA@WORK    yes
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1=DSAWTID,           show subtask ID                 +
               VAR2=PSATOLD,           show TCB address                +
               VAR3==CL7'waiting'      show waiting
*
SYS0005  DS    0H
         LA    R3,EVTSYECB             ECB word address
         $XC   0(4,R3),0(R3)           zero ECB word
         OI    DSAFLG1,DSA@SYSW        entering wait state
         $WAIT ECB=(R3)                wait for requests
         NI    DSAFLG1,XFF-DSA@SYSW    reset waiting indicator
         TM    EVTFLG1,EVT@TERM        subsystem terminating?
         BNZ   SYSEXIT                 yes, exit
*
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    SYS0010                 no, skip debug msg
         L     R1,DSAWORKC             msg count
         LA    R1,1(,R1)               add one
         ST    R1,DSAWORKC             update count
         CLC   DSAWORKC,SYSCOUNT       issue debug msg?
         BL    SYS0010                 no
         XC    DSAWORKC,DSAWORKC       yes
         OI    DSAFLG1,DSA@WORK        set working indicator
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1=DSAWTID,           show subtask ID                 +
               VAR2=PSATOLD,           show TCB address                +
               VAR3==CL7'working'      show working
*
**       Process MONITOR event rules
*
SYS0010  DS    0H
         L     R1,EVTSYCNT             timer pop count
         LA    R1,1(,R1)               add one
         $ST   R1,EVTSYCNT             update count
         NI    DSAFLG1,XFF-DSA@MCTE    reset processing flag
         LA    R2,DSAMCTA              MCT table address
         XR    R15,R15                 zero
         LA    R3,DSA@MCTL             MCT table size
         MVCL  R2,R14                  scrub MCT table
         LA    R6,DSAMCTA              set MCT table address
         USING MCT,R6                  set addressability
         $ST   R6,EVTSYMCT             publish MCT queue
         LA    R5,DSA@MCTN             MCT entries
*
**       Scan active REB queue
*
         $LOCK EVTREBLK                lock REB queue
         ICM   R8,15,EVTREBQA          queued REBs?
         BZ    SYS0099                 no, unlock REB queue
         USING REB,R8                  REB addressability
*
SYS0015  DS    0H
         TM    REBFLG1,REB@ACTV        active REB?
         BZ    SYS0020                 no, loop
         CLI   REBTYPE,REB@SYS         MONITOR event type?
         BE    SYS0030                 yes, carry on
*
SYS0020  DS    0H
         ICM   R8,15,REBCHPTR          more REBs?
         BNZ   SYS0015                 yes, loop
         TM    DSAFLG1,DSA@MCTE        any MONITOR rules?
         BNZ   SYS0050                 yes, carry on
         B     SYS0099                 no, unlock REB queue
*
**       Locate MONITORed addresss space
*
SYS0030  DS    0H
         MVC   DSARNAME,REBEDATA+8     copy rule name
         LA    R1,DSARNAME
         $CALL SYSCSCB,PARM=(1)        find monitor rule
         LTR   R15,R15                 found?
         BNZ   SYS0040                 no
         $XC   REBSYSCT,REBSYSCT       zero WTOs issued
         $NI   REBFLG2,XFF-REB@MTRG    reset ECFS35 trigger
         B     SYS0020                 loop
*
SYS0040  DS    0H
         L     R1,REBSYSCT             WTOs issued count
         LA    R1,1(,R1)               add one
         $ST   R1,REBSYSCT             update count
         CLC   REBSYSCT,EVTMSGCT       max WTOs issued?
         BH    SYS0020                 yes, skip WTO
         MVC   MCTMONAS,DSARNAME       create MCT entry
         OI    DSAFLG1,DSA@MCTE        MCT entry created
         LA    R6,MCT@MSZE(,R6)        set next MCT entry
         BCT   R5,SYS0020              128-entries is plenty!
*
**       Issue ECF700E monitor WTO message
*
SYS0050  DS    0H
         $UNLOCK EVTREBLK              unlock REB queue
         LA    R6,DSAMCTA              MCT table address
         LA    R5,DSA@MCTN             MCT entries
*
SYS0060  DS    0H
         CLI   MCTMONAS,XZERO          valid entry?
         BNE   SYS0080                 yes, issue WTO message
         B     SYS0000                 timer wait
*
SYS0070  DS    0H
         LA    R6,MCT@MSZE(,R6)        next MCT entry
         BCT   R5,SYS0060              loop
         B     SYS0000                 timer wait
*
SYS0080  DS    0H
         MVC   DSASWTO(SYSWTOL),SYSWTO listfrom
         MVC   DSASWTO+12(8),MCTMONAS  insert address space name
         WTO   MF=(E,DSASWTO)          trigger MONITOR rule
         L     R1,EVTSYWTO             WTOs issued count
         LA    R1,1(,R1)               add one
         $ST   R1,EVTSYWTO             update count
         B     SYS0070                 loop
*
**       Release REB queue serialization
*
SYS0099  DS    0H
         $UNLOCK EVTREBLK              unlock REB queue
         B     SYS0000                 timer wait
*
SYSEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
SYSCOUNT DC    AL4(64)                 msg issue interval
         DS    0F
SYSWTO   WTO   'ECF700E %%%%%%%% *** MONITORED SYSTEM ADDRESS SPACE TER+
               MINATED ***',ROUTCDE=(2,11),DESC=(4),MF=L
SYSWTOL  EQU   *-SYSWTO
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: STIMER                                                     */
*/*                                                                  */
*/* Function: Asynchronous timer exit routine                        */
*/*                                                                  */
*/* Description: Post requested event capture subtask ECB            */
*/*                                                                  */
*/* Input Regs: R1  parameter address                                */
*/*                 00 - ID=timer                                    */
*/*                 04 - PARM=ECB address                            */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*                                                                  */
*/* Output Regs: R13 save area address                               */
*/*              R14 return address                                  */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TIMER    DS    0H                                                99@07A
         B     12(,R15)
         DC    CL8'TIMER'
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         LR    R10,R15                 set base address
         USING TIMER,R10               base addressability
*
**       Post requested event subtask
*
         LR    R3,R1                   protect parm
         ICM   R4,15,4(R3)             ECB address
         $POST (4),STKE=NO,WRKREG=R5   post target subtask
*
**       Exit
*
TIMEXIT  DS    0H
         LM    R14,R12,GPR@R14(R13)    restore regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: COMMAND                                                    */
*/*                                                                  */
*/* Function: Issue Event Rule CMD(command) subroutine               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage  R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
COMMAND  $SUBINI                                                 99@06A
         USING PSA,0                   FLC addressability
         USING REB,R8                  REB addressability
         USING EVT,R11                 EVT addressability
         L     R4,REBREBX              REBX address
         USING REBX,R4                 set addressability
*
         MVC   DSAMGCR(ZCMNDLN),ZCOMMAND
         MVC   DSAMGCR+4(REBX@CMZ),REBXCMND copy CMD(data)
         XR    R0,R0                   console ID
         $MGCR DSAMGCR                 issue command
         XC    DSARC,DSARC             set RC
*
COMMXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ZCOMMAND DS    0XL80                   MGCR buffer
         DC    AL2(ZCMNDLN)            -buffer length
         DC    AL2(0)                  -buffer options
         DC    CL76' '                 -command verb & text
ZCMNDLN  EQU   *-ZCOMMAND              MGCR buffer size
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MESSAGE                                                    */
*/*                                                                  */
*/* Function: Issue Event Rule WTO(message) subroutine               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage  R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MESSAGE  $SUBINI                                                 99@06A
         USING PSA,0                   FLC addressability
         USING REB,R8                  REB addressability
         USING EVT,R11                 EVT addressability
         L     R4,REBREBX              REBX address
         USING REBX,R4                 set addressability
*
         MVC   DSAXWTO(WTOMSGL),WTOMSG rent listfrom
         MVC   DSAXWTO+4(REBX@WTZ),REBXWTOM init WTO(data)
         WTO   MF=(E,DSAXWTO)          issue WTO(data) message
         XC    DSARC,DSARC             set RC
*
MSGEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
WTOMSG   WTO   'model message                                          +
                          ',ROUTCDE=(2,11),DESC=(4),MF=L
WTOMSGL  EQU   *-WTOMSG
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: REMREB                                                     */
*/*                                                                  */
*/* Function: Remove REB element from active REB queue               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
REMREB   $SUBINI
         USING PSA,0                  FLC addressability
         USING EVT,R11                EVT addressability
         USING STKE,R13               STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)       set error RC
         MVC   DSARSN,=AL4(RSN0912)   set error RSN
         $RETRY REM0099,              set retry address                +
               SDUMP=NO,              skip SVC dump                    +
               RSN=DSARSN             RSN code
*
**       Serialize active REB queue
*
REM0000  DS    0H
         $LOCK EVTREBLK               lock active REB queue
         XR    R5,R5                  zero previous REB ptr
         ICM   R8,15,EVTREBQA         REB queue init?
         BNZ   REM0010                yes, carry on
         $UNLOCK EVTREBLK             no, unlock active REB queue
         XC    DSARC,DSARC            set RC
         XC    DSARSN,DSARSN          set RSN
         B     REMEXIT                exit
*
**       Locate target REB element
*
REM0010  DS    0H
         USING REB,R8                 REB addressability
         CLC   REBMEMBR,DSAMEMBR      event member name match?
         BE    REM0020                yes, carry on
         LR    R5,R8                  copy previous REB ptr
         ICM   R8,15,REBCHPTR         more REBs?
         BNZ   REM0010                yes, loop
         $UNLOCK EVTREBLK             unlock active REB queue
         XC    DSARC,DSARC            set RC
         XC    DSARSN,DSARSN          set RSN
         B     REMEXIT                exit
*
**       Remove REB from active REB queue
*
REM0020  DS    0H
         ST    R8,DSAZREB             save target REB address
         MVC   DSAZREBX,REBREBX       save target REBX address
         LTR   R5,R5                  1st REB in queue?
         BNZ   REM0030                no, test further
         $MVC  EVTREBQA,REBCHPTR      yes, dequeue target REB
         $UNLOCK EVTREBLK             unlock active REB queue
         B     REM0040                free REB/REBX cell elements
*
REM0030  DS    0H
         $MVC  REBCHPTR-REB(4,R5),REBCHPTR dequeue active REB
         $UNLOCK EVTREBLK             unlock active REB queue

*
**       Trace removed REB element
*
REM0040  DS    0H
         $TRACE $REMREB,                                               +
               MID=ECFSRV,             trace caller                    +
               A=DSAZREB,              trace storage addrss            +
               LN=REB@SIZE             trace storage size
*
**       Free active REB cell element
*
         $CPOOL FREE,                 get REB cell                     +
               CPID=EVTREBCP,         cell pool ID                     +
               CELL=DSAZREB           REB cell address
         XC    DSAZREB,DSAZREB        REB cell freed
         L     R1,EVTREBAC            get active REB count
         BCTR  R1,0                   subtract one
         $ST   R1,EVTREBAC            update count
*
**       Free active REBX cell element
*
REM0050  DS    0H
         ICM   R1,15,DSAZREBX         REBX init?
         BZ    REM0000                no, loop
         $CPOOL FREE,                 free cell                        +
               CPID=EVTREBXC,         REBX cell pool ID                +
               CELL=DSAZREBX          REBX cell address
         XC    DSAZREBX,DSAZREBX      REBX cell freed
         B     REM0000                loop
*
**       ABEND recovery clean up routine
*
REM0099  DS    0H
         $UNLOCK EVTREBLK             unlock active REB queue
*
REMEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,        exit                             +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: STGREB                                                     */
*/*                                                                  */
*/* Function: Queue staged REB to active REB queue                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
STGREB   $SUBINI
         USING PSA,0                  FLC addressability
         USING EVT,R11                EVT addressability
         USING STKE,R13               STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)       set error RC
         MVC   DSARSN,=AL4(RSN0992)   set error RSN
         $RETRY STG0099,              set retry address                +
               SDUMP=NO,              skip SVC dump                    +
               RSN=DSARSN             RSN code
*
**       Serialize staging REB queue
*
STG0000  DS    0H
         $LOCK EVTSTGLK               lock staging REB queue
         XR    R5,R5                  zero previous REB ptr
         ICM   R8,15,EVTSTGQA         staged REBs?
         BNZ   STG0010                yes, carry on
         $UNLOCK EVTSTGLK             no, unlock staging REB queue
         XC    DSARC,DSARC            set RC
         XC    DSARSN,DSARSN          set RSN
         B     STGEXIT                exit
*
**       Locate staged REB cell element
*
STG0010  DS    0H
         USING REB,R8                 REB addressability
         CLC   REBMEMBR,DSAMEMBR      event member name match?
         BE    STG0020                yes, carry on
         LR    R5,R8                  copy previous REB ptr
         ICM   R8,15,REBCHPTR         more REBs?
         BNZ   STG0010                yes, loop
         $UNLOCK EVTSTGLK             no, unlock staging REB queue
         XC    DSARC,DSARC            set RC
         XC    DSARSN,DSARSN          set RSN
         B     STGEXIT                exit
*
STG0020  DS    0H
         ST    R8,DSAZREB             save staged REB address
         LTR   R5,R5                  1st REB in staging queue?
         BNZ   STG0030                no, carry on
         $MVC  EVTSTGQA,REBCHPTR      yes, dequeue staged REB
         $UNLOCK EVTSTGLK             no, unlock staging REB queue
         B     STG0040                carry on
*
STG0030  DS    0H
         $MVC  REBCHPTR-REB(4,R5),REBCHPTR dequeue staged REB
         $UNLOCK EVTSTGLK             unlock staging REB queue
         DROP  R8
*
**       Add staged REB to active REB queue
*
STG0040  DS    0H
         $LOCK EVTREBLK               lock active REB queue
         L     R8,DSAZREB             staged REB address
         USING REB,R8                 REB addressability
         L     R1,DSARTBE             RTBE address
         USING RTBE,R1                set addressability
         TM    RTBEFLG1,RTBE@RFR      refresh request?
         BNZ   STG0050                yes, set refresh flag
         $OI   REBFLG1,REB@RADD       set added indicator
         B     STG0060                carry on
*
STG0050  DS    0H
         $OI   REBFLG1,REB@REFD       set refreshed indicator
         TM    RTBEFLG1,RTBE@ACT      was REB active?
         BZ    STG0060                no, carry on
         $OI   REBFLG1,REB@ACTV       yes, set active indicator
         DROP  R1
*
STG0060  DS    0H
         L     R5,EVTREBQA            1st active REB
         $ST   R5,REBCHPTR            chain queued REB to my REB
         $ST   R8,EVTREBQA            make my REB top REB
         L     R1,EVTREBAC            get active REB count
         LA    R1,1(,R1)              add one
         $ST   R1,EVTREBAC            update count
         $UNLOCK EVTREBLK             unlock active REB queue
*
**       Trace REB move to active queue
*
         $TRACE $MOVREB,                                               +
               MID=ECFSRV,            trace caller                     +
               A=DSAZREB,             trace storage addrss             +
               LN=REB@SIZE            trace storage size
         B     STG0000                loop
         DROP  R8
*
**       ABEND recovery clean up routine
*
STG0099  DS    0H
         $UNLOCK EVTSTGLK             unlock staging REB queue
         $UNLOCK EVTREBLK             unlock active REB queue
*
STGEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,        exit                             +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: UNDORF                                                     */
*/*                                                                  */
*/* Function: Restore REB refresh indicators                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
UNDORF   $SUBINI
         USING PSA,0                  FLC addressability
         USING EVT,R11                EVT addressability
         USING STKE,R13               STKE addressability
*
         $RETRY UNDO099,              set retry address                +
               SDUMP=NO,              skip SVC dump                    +
               RSN=DSARSN             RSN code
*
         $LOCK EVTREBLK               lock active REB queue
         L     R8,EVTREBQA            active REB queue address
         USING REB,R8                 set addressability
*
UNDO000  DS    0H
         CLC   REBMEMBR,DSAMEMBR      refresh member name match?
         BE    UNDO020                yes, carry on
*
UNDO010  DS    0H
         ICM   R8,15,REBCHPTR         more REBs?
         BNZ   UNDO000                yes, loop
         $UNLOCK EVTREBLK             unlock active REB queue
         $WTO  MID=ECF043E,                                            +
               VAR1=DSAMEMBR,         show requested member name       +
               VAR2=DSARSN            show requested RSN code
         B     UNDO030                set RC & RSN
*
UNDO020  DS    0H
         $NI   REBFLG1,XFF-REB@REFR   reset refresh indicator
         TM    REBFLG1,REB@WACT       was REB active?
         BZ    UNDO010                no, loop
         $OI   REBFLG1,REB@ACTV       yes, reactivate REB
         $NI   REBFLG1,XFF-REB@WACT   reset was active indicator
         B     UNDO010                loop
*
UNDO030  DS    0H
         XC    DSARC,DSARC            set RC
         XC    DSARSN,DSARSN          se RSN
         B     UNDOXIT                exit
*
UNDO099  DS    0H
         $UNLOCK EVTREBLK             unlock active REB queue
         MVC   DSARSN,=AL4(RSN0984)   set error RSN
         $WTO  MID=ECF043E,                                            +
               VAR1=DSAMEMBR,         show member name                 +
               VAR2=DSARSN            show reason code
*
UNDOXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,        exit                             +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RULPRO                                                     */
*/*                                                                  */
*/* Function: Process triggered even rule                            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RULPRO   $SUBINI
         USING PSA,0                   FLC addressability
         USING REB,R8                  REB addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0928)    set error RSN
         $RETRY RULPXIT,               set retry address               +
               SDUMP=YES,              take SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
**       Validity check RUNAS request
*
RUL0000  DS    0H
         CLC   REBRUNAS,=CL3'STC'      RUNAS=STC?
         BE    RUL0055                 yes, carry on
         CLC   REBRUNAS,=CL3'JOB'      RUNAS=JOB?
         BNE   RULPXIT                 no, carry on
*
**       Allocate ECFJOBS(rule-member)
*
         MVI   DSAFUNC,ZIO@JOBS        allocate request
         MVC   DSAALMEM,REBMEMBR       set rule member name
         MVC   DSAALDSN,EVTSJOBS       set ECFJOBS DSName
         MVC   DSAALDDN,=CL8'ECFJOBS'  ECFJOBS DDname
         $CALL ALLOC
         LTR   R15,R15                 successful?
         BNZ   RULPXIT                 no, process next REB
*
**       Read RUNAS=JOB JCL procedure
*
         MVI   DSAFUNC,ZIO@READ        read function request
         MVC   DSASUBNM,EVTINJCL       read member name
         $CALL READ
         LTR   R15,R15                 successful?
         BNZ   RULPXIT                 no, process next REB
*
**       Resolve &JOBNAME symbolic variable
*
         XR    R1,R1                   record count
         L     R2,STKPRCNT             data records
         L     R3,STKPRLIB             data address
*
RUL0005  DS    0H
         CLI   0(R3),X'00'             end of records?
         BE    RUL0015                 yes, exit loop
         CLC   0(11,R3),=CL11'//&&JOBNAME'
         BNE   RUL0010                 not found: loop
         MVC   2(8,R3),REBJOBNM        found: resolve symbolic
*
RUL0010  DS    0H
         LA    R1,1(,R1)               update count
         LA    R3,80(,R3)              next JCL record
         BCT   R2,RUL0005              loop
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN0926)    set error RSN
         B     RUL0020                 issue error msg
*
**       Validity check record counts
*
RUL0015  DS    0H
         ST    R1,DSACOUNT             save record count
         LTR   R1,R1                   any JCL records found?
         BNZ   RUL0025                 yes, carry on
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN0924)    set error RSN
*
RUL0020  DS    0H
         $WTO  MID=ECF987E,                                            +
               VAR1=DSACALLR,          show service caller             +
               VAR2=REBMEMBR,          show rule member name           +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
         B     RULPXIT                 carry on
*
**       Resolve event rule variables
*
RUL0025  DS    0H
         L     R4,REBREBX              REBX address
         USING REBX,R4                 set addressability
         ST    R2,REBXPCNT             set current count
         ST    R3,REBXPLIB             set current address
         $CALL VR=EVTVRXA,PARM=(R8)    pass REB address
         ST    R1,DSACOUNT             save returned record count
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         XC    REBXPCNT,REBXPCNT       temporary record count
         XC    REBXPLIB,REBXPLIB       temporary record address
         DROP  R4
         CLC   DSARC,=AL4(RC0)         successful?
         BE    RUL0030                 yes, carry on
         $WTO  MID=ECF987E,                                            +
               VAR1=DSACALLR,          show service caller             +
               VAR2=REBMEMBR,          show rule member name           +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
         B     RULPXIT                 carry on
*
**       Write RUNAS=JOB JCL procedure
*
RUL0030  DS    0H
         MVC   DSAPRLIB,STKPRLIB       data records buffer
         MVC   DSADDNAM,=CL8'ECFJOBS'  set DDname
         $CALL WRITE
         LTR   R15,R15                 successful?
         BNZ   RULPXIT                 no, process next REB
*
**       Allocate SYSTSIN(rule-member)
*
         MVI   DSAFUNC,ZIO@TSIN        SYSTSIN allocate request
         MVC   DSAALMEM,REBMEMBR       set rule member name
         MVC   DSAALDSN,EVTSYSTI       set SYSTSIN DSName
         MVC   DSAALDDN,=CL8'SYSTSIN'  SYSTSIN DDname
         $CALL ALLOC
         LTR   R15,R15                 successful?
         BNZ   RULPXIT                 no, process next REB
*
**       Create SYSTSIN(rule-member)
*
         MVI   DSASUBMT,BLANK          clear data record
         MVC   DSASUBMT+1(DSASUBMZ-1),DSASUBMT
         MVC   DSASUBCM,=CL4'SUB'      Submit command
         MVC   DSASUBDS,EVTSJOBS       Submit data set name
         LA    R2,44                   max DSName length
         LA    R3,DSASUBDS             DSName address
*
RUL0035  DS    0H
         CLI   0(R3),BLANK             end of DSName?
         BE    RUL0040                 yes, carry on
         LA    R3,1(,R3)               next byte
         BCT   R2,RUL0035              loop
*
RUL0040  DS    0H
         MVI   0(R3),C'('              open paren
         LA    R3,1(,R3)               rule member name address
         MVC   0(8,R3),REBMEMBR        init rule member name
         LA    R2,8                    max member name length
*
RUL0045  DS    0H
         CLI   0(R3),BLANK             end of DSName?
         BE    RUL0050                 yes, carry on
         LA    R3,1(,R3)               next byte
         BCT   R2,RUL0045              loop
*
RUL0050  DS    0H
         MVI   0(R3),C')'              open paren
         LA    R1,1                    set,
         ST    R1,DSACOUNT             record count.
         LA    R1,DSASUBMT             Submit record address
         ST    R1,DSAPRLIB             set record address
         MVI   DSAFUNC,ZIO@TMEM        write member records
         MVC   DSADDNAM,=CL8'SYSTSIN'  set DDname
         $CALL WRITE
         LTR   R15,R15                 successful?
         BNZ   RULPXIT                 no, process next REB
*
**       Init MGCR Start command buffer
*
         $CALL MGCR                    execute event rule
         ST    R15,DSARC               save RC
         B     RULPXIT                 process next REB
*
**       Allocate SYSTSIN(rule-member)
*
RUL0055  DS    0H
         MVI   DSAFUNC,ZIO@TSIN        allocate request
         MVC   DSAALMEM,REBMEMBR       set rule member name
         MVC   DSAALDSN,EVTSYSTI       set SYSTSIN DSName
         MVC   DSAALDDN,=CL8'SYSTSIN'  SYSTSIN DDname
         $CALL ALLOC
         LTR   R15,R15                 successful?
         BNZ   RULPXIT                 no, process next REB
*
**       Resolve event rule variables
*
         L     R2,STKPRLIB             PARMLIB buffer address
         L     R3,STKPRBUF             PARMLIB buffer size
         XR    R15,R15                 scrub,
         MVCL  R2,R14                  buffer block.
         L     R4,REBREBX              REBX address
         USING REBX,R4                 set addressability
         MVC   REBXPCNT,STKPRCNT       set buffer records
         MVC   REBXPLIB,STKPRLIB       set buffer address
         $CALL VR=EVTVRXA,PARM=(R8)    pass REB address
         ST    R1,DSACOUNT             save returned record count
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         XC    REBXPCNT,REBXPCNT       temporary record count
         XC    REBXPLIB,REBXPLIB       temporary record address
         DROP  R4
         CLC   DSARC,=AL4(RC0)         successful?
         BE    RUL0060                 yes, carry on
         $WTO  MID=ECF987E,                                            +
               VAR1=DSACALLR,          show service caller             +
               VAR2=REBMEMBR,          show rule member name           +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
         B     RULPXIT                 carry on
*
**       Create SYSTSIN(rule-member) records
*
RUL0060  DS    0H
         ICM   R1,15,DSACOUNT          valid record count returned?
         BNZ   RUL0065                 yes, carry on
         MVC   DSARC,=AL4(R8)          set error RC
         MVC   DSARSN,=AL4(RSN0930)    set error RSN
         $WTO  MID=ECF987E,                                            +
               VAR1=DSACALLR,          show service caller             +
               VAR2=REBMEMBR,          show rule member name           +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
         B     RULPXIT                 carry on
*
RUL0065  DS    0H
         SL    R1,=F'3'                strip $$ & /* & //
         ST    R1,DSACOUNT             update returned count
         MVI   DSAFUNC,ZIO@TMEM        write member records
         MVC   DSAPRLIB,STKPRLIB       get record data address
         MVC   DSADDNAM,=CL8'SYSTSIN'  set DDname
         $CALL WRITE
         LTR   R15,R15                 successful?
         BNZ   RULPXIT                 no, process next REB
*
**       Init MGCR Start command buffer
*
         $CALL MGCR                    execute event rule
         ST    R15,DSARC               save RC
*
RULPXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ALLOC                                                      */
*/*                                                                  */
*/* Function: Data set allocation subroutine                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ALLOC    $SUBINI
         USING PSA,0                   FLC addressability
         USING REB,R8                  REB addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                SRKE addressability
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0940)    set error RSN
         $RETRY ALLOCXIT,              set retry address               +
               SDUMP=YES,              take SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVC   ZIOFUNC,DSAFUNC         set function ID
         CLI   ZIOFUNC,ZIO@TSIN        SYSTSIN request?
         BE    ALLOC00                 yes, carry on
         CLI   ZIOFUNC,ZIO@TSPR        SYSTSPRT request?
         BE    ALLOC00                 yes, carry on
         CLI   ZIOFUNC,ZIO@JOBS        ECFJOBS request?
         BNE   ALLOC10                 no, carry on
*
ALLOC00  DS    0H
         MVC   ZIOMEMBR,DSAALMEM       set member name
         MVC   ZIODDNAM,DSAALDDN       set DDname
         MVC   ZIODSNAM,DSAALDSN       set DDname
*
ALLOC10  DS    0H
         OI    ZIOFLG1,ZIO@STCC                                    @04A
         $CALL VR=EVTDYNA,PARM=(R7)
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    ALLOC20                 yes, carry on
         $WTO  MID=ECF987E,                                            +
               VAR1=DSACALLR,          show service caller             +
               VAR2=REBMEMBR,          show rule member name           +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
         B     ALLOCXIT                exit
*
ALLOC20  DS    0H
         LH    R1,ZIODSORG
         ST    R1,DSADSORG             copy DSORG
         CLI   ZIOFUNC,ZIO@TEMP        temp DSName request?
         BNE   ALLOC99                 no, carry on
         MVC   DSADDNAM,ZIODDNAM       copy allocated DDname
         MVC   DSADSNAM,ZIODSNAM       copy allocated DSName
*
ALLOC99  DS    0H
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    ALLOCXIT                no, exit
         $WTO  MID=ECF110I,                                            +
               VAR1=DSADSORG,          show DSORG                      +
               VAR2=ZIODDNAM,          show DDname                     +
               VAR3=ZIODSNAM           show DSName
*
ALLOCXIT DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: READ                                                       */
*/*                                                                  */
*/* Function: Read data set records subroutine                       */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
READ     $SUBINI
         USING PSA,0                   FLC addressability
         USING REB,R8                  REB addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0944)    set error RSN
         $RETRY READEXIT,              set retry address               +
               SDUMP=YES,              take SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVC   ZIOFUNC,DSAFUNC         function ID
         MVC   ZIOMEMBR,DSASUBNM       member name
         MVC   ZIOPRLIB,STKPRLIB       I/O buffer address
         MVC   ZIOPRBUF,STKPRBUF       I/O buffer size
         MVC   ZIOPREND,STKPREND       I/O buffer-end address
         MVC   ZIODDNAM,=CL8'PARMLIB'  DDName name
         LR    R0,R7                   pass ZIO address in R0
         SLR   R1,R1                   set call type
         $CALL VR=EVTIIOA
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         LTR   R15,R15                 successful?
         BZ    READEXIT                yes, exit
         $WTO  MID=ECF987E,                                            +
               VAR1=DSACALLR,          show service caller             +
               VAR2=REBMEMBR,          show rule member name           +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
*
READEXIT DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: WRITE                                                      */
*/*                                                                  */
*/* Function: Write data set records subroutine                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
WRITE    $SUBINI
         USING PSA,0                   FLC addressability
         USING REB,R8                  REB addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0946)    set error RSN
         $RETRY WRITEXIT,              set retry address               +
               SDUMP=YES,              take SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVC   ZIOFUNC,DSAFUNC         set function ID
         MVC   ZIORECA,DSAPRLIB        set data address
         MVC   ZIORECT,DSACOUNT        set record count
         MVC   ZIODDNAM,DSADDNAM       set DDname
         $CALL VR=EVTOIOA,PARM=(R7)    open DSName(member)
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    WRITEXIT                yes, exit
         $WTO  MID=ECF987E,                                            +
               VAR1=DSACALLR,          show service caller             +
               VAR2=REBMEMBR,          show rule member name           +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
*
WRITEXIT DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MGCR                                                       */
*/*                                                                  */
*/* Function: Issue START command subroutine                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MGCR     $SUBINI
         USING PSA,0                   FLC addressability
         USING REB,R8                  REB addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0942)    set error RSN
         $RETRY MGCREXIT,              set retry address               +
               SDUMP=YES,              take SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
         MVC   DSAMGCR(ZMGCRLN),ZMGCR
         LA    R3,DSAMGCR              MGCR listform
         LA    R3,6(,R3)               point past Start command
         MVC   0(8,R3),EVTMPSTC        init ECFTMP procedure name
         LA    R2,8                    loop value
*
MGCR000  DS    0H
         CLI   0(R3),BLANK             TMPSTC procedure name end?
         BE    MGCR010                 yes, carry on
         LA    R3,1(,R3)               next byte
         BCT   R2,MGCR000              loop
*
MGCR010  DS    0H
         MVI   0(R3),C'.'              STEPname separator
         LA    R3,1(,R3)               next byte
         MVC   0(8,R3),REBMEMBR        init rule name as STEPname
         LA    R2,8                    loop value
         CLI   0(R3),C'A'              alpha character?
         BNL   MGCR020                 yes, carry on
         MVI   0(R3),C'Z'              no, prevent IEE309I msg error
*
MGCR020  DS    0H
         CLI   0(R3),BLANK             TMPSTC procedure name end?
         BE    MGCR030                 yes, carry on
         LA    R3,1(,R3)               next byte
         BCT   R2,MGCR020              loop
*
MGCR030  DS    0H
         MVC   0(6,R3),=CL6',EXEC='    set symbolic variable
         LA    R3,6(,R3)               point past symbolic carible
         MVC   0(8,R3),REBMEMBR        init rule member name
*
**       Start triggered event rule
*
         XR    R0,R0                   console ID
         $MGCR DSAMGCR                 issue START command
         ST    R15,DSARC               save RC
         XC    DSARSN,DSARSN           zero RSN
         STIMER WAIT,DINTVL=ZMGCRTMR   wait a few seconds
*
**       Issue Start command issued debug msg
*
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    MGCR099                 no, skip debug msg
         $WTO  MID=ECF109I,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSAMGCR,           show control data               +
               VAR3=DSAMGCR+4          show Start verb & operands
*
**       Trace MGCR issued command
*
MGCR099  DS    0H
         LA    R3,DSAMGCR              MGCR buffer address
         $TRACE $MGCR,                                                 +
               MID=ECFSRV,             trace caller                    +
               A=(R3),,                trace storage addr              +
               LN=DSAMGCRL             trace storage size
*
MGCREXIT DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ZMGCR    DS    0XL80
         DC    AL2(ZMGCRLN)
         DC    AL2(0)
         DC    CL2'S '
         DC    CL74' '
ZMGCRLN  EQU   *-ZMGCR
         DS    0D
ZMGCRTMR DC    CL8'00000300'
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: REPLY                                                      */
*/*                                                                  */
*/* Function: WTOR reply service subroutine                          */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
REPLY    $SUBINI
         USING PSA,0                   FLC addressability
         USING REB,R8                  REB addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN1056)    set error RSN
         $RETRY RPLYEXIT,              set retry address               +
               SDUMP=YES,              take SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
         L     R4,REBREBX              REBX address
         USING REBX,R4                 set addressability
         MVC   DSAMGCR(ZRPLYLN),ZREPLY
         LA    R3,DSAMGCR              REPLY listform
         L     R1,EVTREPLY             REPLYID=size option         @02A
         BCTR  R1,0                    decrement for EXecute       @02A
         EX    R1,COPYRPLY             set &REPLYID variable       @02A
         LA    R3,7(R1,R3)             set end of &REPLYID         @02A
         MVI   0(R3),C','              set reply separator         @02A
         MVC   1(REBX@RPZ,R3),REBXRPLY set REPLY data value
         DROP  R4
*
**       Issue WTOR reply system command
*
         XR    R0,R0                   console ID
         $MGCR DSAMGCR                 issue REPLY command
         ST    R15,DSARC               save RC
         XC    DSARSN,DSARSN           zero RSN
*
**       REPLY command issued debug msg
*
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    RPLYEXIT                no, skip debug msg
         $WTO  MID=ECF109I,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSAMGCR,           show control data               +
               VAR3=DSAMGCR+4          show REPLY data
*
RPLYEXIT DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
COPYRPLY MVC   6(*-*,R3),REBREPLY      EXecuted instruction        @02A
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ZREPLY   DS    0XL80
         DC    AL2(ZRPLYLN)
         DC    AL2(0)
         DC    CL2'R '                 REPLY
         DC    CL4' '                  &REPLYID RMAX=9999          @02C
         DC    CL1','                  separator
         DC    CL69' '                 reply data value            @02C
ZRPLYLN  EQU   *-ZREPLY
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SYSCSCB                                                    */
*/*                                                                  */
*/* Function: Common CSCB queue scan subroutine                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R1  Address space name address                       */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage  R7  CSCB address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SYSCSCB  $SUBINI                                                 99@07A
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
         LR    R3,R1                   protect parm address
*
**       Activate recovery
*
         XC    DSARC,DSARC             set RC
         MVC   DSARSN,=AL4(RSN1094)    set error RSN
         $RETRY SYSQ099,               set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Serialize CSCB queue
*
         TM    EVTFLG4,EVT@CSCB        Q10LOCK=YES?
         BZ    SYSQ000                 no, skip serialization
         SPKA  0(0)
         MVC   DSAPLST(ENQQ10L),ENQQ10 init listform
         ENQ   MF=(E,DSAPLST)          serialize resource
         L     R2,STKEKEY              my key
         SPKA  0(R2)                   restore my key
*
**       Locate target address space
*
SYSQ000  DS    0H
         L     R7,FLCCVT               CVT
         USING CVT,R7                  set addressability
         L     R7,CVTMSER              MSAS data area
         USING BASE,R7                 set addressability
         L     R7,BACHN                CSCB chain address
         USING CSCB,R7                 set addressability
         SAM31 ,
*
SYSQ010  DS    0H
         CLC   CHKEY,0(R3)             address space found?
         BE    SYSQ020                 yes, carry on
         ICM   R7,15,CHPTR             more CSCBs?
         BNZ   SYSQ010                 yes, loop
         XC    DSAOPAR,DSAOPAR         return zero parm
*
**       Target address space not active
*
         MVC   DSARC,=AL4(RC8)         RC
         MVC   DSARSN,=AL4(RSN0958)    RSN
         B     SYSQ099                 unserialize CSCB queue
*
**       Target address space is active
*
SYSQ020  DS    0H
         ST    R7,DSAOPAR              CSCB address
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
**       Release CSCB queue serialization
*
SYSQ099  DS    0H
         TM    EVTFLG4,EVT@CSCB        Q10LOCK=YES?
         BZ    SYSQEXIT                no, DEQ not required
         SPKA  0(0)
         MVC   DSAPLST(DEQQ10L),DEQQ10 init listform
         DEQ   MF=(E,DSAPLST)          release resource
         L     R2,STKEKEY              my key
         SPKA  0(R2)                   restore my key
*
SYSQEXIT DS    0H
         SAM24 ,
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ENQQ10   ENQ   (SYSIEFSD,Q10,S,3,SYSTEM),RET=HAVE,MF=L
ENQQ10L  EQU   *-ENQQ10
         DS    0F
DEQQ10   DEQ   (SYSIEFSD,Q10,3,SYSTEM),RET=HAVE,MF=L
DEQQ10L  EQU   *-DEQQ10
         DS    0C
SYSIEFSD DC    CL8'SYSIEFSD'           Major name
Q10      DC    CL3'Q10'                Minor name
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TASKID                                                     */
*/*                                                                  */
*/* Function: Identify Event Capture subtask                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TASKID   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Identify Event Capture subtask
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0516)    set error RSN
*
**       ECFSRV(S34) Event Capture subtask
*
         L     R4,PSATOLD              TCB address
         USING TCB,R4                  set addressability
         CLI   TCBTID,S34              S34 subtask?
         BNE   TASK000                 no, test further
         LA    R3,EVTCMECB             get S34 ECB address
         ST    R3,DSAECBA              save S34 ECB address
         MVC   DSATID,=CL3'S34'        set event capture ID
         MVC   DSAWTID,DSATID          set for WTO display
         MVC   STKLMOD,=CL8'S34SRV'    ID subtask                  @04A
         B     TASK099                 exit
*
**       ECFSRV(S35) Event Capture subtask
*
TASK000  DS    0H
         CLI   TCBTID,S35              S35 subtask?
         BNE   TASK010                 no, test further
         LA    R3,EVTWTECB             get S35 ECB address
         ST    R3,DSAECBA              save S35 ECB address
         MVC   DSATID,=CL3'S35'        set event capture ID
         MVC   DSAWTID,DSATID          set for WTO display
         MVC   STKLMOD,=CL8'S35SRV'    ID subtask                  @04A
         B     TASK099                 exit
*
**       ECFSRV(RFR) Event Capture subtask
*
TASK010  DS    0H
         CLI   TCBTID,RFR              RFR subtask?
         BNE   TASK020                 no, carry on
         LA    R3,EVTRFECB             get subtask ECB
         ST    R3,DSAECBA              save ECB address
         MVC   DSATID,=CL3'RFR'        set subtask ID
         MVC   DSAWTID,DSATID          set for WTO display
         MVC   STKLMOD,=CL8'RFRSRV'    ID subtask                  @04A
         B     TASK099                 exit
*
**       ECFSRV(ADD) Event Capture subtask
*
TASK020  DS    0H
         CLI   TCBTID,ADD              ADD subtask?
         BNE   TASK030                 no, carry on
         LA    R3,EVTADECB             get subtask ECB
         ST    R3,DSAECBA              save ECB address
         MVC   DSATID,=CL3'ADD'        set subtask ID
         MVC   DSAWTID,DSATID          set for WTO display
         MVC   STKLMOD,=CL8'ADDSRV'    ID subtask                  @04A
         B     TASK099                 exit
*
**       ECFSRV(COM) Event Capture subtask
*
TASK030  DS    0H
         CLI   TCBTID,COM              COM subtask?
         BNE   TASK040                 no, carry on
         LA    R3,EVTCOECB             get subtask ECB
         ST    R3,DSAECBA              save ECB address
         MVC   DSATID,=CL3'COM'        set subtask ID
         MVC   DSAWTID,DSATID          set for WTO display
         MVC   STKLMOD,=CL8'COMSRV'    ID subtask                  @04A
         B     TASK099                 exit
*
**       ECFSRV(STC) Event Capture subtask
*
TASK040  DS    0H
         CLI   TCBTID,STC              STC subtask?
         BNE   TASK050                 no, carry on                @03C
         LA    R3,EVTSTECB             get subtask ECB
         ST    R3,DSAECBA              save ECB address
         MVC   DSATID,=CL3'STC'        set subtask ID
         MVC   DSAWTID,DSATID          set for WTO display
         MVC   STKLMOD,=CL8'STCSRV'    ID subtask                  @04A
         B     TASK099                 exit
*
**       ECFSRV(DIE) Event Capture subtask
*
TASK050  DS    0H                                                  @03A
         CLI   TCBTID,DIE              DIE subtask?
         BNE   TASK060                 no, carry on                @07A
         LA    R3,EVTDIECB             get subtask ECB
         ST    R3,DSAECBA              save ECB address
         MVC   DSATID,=CL3'DIE'        set subtask ID
         MVC   DSAWTID,DSATID          set for WTO display
         MVC   STKLMOD,=CL8'DIESRV'    ID subtask
         B     TASK099                 exit
*
**       ECFSRV(SYS) Event Capture subtask
*
TASK060  DS    0H                                                  @07A
         CLI   TCBTID,SYS              SYS subtask?
         BNE   TASK070                 no, carry on
         LA    R3,EVTSYECB             get subtask ECB
         ST    R3,DSAECBA              save ECB address
         MVC   DSATID,=CL3'SYS'        set subtask ID
         MVC   DSAWTID,DSATID          set for WTO display
         MVC   STKLMOD,=CL8'SYSSRV'    ID subtask
         B     TASK099                 exit
*
**       ECFSRV(SVC) Event Capture subtask
*
TASK070  DS    0H                                                  @08A
         CLI   TCBTID,XVC              SVC subtask?
         BNE   TASK080                 no, carry on
         LA    R3,EVTSVECB             get subtask ECB
         ST    R3,DSAECBA              save ECB address
         MVC   DSATID,=CL3'XVC'        set subtask ID
         MVC   DSAWTID,=CL3'SVC'       set for WTO display
         MVC   STKLMOD,=CL8'SVCSRV'    ID subtask
         B     TASK099                 exit
*
**       Issue task ID imvalid debug msg
*
TASK080  DS    0H
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    TASK090                 no, skip debug msg
         $WTO  MID=ECF194I,                                            +
               VAR1==CL8'ECFSRV'       show event routine
*
TASK090  DS    0H
         $ABEND UFFB,RSN=DSARSN        ABEND
*
TASK099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
TASKIDX  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: INISTOR                                                    */
*/*                                                                  */
*/* Function: Storage obtain subtask buffers                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
INISTOR  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain Task-Level token table
*
         GETMAIN RU,                                                   +
               LV=TKN@TSZE,            token table size                +
               SP=SP102,               private subpool                 +
               BNDRY=PAGE              page boundary
         LR    R2,R1                   scrub
         XR    R15,R15                 dynamic
         L     R3,=AL4(TKN@TSZE)       storage length
         MVCL  R2,R14                  storage area
         LR    R5,R1                   copy storage address
         USING TKN,R5                  set addressability
         MVC   TKNID,=CL4'TKN'         init ID
         LA    R3,TKN1ST               1st token address
         ST    R3,TKNTOP               init top token address
         XC    TKNCNT,TKNCNT           init active token count
         MVC   TKNSPN,=AL4(SP102)      init table subpool
         MVC   TKNSZE,=AL4(TKN@TSZE)   init table size
         MVC   TKNTOT,=AL4(TKN@NUM)    init total token count
         L     R4,PSATOLD              TCB address
         USING TCB,R4                  set addressability
         ICM   R4,7,TCBFSAB            FSA address
         ST    R5,0(,R4)               set Task-Level token table
         DROP  R4,R5
*
**       Storage obtain I/O buffer block
*
         L     R3,EVTPRBUF             I/O buffer size
         ST    R3,STKPRBUF             save size
         MVC   STKPRCNT,EVTPRCNT       save record count
         CLC   DSATID,=CL3'STC'        ECFSTC subtask?
         BNE   INI0000                 no, carry on
         L     R3,EVTB256K             yes, get 256K buffer size
         ST    R3,STKPRBUF             save size
         MVC   STKPRCNT,EVTB256R       save max # of records
*
INI0000  DS    0H
         GETMAIN RU,LV=(R3),SP=SP111
         ST    R1,STKPRLIB             I/O buffer address
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear I/O buffer
         L     R2,STKPRLIB             I/O buffer address
         L     R3,STKPRBUF             I/O buffer size
         LA    R2,0(R3,R2)             get end of buffer
         ST    R2,STKPREND             end of I/O buffer
*
INIEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFTKN ,
         $ECFSRE ,
         $ECFREB ,
         $ECFZIO ,
         $ECFEQU ,
         $XMPOST MAP=YES
         $SRVCALL DSECT=YES
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASVA   DS    18F                     save area
DSAFLG1  DS    XL1                     flags
DSA@STA  EQU   X'80'                   recovery established
DSA@SRV  EQU   X'40'                   service routine called
DSA@WAIT EQU   X'20'                   wait state indicator
DSA@MCTE EQU   X'10'                   ECF700E issue indcator
DSA@SYSW EQU   X'08'                   SYSSRV wait state indicator
DSA@WORK EQU   X'04'                   SYSSRV work state indicator
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFUNC  DS    XL1                     function ID
         DS    0F
DSASRVQ  DS    0F
DSAADDFL DS    XL1                     ADDSRV flags
DSA@RACT EQU   X'80'                   MODE=ACTIVE indicator
DSA@ACAL EQU   X'40'                   add call indicator
DSA@RUNJ EQU   X'20'                   RUNAS=JOB indicator
DSA@JOBN EQU   X'10'                   JOBNAME= found indicator
DSA@MODE EQU   X'08'                   MODE= found indicator
DSA@RUNS EQU   X'04'                   RUNAS= found indicator
DSA@AQUE EQU   X'02'                   element processed indicator
DSA@RV37 EQU   X'01'                   -avaialble
         DS    0X
DSARFRFL DS    XL1                     RFRSRV flags
DSA@WACT EQU   X'80'                   REB was active indicator
DSA@RCAL EQU   X'40'                   refresh caller indicator
DSA@MSAS EQU   X'20'                   running in MSAS indiator
DSA@RQUE EQU   X'10'                   element processed indicator
DSA@RV44 EQU   X'08'                   -avaialble
DSA@RV45 EQU   X'04'                   -avaialble
DSA@RV46 EQU   X'02'                   -avaialble
DSA@RV47 EQU   X'01'                   -avaialble
         DS    0X
DSACOMFL DS    XL1                     COMSRV flags
DSA@CQUE EQU   X'80'                   element processed indicator
         DS    0X
DSASTCFL DS    XL1                     STCSRV flags
DSA@SQUE EQU   X'80'                   element processed indicator
         DS    0X
DSAS34FL DS    XL1                     S34SRV flags
DSA@4QUE EQU   X'80'                   element processed indicator
         DS    0X
DSAS35FL DS    XL1                     S35SRV flags
DSA@5QUE EQU   X'80'                   element processed indicator
         DS    0X
DSASVCFL DS    XL1                     SVCSRV flags
DSA@VQUE EQU   X'80'                   element processed indicator
DSA@SRVQ EQU   *-DSASRVQ               queue processing flags
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSACKEY  DS    F                       entry protect key
DSATOKN  DS    F                       ESTAE token                 @05A
DSABUFA  DS    F                       work buffer address
DSABUFE  DS    F                       work buffer end address
DSAWORK  DS    F                       worker
DSAECBA  DS    F                       ECB word address
DSASRBA  DS    F                       SRB cell address
DSAREBA  DS    F                       REB cell address
DSASREA  DS    F                       SRE cell address
DSAZREB  DS    F                       REB cell address
DSASCID  DS    F                       SSCMSCID console-ID
DSARTBE  DS    F                       RTBE address
DSASYTMR DS    F                       STIMERM ID                  @07A
DSASYECB DS    F                       STIMERM PARM=parm           @07A
DSASTCKY DS    F                       entry PSW key
DSAZREBX DS    F                       REBX cell address
DSADSORG DS    F                       DYNALLOC DSORG indicator
DSAIPAR  DS    F                       input parm reg
DSAOPAR  DS    F                       output PARM reg
DSAPRLIB DS    F                       PARMLIB buffer address
DSACOUNT DS    F                       ECFSUB record count
DSAWORKC DS    F                       ECF106I work msg count      @07A
         DS    0D
DSASYSTM DS    CL8                     STIMERM DINTVL=interval     @07A
         DS    0C
DSATID   DS    CL3                     TCBTID
DSAWTID  DS    CL3                     WTO display TCBTID
DSARUNAS DS    CL3                     RUNAS{JOB|STC|SUB}
DSACALLR DS    CL6                     service caller ID
DSAMEMBR DS    CL8                     event rule member name
DSAJOBNM DS    CL8                     RUNAS=JOB jobname
DSARNAME DS    CL8                     MONITOR rule name           @07a
DSADDNAM DS    CL8                     DDname
DSASUBNM DS    CL8                     ECFSUB member name
DSAALMEM DS    CL8                     allococate member name
DSAALDDN DS    CL8                     allococate DDname
DSAALDSN DS    CL44                    allocate DSName
DSADSNAM DS    CL44                    DSName
         DS    0F
DSAMGCR  DS    CL96                    MGCR block
DSAMGCRL EQU   *-DSAMGCR               MGCR block size
         DS    0C
DSASUBMT DS    0CL80                   TSO submit data record
DSASUBFL DS    CL2                     -filler
DSASUBCM DS    CL4'SUB'                -TSO submit command
DSASUBDS DS    CL44' '                 -TSO submit DSName
DSASUBTR DS    CL30                    -trailer
DSASUBMZ EQU   *-DSASUBMT              record length
         DS    0F
DSAESTAE DS    CL(ESTAEL)              ESTAE listform
         DS    0F
DSASTIMR STIMERM SET,MF=L              listform                    @07A
         DS    0F
DSAENQ   DS    CL(ENQS34L)             ENQ listform
         DS    0F
DSADEQ   DS    CL(DEQS34L)             DEQ listform
         DS    0F
DSAZIRB  DS    CL(ZIRB@SZE)            ZIRB block
         DS    0F
DSAZIO   DS    CL(ZIO@SIZE)            ZIO block
         DS    0F
DSASDATA DS    CL(SREDATAL)            SRE data
DSASDATL EQU   *-DSASDATA              SRE data length
         DS    0F
DSASREC  DS    CL(SRE@SIZE)            SRE copy                    @05A
DSA@SREL EQU   *-DSASREC               SRE block length            @05A
         DS    0F
DSAXWTO  DS    CL(WTOMSGL)             WTO length                  @06A
DSA@WTOL EQU   *-DSAXWTO               WTO buffer length           @06A
         DS    0F
DSASWTO  DS    CL(SYSWTOL)             WTO length                  @07A
DSA@SWTL EQU   *-DSASWTO               WTO buffer length           @07A
         DS    0F
DSAMCTA  DS    1024C                   MCT table                   @07A
DSA@MCTL EQU   *-DSAMCTA               MCT table size              @07A
DSA@MCTN EQU   (*-DSAMCTA)/8           MCT entries                 @07A
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 4096-bytes)
*
         DS    0XL(4096-DSA@SIZE+1)    see ECFSUB(STAKINI)
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHASRB ,
         IHAASCB ,
         IKJTCB ,
         IHAIQE ,
         IHAECB ,
         IHADSD LIST=YES
         IHAASVT ,
         CVT   DSECT=YES
         IEEBASEA ,
CSCB     DSECT ,
         IEECHAIN ,
         END
./ ADD NAME=ECFSSI   0125-21068-21304-1645-00587-00420-00204-BENMAR  51
ECFSSI   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFSSI                                                     */
*/*                                                                  */
*/* Function: IEFJSREQ SSI Router Enable/Disable Processor           */
*/*                                                                  */
*/* Description: Enables/disables IEFJSREQ ECF subsystem interface   */
*/*              router front-end.                                   */
*/*                                                                  */
*/* Input Regs: R1  SRID                                             */
*/*                 04 - enable                                      */
*/*                 08 - disable                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, key=0                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFSSI   $SRVINI                       module ID
         USING EVT,R11                 EVT addressability
         STM   R0,R1,DSAIPAR           save parm regs
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN2044)    set error RSN
         $RETRY SSIEXIT,               activate retry                  +
               RSN=DSARSN,             RSN code                        +
               SDUMP=NO                skip SVC dump
*
**       Process enable service request
*
         CLC   DSAIGR1,ENAREQ          enable equest?
         BNE   SSI0030                 no, test further
         TM    STKFLG1,STK@HZOS        zOS host system?            @02A
         BNZ   SSI0010                 yes, carry on               @02A
         $CALL ENABLE                  call service routine
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    SSIEXIT                 no, exit
         $WTO  MID=ECF196I,                                            +
               VAR1==CL7'Enable',      show unknown                    +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN             show RSN
         B     SSIEXIT                 exit
*
**       Process zEnable service request
*
SSI0010  DS    0H                                                  @02A
         $CALL ZENABLE                 call zOS service routine    @02A
         TM    STKFLG1,STK@DBUG        DEBUG=ON?                   @02A
         BZ    SSIEXIT                 no, exit                    @02A
         $WTO  MID=ECF116I,                                        @02A+
               VAR1==CL8'zEnable',     show unknown                    +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN             show RSN
         B     SSIEXIT                 exit
*
**       Process disable service request
*
SSI0030  DS    0H
         CLC   DSAIGR1,DISREQ          disable request?
         BNE   SSI0099                 no, error
         TM    STKFLG1,STK@HZOS        zOS host system?            @02A
         BNZ   SSI0040                 yes, carry on               @02A
         $CALL DISABLE                 call service routine
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    SSIEXIT                 no, exit
         $WTO  MID=ECF196I,                                            +
               VAR1==CL7'Disable',     show unknown                    +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN             show RSN
         B     SSIEXIT                 exit
*
**       Process zDisable service request
*
SSI0040  DS    0H                                                  @02A
         $CALL ZDISABLE                call zOS service routine    @02A
         TM    STKFLG1,STK@DBUG        DEBUG=ON?                   @02A
         BZ    SSIEXIT                 no, exit                    @02A
         $WTO  MID=ECF116I,                                        @02A+
               VAR1==CL8'zDisable',    show unknown                    +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN             show RSN
         B     SSIEXIT                 exit
*
**       Process invalid service request
*
SSI0099  DS    0H
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN2048)    set error RSN
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    SSIEXIT                 no, exit
         $WTO  MID=ECF196I,                                            +
               VAR1==CL7'Unknown',     show unknown                    +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN             show RSN
         B     SSIEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
SSIEXIT  DS    0H
         $SRVXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ENAREQ   DC    AL4(4)                  enable service request ID
DISREQ   DC    AL4(8)                  disable service request ID
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ENABLE                                                     */
*/*                                                                  */
*/* Function: IEFJSREQ SSI router enable front-end subroutine        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ENABLE   $SUBINI
         USING EVT,R11                 EVT addressability
*
**       Replace IEFJSREQ entry point address
*
         USING PSA,0                   FLC
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R4,CVTJESCT             JESCT address
         USING JESCT,R4                set addressability
         L     R7,JESSSREQ             get IEFJSREQ EPA
         USING ZID,R7                  set addressability
         CLC   ZIDNAME,=CL8'ECFREQ'    IEFJSREQ intercepted?
         BNE   ENA0000                 no, carry on
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    ENA0099                 no, exit
         $WTO  MID=ECF107I,                                            +
               VAR1==CL16'already active'
         B     ENA0099                 exit
*
ENA0000  DS    0H
         L     R7,ECFREQA              ECFREQ EPA
         L     R3,ZIDREQL              ECFREQ size
         GETMAIN RC,                   obtain SQA storage              +
               LV=(R3),                ECFREQ size                     +
               SP=245                  SQA subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    ENA0010                 yes, carry on
         $WTO  MID=ECF095E,            no, issue error msg             +
               VAR1==CL3'SQA',                                         +
               VAR2==CL7'obtain',VAR3=DSARC,VAR4==CL8'ECFSSI'
         B     ENAEXIT                 exit
*
ENA0010  DS    0H
         ST    R1,EVTREQA              save ECFREQ SQA address
         LR    R2,R1                   copy storage address
         LR    R15,R3                  ECFREQ SQA length
         L     R14,ECFREQA             local ECFREQ EPA
         MVCL  R2,R14                  relocate ECFREQ to SQA
         L     R7,EVTREQA              get relocated ECFREQ EPA
         MVC   ZIDSREQ,JESSSREQ        save real IEFJSREQ EPA
*
**       Replace JESSSREQ EPA with ECFREQ EPA
*
         L     R0,JESSSREQ             IEFJSREQ EPA
         L     R2,EVTREQA              ECFREQ EPA
         CS    R0,R2,JESSSREQ          intercept IEFJSREQ address
         OI    EVTFLG1,EVT@INTR        indicate IEFJSREQ intercepted
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    ENA0020                 no, skip msg
         $WTO  MID=ECF107I,                                            +
               VAR1==CL16'activated'
*
**       Register WTO-broadcasts listener
*
ENA0020  DS    0H
         $RETRY ENA0099,               activate recovery               +
               SDUMP=NO                skip SVC dump
         ICM   R4,15,EVTSSCT           SSCT init?
         BZ    ENA0099                 no, exit
         USING SSCT,R4                 set addressability
         LA    R3,SSCTSIZE(,R4)        SCTX address
         USING SCTX,R3                 set addressability
         CLC   SCTXID,=CL4'SCTX'       valid indeed?
         BNE   ENA0099                 no, exit
         MVC   SCTXSREQ,=CL3'YES'      set SSREQ=YES option
*
ENA0099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
ENAEXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFREQA  DC    V(ECFREQ)               ECFREQ EPA
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ZENABLE                                                    */
*/*                                                                  */
*/* Function: Enable WTO/R messages broadcast subroutine             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ZENABLE  $SUBINI
         USING PSA,0                   FLC
         USING EVT,R11                 EVT addressability
*
**       Activate WTO/R messages broadcast
*
         MVC   DSARSN,=AL4(RSN2046)    set RSN
         LA    R3,DSASCSRL             SACR address
         USING SCSRPLST,R3             SCSR addressability
         ST    R3,DSASCSR              set linkage pointer
         XC    SCSRPLST(SCSPLEN),SCSRPLST
         MVC   SCSACRO,=CL4'SCSR'      ID SCSR
         MVI   SCSVER,SCSVERSN         Set version level
         OI    SCSFUNC1,SCSBRDON       enable WTO/R broadcast
         LA    R1,DSASCSR              SCSR address
         LINK  EP=IEAVG700             SSI console routine
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ZENA099                 no, setting indicator
         OI    EVTFLG5,EVT@G700        yes, set indicator
         XC    DSARSN,DSARSN           set RSN
*
**       Issue WTO/R broadcast activated debug msg
*
ZENA099  DS    0H
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    ZENAXIT                 no, exit
         $WTO  MID=ECF115I,                                            +
               VAR1==CL16'activated'
*
ZENAXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SISABLE                                                    */
*/*                                                                  */
*/* Function: IEFJSREQ SSI router disable front-end subroutine       */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DISABLE  $SUBINI
         USING EVT,R11                 EVT addressability
         USING PSA,0                   FLC
*
**       Deregister WTO-broadcasts listener
*
         $RETRY DIS0000,               activate recovery               +
               SDUMP=NO                skip SVC dump
         ICM   R4,15,EVTSSCT           SSCT init?
         BZ    DIS0000                 no, exit
         USING SSCT,R4                 set addressability
         LA    R3,SSCTSIZE(,R4)        SCTX address
         USING SCTX,R3                 set addressability
         CLC   SCTXID,=CL4'SCTX'       valid indeed?
         BNE   DIS0000                 no, exit
         MVC   SCTXSREQ,=CL3'NO'       set SSREQ=NO option
*
**       Discover WTO-broadcasts listeners
*
DIS0000  DS    0H
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTJESCT             JES control table
         USING JESCT,R3                set addressability
         L     R4,JESSSCT              top SSCT address
         $RETRY DIS0020,               activate recovery               +
               SDUMP=NO                skip SVC dump
*
DIS0010  DS    0H
         LA    R3,SSCTSIZE(,R4)        SCTX address
         USING SCTX,R3                 set addressability
         CLC   SCTXID,=CL4'SCTX'       valid indeed?
         BNE   DIS0020                 no, loop
         CLC   SCTXSREQ,=CL3'YES'      subsystem registered?
         BNE   DIS0020                 no, loop
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DIS0099                 no, skip debug msg
         $WTO  MID=ECF107I,                                            +
               VAR1==CL16'not dormant'
         B     DIS0099                 exit
*
DIS0020  DS    0H
         ICM   R4,15,SSCTSCTA          get next SSCT
         BNZ   DIS0010                 yes, loop
*
**       Restore original IEFJSREQ entry address
*
DIS0030  DS    0H
         $RETRY DIS0099,               activate recovery               +
               SDUMP=NO                skip SVC dump
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R4,CVTJESCT             JESCT address
         USING JESCT,R4                set addressability
         L     R7,JESSSREQ             get IEFJSREQ EPA
         USING ZID,R7                  set addressability
         CLC   ZIDNAME,=CL8'ECFREQ'    ECFREQ front-end installed?
         BE    DIS0040                 yes, restore it
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DIS0099                 no, skip debug msg
         $WTO  MID=ECF107I,                                            +
               VAR1==CL16'already inactive'
         B     DIS0099                 exit
*
DIS0040  DS    0H
         ST    R7,DSAREQA              save ECFREQ storage address
         MVC   DSAREQL,ZIDREQL         save ECFREQ storage length
         L     R0,JESSSREQ             ECFREQ EPA
         L     R2,ZIDSREQ              real IEFJSREQ EPA
         CS    R0,R2,JESSSREQ          restore IEFJSREQ epa
         NI    EVTFLG1,XFF-EVT@INTR    set restored indicator
         L     R0,DSAREQL              ECFREQ storage length
         L     R1,DSAREQA              ECFREQ storage address
         FREEMAIN RC,                                                  +
               A=(R1),                 address                         +
               LV=(R0),                length                          +
               SP=245                  SQA subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    DIS0050                 yes, carry on
         $WTO  MID=ECF095E,            no, issue error msg             +
               VAR1==CL3'SQA',                                         +
               VAR2==CL7'release',VAR3=DSARC,VAR4==CL8'ECFSSI'
         B     DISEXIT                 exit
*
DIS0050  DS    0H
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DIS0099                 no, skip msg
         $WTO  MID=ECF107I,            no, current instance msg        +
               VAR1==CL16'deactivated'
*
DIS0099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
DISEXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ZDISABLE                                                   */
*/*                                                                  */
*/* Function: Disable WTO/R messages broadcast subroutine            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ZDISABLE $SUBINI
         USING PSA,0                   FLC
         USING EVT,R11                 EVT addressability
*
**       Deactivate WTO/R messages broadcast
*
         MVC   DSARSN,=AL4(RSN2050)    set RSN
         LA    R3,DSASCSRL             SACR address
         USING SCSRPLST,R3             SCSR addressability
         ST    R3,DSASCSR              set linkage pointer
         XC    SCSRPLST(SCSPLEN),SCSRPLST
         MVC   SCSACRO,=CL4'SCSR'      ID SCSR
         MVI   SCSVER,SCSVERSN         Set version level
         OI    SCSFUNC1,SCSBRDOF       disable WTO/R broadcast
         LA    R1,DSASCSR              SCSR address
         LINK  EP=IEAVG700             SSI console routine
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ZDIS099                 no, setting indicator
         NI    EVTFLG5,XFF-EVT@G700    yes, reset indicator
         XC    DSARSN,DSARSN           set RSN
*
**       Issue WTO/R broadcast deactivated debug msg
*
ZDIS099  DS    0H
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    ZDISXIT                 no, exit
         $WTO  MID=ECF115I,                                            +
               VAR1==CL16'deactivated'
*
ZDISXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFEQU ,
         $ECFSSVT DSECT=YES
         $SREQID ID=ZID,DSECT=YES
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAREGS  DS    3F                      regs R9,R10,R11 savearea
DSAFLG1  DS    XL1                     flags
DSA@LOAD EQU   X'80'                   LMOD LOADed indicator
DSA@FAIL EQU   X'40'                   LMOD load failed indicator
DSA@JPQQ EQU   X'20'                   LMOD found in JPQ indicator
DSA@LPAQ EQU   X'10'                   LMOD found in LPA indicator
DSA@PASS EQU   X'08'                   1st LMOD char indicator
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSAXRC   DS    F                       return code
DSARSN   DS    F                       reason code
DSAREQA  DS    F                       ECFREQ storage address
DSAREQL  DS    F                       ECFREQ storage length
DSASCSR  DS    F                       SCSR address
         DS    0F
DSAOPAR  DS    F                       output parm reg
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
         DS    0D
DSASCSRL DS    CL(SCSRPLST_LEN)        SCSR parmlist
         DS    0D
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         CVT   DSECT=YES
         IHAPSA ,
         IKJTCB ,
         IEFJESCT ,
         IEFJSCVT ,
         IEFJSSVT ,
         IEZVG100 ,
         END
./ ADD NAME=ECFSTC   0142-21123-21304-1645-04317-04322-04317-BENMAR  57
ECFSTC   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFSTC                                                     */
*/*                                                                  */
*/* Function: Event Capture Started Tasks Recovery Processor         */
*/*                                                                  */
*/* Description: The following services can be invoked to recover    */
*/*              system-related started tasks that are preventing    */
*/*              successful system initialization. These services    */
*/*              are invoked from any active MVS system console      */
*/*              and support the following started task recovery     */
*/*              functions:                                          */
*/*                                                                  */
*/*              EDIT - Edit a PDS member or sequential data set     */
*/*                     and insert and delete records. A single      */
*/*                     EDIT session instance is supported at a      */
*/*                     time. Issue the SAVE or NOSAVE command       */
*/*                     to end the current EDIT session as this      */
*/*                     allows you to start a new EDIT session.      */
*/*                       /?EDIT DSName                              */
*/*                       /?EDIT DSName(member)                      */
*/*                       /?INSERT Record-number                     */
*/*                       /?DELETE Record-number                     */
*/*                       /?LIST {T|TOP}                             */
*/*                       /?LIST {B|BOTTOM}                          */
*/*                       /?LIST Records-number                      */
*/*                       /?SAVE                                     */
*/*                       /?NOSAVE                                   */
*/*                                                                  */
*/*              BROWSE - Browse a PDS member or sequential data     */
*/*                       set. A single BROWSE session instance      */
*/*                       is supported. End the current BROWSE       */
*/*                       session by issuing ENDBROWSE or by         */
*/*                       issuing BROWSE {DSName|DSName(member}      */
*/*                       to start a new BROWSE session.             */
*/*                         /?BROWSE DSName                          */
*/*                         /?BROWSE DSName(member)                  */
*/*                         /?BROWSE {T|TOP}                         */
*/*                         /?BROWSE {B|BOTTOM}                      */
*/*                         /?BROWSE {Record-number)                 */
*/*                         /?ENDBROW                                */
*/*                         /?ENDBROWSE                              */
*/*                                                                  */
*/*              COPY - Copy member from one PDS to another or to    */
*/*                     the same PDS with a different member name.   */
*/*                       /?COPY FROM=DSN(member),TO=DSN(member)     */
*/*                                                                  */
*/*              COMPRESS - Compresses a PDS.                        */
*/*                           /?COMPRESS DSName                      */
*/*                                                                  */
*/*              TSO - Allows you to issue most TSO commands.        */
*/*                      /?ALLOCATE                                  */
*/*                      /?COPY                                      */
*/*                      /?DELETE                                    */
*/*                      /?EDIT                                      */
*/*                      /?FREE                                      */
*/*                      /?LIST                                      */
*/*                      /?LISTALC                                   */
*/*                      /?LISTBC                                    */
*/*                      /?LISTCAT                                   */
*/*                      /?LISTDS                                    */
*/*                      /?RENAME                                    */
*/*                                                                  */
*/*              SCROLL - Sets browse and edit scroll attributes     */
*/*                       as follows:                                */
*/*                                                                  */
*/*                 /?SCROLL {data-lines} - Used to set the amount   */
*/*                                         of data lines to scroll. */
*/*                                         The default value is 24  */
*/*                                         data lines.              */
*/*                                                                  */
*/*                 /?SCROLL {L|LEFT|R|RIGHT} - Used to scroll data  */
*/*                                             lines left or right. */
*/*                                                                  */
*/* Input Regs: R0  SRE address                                      */
*/*             R1  command buffer address                           */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=8                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 04072021 | Ben Marino  | Serviceability enhancements   *
* @03 | V2R1 | 06262021 | Ben Marino  | zOS serviceability support    *
* @04 | V2R3 | 08272021 | Ben Marino  | Fixed S378-14 compress ABEND  *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFSTC   $SRVINI
         STM   R0,R1,DSAIPAR           save PARM regs              @03C
         USING EVT,R11                 EVT addressability
*
**       Validity check environment
*
         TM    EVTFLG4,EVT@MSAS        MSAS=TEST?
         BNZ   STC0000                 yes, allow recovery
         USING PSA,0                   FLC addressability
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BE    STC0000                 yes, carry on
         $WTO  MID=ECF806E             no, issue error msg
         B     STCEXIT                 exir
*
**       Copy command buffer
*
STC0000  DS    0H
         L     R1,DSAIGR0              local SRE address           @03A
         MVC   DSASREC(SRE@SIZE),0(R1) copy SRE block              @03A
         L     R1,DSAIGR1              parm address                @03C
         MVI   DSACMDBF,BLANK          clear CMD buffer
         MVC   DSACMDBF+1(DSA@CMDZ-1),DSACMDBF
         MVC   DSACMDBF(SREDATAL),0(R1) copy CMD buffer
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3000)    set error RSN
         $RETRY STCEXIT,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Process STC recovery request
*
         LA    R6,STCTABLE             table address
         USING STCE,R6                 set addressability
*
STC0100  DS    0H
         CLC   STCEEPA,SERVEND         end-of-table?
         BE    STC0999                 yes, exit loop
         LH    R1,STCECMDL             command length
         BCTR  R1,0                    decrement of EXecute
         EX    R1,COMPCMD              does it match?
         BNE   STC0200                 no, loop
         L     R0,STCEPAR0             set input parm-R0
         L     R1,STCEPAR1             set input parm-R1
         L     R15,STCEEPA             subroutine EPA
         BALR  R14,R15                 call subroutine
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         B     STCEXIT                 exit
*
STC0200  DS    0H
         LA    R6,STCE@SZE(,R6)        next STCX entry
         B     STC0100                 loop
*
**       Display invalid command issued message
*
STC0999  DS    0H
         $WTO  MID=ECF051I,                                            +
               VAR1=EVTCMDCH           command prefix
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN3012)    set error RSN
         B     STCEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
STCEXIT  DS    0H
         $SRVXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COMPCMD  CLC   STCECMD(*-*),DSACMDTA   EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
SERVEND  DC    XL4'FFFFFFFF'           STC table end indicator
*---------------------------------------------------------------------*
*        Recovery Service routine Table                               *
*--------+---------+---------+---------+---------+---------+---------+*
STCTABLE DS    0F
         $STCSRV TYPE=INITIAL
*
**       EDIT recovery session commands
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=EDIT,              EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=5,                -command verb length              +
               CMD=CL16'EDIT'        -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=EDIT,              EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=5,                -command verb length              +
               CMD=CL16'LIST'        -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=INSERT,            EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=7,                -command verb length              +
               CMD=CL16'INSERT'      -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=UPDATE,            EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=7,                -command verb length              +
               CMD=CL16'UPDATE'      -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=DELETE,            EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=7,                -command verb length              +
               CMD=CL16'DELETE'      -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=SAVE,              EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=5,                -command verb length              +
               CMD=CL16'SAVE'        -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=NOSAVE,            EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=7,                -command verb length              +
               CMD=CL16'NOSAVE'      -command verb
*
**       BROWSE recovery session commands
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=BROWSE,            EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=7,                -command verb length              +
               CMD=CL16'BROWSE'      -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=ENDBROW,           EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=08,               -command verb length              +
               CMD=CL16'ENDBROW'     -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=ENDBROW,           EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=10,               -command verb length              +
               CMD=CL16'ENDBROWSE'   -command verb
*
**       COMMON recovery session commands
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=TSO,               EPA command                       +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=4,                -command verb length              +
               CMD=CL16'TSO'         -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=COPY,              EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=5,                -command verb length              +
               CMD=CL16'COPY'        -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=COMPRESS,          EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=9,                -command verb length              +
               CMD=CL16'COMPRESS'    -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=SCROLL,            EPA                               +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=7,                -command verb length              +
               CMD=CL16'SCROLL'      -command verb
*
**       RECOVERY sessions display commands
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=RECOVER,           EPA command                       +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=4,                -command verb length              +
               CMD=CL16'D R'         -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=RECOVER,           EPA command                       +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=11,               -command verb length              +
               CMD=CL16'D RECOVERY'  -command verb
*
         $STCSRV TYPE=ENTRY,                                           +
               EP=RECOVER,           EPA command                       +
               PARM=0,               -parameter-R1                     +
               PARM0=0,              -parameter-R0                     +
               LEN=16,               -command verb length              +
               CMD=CL16'DISPLAY RECOVERY'
*
         $STCSRV TYPE=FINAL
STCTBSZE EQU   *-STCTABLE
*---------------------------------------------------------------------*
*        MLWTO message lines                                          *
*--------+---------+---------+---------+---------+---------+---------+*
         $ECFMWTO DSECT=NO,T=MSX
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: EDIT                                                       */
*/*                                                                  */
*/* Function: EDIT DSName(member) subroutine                         */
*/*                                                                  */
*/* Commands: EDIT DSName(member)                                    */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
EDIT     $SUBINI
         USING PSA,0
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3028)    set error RSN
         $RETRY EDITERR,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Blank; RecordNumber; TOP; BOTTOM
*
         LA    R3,DSACMDBF             buffer address
         LA    R3,6(,R3)               skip edit command
         LA    R2,DSA@CMDZ-6           buffer length
*
         CLI   0(R3),C'0'              edit record number?
         BNL   EDIT000                 yes, carry on
         CLC   EVTBLNKS,0(R3)          edit w/scroll default?
         BE    EDIT000                 yes, carry on
         CLC   =CL2'T',0(R3)           edit TOP?
         BE    EDIT000                 yes, carry on
         CLC   =CL4'TOP',0(R3)         edit TOP?
         BE    EDIT000                 yes, carry on
         CLC   =CL2'B',0(R3)           edit BOTTOM?
         BE    EDIT000                 yes, carry on
         CLC   =CL7'BOTTOM',0(R3)      edit BOTTOM?
         BNE   EDIT010                 yes, carry on
*
**       Edit current session member
*
EDIT000  DS    0H
         $CALL MEMEDIT                 call subroutine
         B     EDITEXIT                exit
*
**       Parse DSName(member)
*
EDIT010  DS    0H
         LA    R1,6                    edit verb length
         $CALL PARDSN                  parse DSName(member)
         LTR   R15,R15                 successful?
         BNZ   EDIT015                 no, error
         TM    DSAFLG1,DSA@NMEM        member name?
         BZ    EDIT020                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: Member name required not specified'
         $WTO  MID=ECF051I,VAR1=EVTCMDCH
         B     EDITEXIT                exit
*
EDIT015  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: Invalid dataset(member) specified'
         $WTO  MID=ECF051I,VAR1=EVTCMDCH
         B     EDITEXIT                exit
*
**       Check recovery session instance
*
EDIT020  DS    0H
         USING RCT,R8
         ICM   R8,15,EVTERCTA          edit RCT init?
         BZ    EDIT025                 no, create RCT
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BE    EDIT040                 yes, carry on
*
EDIT025  DS    0H
         LA    R3,RCT@SIZE
         GETMAIN RC,LV=(R3),SP=SP108
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   EDIT030                 no, error
         $ST   R1,EVTERCTA             yes, save RCT address
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear RCT
         LR    R8,R1                   RCT address
         MVC   RCTID,=CL4'RCT'         ID
         MVC   RCTSUBP,=AL4(SP108)     init subpool
         MVC   RCTSIZE,=AL4(RCT@SIZE)  init RCT size
         MVC   RCTSCROL,=AL4(24)       init,
         MVC   RCTSCRZN,=CL2'24'        default scroll value.
         MVC   RCTEDMEM,DSAMEMBR       init member name
         MVC   RCTEDDSN,DSADSNAM       init DSName
         MVC   RCTEDDDN,=CL8'ECFEDIT'  init DDname
         B     EDIT040                 carry on
*
**       Issue RCT storage obtain failed msg
*
EDIT030  DS    0H
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     EDITEXIT                exit
*
**       Allocate Edit DSName
*
EDIT040  DS    0H
         MVC   RCTCVERB,EDITVERB       command verb
         MVC   RCTCVMEM,RCTEDMEM       edit member
         MVI   DSAFUNC,ZIO@MSAS        MSAS allocate request
         MVC   DSADDNAM,RCTEDDDN       set DDname
         $CALL ALLOC                   allocate dataset
         LTR   R15,R15                 successful?
         BZ    EDIT042                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: dataset(member) allocation failed'
         B     EDITERR                 error
*
**       Read Edit DSName(member)
*
EDIT042  DS    0H
         $CALL READ                    read member name
         LTR   R15,R15                 successful?
         BZ    EDIT044                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: dataset(member) read failed'
         B     EDITERR                 error
*
**       Serialize edit session
*
EDIT044  DS    0H
         MVC   DSAPLST(EDITENQL),EDITENQ
         ENQ   MF=(E,DSAPLST)          serialize edit
         ST    R15,DSARC               save RC
         LTR   R15,R15                 already in edit?
         BZ    EDIT045                 no, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: Session is currently active'
         B     EDITEXIT                exit
*
EDIT045  DS    0H
         OI    RCTFLG1,RCT@EDIT        edit session started
         SLR   R1,R1                   records count
         L     R2,STKPRCNT             data records
         L     R3,STKPRLIB             input data address
*
EDIT050  DS    0H
         CLI   0(R3),X'00'             end of records?
         BE    EDIT060                 yes, exit loop
         LA    R1,1(,R1)               record count
         LA    R3,80(,R3)              next member record
         BCT   R2,EDIT050              loop
*
**       Free current edit I/O buffer
*
EDIT060  DS    0H
         LTR   R1,R1                   any records?
         BNZ   EDIT065                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: No member records found to edit'
         B     EDITEXIT                exit
*
EDIT065  DS    0H
         ST    R1,RCTERECS             save record count
         ST    R1,RCTEDSCR             set initial scroll amount
         ICM   R1,15,RCTEDBUF          I/O buffer init?
         BZ    EDIT070                 no, carry on
         L     R2,RCTEDBFL             buffer size
         XC    RCTEDBUF,RCTEDBUF       zero buffer address
         FREEMAIN RU,                                                  +
               A=(R1),LV=(R2),SP=SP108
*
**       Storage obtain edit I/O buffer
*
EDIT070  DS    0H
         L     R0,RCTERECS             get record count
         LA    R3,EDT@SIZE             record size
         MR    R2,R0                   R3 has total length
         ST    R3,RCTEDBFL             I/O buffer size
         GETMAIN RU,LV=(R3),SP=SP108
         ST    R1,RCTEDBUF             save buffer address
         ST    R1,RCTEDCUR             set current location
*
**       Relocate DSName(member) record data
*
         LR    R4,R1                   copy buffer address
         USING EDT,R4                  set addressability
         L     R2,RCTERECS             get record count
         L     R3,STKPRLIB             input data address
         LA    R1,1                    set record ID
*
EDIT080  DS    0H
         ST    R1,RCTEDBIN             convert,
         $CNVD DSAVAR,RCTEDBIN         record ID.
         MVC   EDTRNUM,DSAVAR+5        init record ID
         MVI   EDTRSEP,BLANK           init separator
         MVC   EDTDATA,0(R3)           relocate record data
         LA    R3,80(,R3)              next input record
         LA    R4,EDT@SIZE(,R4)        next edit record
         ST    R4,RCTEDLST             save record address
         LA    R1,1(,R1)               increment record ID
         BCT   R2,EDIT080              loop
*
**       Build DSName(member) eye catcher
*
         MVI   RCTEDEYE,BLANK          clear eye catcher
         MVC   RCTEDEYE+1(RCT@EDYL-1),RCTEDEYE
         MVC   RCTEDEYE(DSA@DSNL),DSADSNAM
         LA    R3,RCTEDEYE             eye address
         LA    R2,DSA@DSNL             max DSName length
*
EDIT090  DS    0H
         CLI   0(R3),BLANK             DSName end?
         BE    EDIT100                 yes, exit loop
         LA    R3,1(,R3)               next char
         BCT   R2,EDIT090              loop
*
EDIT100  DS    0H
         MVI   0(R3),C'('              oparen
         LA    R3,1(,R3)               next char
         MVC   0(DSA@MEML,R3),DSAMEMBR insert member name
         LA    R2,DSA@MEML             member name length
*
EDIT110  DS    0H
         CLI   0(R3),BLANK             member name end?
         BE    EDIT120                 yes, exit loop
         LA    R3,1(,R3)               next char
         BCT   R2,EDIT110              loop
*
EDIT120  DS    0H
         MVI   0(R3),C')'              cparen
*
**       Display edit member data
*
         CLC   RCTERECS,RCTSCROL       records GT scroll value?
         BH    EDIT130                 yes, carry on
         MVC   DSARECBL,RCTERECS       set total records
         MVC   RCTRECEN,=CL16'BOTTOM OF DATA'
         B     EDIT140                 display records
*
EDIT130  DS    0H
         MVC   DSARECBL,RCTSCROL       set scroll amount value
         MVC   RCTRECEN,=CL16'MORE DATA...'
*
EDIT140  DS    0H
         MVI   DSACALLR,DSA@EDIT       set caller ID
         MVC   DSARECBF,RCTEDCUR       set buffer address
         $CALL MLWTO                   display record data
*
EDIT999  DS    0H
         B     EDITEXIT                exit
*
**       ABEND recovery routine
*
EDITERR  DS    0H
         $CALL FREBUFE                 free I/O buffers
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: Session abnormally terminated'
         B     EDIT999                 release resource
*
EDITEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
EDITVERB DC    CL21'  EDIT=mmmmmmmm'   command verb + member
*---------------------------------------------------------------------*
*        Edit serializtion                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
EDITENQ  ENQ   (ENQMAJ,ENQMIN,E,8,SYSTEM),RET=USE,MF=L
EDITENQL EQU   *-EDITENQ
         DS    0C
ENQMAJ   DC    CL8'ECFSTC'             Major name
ENQMIN   DC    CL8'EDIT'               Minor name
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MEMEDIT                                                    */
*/*                                                                  */
*/* Function: Edit member records subroutine                         */
*/*                                                                  */
*/* Commands: EDIT         -List top of member                       */
*/*           EDIT TOP     -List top of member                       */
*/*           EDIT BOTTOM  -List bottom of member                    */
*/*           EDIT 77      -List record number 77                    */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MEMEDIT  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Validity check edit RCT
*
         USING RCT,R8                  set addressability
         ICM   R8,15,EVTERCTA          edit RCT init?
         BZ    MEME010                 no, error
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BNE   MEME010                 no, error
         ICM   R5,15,RCTEDBUF          any records?
         BZ    MEME010                 no, error
         LA    R3,DSACMDBF             buffer address
         LA    R3,6(,R3)               skip EDIT command
         LA    R2,DSA@CMDZ-6           buffer length
*
MEME000  DS    0H
         CLI   0(R3),BLANK             any operands?
         BNE   MEME020                 yes, parse operands
         LA    R3,1(,R3)               next char
         BCT   R2,MEME000              loop
*
**       Edit 'blank' record number
*
         L     R0,RCTSCROL             get scroll value
         LA    R3,EDT@SIZE             record size
         MR    R2,R0                   R3 has total length
         L     R4,RCTEDCUR             records buffer address
         LA    R4,0(R3,R4)             scroll thru records
         CL    R4,RCTEDLST             at last record?
         BL    MEME005                 no, carry on
         L     R4,RCTEDBUF             yes, set 1st record address
*
MEME005  DS    0H
         USING EDT,R4                  EDT addressability
         LA    R3,DSACMDBF             buffer address
         MVC   6(3,R3),EDTRNUM         insert record number
         LA    R3,6(,R3)               point to record number
         B     MEME100                 carry on
         DROP  R4
*
MEME010  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: No active EDIT session found'
         B     MEME999                 exit
*
**       EDIT TOP of member
*
MEME020  DS    0H
         CLC   =CL2'T',0(R3)           edit TOP?
         BE    MEME030                 yes, carry on
         CLC   =CL4'TOP',0(R3)         edit TOP?
         BNE   MEME060                 no, test further
*
MEME030  DS    0H
         MVC   RCTEDCUR,RCTEDBUF       update current ptr
         MVC   DSARECBF,RCTEDBUF       set top of member
         CLC   RCTERECS,RCTSCROL       records GT scroll value?
         BH    MEME040                 yes, carry on
         MVC   DSARECBL,RCTERECS       set total records
         MVC   RCTRECEN,=CL16'BOTTOM OF DATA'
         B     MEME050                 display records
*
MEME040  DS    0H
         MVC   DSARECBL,RCTSCROL       set MLWTO record count
         MVC   RCTRECEN,=CL16'MORE DATA...'
*
MEME050  DS    0H
         MVI   DSACALLR,DSA@EDIT       set caller ID
         $CALL MLWTO                   display record data
         B     MEME999                 exit
*
**       EDIT BOTTOM of member
*
MEME060  DS    0H
         CLC   =CL2'B',0(R3)           edit BOTTOM?
         BE    MEME070                 yes, carry on
         CLC   =CL4'BOTTOM',0(R3)      edit BOTTOM?
         BNE   MEME100                 no, test further
*
MEME070  DS    0H
         CLC   RCTERECS,RCTSCROL       records GT scroll value?
         BH    MEME080                 yes, carry on
         MVC   DSARECBF,RCTEDBUF       set top of member
         MVC   DSARECBL,RCTERECS       set total records
         MVC   RCTRECEN,=CL16'BOTTOM OF DATA'
         B     MEME090                 display records
*
MEME080  DS    0H
         L     R0,RCTSCROL             get scroll value
         LA    R3,EDT@SIZE             record size
         MR    R2,R0                   R3 has total length
         L     R1,RCTEDLST             last record address
         SLR   R1,R3                   compute location
         ST    R1,DSARECBF             set record address
         MVC   RCTEDCUR,DSARECBF       update current ptr
         MVC   DSARECBL,RCTSCROL       set record count
         MVC   RCTRECEN,=CL16'BOTTOM OF DATA'
*
MEME090  DS    0H
         MVI   DSACALLR,DSA@EDIT       set caller ID
         $CALL MLWTO                   display record data
         B     MEME999                 exit
*
**       EDIT 'nnn' record number
*
MEME100  DS    0H
         ICM   R5,15,RCTEDBUF          any records?
         BZ    MEME110                 no, error
         MVC   RCTEDNUM,=CL3'000'      init zones
         CLI   1(R3),BLANK             1-digit record number?
         BNE   MEME102                 no, test further
         MVC   RCTED03(1),0(R3)        yes, copy it
         B     MEME106                 carry on
*
MEME102  DS    0H
         CLI   2(R3),BLANK             2-digit record number?
         BNE   MEME104                 no, test further
         MVC   RCTED02(2),0(R3)        yes, copy it
         B     MEME106
*
MEME104  DS    0H
         CLI   3(R3),BLANK             3-digit record number?
         BNE   MEME108                 no, error
         MVC   RCTED01(3),0(R3)        yes, copy it
*
MEME106  DS    0H
         MVC   DSAFIELD,MEMENUMC       init zone field
         MVN   DSAFIELD,RCTEDNUM       move numeric digits
         CLC   DSAFIELD,RCTEDNUM       numeric value?
         BNE   MEME108                 no, error
         CLC   4(8,R3),EVTBLNKS        trainling blanks?
         BE    MEME120                 yes, carry on
*
MEME108  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: Invalid record number specified'
         B     MEME999                 exit
*
MEME110  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: No records found'
         B     MEME999                 exit
*
MEME120  DS    0H
         L     R2,RCTERECS             get record count
         L     R4,RCTEDBUF             EDT address
         USING EDT,R4                  set addressability
*
MEME130  DS    0H
         CLC   EDTRNUM,RCTEDNUM        record found?
         BE    MEME140                 yes, carry on
         LA    R4,EDT@SIZE(,R4)        next edit record
         BCT   R2,MEME130              loop
*
MEME135  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: Record number not found'
         B     MEME999                 exit
*
MEME140  DS    0H
         ST    R4,DSARECBF             current record address
         ST    R4,RCTEDCUR             set current record addrss
         L     R1,RCTEDLST             last record address
         SLR   R1,R4                   quotient
         SLR   R0,R0                   ramainder
         LA    R3,EDT@SIZE             record size
         DR    R0,R3                   result in R1
         CL    R1,RCTSCROL             records GT scroll value?
         BH    MEME150                 yes, carry on
         ST    R1,DSARECBL             set display records
         MVC   RCTRECEN,=CL16'BOTTOM OF DATA'
         B     MEME160                 display records
*
MEME150  DS    0H
         MVC   DSARECBL,RCTSCROL       set MLWTO record count
         MVC   RCTRECEN,=CL16'MORE DATA...'
*
MEME160  DS    0H
         MVI   DSACALLR,DSA@EDIT       set caller ID
         $CALL MLWTO                   display record data
*
MEME999  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
MEMEEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
MEMENUMC DC    CL8'00000000'           zone data
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: UPDATE                                                     */
*/*                                                                  */
*/* Function: UPDATE member record subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
UPDATE   $SUBINI
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3048)    set error RSN
         $RETRY UPDTERR,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Validity check edit RCT
*
         USING RCT,R8                  set addressability
         ICM   R8,15,EVTERCTA          edit RCT init?
         BZ    UPDT010                 no, error
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BE    UPDT020                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'UPDATE: RCT failed validity checks'
         B     UPDATEXT                exit
*
UPDT010  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'UPDATE: No active EDIT session found'
         B     UPDATEXT                exit
*
UPDT020  DS    0H
         ICM   R5,15,RCTEDBUF          any records?
         BZ    UPDT010                 no, error
         LA    R3,DSACMDBF             buffer address
         LA    R3,8(,R3)               skip UPDATE command
         LA    R2,DSA@CMDZ-8           buffer length
*
**       UPDATE 'nnn' record number
*
UPDT030  DS    0H
         MVC   RCTEDNUM,=CL3'000'      init zones
         CLI   1(R3),C','              1-digit record number?
         BNE   UPDT032                 no, test further
         LA    R5,1                    1-digit offset
         MVC   RCTED03(1),0(R3)        yes, copy it
         B     UPDT036                 carry on
*
UPDT032  DS    0H
         CLI   2(R3),C','              2-digit record number?
         BNE   UPDT034                 no, test further
         LA    R5,2                    2-digit offset
         MVC   RCTED02(2),0(R3)        yes, copy it
         B     UPDT036
*
UPDT034  DS    0H
         CLI   3(R3),C','              3-digit record number?
         BNE   UPDT040                 no, error
         LA    R5,3                    3-digit offset
         MVC   RCTED01(3),0(R3)        yes, copy it
*
UPDT036  DS    0H
         MVC   DSAFIELD,UPDTNUMC       init zone field
         MVN   DSAFIELD,RCTEDNUM       move numeric digits
         CLC   DSAFIELD,RCTEDNUM       numeric value?
         BE    UPDT050                 yes, carry on
*
UPDT040  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'UPDATE: Invalid record number specified'
         B     UPDATEXT                exit
*
UPDT050  DS    0H
         L     R2,RCTERECS             get record count
         L     R4,RCTEDBUF             EDT buffer address
         USING EDT,R4                  set addressability
*
UPDT060  DS    0H
         CLC   EDTRNUM,RCTEDNUM        record found?
         BE    UPDT070                 yes, carry on
         LA    R4,EDT@SIZE(,R4)        next edit record
         BCT   R2,UPDT060              loop
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'UPDATE: Record number not found'
         B     UPDATEXT                exit
*
**       Update member record data
*
UPDT070  DS    0H
         USING EDT,R4                  set addressability
         LA    R3,1(R5,R3)             point to update record
         MVC   EDTVALUE,0(R3)          update record data
*
**       Renumber member records
*
         L     R3,RCTERECS             number of records
         L     R4,RCTEDBUF             I/O buffer address
         USING EDT,R4                  EDT addressability
         LA    R2,1                    record ID
         LA    R1,10                   sequence number
*
UPDT080  DS    0H
         ST    R2,RCTEDBIN             convert,
         $CNVD DSAVAR,RCTEDBIN         record ID.
         MVC   EDTRNUM,DSAVAR+5        init record ID
         ST    R1,RCTEDWRK             convert,
         $CNVD DSAVAR,RCTEDWRK         sequence number.
         MVI   EDTBLANK,BLANK          clear byte-73
         MVC   EDTSEQNM,DSAVAR+1       set sequence number(74-80)
         LA    R2,1(,R2)               increment record ID
         LA    R1,10(,R1)              set sequence number
         LA    R4,EDT@SIZE(R4)         next input record
         BCT   R3,UPDT080              loop
         OI    RCTFLG1,RCT@UPDT        set update indicator
*
**       Issue record update complete msg
*
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'UPDATE: Member record updated'
         B     UPDATEXT                exit
*
**       ABEND recovery routine
*
UPDTERR  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'UPDATE: EDIT session abnormally terminated'
*
UPDATEXT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
UPDTNUMC DC    CL8'00000000'           zone data
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DELETE                                                     */
*/*                                                                  */
*/* Function: DELETE member record subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DELETE   $SUBINI
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3040)    set error RSN
         $RETRY DELEERR,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Validity check edit RCT
*
         USING RCT,R8                  set addressability
         ICM   R8,15,EVTERCTA          edit RCT init?
         BZ    DELE010                 no, error
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BE    DELE020                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'DELETE: RCT failed validity checks'
         B     DELETEXT                exit
*
DELE010  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'DELETE: No active EDIT session found'
         B     DELETEXT                exit
*
**       Validity check RecordNumber
*
DELE020  DS    0H
         ICM   R5,15,RCTEDBUF          any records?
         BNZ   DELE025                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'DELETE: No records found'
         B     DELETEXT                exit
*
DELE025  DS    0H
         LA    R3,DSACMDBF             buffer address
         LA    R3,8(,R3)               skip delete command
         LA    R2,DSA@CMDZ-8           buffer length
         MVC   RCTEDNUM,=CL3'000'      init zones
         CLI   1(R3),BLANK             1-digit record number?
         BNE   DELE030                 no, test further
         MVC   RCTED03(1),0(R3)        yes, copy it
         B     DELE050                 carry on
*
DELE030  DS    0H
         CLI   2(R3),BLANK             2-digit record number?
         BNE   DELE040                 no, test further
         MVC   RCTED02(2),0(R3)        yes, copy it
         B     DELE050
*
DELE040  DS    0H
         CLI   3(R3),BLANK             3-digit record number?
         BNE   DELE060                 no, error
         MVC   RCTED01(3),0(R3)        yes, copy it
*
DELE050  DS    0H
         MVC   DSAFIELD,DELENUMC       init zone field
         MVN   DSAFIELD,RCTEDNUM       move numeric digits
         CLC   DSAFIELD,RCTEDNUM       numeric value?
         BNE   DELE060                 no, error
         CLC   4(8,R3),EVTBLNKS        trainling blanks?
         BE    DELE070                 yes, carry on
*
DELE060  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'DELETE: Invalid record number specified'
         B     DELETEXT                exit
*
**       Locate target record number
*
DELE070  DS    0H
         SLR   R1,R1                   zero record count
         L     R2,RCTERECS             get record count
         L     R4,RCTEDBUF             EDT address
         USING EDT,R4                  set addressability
*
DELE080  DS    0H
         LA    R1,1(,R1)               update record count
         CLC   EDTRNUM,RCTEDNUM        record found?
         BE    DELE090                 yes, carry on
         LA    R4,EDT@SIZE(,R4)        next edit record
         BCT   R2,DELE080              loop
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'DELETE: Record number not found'
         B     DELETEXT                exit
*
**       Delete selected member record
*
DELE090  DS    0H
         MVC   RCTEDDEL,RCTEDNUM       save RecordNumber
         ST    R1,RCTEDELC             save current record count
         L     R2,RCTERECS             total record count
         SLR   R2,R1                   remaining record count
         ST    R2,RCTEDREM             save save it
         LTR   R2,R2                   deleting last record?
         BZ    DELE110                 no, carry on
*
**       Relocate remaining member records
*
         LA    R6,EDT@SIZE(,R4)        next record address
         L     R2,RCTEDREM             remaining record count
*
DELE100  DS    0H
         MVC   0(EDT@SIZE,R4),0(R6)    move up one record
         LA    R4,EDT@SIZE(,R4)        next record location
         LA    R6,EDT@SIZE(,R6)        next record location
         BCT   R2,DELE100              loop
*
**       Update relocated member pointers
*
DELE110  DS    0H
         L     R1,RCTERECS             total record count
         BCTR  R1,0                    subtract one record
         ST    R1,RCTERECS             update record count
         LA    R1,EDT@SIZE             record size
         L     R2,RCTEDLST             last record address
         SLR   R2,R1                   back up one record
         ST    R2,RCTEDLST             update last record adress
         OI    RCTFLG1,RCT@UPDT        member update pending
*
**       Renumber member records
*
         L     R3,RCTERECS             number of records
         L     R4,RCTEDBUF             I/O buffer address
         USING EDT,R4                  EDT addressability
         LA    R2,1                    record ID
         LA    R1,10                   sequence number
*
DELE120  DS    0H
         ST    R2,RCTEDBIN             convert,
         $CNVD DSAVAR,RCTEDBIN         record ID.
         MVC   EDTRNUM,DSAVAR+5        init record ID
         ST    R1,RCTEDWRK             convert,
         $CNVD DSAVAR,RCTEDWRK         sequence number.
         MVI   EDTBLANK,BLANK          clear byte-73
         MVC   EDTSEQNM,DSAVAR+1       set sequence number(74-80)
         LA    R2,1(,R2)               increment record ID
         LA    R1,10(,R1)              set sequence number
         LA    R4,EDT@SIZE(R4)         next input record
         BCT   R3,DELE120              loop
*
**       Issue member record deleted msg
*
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'DELETE: Record number deleted'
         B     DELETEXT                exit
*
**       ABEND recovery routine
*
DELEERR  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'DELETE: EDIT session abnormally terminated'
*
DELETEXT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
DELENUMC DC    CL8'00000000'           zone data
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: INSERT                                                     */
*/*                                                                  */
*/* Function: INSERT member record subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
INSERT   $SUBINI
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3044)    set error RSN
         $RETRY INSTERR,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Validity check edit RCT
*
         USING RCT,R8                  set addressability
         ICM   R8,15,EVTERCTA          edit RCT init?
         BZ    INST010                 no, error
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BE    INST020                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'INSERT: RCT failed validity checks'
         B     INSTEXIT                exit
*
INST010  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'INSERT: No active Edit session found'
         B     INSTEXIT                exit
*
**       Validity check RecordNumber
*
INST020  DS    0H
         ICM   R5,15,RCTEDBUF          any records?
         BNZ   INST025                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'INSERT: No records found'
         B     INSTEXIT                exit
*
INST025  DS    0H
         LA    R3,DSACMDBF             buffer address
         LA    R3,8(,R3)               skip insert command
         LA    R2,DSA@CMDZ-8           buffer length
         MVC   RCTEDNUM,=CL3'000'      init zones
         CLI   1(R3),C','              1-digit record number?
         BNE   INST030                 no, test further
         LA    R5,1                    1-digit offset
         MVC   RCTED03(1),0(R3)        yes, copy it
         B     INST050                 carry on
*
INST030  DS    0H
         CLI   2(R3),C','              2-digit record number?
         BNE   INST040                 no, test further
         LA    R5,2                    2-digit offset
         MVC   RCTED02(2),0(R3)        yes, copy it
         B     INST050
*
INST040  DS    0H
         CLI   3(R3),C','              3-digit record number?
         BNE   INST060                 no, error
         LA    R5,3                    3-digit offset
         MVC   RCTED01(3),0(R3)        yes, copy it
*
INST050  DS    0H
         MVC   DSAFIELD,INSTNUMC       init zone field
         MVN   DSAFIELD,RCTEDNUM       move numeric digits
         CLC   DSAFIELD,RCTEDNUM       numeric value?
         BE    INST070                 yes, carry on
*
INST060  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'INSERT: Invalid record number specified'
         B     INSTEXIT                exit
*
**       Storage obtain insert I/O buffer
*
INST070  DS    0H
         ST    R5,RCTEOSET             save record data offset
         ICM   R1,15,RCTEINSB          buffer init?
         BNZ   INST075                 yes, carry on
         L     R3,RCTEDBFL             I/O buffer size
         LA    R3,EDT@SIZE(,R3)        add space for inserts
         ST    R3,RCTEINSL             save insert buffer size
         GETMAIN RU,LV=(R3),SP=SP108
         ST    R1,RCTEINSB             save insert buffer address
*
**       Insert record in 1st data slot
*
INST075  DS    0H
         CLC   RCTEDNUM,=CL3'000'      insert 1st record?
         BNE   INST090                 no, test further
         L     R4,RCTEINSB             EDT address
         USING EDT,R4                  set addressability
         LA    R3,DSACMDBF             command data address
         LA    R3,8(,R3)               skip insert command
         L     R1,RCTEOSET             get record data offset
         LA    R3,1(R1,R3)             point to insert record
         MVC   EDTVALUE,0(R3)          insert record data
         DROP  R4
*
INST080  DS    0H
         LR    R2,R4                   insert buffer address
         LA    R2,EDT@SIZE(R2)         skip 1st record slot
         L     R3,RCTEDBFL             I/O buffer size
         L     R4,RCTEDBUF             I/O buffer address
         LR    R5,R3                   copy I/O buffer size
         MVCL  R2,R4                   relocate records
         B     INST130                 carry on
*
**       Locate target record number
*
INST090  DS    0H
         PACK  DSADWRD,RCTEDNUM        pack record number
         CVB   R1,DSADWRD              convert it
         CL    R1,RCTERECS             insert after last record?
         BNH   INST095                 no, carry on
         BCTR  R1,0                    make it last record
         ST    R1,DSAWORD              save it
         $CNVD DSAVAR,DSAWORD          record ID.
         MVC   RCTEDNUM,DSAVAR+5       init record ID
*
INST095  DS    0H
         SLR   R1,R1                   zero record count
         L     R2,RCTERECS             get record count
         L     R4,RCTEDBUF             EDT address
         USING EDT,R4                  set addressability
*
INST100  DS    0H
         LA    R1,1(,R1)               update record count
         CLC   EDTRNUM,RCTEDNUM        record found?
         BE    INST110                 yes, carry on
         LA    R4,EDT@SIZE(,R4)        next record
         BCT   R2,INST100              loop
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'INSERT: Record number not found'
         B     INSTEXIT                exit
*
**       Move records to insert I/O buffer
*
INST110  DS    0H
         ST    R1,RCTEREMR             current record count
         LA    R3,EDT@SIZE(R4)         next source record address
         ST    R3,RCTEDNXT             source record address
         L     R2,RCTEDBUF             I/O buffer address
         SLR   R3,R2                   get move length
         ST    R3,RCTEMOVL             protect move length
         L     R2,RCTEINSB             insert buffer address
         L     R4,RCTEDBUF             I/O buffer address
         LR    R5,R3                   copy I/O buffer size
         MVCL  R2,R4                   relocate records
*
**       Insert record in I/O buffer
*
         L     R4,RCTEINSB             insert buffer address
         L     R1,RCTEMOVL             previous move length
         LA    R4,0(R1,R4)             next insert buffer address
         LA    R3,DSACMDBF             command data address
         LA    R3,8(,R3)               skip insert command
         L     R1,RCTEOSET             get record data offset
         LA    R3,1(R1,R3)             point to insert record
         MVC   EDTVALUE,0(R3)          insert record data
         LA    R4,EDT@SIZE(R4)         next insert record address
*
**       Move remaing records to I/O buffer
*
         L     R3,RCTERECS             total records
         SL    R3,RCTEREMR             remaining records
         LTR   R3,R3                   any records?
         BZ    INST130                 no, carry on
         L     R2,RCTEDNXT             source record address
*
INST120  DS    0H
         MVC   EDT(EDT@SIZE),0(R2)     copy record data
         LA    R2,EDT@SIZE(R2)         next source record
         LA    R4,EDT@SIZE(R4)         next insert record
         BCT   R3,INST120              loop
*
**       Update edit I/O buffer pointers
*
INST130  DS    0H
         L     R1,RCTERECS             total record count
         LA    R1,1(,R1)               add inserted record
         ST    R1,RCTERECS             update count
         LR    R0,R1                   copy record count
         LA    R3,EDT@SIZE             record size
         MR    R2,R0                   R3 has total records size
         L     R2,RCTEINSB             insert buffer address
         ST    R2,RCTEDCUR             update current pointer
         LA    R2,0(R3,R2)             end of buffer address
         ST    R2,RCTEDLST             update last record ptr
         L     R1,RCTEDBUF             FREEMAIN I/O buffer address
         MVC   RCTEDBUF,RCTEINSB       update buffer address
         XC    RCTEINSB,RCTEINSB       nolonger there to free
*
**       Free original I/O data buffer
*
         L     R2,RCTEDBFL             buffer size
         FREEMAIN RU,                                                  +
               A=(R1),LV=(R2),SP=SP108
         MVC   RCTEDBFL,RCTEINSL       update insert buffer size
*
**       Renumber member records
*
         L     R3,RCTERECS             number of records
         L     R4,RCTEDBUF             I/O buffer address
         USING EDT,R4                  EDT addressability
         LA    R2,1                    record ID
         LA    R1,10                   sequence number
*
INST140  DS    0H
         ST    R2,RCTEDBIN             convert,
         $CNVD DSAVAR,RCTEDBIN         record ID.
         MVC   EDTRNUM,DSAVAR+5        init record ID
         ST    R1,RCTEDWRK             convert,
         $CNVD DSAVAR,RCTEDWRK         sequence number.
         MVI   EDTBLANK,BLANK          clear byte-73
         MVC   EDTSEQNM,DSAVAR+1       set sequence number(74-80)
         LA    R2,1(,R2)               increment record ID
         LA    R1,10(,R1)              set sequence number
         LA    R4,EDT@SIZE(R4)         next input record
         BCT   R3,INST140              loop
         OI    RCTFLG1,RCT@UPDT        member update pending
*
**       Issue record insert complete msg
*
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'INSERT: Record number inserted'
         B     INSTEXIT                exit
*
**       ABEND recovery routine
*
INSTERR  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'INSERT: EDIT session abnormally terminated'
*
INSTEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
INSTNUMC DC    CL8'00000000'           zone data
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SAVE                                                       */
*/*                                                                  */
*/* Function: Save edit member subroutine                            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SAVE     $SUBINI
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         $RETRY SAVEERR,               activate retry                  +
               SDUMP=NO                skip SVC dump
*
**       Validity check edit RCT
*
         USING RCT,R8                  set addressability
         ICM   R8,15,EVTERCTA          edit RCT init?
         BZ    SAVE010                 no, error
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BE    SAVE020                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SAVE: RCT failed validity checks'
         B     SAVEEXIT                exit
*
SAVE010  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SAVE: No active EDIT session found'
         B     SAVEEXIT                exit
*
SAVE020  DS    0H
         TM    RCTFLG1,RCT@UPDT        member update pending?
         BNZ   SAVE030                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SAVE: Nothing changed; SAVE ignored'
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SAVE: EDIT session ended'
         B     SAVE999                 exit
*
**       Allocate DSName(member) data
*
SAVE030  DS    0H
         MVI   DSAFUNC,ZIO@RCVY        allocate DSName(member)
         MVC   DSAMEMBR,RCTEDMEM       set member name
         MVC   DSADDNAM,RCTEDDDN       set DDname
         MVC   DSADSNAM,RCTEDDSN       set DSName
         $CALL ALLOC
         LTR   R15,R15                 successful?
         BZ    SAVE040                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SAVE: Dynamic allocation failed'
         B     SAVEEXIT                exit
*
**       Write updated DSName(member) data
*
SAVE040  DS    0H
         OI    DSAFLG1,DSA@EDTR        EDT record indicator
         $CALL WRITE                   update member
         LTR   R15,R15                 successful?
         BZ    SAVE050                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SAVE: Member update error'
         B     SAVE999                 exit
*
SAVE050  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SAVE: Member data saved'
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SAVE: EDIT session ended'
*
**       Free RCT and I/O buffers
*
SAVE999  DS    0H
         $CALL FREBUFE                 destroy Edit environment
         B     SAVEEXIT                exit
         DROP  R8
*
**       ABEND recovery routine
*
SAVEERR  DS    0H
         $CALL FREBUFE                 destroy Edit environment
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SAVE: Edit session abnormally terminated'
*
SAVEEXIT DS    0H
         MVC   DSAPLST(SAVEDEQL),SAVEDEQ
         DEQ   MF=(E,DSAPLST)          release serialization
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Edit serialization                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
SAVEDEQ  DEQ   (SAVEMAJ,SAVEMIN,8,SYSTEM),RET=HAVE,MF=L
SAVEDEQL EQU   *-SAVEDEQ
         DS    0C
SAVEMAJ  DC    CL8'ECFSTC'             Major name
SAVEMIN  DC    CL8'EDIT'               Minor name
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: NOSAVE                                                     */
*/*                                                                  */
*/* Function: Discard edit member subroutine                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
NOSAVE   $SUBINI
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         $RETRY NSAVERR,               activate retry                  +
               SDUMP=NO                skip SVC dump
*
**       Validity check edit RCT
*
         USING RCT,R8                  set addressability
         ICM   R8,15,EVTERCTA          edit RCT init?
         BZ    NSAV010                 no, error
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BE    NSAV020                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'NOSAVE: RCT failed validity checks'
         B     NSAV999                 exit
*
NSAV010  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'NOSAVE: No active EDIT session found'
         B     NSAVEXIT                exit
*
NSAV020  DS    0H
         TM    RCTFLG1,RCT@UPDT        member updates pending?
         BNZ   NSAV030                 yes, carry on
         OI    DSAFLG1,DSA@NUPD        no member updates made
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'NOSAVE: Nothing changed; NOSAVE ignored'
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'NOSAVE: EDIT session ended'
*
**       Free Edit RCT and I/O buffers
*
NSAV030  DS    0H
         $CALL FREBUFE                 destroy Edit environment
         DROP  R8
*
**       Terminate edit session
*
NSAV999  DS    0H
         TM    DSAFLG1,DSA@NUPD        member updates?
         BNZ   NSAVEXIT                no, exit
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'NOSAVE: Member changes discarded'
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'NOSAVE: EDIT session ended'
         B     NSAVEXIT                exit
*
NSAVERR  DS    0H
         $CALL FREBUFE                 destroy Edit environment
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'NOSAVE: EDIT session abnormally terminated'
*
NSAVEXIT DS    0H
         MVC   DSAPLST(NSAVDEQL),NSAVDEQ
         DEQ   MF=(E,DSAPLST)          release serialization
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Edit serialization                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
NSAVDEQ  DEQ   (DQMAJR,DQMINR,8,SYSTEM),RET=HAVE,MF=L
NSAVDEQL EQU   *-NSAVDEQ
         DS    0C
DQMAJR   DC    CL8'ECFSTC'             Major name
DQMINR   DC    CL8'EDIT'               Minor name
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: BROWSE                                                     */
*/*                                                                  */
*/* Function: BROWSE DSName(member) subroutine                       */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
BROWSE   $SUBINI
         USING PSA,0
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3024)    set error RSN
         $RETRY BROWERR,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Check Blank; RecordNumber; TOP; BOTTOM
*
         LA    R3,DSACMDBF             buffer address
         LA    R3,8(,R3)               skip browse command
         LA    R2,DSA@CMDZ-8           buffer length
*
         CLI   0(R3),C'0'              browse record number?
         BNL   BROW000                 yes, carry on
         CLC   EVTBLNKS,0(R3)          Browse w/scroll default?
         BE    BROW000                 yes, carry on
         CLC   =CL2'T',0(R3)           browse TOP?
         BE    BROW000                 yes, carry on
         CLC   =CL4'TOP',0(R3)         browse TOP?
         BE    BROW000                 yes, carry on
         CLC   =CL2'B',0(R3)           browse BOTTOM?
         BE    BROW000                 yes, carry on
         CLC   =CL7'BOTTOM',0(R3)      browse BOTTOM?
         BNE   BROW010                 yes, carry on
*
**       Browse current session member
*
BROW000  DS    0H
         $CALL MEMBROW                 call subroutine
         B     BROWEXIT                exit
*
**       Parse DSName(member)
*
BROW010  DS    0H
         LA    R1,8                    browse verb length
         $CALL PARDSN                  parse DSName(member)
         LTR   R15,R15                 successful?
         BZ    BROW015                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: Invalid dataset name specified'
         $WTO  MID=ECF051I,VAR1=EVTCMDCH
         B     BROWEXIT                exit
*
**       Check BROWSE session instance
*
BROW015  DS    0H
         USING RCT,R8
         ICM   R8,15,EVTBRCTA          browse RCT init?
         BZ    BROW020                 no, create RCT
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BNE   BROW020                 no, we'll re-IPL, anyway
         OI    RCTFLG1,RCT@BROW        browse session started
         B     BROW030                 yes, carry on
*
BROW020  DS    0H
         LA    R3,RCT@SIZE
         GETMAIN RC,LV=(R3),SP=SP108
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   BROW025                 no, error
         $ST   R1,EVTBRCTA             yes, save RCT address
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear RCT
         LR    R8,R1                   RCT address
         MVC   RCTID,=CL4'RCT'         ID
         MVC   RCTSUBP,=AL4(SP108)     init subpool
         MVC   RCTSIZE,=AL4(RCT@SIZE)  init RCT size
         MVC   RCTSCROL,=AL4(24)       init,
         MVC   RCTSCRZN,=CL2'24'        default scroll value.
         MVC   RCTBRMEM,DSAMEMBR       init member name
         MVC   RCTBRDSN,DSADSNAM       init DSName
         MVC   RCTBRDDN,=CL8'ECFBROW'  init DDname
         OI    RCTFLG1,RCT@BROW        browse session started
         B     BROW030                 carry on
*
**       Issue RCT storage obtain failed msg
*
BROW025  DS    0H
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     BROWEXIT                exit
*
**       Allocate specified dataset
*
BROW030  DS    0H
         MVC   RCTCVERB,BROWVERB       command verb
         MVC   DSADDNAM,RCTBRDDN       set DDname
         MVC   RCTCVMEM,DSAMEMBR       browse member
         CLC   DSAMEMBR,EVTBLNKS       member name specified?
         BNE   BROW050                 yes, carry on
         MVC   RCTCVMEM,RCTBRDDN       DDname
         MVI   DSAFUNC,ZIO@MSAS        MSAS allocate request
         $CALL ALLOC                   allocate dataset
         LTR   R15,R15                 successful?
         BZ    BROW040                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: dataset allocation failed'
         B     BROWEXIT                no, exit
*
BROW040  DS    0H
         CLC   DSADSTYP,=AL2(ZIO@PS)   DSORG=PS dataset?
         BE    BROW045                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: Specified dataset is not sequential'
         $WTO  MID=ECF051I,                                            +
               VAR1=EVTCMDCH           command prefix
         B     BROWEXIT                no, exit
*
BROW045  DS    0H
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVC   ZIORECA,STKPRLIB        set data address
         MVC   ZIORECT,STKPRCNT        set record count
         MVC   ZIODDNAM,DSADDNAM       set DDname
         MVI   ZIOFUNC2,ZIO@GET        function ID
         $CALL VR=EVTOIOA,PARM=(R7)    read sequential dataset
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         L     R1,ZIORECS              get returned record count
         LTR   R15,R15                 successful?
         BZ    BROW075                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: Sequential dataset read failed'
         B     BROW999                 release resources
*
BROW050  DS    0H
         CLC   DSADSNAM,EVTSYSPT       SYSTSPRT DSName?
         BE    BROW060                 yes, carry on
         MVI   DSAFUNC,ZIO@MSAS        MSAS allocate request
         $CALL ALLOC                   allocate dataset
         LTR   R15,R15                 successful?
         BZ    BROW055                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: dataset(member) allocation failed'
         B     BROWEXIT                no, exit
*
**       Read DSName(member) data
*
BROW055  DS    0H
         CLC   DSADSTYP,=AL2(ZIO@PO)   DSORG=PO dataset?
         BE    BROW056                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: Specified dataset is not partitioned'
         $WTO  MID=ECF051I,                                            +
               VAR1=EVTCMDCH           command prefix
         B     BROWEXIT                no, exit
*
BROW056  DS    0H
         $CALL READ                    read member name
         SLR   R1,R1                   records count
         L     R2,STKPRCNT             data records
         L     R3,STKPRLIB             input data address
         LTR   R15,R15                 successful?
         BZ    BROW070                 yes, carry on
         CLC   DSARSN,=AL4(RSN0208)    I/O buffer overflow?        @02A
         BNE   BROW058                 no, read I/O error          @02A
         $WTO  MID=ECF807I,                                        @02A+
               VAR1==CL46'BROWSE: Member data truncation occurred'
         B     BROW070                 carry on                    @02A
*
BROW058  DS    0H                                                  @02A
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: dataset(member) read failed'
         B     BROW999                 exit
*
**       Allocate hlq.SYSTSPRT(member)
*
BROW060  DS    0H
         MVC   DSADSNAM,EVTSYSPT       DSName
         MVI   DSAFUNC,ZIO@TSPR        SYSTSPRT request
         $CALL ALLOC                   allocate dataset
         LTR   R15,R15                 successful?
         BZ    BROW065                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: SYSTSPRT dataset allocation failed'
         B     BROW999                 exit
*
**       Read hlq.SYSTSPRT(member)
*
BROW065  DS    0H
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVC   ZIORECA,STKPRLIB        set data address
         MVC   ZIORECT,STKPRCNT        set record count
         MVC   ZIODDNAM,DSADDNAM       set DDName
         MVI   ZIOFUNC2,ZIO@GET        function ID
         $CALL VR=EVTOIOA,PARM=(R7)    read SYSTSPRT member
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         L     R1,ZIORECS              get returned record count
         LTR   R15,R15                 successful?
         BZ    BROW075                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: SYSTSPRT member read failed'
         B     BROW999                 exit
*
BROW070  DS    0H
         CLI   0(R3),X'00'             end of records?
         BE    BROW075                 yes, exit loop
         LA    R1,1(,R1)               record count
         LA    R3,80(,R3)              next member record
         BCT   R2,BROW070              loop
*
**       Free current browse I/O buffer
*
BROW075  DS    0H
         LTR   R1,R1                   any records read?
         BNZ   BROW080                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: No records found to display'
         B     BROW999                 exit
*
BROW080  DS    0H
         ST    R1,RCTBRECS             save record count
         ST    R1,RCTBRSCR             set initial scroll amount
         ICM   R1,15,RCTBRBUF          I/O buffer init?
         BZ    BROW085                 no, carry on
         L     R2,RCTBRBFL             buffer size
         XC     RCTBRBUF,RCTBRBUF      zero buffer address
         XC     RCTBRCUR,RCTBRCUR      zero default location
         FREEMAIN RU,                                                  +
               A=(R1),LV=(R2),SP=SP108
*
**       Storage obtain browse I/O buffer
*
BROW085  DS    0H
         L     R0,RCTBRECS             get record count
         LA    R3,BRW@SIZE             record size
         MR    R2,R0                   R3 has total length
         ST    R3,RCTBRBFL             I/O buffer size
         GETMAIN RU,LV=(R3),SP=SP108
         ST    R1,RCTBRBUF             save buffer address
         ST    R1,RCTBRCUR             set current default location
*
**       Relocate browse record data
*
         LR    R4,R1                   copy buffer address
         USING BRW,R4                  set addressability
         L     R2,RCTBRECS             get record count
         L     R3,STKPRLIB             input data address
         LA    R1,1                    set record ID
*
BROW090  DS    0H
         ST    R1,RCTBRBIN             convert,
         $CNVD DSAVAR,RCTBRBIN          record ID.
         MVC   BRWRNUM,DSAVAR+5        init record ID
         MVI   BRWRSEP,BLANK           init separator
         MVC   BRWDATA,0(R3)           relocate record data
         LA    R3,80(,R3)              next input record
         LA    R4,BRW@SIZE(,R4)        next browse record
         ST    R4,RCTBRLST             save record address
         LA    R1,1(,R1)               increment record ID
         BCT   R2,BROW090              loop
*
**       Build browse data eye catcher
*
         MVI   RCTBREYE,BLANK          clear eye catcher
         MVC   RCTBREYE+1(RCT@BRYL-1),RCTBREYE
         MVC   RCTBREYE(DSA@DSNL),DSADSNAM
         LA    R3,RCTBREYE             eye address
         LA    R2,DSA@DSNL             max DSName length
*
BROW095  DS    0H
         CLI   0(R3),BLANK             DSName end?
         BE    BROW100                 yes, exit loop
         LA    R3,1(,R3)               next char
         BCT   R2,BROW095              loop
*
BROW100  DS    0H
         MVI   0(R3),C'('              oparen
         LA    R3,1(,R3)               next char
         MVC   0(DSA@MEML,R3),DSAMEMBR insert member name
         LA    R2,DSA@MEML             member name length
*
BROW110  DS    0H
         CLI   0(R3),BLANK             member name end?
         BE    BROW120                 yes, exit loop
         LA    R3,1(,R3)               next char
         BCT   R2,BROW110              loop
*
BROW120  DS    0H
         MVI   0(R3),C')'              cparen
*
**       Display browse record data
*
         CLC   RCTBRECS,RCTSCROL       records GT scroll value?
         BH    BROW130                 yes, carry on
         MVC   DSARECBL,RCTBRECS       set total records
         MVC   RCTRECEN,=CL16'BOTTOM OF DATA'
         B     BROW140                 display records
*
BROW130  DS    0H
         MVC   DSARECBL,RCTSCROL       set scroll amount value
         MVC   RCTRECEN,=CL16'MORE DATA...'
*
BROW140  DS    0H
         MVI   DSACALLR,DSA@BROW       set caller ID
         MVC   DSARECBF,RCTBRCUR       set records buffer
         $CALL MLWTO                   display record data
*
BROW999  DS    0H
         B     BROWEXIT                exit
*
**       ABEND recovery routine
*
BROWERR  DS    0H
         $CALL FREBUFB                 release resources
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: Browse session abnormally terminated'
         B     BROW999                 release resources
*
BROWEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
BROWVERB DC    CL21'BROWSE=nnnnnnnn'   command verb + member
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MEMBROW                                                    */
*/*                                                                  */
*/* Function: Browse member records subroutine                       */
*/*                                                                  */
*/* Commands: BROWSE        -List top of member                      */
*/*           BROWSE TOP    -List top of member                      */
*/*           BROWSE BOTTOM -List bottom of member                   */
*/*           BROWSE 127    -List record number 127                  */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MEMBROW  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Validity check browse RCT
*
         USING RCT,R8                  set addressability
         ICM   R8,15,EVTBRCTA          browse RCT init?
         BZ    MEMB010                 no, error
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BNE   MEMB010                 no, error
         ICM   R5,15,RCTBRBUF          any records?
         BZ    MEMB010                 no, error
         LA    R3,DSACMDBF             buffer address
         LA    R3,8(,R3)               skip BROWSE command
         LA    R2,DSA@CMDZ-8           buffer length
*
MEMB000  DS    0H
         CLI   0(R3),BLANK             any operands?
         BNE   MEMB020                 yes, parse operands
         LA    R3,1(,R3)               next char
         BCT   R2,MEMB000              loop
*
**       Browse 'blank' record number
*
         L     R0,RCTSCROL             get scroll value
         LA    R3,BRW@SIZE             record size
         MR    R2,R0                   R3 has total length
         L     R4,RCTBRCUR             records buffer address
         LA    R4,0(R3,R4)             scroll thru records
         CL    R4,RCTBRLST             at last record?
         BL    MEMB005                 no, carry on
         L     R4,RCTBRBUF             yes, set 1st record address
*
MEMB005  DS    0H
         USING BRW,R4                  EDT addressability
         LA    R3,DSACMDBF             buffer address
         MVC   6(3,R3),BRWRNUM         insert record number
         LA    R3,6(,R3)               point to record number
         B     MEMB100                 carry on
         DROP  R4
*
MEMB010  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: No active Browse session found'
         B     MEMB999                 exit
*
**       BROWSE TOP of member
*
MEMB020  DS    0H
         CLC   =CL2'T',0(R3)           browse TOP?
         BE    MEMB030                 yes, carry on
         CLC   =CL4'TOP',0(R3)         browse TOP?
         BNE   MEMB060                 no, test further
*
MEMB030  DS    0H
         MVC   RCTBRCUR,RCTBRBUF       update current ptr
         MVC   DSARECBF,RCTBRBUF       set top of member
         CLC   RCTBRECS,RCTSCROL       records GT scroll value?
         BH    MEMB040                 yes, carry on
         MVC   DSARECBL,RCTBRECS       set total records
         MVC   RCTRECEN,=CL16'BOTTOM OF DATA'
         B     MEMB050                 display records
*
MEMB040  DS    0H
         MVC   DSARECBL,RCTSCROL       set MLWTO record count
         MVC   RCTRECEN,=CL16'MORE DATA...'
*
MEMB050  DS    0H
         MVI   DSACALLR,DSA@BROW       set caller ID
         $CALL MLWTO                   display record data
         B     MEMB999                 exit
*
**       BROWSE BOTTOM of member
*
MEMB060  DS    0H
         CLC   =CL2'B',0(R3)           browse BOTTOM?
         BE    MEMB070                 yes, carry on
         CLC   =CL4'BOTTOM',0(R3)      browse BOTTOM?
         BNE   MEMB100                 no, test further
*
MEMB070  DS    0H
         CLC   RCTBRECS,RCTSCROL       records GT scroll value?
         BH    MEMB080                 yes, carry on
         MVC   DSARECBF,RCTBRBUF       set top of member
         MVC   DSARECBL,RCTBRECS       set total records
         MVC   RCTRECEN,=CL16'BOTTOM OF DATA'
         B     MEMB090                 display records
*
MEMB080  DS    0H
         L     R0,RCTSCROL             get scroll value
         LA    R3,BRW@SIZE             record size
         MR    R2,R0                   R3 has total length
         L     R1,RCTBRLST             last record address
         SLR   R1,R3                   compute location
         ST    R1,DSARECBF             set record address
         MVC   RCTBRCUR,DSARECBF       update current ptr
         MVC   DSARECBL,RCTSCROL       set record count
         MVC   RCTRECEN,=CL16'BOTTOM OF DATA'
*
MEMB090  DS    0H
         MVI   DSACALLR,DSA@BROW       set caller ID
         $CALL MLWTO                   display record data
         B     MEMB999                 exit
*
**       BROWSE 'nnn' record number
*
MEMB100  DS    0H
         ICM   R5,15,RCTBRBUF          any records?
         BZ    MEMB110                 no, error
         MVC   RCTBRNUM,=CL3'000'      init zones
         CLI   1(R3),BLANK             1-digit record number?
         BNE   MEMB102                 no, test further
         MVC   RCTBR03(1),0(R3)        yes, copy it
         B     MEMB106                 carry on
*
MEMB102  DS    0H
         CLI   2(R3),BLANK             2-digit record number?
         BNE   MEMB104                 no, test further
         MVC   RCTBR02(2),0(R3)        yes, copy it
         B     MEMB106
*
MEMB104  DS    0H
         CLI   3(R3),BLANK             3-digit record number?
         BNE   MEMB108                 no, error
         MVC   RCTBR01(3),0(R3)        yes, copy it
*
MEMB106  DS    0H
         MVC   DSAFIELD,MEMBNUMC       init zone field
         MVN   DSAFIELD,RCTBRNUM       move numeric digits
         CLC   DSAFIELD,RCTBRNUM       numeric value?
         BE    MEMB120                 yes, carry on
*
MEMB108  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: Invalid record number specified'
         B     MEMB999                 exit
*
MEMB110  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: No records found'
         B     MEMB999                 exit
*
MEMB120  DS    0H
         L     R2,RCTBRECS             get record count
         L     R4,RCTBRBUF             BRW address
         USING BRW,R4                  set addressability
*
MEMB130  DS    0H
         CLC   BRWRNUM,RCTBRNUM        record found?
         BE    MEMB140                 yes, carry on
         LA    R4,BRW@SIZE(,R4)        next browse record
         BCT   R2,MEMB130              loop
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: Record number not found'
         B     MEMB999                 exit
*
MEMB140  DS    0H
         ST    R4,DSARECBF             cureent record address
         ST    R4,RCTBRCUR             set current record addrss
         L     R1,RCTBRLST             last record address
         SLR   R1,R4                   quotient
         SLR   R0,R0                   ramainder
         LA    R3,BRW@SIZE             record size
         DR    R0,R3                   result in R1
         CL    R1,RCTSCROL             records GT scroll value?
         BH    MEMB150                 yes, carry on
         ST    R1,DSARECBL             set display records
         MVC   RCTRECEN,=CL16'BOTTOM OF DATA'
         B     MEMB160                 display records
*
MEMB150  DS    0H
         MVC   DSARECBL,RCTSCROL       set MLWTO record count
         MVC   RCTRECEN,=CL16'MORE DATA...'
*
MEMB160  DS    0H
         MVI   DSACALLR,DSA@BROW       set caller ID
         $CALL MLWTO                   display record data
*
MEMB999  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
MEMBEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
MEMBNUMC DC    CL8'00000000'           zone data
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ENDBROW                                                    */
*/*                                                                  */
*/* Function: Terminate browse session subroutine                    */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ENDBROW  $SUBINI
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         $RETRY ENDBERR,               activate retry                  +
               SDUMP=NO                skip SVC dump
*
**       Validity check browse RCT
*
         USING RCT,R8                  set addressability
         ICM   R8,15,EVTBRCTA          RCT init?
         BZ    ENDB010                 no, error
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BE    ENDB020                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'ENDBROWSE: RCT failed validity checks'
         B     ENDBEXIT                exit
*
ENDB010  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'ENDBROWSE: No active Browse session found'
         B     ENDBEXIT                exit
*
**       Terminate browse session
*
ENDB020  DS    0H
         $CALL FREBUFB                 release resources
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'ENDBROWSE: Browse session terminated'
         B     ENDBEXIT                exit
*
ENDBERR  DS    0H
         $CALL FREBUFB                 release resources
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'ENDBROWSE: Browse session ABENDed'
*
ENDBEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: FREBUFE                                                    */
*/*                                                                  */
*/* Function: Storage relelase I/O buffers                           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
FREBUFE  $SUBINI
         USING RCT,R8                  RCT addressability
         USING EVT,R11                 EVT addressability
*
**       Free Edit I/O buffer
*
         ICM   R8,15,EVTERCTA          RCT init?
         BZ    FREEEXIT                no, exit
         ICM   R1,15,RCTEDBUF          I/O buffer init?
         BZ    FREE000                 no, carry on
         L     R2,RCTEDBFL             buffer size
         XC    RCTEDBUF,RCTEDBUF       zero buffer address
         FREEMAIN RU,                                                  +
               A=(R1),LV=(R2),SP=SP108
*
**       Free Edit insert I/O buffer
*
FREE000  DS    0H
         ICM   R1,15,RCTEINSB          insert I/O buffer init?
         BZ    FREE010                 no, carry on
         L     R2,RCTEINSL             buffer size
         XC    RCTEINSB,RCTEINSB       zero buffer address
         FREEMAIN RU,                                                  +
               A=(R1),LV=(R2),SP=SP108
*
**       Free Edit RCT structure
*
FREE010  DS    0H
         $XC   EVTERCTA,EVTERCTA       zero RCT address
         L     R0,RCTSIZE              RCT size
         L     R2,RCTSUBP              RCT subpool
         FREEMAIN RU,                                                  +
               A=(R8),LV=(R0),SP=(R2)  storage address
*
FREEEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: FREBUFB                                                    */
*/*                                                                  */
*/* Function: Storage relelase Browse I/O buffers                    */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
FREBUFB  $SUBINI
         USING RCT,R8                  RCT addressability
         USING EVT,R11                 EVT addressability
*
**       Free Browse I/O buffer
*
         ICM   R8,15,EVTBRCTA          RCT init?
         BZ    FREBEXIT                no, exit
         ICM   R1,15,RCTBRBUF          I/O buffer init?
         BZ    FREB000                 no, carry on
         L     R2,RCTBRBFL             buffer size
         XC    RCTBRBUF,RCTBRBUF       zero buffer address
         FREEMAIN RU,                                                  +
               A=(R1),LV=(R2),SP=SP108
*
**       Free Browse RCT structure
*
FREB000  DS    0H
         $XC   EVTBRCTA,EVTBRCTA       zero RCT address
         L     R0,RCTSIZE              RCT size
         L     R2,RCTSUBP              RCT subpool
         FREEMAIN RU,                                                  +
               A=(R8),LV=(R0),SP=(R2)  storage address
*
FREBEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TSO                                                        */
*/*                                                                  */
*/* Function: TSO command subroutine                                 */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  TSX address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TSO      $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Storage obtain data area
*
         GETMAIN RU,LV=TSX@SIZE,SP=SP108
         LR    R8,R1                   CMP address
         USING TSX,R8                  set addressability
         LR    R2,R1                        ,
         LA    R3,TSX@SIZE             clear,
         XR    R15,R15                 TSX,
         MVCL  R2,R14                  storage block.
         MVC   TSXID,=CL4'TSX'         ID data area
*
**       Activate recovery
*
         $RETRY TSOERR,                actiate retry                   +
               SDUMP=NO                skip SVC dump
*
**       Validity check command buffer
*
         LA    R3,DSACMDBF             buffer address
         LA    R3,5(,R3)               skip TSO command
         CLC   EVTBLNKS,0(R3)          command supplied?
         BE    TSO0010                 no, error
         CLI   0(R3),BLANK             valid command?
         BE    TSO0010                 no, error
         MVC   TSXDATA,0(R3)           copy command
         MVC   TSXCMD,EVTBLNKS         clear command name
         LA    R2,8                    command name length
         LA    R3,TSXDATA              command buffer address
         B     TSO0020                 carry on
*
TSO0010  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'TSO: Invalid command specified'
         B     TSOEXIT                 exit
*
**       Copy issued command name
*
TSO0020  DS    0H
         CLI   0(R3),BLANK             end-of-command name?
         BE    TSO0030                 yes, carry on
         LA    R3,1(,R3)               next char
         BCT   R2,TSO0020              loop
*
TSO0030  DS    0H
         LA    R2,TSXDATA              command buffer address
         SLR   R3,R2                   get command name length
         BCTR  R3,0                    decrement for EXecute
         EX    R3,COPYCMD              copy command name
         MVI   TSXCHAR,BLANK           set 1st record character
*
**       Allocate SYSTSIN(member)
*
         MVI   DSAFUNC,ZIO@TSIN        allocate DSName(member)
         MVC   DSAMEMBR,TSXCMD         set tSO command member name
         MVC   DSADSNAM,EVTSYSTI       set DSName
         MVC   DSADDNAM,=CL8'SYSTSIN'  set DDname
         $CALL ALLOC
         LTR   R15,R15                 successful?
         BZ    TSO0040                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'TSO: SYSTSIN allocation failed'
         B     TSOEXIT                 exit
*
**       Write SYSTSIN command record
*
TSO0040  DS    0H
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVI   ZIOFUNC2,ZIO@PUT        set function ID
         LA    R1,TSXBUFF              command buffer address
         ST    R1,ZIORECA              set record address
         MVC   ZIORECT,=F'1'           set record count
         MVC   ZIODDNAM,=CL8'SYSTSIN'  set DDname
         $CALL VR=EVTOIOA,PARM=(R7)    write TSO command record
         LTR   R15,R15                 successful?
         BZ    TSO0050                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'TSO: SYSTSIN dataset write failed'
         B     TSOEXIT                 exit
*
**       Execute issued TSO command
*
TSO0050  DS    0H
         MVC   TSXMGCR(ZMGCRLN),ZMGCR
         LA    R3,TSXMGCR              MGCR listform
         LA    R3,6(,R3)               point past START command
         MVC   0(4,R3),EVTECFRS        ECFR TSO subsystem name
         LA    R2,4                    loop value
*
TSO0060  DS    0H
         CLI   0(R3),BLANK             TSOSUB procedure name end?
         BE    TSO0070                 yes, carry on
         LA    R3,1(,R3)               next byte
         BCT   R2,TSO0060              loop
*
TSO0070  DS    0H
         MVC   0(6,R3),=CL6',EXEC='    set symbolic variable
         LA    R3,6(,R3)               point past symbolic carible
         MVC   0(8,R3),TSXCMD          init TSO command member name
         XR    R0,R0                   console ID
         $MGCR TSXMGCR                 run TSO command
         STIMER WAIT,DINTVL=WAITASEC   wait a second
*
**       Issue BROWSE hlq.SYSTSPRT(member)
*
         MVI   DSACMDBF,BLANK          clear CMD buffer
         MVC   DSACMDBF+1(DSA@CMDZ-1),DSACMDBF
         MVC   DSACMDID,EVTCMDCH       command prefix char
         MVC   DSACMDTA(7),=CL7'BROWSE' browse command
         MVC   DSACMDTA+7(44),EVTSYSPT SYSTSPRT DSName
         LA    R2,44                   DSName loop value
         LA    R3,DSACMDTA+7           DSName address
*
TSO0080  DS    0H
         CLI   0(R3),BLANK             DSName end?
         BE    TSO0085                 yes, carry on
         LA    R3,1(,R3)               next byte
         BCT   R2,TSO0080              loop
*
TSO0085  DS    0H
         MVI   0(R3),C'('              oparen
         LA    R3,1(,R3)               member name start
         MVC   0(8,R3),TSXCMD          set member name
         LA    R2,9                    member name loop value
*
TSO0090  DS    0H
         CLI   0(R3),BLANK             member name end?
         BE    TSO0095                 yes, carry on
         LA    R3,1(,R3)               next byte
         BCT   R2,TSO0090              loop
*
TSO0095  DS    0H
         MVI   0(R3),C')'              cparen
         $CALL BROWSE                  call browse routine
         $WTO  MID=ECF809I,VAR1=DSACMDBF
         B     TSOEXIT                 ecit
*
TSOERR   DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'TSO: Command abnormally terminated'
         $WTO  MID=ECF809I,VAR1=DSACMDBF
         B     TSOEXIT                 exit
*
TSOEXIT  DS    0H
         FREEMAIN RU,A=(R8),LV=TSX@SIZE,SP=SP108
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYCMD  MVC   TSXCMD(*-*),0(R2)       EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ZMGCR    DS    0XL80                   MGCR buffer
         DC    AL2(ZMGCRLN)            -buffer size
         DC    AL2(0)                  -must be zero
         DC    CL2'S '                 -START command
         DC    CL74' '                 -command operands
ZMGCRLN  EQU   *-ZMGCR                 MGCR buffer size
         DS    0F
WAITASEC DC    CL8'00000200'           hhmmssth
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: COPY                                                       */
*/*                                                                  */
*/* Function: COPY FROM=DSName(member) TO=DSName(member) subroutine  */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  CPY address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
COPY     $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3052)    set error RSN
         $RETRY COPYERR,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Storage obtain data area
*
         GETMAIN RU,                                                   +
               LV=CPY@SIZE,SP=SP108
         LR    R8,R1                   CPY address
         USING CPY,R8                  set addressability
         XC    CPY(CPY@SIZE),CPY       clear data area
         MVC   CPYID,=CL4'COPY'        ID data area
*
**       Validity check FROM=DSName(member)
*
         LA    R3,DSACMDBF             buffer address
         LA    R3,6(,R3)               skip copy command
         LA    R2,DSA@CMDZ-6           buffer length
*
COPY010  DS    0H
         CLC   =CL5'FROM=',0(R3)       from DSName(member)?
         BE    COPY020                 yes, carry on
         LA    R3,1(,R3)               next byte
         BCT   R2,COPY010              loop
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: FROM dataset name not specified'
         B     COPY999                 exit
*
COPY020  DS    0H
         LA    R3,5(,R3)               skip FROM= keyword
         LR    R4,R3                   start of DSName
         LA    R2,DSA@DSNL             DSName loop value
*
COPY040  DS    0H
         CLI   0(R3),C'('              end of DSName?
         BE    COPY050                 yes, carry on
         LA    R3,1(,R3)               next char
         BCT   R2,COPY040              loop
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: Invalid FROM dataset name specified'
         B     COPY999                 exit
*
COPY050  DS    0H
         MVI   DSADSNAM,BLANK          clear DSName field
         MVC   DSADSNAM+1(DSA@DSNL-1),DSADSNAM
         SLR   R3,R4                   get DSName length
         BCTR  R3,0                    decrement for EXecute
         EX    R3,CPYNAME              extract DSName
         MVC   CPYIDSN,DSADSNAM        save it in CPY
         LA    R3,2(R3,R4)             point to member name
         LA    R2,DSA@MEML+1           member name loop value
         LR    R4,R3                   copy member name address
         CLI   0(R3),BLANK             member structure valid?
         BNE   COPY060                 yes, test further
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: Null FROM member name specified'
         B     COPY999                 exit
*
COPY060  DS    0H
         CLI   0(R3),C')'              end of member name?
         BE    COPY070                 yes, carry on
         LA    R3,1(,R3)               next char
         BCT   R2,COPY060              loop
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: Invalid FROM member name specified'
         B     COPY999                 exit
*
COPY070  DS    0H
         MVI   DSAMEMBR,BLANK          clear DSName field
         MVC   DSAMEMBR+1(DSA@MEML-1),DSAMEMBR
         ST    R3,CPYWORD              save R3="bTO=dataset(member)'"
         ST    R2,CPYWORD2             save remaining loop value
         SLR   R3,R4                   get member name length
         BCTR  R3,0                    decrement for EXecute
         EX    R3,CPYMEMB              extract member name
         MVC   CPYIMEM,DSAMEMBR        save it in CPY
*
**       Allocate FROM=dataset(member)
*
         MVI   DSAFUNC,ZIO@RCVY        allocate request
         MVC   DSADDNAM,=CL8'ECFICOPY' set DDname
         $CALL ALLOC                   allocate dataset
         LTR   R15,R15                 successful?
         BZ    COPY075                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: FROM dataset(member) allocation failed'
         B     COPY999                 exit
*
COPY075  DS    0H
         CLC   DSADSTYP,=AL2(ZIO@PO)   DSORG=PO dataset?
         BE    COPY080                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: FROM dataset specified not partitioned'
         B     COPY999                 exit
*
**       Read FROM=dataset(member)
*
COPY080  DS    0H
         $CALL READ                    read member name
         LTR   R15,R15                 successful?
         BZ    COPY090                 no, error
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: FROM dataset(member) read failed'
         B     COPY999                 exit
*
**       Validity check TO=DSName(member)
*
COPY090  DS    0H
         L     R3,CPYWORD              "bTO=dataset(member)'"
         L     R2,CPYWORD2             reload loop value
         CLC   =CL4' TO=',1(R3)        TO keyword?
         BE    COPY100                 yes, carry on
         CLC   =CL4',TO=',1(R3)        TO keyword?
         BE    COPY100                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: TO dataset(member) not specified'
         B     COPY999                 exit
*
COPY100  DS    0H
         LA    R3,5(,R3)               point to dataset name
         LR    R4,R3                   copy its address
         LA    R2,DSA@DSNL+1           loop value
         CLI   0(R3),BLANK             null dataset?
         BNE   COPY110                 no, test further
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: Null TO dataset name specfified'
         B     COPY999                 exit
*
COPY110  DS    0H
         CLI   0(R3),C'('              end of DSName?
         BE    COPY120                 yes, carry on
         LA    R3,1(,R3)               next char
         BCT   R2,COPY110              loop
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: Invalid TO dataset name specified'
         B     COPY999                 exit
*
COPY120  DS    0H
         MVI   DSADSNAM,BLANK          clear DSName field
         MVC   DSADSNAM+1(DSA@DSNL-1),DSADSNAM
         SLR   R3,R4                   get DSName length
         BCTR  R3,0                    decrement for EXecute
         EX    R3,CPYNAME              extract DSName
         MVC   CPYODSN,DSADSNAM        save it in CPY
         LA    R3,2(R3,R4)             point to member name
         LA    R2,DSA@MEML+1           member name loop value
         LR    R4,R3                   copy member name address
         CLI   0(R3),BLANK             member structure valid?
         BNE   COPY130                 yes, test further
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: Null TO member name specified'
         B     COPY999                 exit
*
COPY130  DS    0H
         CLI   0(R3),C')'              end of member name?
         BE    COPY140                 yes, carry on
         LA    R3,1(,R3)               next char
         BCT   R2,COPY130              loop
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: Invalid TO member name specified'
         B     COPY999                 exit
*
COPY140  DS    0H
         MVI   DSAMEMBR,BLANK          clear DSName field
         MVC   DSAMEMBR+1(DSA@MEML-1),DSAMEMBR
         SLR   R3,R4                   get member name length
         BCTR  R3,0                    decrement for EXecute
         EX    R3,CPYMEMB              extract member name
         MVC   CPYOMEM,DSAMEMBR        save it in CPY
*
**       Validity check copy request
*
         CLC   CPYIMEM,CPYOMEM         same member name?
         BNE   COPY145                 no, carry on
         CLC   CPYIDSN,CPYODSN         same dataset name?
         BNE   COPY145                 no, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: Invalid FROM/TO copy request'
         B     COPY999                 exit
*
**       Allocate TO=dataset(member)
*
COPY145  DS    0H
         MVI   DSAFUNC,ZIO@RCVY        allocate request
         MVC   DSADDNAM,=CL8'ECFOCOPY' set DDname
         $CALL ALLOC                   allocate dataset
         LTR   R15,R15                 successful?
         BZ    COPY150                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: TO dataset(member) allocation failed'
         B     COPY999                 exit
*
COPY150  DS    0H
         CLC   DSADSTYP,=AL2(ZIO@PO)   DSORG=PO dataset?
         BE    COPY155                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: TO dataset specified not partitioned'
         B     COPY999                 exit
*
**       Compute number of records
*
COPY155  DS    0H
         SLR   R1,R1                   record count
         L     R2,STKPRCNT             data records
         L     R3,STKPRLIB             input data address
*
COPY160  DS    0H
         CLI   0(R3),X'00'             end of records?
         BE    COPY170                 yes, exit loop
         LA    R1,1(,R1)               record count
         LA    R3,80(,R3)              next record
         BCT   R2,COPY160              loop
*
COPY170  DS    0H
         ST    R1,CPYRECS              save record count
         LTR   R1,R1                   any records?
         BNZ   COPY180                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: No records found in FROM member'
         B     COPY999                 exit
*
**       Write TO=dataset(member)
*
COPY180  DS    0H
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVI   ZIOFUNC2,ZIO@PUT        set function ID
         MVC   ZIORECA,STKPRLIB        set data address
         MVC   ZIORECT,CPYRECS         set record count
         MVC   ZIODDNAM,DSADDNAM       set DDname
         $CALL VR=EVTOIOA,PARM=(R7)    open DSName(member)
         LTR   R15,R15                 successful?
         BZ    COPY190                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: TO dataset(member) write failed'
         B     COPY999                 exit
*
COPY190  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: Member successfully copied'
*
COPY999  DS    0H
         B     COPYEXIT                exit
*
COPYERR  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COPY: Abnormally terminated'
         B     COPY999                 release resources
*
COPYEXIT DS    0H
         FREEMAIN RU,                  free data area                  +
               A=(R8),                                                 +
               LV=CPY@SIZE,                                            +
               SP=SP108
*
COPYXT00 DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
CPYNAME  MVC   DSADSNAM(*-*),0(R4)     EXecuted instruction
CPYMEMB  MVC   DSAMEMBR(*-*),0(R4)     EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: COMPRESS                                                   */
*/*                                                                  */
*/* Function: Compress DSName subroutine                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  RCT address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  CMP address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
COMPRESS $SUBINI
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         $RETRY COMPERR,               activate retry                  +
               SDUMP=NO                skip SVC dump
*
**       Storage obtain data area
*
         GETMAIN RU,                                                   +
               LV=CMP@SIZE,SP=SP108
         LR    R8,R1                   CMP address
         USING CMP,R8                  set addressability
         XC    CMP(CMP@SIZE),CMP       clear data area
         MVC   CMPID,=CL4'COMP'        ID data area
*
**       Copy target data set name
*
         LA    R3,DSACMDBF             buffer address
         LA    R3,10(,R3)              skip compress command
         CLC   EVTBLNKS,0(R3)          DSName supplied?
         BE    COMP010                 no, error
         MVC   CMPDSNAM,0(R3)          copy dataset name
         B     COMP020                 carry on
*
COMP010  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COMPRESS: Dataset name not specified'
         B     COMPEXIT                exit
*
**       Allocate target data set
*
COMP020  DS    0H
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVI   ZIOFUNC,ZIO@MSAS        set function ID
         OI    ZIOFLG1,ZIO@UNAL        unallocate then allocate
         OI    ZIOFLG1,ZIO@STCC        STC recovery caller
         MVC   ZIODDNAM,=CL8'ECFCOMP'  init DDName
         MVC   ZIODSNAM,CMPDSNAM       set DSName
         $CALL VR=EVTDYNA,PARM=(R7)
         LTR   R15,R15                 successful?
         BZ    COMP030                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COMPRESS: Dataset allocation failed'
         B     COMPEXIT                exit
*
COMP030  DS    0H
         CLC   ZIODSORG,=AL2(ZIO@PO)   DSORG=PO dataset?
         BE    COMP035                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COMPRESS: Specified dataset not partitioned'
         B     COMPEXIT                exit
*
**       Allocate SYSIN data set
*
COMP035  DS    0H
         MVI   ZIOFUNC,ZIO@MSAS        set function ID
         OI    ZIOFLG1,ZIO@UNAL        unallocate then allocate
         OI    ZIOFLG1,ZIO@STCC        STC recovery caller
         MVC   ZIODDNAM,=CL8'SYSIN'    set DDname
         MVC   ZIODSNAM,EVTSYSIN       set DSName
         $CALL VR=EVTDYNA,PARM=(R7)
         LTR   R15,R15                 successful?
         BZ    COMP040                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COMPRESS: SYSIN dataset allocation failed'
         B     COMPEXIT                exit
*
**       Allocate SYSPRINT data set
*
COMP040  DS    0H
         MVI   ZIOFUNC,ZIO@MSAS        set function ID
         OI    ZIOFLG1,ZIO@UNAL        unallocate then allocate
         OI    ZIOFLG1,ZIO@STCC        STC recovery caller
         MVC   ZIODDNAM,=CL8'SYSPRINT' set DDname
         MVC   ZIODSNAM,EVTSYSOT       set DSName
         $CALL VR=EVTDYNA,PARM=(R7)
         LTR   R15,R15                 successful?
         BZ    COMP045                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COMPRESS: SYSPRINT dataset allocation failed'
         B     COMPEXIT                exit
*
**       Write SYSIN compress record
*
COMP045  DS    0H
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVI   ZIOFUNC2,ZIO@PUT        set function ID
         LA    R1,COMPSYN
         ST    R1,ZIORECA              set record address
         MVC   ZIORECT,=F'1'           set record count
         MVC   ZIODDNAM,=CL8'SYSIN'    set DDname
         $CALL VR=EVTOIOA,PARM=(R7)    open DSName(member)
         LTR   R15,R15                 successful?
         BZ    COMP050                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COMPRESS: SYSIN dataset write failed'
         B     COMPEXIT                exit
*
**       Reallocate SYSIN data set
*
COMP050  DS    0H
         MVI   ZIOFUNC,ZIO@MSAS        set function ID
         OI    ZIOFLG1,ZIO@UNAL        unallocate then allocate
         OI    ZIOFLG1,ZIO@STCC        STC recovery caller
         MVC   ZIODDNAM,=CL8'SYSIN'    set DDname
         MVC   ZIODSNAM,EVTSYSIN       set DSName
         $CALL VR=EVTDYNA,PARM=(R7)
         LTR   R15,R15                 successful?
         BZ    COMP055                 yes, carry on
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COMPRESS: SYSIN dataset allocation failed'
         B     COMPEXIT                exit
*
**       Compress requested dataset
*
COMP055  DS    0H
         MODESET MODE=PROB             required by IEBCOPY         @04A
         LINK  EP=IEBCOPY,             compress dataset            @04C+
               PARAM=(OPTLIST),VL=1                                @04C
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         MODESET MODE=SUP              required by ECF server      @04A
*
         STIMER WAIT,DINTVL=COMPWAIT   wait asec
         CLC   DSARC,=AL4(RC0)         successful?
         BNE   COMP060                 no, error
*
**       Browse requested dataset
*
         MVI   DSACMDBF,BLANK          clear CMD buffer
         MVC   DSACMDBF+1(DSA@CMDZ-1),DSACMDBF
         MVC   DSACMDID,EVTCMDCH       command prefix char
         MVC   DSACMDTA(7),=CL7'BROWSE' browse command
         MVC   DSACMDTA+7(44),EVTSYSOT SYSPRINT DSName
         $CALL BROWSE                  call browse routine
*
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COMPRESS: Compress successful'
         $WTO  MID=ECF808I,                                            +
               VAR1=EVTCMDCH,          CMD prefix                      +
               VAR2=EVTSYSOT           SYSPRINT DSName
         B     COMPEXIT                exit
*
**       Issue Compress failed error msg
*
COMP060  DS    0H
         $WTO  MID=ECF052E,                                            +
               VAR1==CL8'IEBCOPY',     show request                    +
               VAR2=DSARC,             show RC                         +
               VAR3=DSARSN,            show RSN                        +
               VAR4==CL8'ECFSTC'       show caller
*
**       Browse requested dataset
*
         MVI   DSACMDBF,BLANK          clear CMD buffer
         MVC   DSACMDBF+1(DSA@CMDZ-1),DSACMDBF
         MVC   DSACMDID,EVTCMDCH       command prefix char
         MVC   DSACMDTA(7),=CL7'BROWSE' browse command
         MVC   DSACMDTA+7(44),EVTSYSOT SYSPRINT DSName
         $CALL BROWSE                  call browse routine
*
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COMPRESS: Compress unsuccessful'
         $WTO  MID=ECF808I,                                            +
               VAR1=EVTCMDCH,          CMD prefix                      +
               VAR2=EVTSYSOT           SYSPRINT DSName
         B     COMPEXIT                exit
*
COMPERR  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'COMPRESS: Compress abnormally terminated'
*
COMPEXIT DS    0H
         FREEMAIN RU,                  free data area                  +
               A=(R8),                                                 +
               LV=CMP@SIZE,                                            +
               SP=SP108
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
OPTLIST  DC    AL2(L'OPTPARM)                                      @04A
OPTPARM  DC    C'SIZE=1000K,WORK=1M'                               @04A
         DS    0D
COMPWAIT DC    CL8'00000100'           hhmmssth
         DS    0C
COMPSYN  DC    CL80'  COPY INDD=ECFCOMP,OUTDD=ECFCOMP'
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RECOVER                                                    */
*/*                                                                  */
*/* Function: Display recovery sessions subroutine                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RECOVER  $SUBINI
         USING EVT,R11                 EVT addressability
*
         USING RCT,R8                  RCT addressability
         ICM   R8,15,EVTERCTA          edit RCT init?
         BZ    RECR000                 no, session not found
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BE    RECR010                 yes, carry on
*
RECR000  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: Session inactive'
         B     RECR020                 carry on
*
RECR010  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'EDIT: Session active'
         $WTO  MID=ECF807I,                                            +
               VAR1=RCTEDEYE           show DSName(member)
*
RECR020  DS    0H
         ICM   R8,15,EVTBRCTA          browse RCT init?
         BZ    RECR030                 no, session not found
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BE    RECR040                 yes, carry on
*
RECR030  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: Session inactive'
         B     RECREXIT                exit
*
RECR040  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'BROWSE: Session active'
         $WTO  MID=ECF807I,                                            +
               VAR1=RCTBREYE           show DSName(member)
*
RECREXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ALLOC                                                      */
*/*                                                                  */
*/* Function: Data set allocation subroutine                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ALLOC    $SUBINI
         USING PSA,0                   FLC addressability
         USING RCT,R8                  RCT addressability
         USING EVT,R11                 EVT addressability
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3020)    set error RSN
         $RETRY ALLOCXIT,              set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVC   ZIOFUNC,DSAFUNC         set function ID
         MVC   ZIOMEMBR,DSAMEMBR       set member name
         MVC   ZIODDNAM,DSADDNAM       set DDname
         MVC   ZIODSNAM,DSADSNAM       set DSName
         OI    ZIOFLG1,ZIO@STCC        STC recovery caller
         CLI   ZIOFUNC,ZIO@MSAS        MSAS allocate request?
         BNE   ALLOC10                 no, carry on
         OI    ZIOFLG1,ZIO@UNAL        unallocate then allocate
*
ALLOC10  DS    0H
         $CALL VR=EVTDYNA,PARM=(R7)
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ALLOC99                 no, exit
*
ALLOC20  DS    0H
         LH    R1,ZIODSORG
         ST    R1,DSADSORG             copy DSORG
         CLI   ZIOFUNC,ZIO@TEMP        temp DSName request?
         BNE   ALLOC99                 no, exit
         MVC   DSADDNAM,ZIODDNAM       copy allocated DDname
         MVC   DSADSNAM,ZIODSNAM       copy allocated DSName
*
ALLOC99  DS    0H
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    ALLOCXIT                no, exit
         $WTO  MID=ECF110I,                                            +
               VAR1=DSADSORG,          show DSORG                      +
               VAR2=ZIODDNAM,          show DDname                     +
               VAR3=ZIODSNAM           show DSName
*
ALLOCXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: READ                                                       */
*/*                                                                  */
*/* Function: Read member records subroutine                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
READ     $SUBINI
         USING PSA,0                   FLC addressability
         USING RCT,R8                  RCT addressability
         USING EVT,R11                 EVT addressability
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3016)    set error RSN
         $RETRY READEXIT,              set retry address               +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVC   ZIOFUNC,DSAFUNC         function ID
         MVC   ZIODDNAM,DSADDNAM       DDName
         MVC   ZIOMEMBR,DSAMEMBR       member name
         MVC   ZIOPRLIB,STKPRLIB       I/O buffer address
         MVC   ZIOPRBUF,STKPRBUF       I/O buffer size
         MVC   ZIOPREND,STKPREND       I/O buffer-end address
         LR    R0,R7                   pass ZIO address in R0
         SLR   R1,R1                   set call type
         $CALL VR=EVTIIOA
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
*
READEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: WRITE                                                      */
*/*                                                                  */
*/* Function: Write member records subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
WRITE    $SUBINI
         USING PSA,0                   FLC addressability
         USING RCT,R8                  RCT addressability
         USING EVT,R11                 EVT addressability
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3036)    set error RSN
         $RETRY WRITEXIT,              set retry address               +
               SDUMP=YES,              take SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
         LA    R7,DSAZIO               ZIO block address
         USING ZIO,R7                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVC   ZIOFUNC2,DSAFUNC        set function ID
         TM    DSAFLG1,DSA@EDTR        EDT record?
         BZ    WRITE00                 no, carry on
         OI    ZIOFLG1,ZIO@EDIT        set EDT record indicator
*
WRITE00  DS    0H
         MVC   ZIORECA,RCTEDBUF        set data address
         MVC   ZIORECT,RCTERECS        set record count
         MVC   ZIODDNAM,RCTEDDDN       set DDname
         $CALL VR=EVTOIOA,PARM=(R7)    open DSName(member)
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
*
WRITEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: PARDSN                                                     */
*/*                                                                  */
*/* Function: Parse DSName(member) records subroutine                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R1  Verb length                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
PARDSN   $SUBINI
         USING PSA,0                   FLC addressability
         USING RCT,R8                  RCT addressability
         USING EVT,R11                 EVT addressability
*
         LA    R3,DSACMDBF             buffer address
         LA    R3,0(R1,R3)             skip verb length
         LA    R2,DSA@CMDZ-16          buffer length
         MVC   DSARC,=AL4(RC8)         set error RC
*
PDSN000  DS    0H
         CLI   0(R3),BLANK             DSName?
         BNE   PDSN010                 yes, carry on
         LA    R3,1(,R3)               next char
         BCT   R2,PDSN000              loop
         B     PDSNEXIT                error
*
PDSN010  DS    0H
         LR    R4,R3                   start of DSName
         LA    R2,DSA@DSNL             DSName loop value
         NI    DSAFLG1,XFF-DSA@NMEM    clear indicator
*
PDSN020  DS    0H
         CLI   0(R3),BLANK             end of DSName?
         BE    PDSN030                 yes, carry on
         CLI   0(R3),C'('              end of DSName?
         BE    PDSN040                 yes, carry on
         LA    R3,1(,R3)               next char
         BCT   R2,PDSN020              loop
         B     PDSNEXIT                error
*
PDSN030  DS    0H
         MVI   DSAMEMBR,BLANK          clear member field
         MVC   DSAMEMBR+1(DSA@MEML-1),DSAMEMBR
         OI    DSAFLG1,DSA@NMEM        member name not supplied
*
PDSN040  DS    0H
         MVI   DSADSNAM,BLANK          clear DSName field
         MVC   DSADSNAM+1(DSA@DSNL-1),DSADSNAM
         SLR   R3,R4                   get DSName length
         BCTR  R3,0                    decrement for EXecute
         EX    R3,PDSNAME              extract DSName
         TM    DSAFLG1,DSA@NMEM        member name supplied?
         BNZ   PDSN099                 no, exit
         LA    R3,2(R3,R4)             point to member name
         LA    R2,DSA@MEML+1           member name loop value
         LR    R4,R3                   copy member name address
         CLI   0(R3),BLANK             member name valid?
         BE    PDSNEXIT                no, error
*
PDSN050  DS    0H
         CLI   0(R3),C')'              end of member name?
         BE    PDSN060                 yes, carry on
         LA    R3,1(,R3)               next char
         BCT   R2,PDSN050              loop
         B     PDSNEXIT                no, error
*
PDSN060  DS    0H
         MVI   DSAMEMBR,BLANK          clear member field
         MVC   DSAMEMBR+1(DSA@MEML-1),DSAMEMBR
         CLI   1(R3),BLANK             member name valid?
         BNE   PDSNEXIT                no, error
         SLR   R3,R4                   get member name length
         BCTR  R3,0                    decrement for EXecute
         EX    R3,PMEMBER              extract member name
*
PDSN099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
PDSNEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
PDSNAME  MVC   DSADSNAM(*-*),0(R4)     EXecuted instruction
PMEMBER  MVC   DSAMEMBR(*-*),0(R4)     EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MLWTO                                                      */
*/*                                                                  */
*/* Function: Multiline WTO dispaly subroutine                       */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R6  MSGn address                                     */
*/*             R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*      save   R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MLWTO    $SUBINI
         USING RCT,R8                  RCT addressability
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN3032)    set error RSN
         $RETRY MWTO099,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Storage obtain MLWTO buffer
*
         L     R1,DSARECBL             record count
         LA    R1,5(,R1)               add MLWTO lines
         ST    R1,DSAWLINS             save it
         LR    R0,R1                   copy record count
         LA    R3,80                   record size
         MR    R2,R0                   R3 has total length
         ST    R3,DSAWBUFL             MLWTO buffer size
         GETMAIN RC,                                                   +
               LV=(R3),SP=SP108        buffer size
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    MWTO000                 yes, carry on
*
**       Issue storage obtain failed msg
*
         $WTO  MID=ECF993E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSACMDBF           show command name
         B     MWTO099                 exit
*
MWTO000  DS    0H
         ST    R1,DSAWBUFA             save MLWTO buffer address
*
**       Initialize CONTROL message line
*
         L     R6,DSAWBUFA             CONTROL line address
         USING MSGC,R6                 MSGC addressability
         L     R1,=A(MSXC)             CONTROL line model
         MVC   MSGC(MSGC@SZE),0(R1)    init CONTROL line model
         MVC   MSGCTSUB,EVTSUBNM       init subsystem name
         MVC   MSGCTCMD,RCTCVERB       init command verb data
*
**       Initialize DATA message line
*
         LA    R6,MSGC@SZE(,R6)        data line
         USING MSGD,R6                 MSGD addressability
         L     R1,=A(MSXD)             data line model
         MVC   MSGD(MSGD@SZE),0(R1)    init data line model
         CLI   DSACALLR,DSA@BROW       browse caller?
         BNE   MWTO010                 no, test further
         MVC   MSGDDATA(RCT@BRYL),RCTBREYE eye DSName(member)
         B     MWTO020                 carry on
*
MWTO010  DS    0H
         MVC   MSGDDATA(RCT@EDYL),RCTEDEYE eye DSName(member)
*
MWTO020  DS    0H
         LA    R6,MSGD@SZE(,R6)        next data line
         L     R1,=A(MSXD)             data line model
         MVC   MSGD(MSGD@SZE),0(R1)    init data line model
         L     R2,DSARECBL             number of records
         L     R3,DSARECBF             records address
         LA    R4,MSGDDATA             data line address
*
MWTO030  DS    0H
         CLI   DSACALLR,DSA@BROW       browse caller?
         BNE   MWTO040                 no, test further
         LA    R5,BRW@SIZE             set record size
         MVC   DSABDATA,0(R3)          copy record data            @02A
         LA    R1,DSABDATA             record data address         @02A
         USING BRW,R1                  set addressability          @02A
         MVI   BRWDATA,BLANK           clear record                @02A
         MVC   BRWDATA+1(BRW@DATL-1),BRWDATA                       @02A
         LR    R15,R3                  data record address         @02A
         AL    R15,RCTSCOFF            add scroll offset           @02A
         MVC   BRWDATA(66),BRW@PRFX(R15) copy record data          @02A
         MVC   MSGDDATA,DSABDATA       init MSGD data line         @02A
         B     MWTO060                 carry on
         DROP  R1                                                  @02A
*
MWTO040  DS    0H
         CLI   DSACALLR,DSA@EDIT       edit caller?
         BNE   MWTO050                 no, error
         LA    R5,EDT@SIZE             set record size
         MVC   DSAEDATA,0(R3)          copy record data            @02A
         LA    R1,DSAEDATA             record data address         @02A
         USING EDT,R1                  set addressability          @02A
         MVI   EDTDATA,BLANK           clear record                @02A
         MVC   EDTDATA+1(EDT@DATL-1),EDTDATA                       @02A
         LR    R15,R3                  data record address         @02A
         AL    R15,RCTSCOFF            add scroll offset           @02A
         MVC   EDTDATA(66),EDT@PRFX(R15) copy record data          @02A
         MVC   MSGDDATA,DSAEDATA       init MSGD data line         @02A
         B     MWTO060                 carry on
         DROP  R1                                                  @02A
*
MWTO050  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'MLWTO: Invalid caller ID specified'
         MVC   DSARC,=AL4(RC12)        set error RC
         B     MWTO099                 exit
*
MWTO060  DS    0H
         LA    R6,MSGD@SZE(,R6)        next data line
         L     R1,=A(MSXD)             data line model
         MVC   MSGD(MSGD@SZE),0(R1)    init data line model
         LA    R4,MSGDDATA             data line address
         LA    R3,0(R5,R3)             next member record
         BCT   R2,MWTO030              loop
         MVC   MSGDDATA(16),RCTRECEN   "END" or "MORE DATA..."
         LA    R6,MSGD@SZE(,R6)        END line address
*
**       Initialize END message line
*
MWTO070  DS    0H
         USING MSGE,R6                 MSGE addressability
         L     R1,=A(MSXE)             end line model
         MVC   MSGE(MSGE@SZE),0(R1)    init END line model
         CLC   RCTRECEN,=CL16'BOTTOM OF DATA'
         BE    MWTO080                 yes, show "END" line
         MVC   MSGETEXT(16),=CL16'***' no, show "MORE DATA..."
*
MWTO080  DS    0H
         L     R6,DSAWBUFA             MLWTO buffer address
         USING MSGC,R6                 MSGC addressability
         L     R1,DSAWLINS             total number of lines
         STC   R1,MSGCTOTL             set count
*
**       Display member record data
*
         XR    R0,R0                   zero console ID
         $WTO  MF=(E,(R6))             issue MLWTO
         ST    R1,DSAWID               save returned ID
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    MWTO099                 yes, exit
*
**       Issue display failed error msg
*
         $WTO  MID=ECF995E,                                            +
               VAR1=DSARC,             show RC                         +
               VAR2=DSAWID             show RSN
*
**       Storge release MLWTO BUFFER
*
MWTO099  DS    0H
         ICM   R1,15,DSAWBUFA          MLWTO buffer allocated?
         BZ    MWTOEXIT                no, exit
         L     R2,DSAWBUFL             MLWTO buffer size
         XC     DSAWBUFA,DSAWBUFA      zero buffer address
         FREEMAIN RU,                                                  +
               A=(R1),LV=(R2),SP=SP108
*
MWTOEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SCROLL                                                     */
*/*                                                                  */
*/* Function: Update scroll amount default subroutine                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SCROLL   $SUBINI
         USING RCT,R8                  RCT addressability
         USING EVT,R11                 EVT addressability
*
**       Validity check scroll value
*
         LA    R3,DSACMDBF             buffer address
         LA    R3,8(,R3)               skip SCROLL command
         CLC   EVTBLNKS,0(R3)          null scroll value?
         BNE   SCRL010                 no, test further
         MVC   DSASCROL,=AL4(24)       set,
         MVC   DSAVALUE,=CL2'24'        default value.
         OI    DSAFLG1,DSA@DFLT        set default indicator
         B     SCRL030                 update RCT
*
SCRL010  DS    0H
         CLI   2(R3),BLANK             value GT 2-digits?
         BE    SCRL015                 no, test further
         CLI   2(R3),C'0'              3rd digit numeric?
         BL    SCRL020                 no, test further
         B     SCRL090                 yes, error
*
SCRL015  DS    0H
         MVC   DSAVALUE,0(R3)          init value
         MVC   DSAFIELD,SCRLNUMC       init zone field
         MVN   DSAFIELD,DSAVALUE       move numeric digits
         CLC   DSAFIELD,DSAVALUE       numeric value?
         BNE   SCRL020                 no, error
         PACK  DSADWRD,DSAVALUE        pack scroll value
         CVB   R1,DSADWRD              convert it
         LTR   R1,R1                   zero scroll value?
         BZ    SCRL090                 yes, error
         CH    R1,=H'10'               value LT 10?
         BL    SCRL090                 yes, error
         CH    R1,=H'64'               value GT 64?
         BH    SCRL090                 yes, error
         ST    R1,DSASCROL             set scroll value
         B     SCRL030                 carry on
*
**       Validity check scroll lef/right
*
SCRL020  DS    0H
         $CALL SCROFF                  call subroutine
         B     SCRL099                 exit
*
**       Locate edit RCT structure
*
SCRL030  DS    0H
         USING RCT,R8                  set addressability
         ICM   R8,15,EVTERCTA          RCT init?
         BZ    SCRL050                 no, test further
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BNE   SCRL040                 no, error
         MVC   RCTSCROL,DSASCROL       update,
         MVC   RCTSCRZN,DSAVALUE        scroll value.
         OI    DSAFLG1,DSA@SCRL        scroll value updated
         B     SCRL050                 carry on
*
SCRL040  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SCROLL: RCT failed validity checks'
         B     SCRL099                 exit
*
**       Locate browse RCT structure
*
SCRL050  DS    0H
         ICM   R8,15,EVTBRCTA          RCT init?
         BZ    SCRL060                 no, exit
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BNE   SCRL040                 no, error
         MVC   RCTSCROL,DSASCROL       update,
         MVC   RCTSCRZN,DSAVALUE        scroll value.
         OI    DSAFLG1,DSA@SCRL        scroll value updated
*
**       Issue scroll value updated msg
*
SCRL060  DS    0H
         TM    DSAFLG1,DSA@SCRL        scroll value updated?
         BZ    SCRL080                 no, carry on
         TM    DSAFLG1,DSA@IMSG        message issued?
         BNZ   SCRL099                 yes, exit
         TM    DSAFLG1,DSA@DFLT        default scroll value?
         BNZ   SCRL070                 yes, issued default msg
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SCROLL: Scroll value updated'
         B     SCRL099                 exit
*
SCRL070  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SCROLL: Scroll value set to 24 lines default'
         OI    DSAFLG1,DSA@IMSG        message issued
         B     SCRL099                 exit
*
**       Issue no edit/browse RCTs found msg
*
SCRL080  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SCROLL: No active Edit/Browse session found'
         B     SCRL099                 exit
*
**       Invalid scroll value specified
*
SCRL090  DS    0H
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SCROLL: Invalid scroll value; range(10-64)'
*
SCRL099  DS    0H
         XC    DSARC,DSARC             set RC
*
SCRLEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
SCRLNUMC DC    CL8'00000000'           zone data
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SCROFF                                                     */
*/*                                                                  */
*/* Function: Update scroll left/right offset subroutine             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  ZIO address                                      */
*/*             R8  RCT address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SCROFF   $SUBINI
         USING EVT,R11                 EVT addressability
*
**       Validity check scroll value
*
         LA    R3,DSACMDBF             buffer address
         LA    R3,8(,R3)               skip SCROLL command
         CLC   0(2,R3),=CL2'L'         scroll left?
         BE    SCRF000                 yes, test further
         CLC   0(5,R3),=CL5'LEFT'      scroll left?
         BE    SCRF000                 yes, test further
         CLC   0(2,R3),=CL2'R'         scroll right?
         BE    SCRF010                 yes, test further
         CLC   0(5,R3),=CL5'RIGHT'     scroll right?
         BE    SCRF010                 yes, test further
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SCROLL: Invalid scroll operand'
         B     SCRF099                 exit
*
SCRF000  DS    0H
         MVC   DSASCOFF,=AL4(0)        set left scroll offset
         OI    DSAFLG1,DSA@SCOF        set indicator
         B     SCRF020                 carry on
*
SCRF010  DS    0H
         MVC   DSASCOFF,=AL4(14)       set right scroll offset
         OI    DSAFLG1,DSA@SCOF        set scroll indicator
*
**       Locate edit RCT structure
*
SCRF020  DS    0H
         USING RCT,R8                  set addressability
         ICM   R8,15,EVTERCTA          RCT init?
         BZ    SCRF030                 no, test further
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BNE   SCRF080                 no, error
         MVC   RCTSCOFF,DSASCOFF       update scroll offset
         OI    DSAFLG1,DSA@SCRL        set indicator
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SCROLL: Scroll attribute set'
         B     SCRF099                 exit
*
**       Locate browse RCT structure
*
SCRF030  DS    0H
         ICM   R8,15,EVTBRCTA          RCT init?
         BZ    SCRF080                 no, exit
         CLC   RCTID,=CL4'RCT'         valid indeed?
         BNE   SCRF080                 no, error
         MVC   RCTSCOFF,DSASCOFF       update scroll attribute
         OI    DSAFLG1,DSA@SCRL        set indicator
         $WTO  MID=ECF807I,                                            +
               VAR1==CL46'SCROLL: Scroll attribute set'
         B     SCRF099                 exit
*
SCRF080  DS    0H
         TM    DSAFLG1,DSA@SCRL        RCT updated?
         BNZ   SCRF099                 yes, exit
         $WTO  MID=ECF807I,            no, error                       +
               VAR1==CL46'SCROLL: RCT failed validity checks'
*
SCRF099  DS    0H
         XC    DSARC,DSARC             set RC
*
SCRFEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFRCT ,
         $ECFSRWA ,
         $ECFVT ,
         $ECFEQU ,
         $ECFSTK ,
         $ECFSRE ,
         $ECFZIO ,
         $STCSRV DSECT=YES
         $ECFMWTO DSECT=YES,T=MSG
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@NUPD EQU   X'80'                   no member updates
DSA@SCRL EQU   X'40'                   scroll value updated
DSA@IMSG EQU   X'20'                   scroll update msg issued
DSA@DFLT EQU   X'10'                   scroll default indicator
DSA@EDTR EQU   X'08'                   edit record indicator
DSA@NMEM EQU   X'04'                   no member name indicator
DSA@TSOD EQU   X'02'                   SYSTSIN/SYSTSPRT indicator
DSA@SCOF EQU   X'01'                   scroll left/right attribute
         DS    0X
DSAFLG2  DS    XL1                     flags
DSA@RS20 EQU   X'80'                   -available
DSA@RS21 EQU   X'40'                   -available
DSA@RS22 EQU   X'20'                   -available
DSA@RS23 EQU   X'10'                   -available
DSA@RS24 EQU   X'08'                   -available
DSA@RS25 EQU   X'04'                   -available
DSA@RS26 EQU   X'02'                   -available
DSA@RS27 EQU   X'01'                   -available
         DS    0X
DSAFLG3  DS    XL1                     parse ID
DSA@RS30 EQU   X'80'                   -available
DSA@RS31 EQU   X'40'                   -available
DSA@RS32 EQU   X'20'                   -available
DSA@RS33 EQU   X'10'                   -available
DSA@RS34 EQU   X'08'                   -available
DSA@RS35 EQU   X'04'                   -available
DSA@RS36 EQU   X'02'                   -available
DSA@RS37 EQU   X'01'                   -available
         DS    0X
DSACALLR DS    XL1                     Caller ID
DSA@EDIT EQU   X'80'                   edit caller
DSA@BROW EQU   X'40'                   browse caller
         DS    0X
DSAFUNC  DS    XL1                     function ID
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSAWID   DS    F                       returned MLWTO ID
DSAWBUFA DS    F                       MLWTO buffer address
DSAWBUFL DS    F                       MLWTO buffer size
DSAWLINS DS    F                       total MLWTO lines
DSARECBF DS    F                       MLWTO display records address
DSARECBL DS    F                       MLWTO display records count
DSASCROL DS    F                       scroll amount value
DSASCOFF DS    F                       scroll left/right offset
DSAWORD  DS    F                       workarea
DSAOPAR  DS    F                       output parm reg
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
         DS    0F
DSADSORG DS    0F                      DYNALLOC DSORG indicator
DSADSZRO DS    AL2                     -halfword of zeros
DSADSTYP DS    AL2                     -DSORG={PS|PO}
DSADS@SZ EQU   *-DSADSORG              keep it together
         DS    0C
DSADDNAM DS    CL8                     DDName
DSA@DDNL EQU   *-DSADDNAM              DDName length
         DS    0C
DSAMEMBR DS    CL8                     member name
DSA@MEML EQU   *-DSAMEMBR              member name length
         DS    0C
DSADSNAM DS    CL44                    DSName
DSA@DSNL EQU   *-DSADSNAM              DSName length
         DS    0C
DSACMDBF DS    0CL100                  CMD buffer
DSACMDID DS    CL1                     CMD character
DSACMDTA DS    CL99                    CMD operands
DSA@CMDZ EQU   *-DSACMDBF              CMD buffer length
         DS    0F
DSABDATA DS    CL(BRW@SIZE)            BRW data record             @02A
         DS    0F
DSAEDATA DS    CL(EDT@SIZE)            EDT data record             @02A
         DS    0F
DSAZIO   DS    CL(ZIO@SIZE)            ZIO block
         DS    0F
DSASREC  DS    CL(SRE@SIZE)            SRE copy                    @03A
DSA@SREL EQU   *-DSASREC               SRE block length            @03A
         DS    0C
DSAVAR   DS    CL8                     variable data
DSAVARX  DS    CL1                     slack byte
DSAVALUE DS    CL2                     workarea
DSAFIELD DS    CL2                     workarea
         DS    0D
DSADWRD  DS    D                       doubleword
         DS    0F
DSAPLST  DS    XL128                   parmlist
DSA@PLSL EQU   *-DSAPLST               parmlist length
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         CVT   DSECT=YES
         IKJTCB ,
         IEZJSCB ,
         IEBCPARM ,
         END
./ ADD NAME=ECFSTG   0101-21234-21333-1252-00082-00083-00001-BENMAR  41
SCFSTG   CSECT
SCFSTG   AMODE 31
SCFSTG   RMODE ANY
*
*  Obtain storage outside the primary address space.
*
*   Entry Linkage
*
         BAKR  R14,0              stack caller status
         SAC   512                AR mode
         SYSSTATE ASCENV=AR
         LAE   R12,0(R15,0)       addressability
         USING SCFSTG,R12
         STORAGE OBTAIN,LENGTH=72 obtain savearea
         LAE   R13,0(R1,0)        savearea address
         MVC   4(4,R13),=C'F1SA'  caller status is in stack
*
         EREG  R1,R1              get parm reg
         USING PARMLIST,R1        addressability
         DROP  R1
*
*   Add the address space represented by the target STOKEN to
*   the DU-AL as a public entry.
*
         ALESERV ADD,STOKEN=EVTSTOKN,AL=WORKUNIT,ACCESS=PUBLIC,        X
               ALET=ASALET
*
*   Now obtain 4k of storage in subpool 0 in target address space,
*   amove 16BM.
*
         STORAGE OBTAIN,LENGTH=4096,SP=0,ALET=ASALET,LOC=ANY,          X
               ADDR=ASADDR
*
*   Set up registers to point at the storage just obtained.
*
         L     R4,ASADDR          storage address in R4
         L     R3,ASALET          storae ALET in R3
         SAR   R4,R3              ALET in AR4
*
*   AR/GPR 4 can now be used to reference the storage in the
*   target address space
*
         USING ARSTOR,R4
         MVC   FIELD1,DATA1       move data in the address space
         MVC   FIELD2,DATA2
         DROP  R4
*
*   Release the storage previously obtained.
*
         STORAGE RELEASE,LENGTH=4096,ALET=ASALET,ADDR=ASADDR,SP=0
*
*   Remove the entry from our Access List
*
         ALESERV DELETE,ALET=ASALET
*
*   Exit Linkage
*
         LAE   R1,0(R13,0)        savearea address
         STORAGE RELEASE,ADDR=(1),LENGTH=72
         SLR   R15,R15            set RC
         PR    ,                  return to caller
*
*    Variables
*
ASTOKEN  DS    CL8                STOKEN of address space
ASADDR   DS    F                  address of storage in address space
ASALET   DS    F                  ALET representing address space
DATA1    DC    CL4'BLUE'
DATA2    DC    CL4'PINK'
         LTORG ,
*
*    Parameter list mapping
*
PARMLIST DSECT
CSTOKEN  DS    CL8                User's STOKEN
*
*    Mapping of storage in target address space
*
ARSTOR   DSECT
FIELD1   DS    CL4                Area 1
FIELD2   DS    CL4                Area 2
         END
./ ADD NAME=ECFSUB   0199-21072-21323-1029-04652-03629-04652-BENMAR  26
ECFSUB   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFSUB                                                     */
*/*                                                                  */
*/* Description: Event Capture Facility Subsystem                    */
*/*                                                                  */
*/* Function: Performs initialization and termination functions      */
*/*           on behalf of the Event Capture Facility subsystem.     */
*/*                                                                  */
*/* INITIALIZATION:                                                  */
*/*        1. Create jobstep task and subtasks processing and        */
*/*           recovery stacks.                                       */
*/*                                                                  */
*/*        2. Parse initialization options from PARM= parameter      */
*/*           on the EXEC JCL statement and copy them into the       */
*/*           dynamic storage area (DSA)                             */
*/*                                                                  */
*/*        3. Load the subsystem interface (SSI) support load        */
*/*           module ECFCSM into dynamic LPA via the CSVDYLPA        */
*/*           add service call.                                      */
*/*                                                                  */
*/*        4. Create Events Vector Table (EVT) in System Queue       */
*/*           Area (SQA) subpool 245 and relocate control section    */
*/*           ECFVTB from load module ECFCSM into it.                */
*/*                                                                  */
*/*        5. Define subsystem service Stacking PC environment.      */
*/*                                                                  */
*/*        6. Create SRB, SRE and REB cell pools in Common Service   */
*/*           Area (CSA) subpool 241.                                */
*/*                                                                  */
*/*        7. Parse initialization parameters specified by the       */
*/*           master PARMLIB member ECFMSTR and propagate options    */
*/*           into the Events Vector Table (EVT).                    */
*/*                                                                  */
*/*        8. Dynamically add user SVC using SVCUPDTE add service    */
*/*           call.                                                  */
*/*                                                                  */
*/*        9. Activate performance data capture Disabled Interrupt   */
*/*           Exit (DIE).                                            */
*/*                                                                  */
*/*       10. Parse defined event rules in master PARMLIB member     */
*/*           ECFMSTR and create rule event blocks (REBs) in CSA     */
*/*           subpool 241.                                           */
*/*                                                                  */
*/*       11. Open DEBUG log data set if DDname DBUGLOG has been     */
*/*           specified on the zECF started task JCL procedure.      */
*/*                                                                  */
*/*       12. Open TRACE log data set if DDname TRCELOG has been     */
*/*           specified on the zECF started task JCL procedure.      */
*/*                                                                  */
*/*       13. Storage obtain SSI control structures SSCT/SSVT in     */
*/*           CSA subpool 241 and activate MGCR/E, WTO/R, EOT and    */
*/*           EOM broadcast listeners.                               */
*/*                                                                  */
*/*       14. Attach EOT, EOM, MGCR/E, WTO/R broadcast listeners     */
*/*           processing subtasks.                                   */
*/*                                                                  */
*/*       15. Dynamically add zECF subsydtem to the SSCT chain       */
*/*           via Compare and Swap instruction.                      */
*/*                                                                  */
*/*       16. Define ECF instance persistent system-level name       */
*/*           token pair.                                            */
*/*                                                                  */
*/*       17. Issue WAIT on termination ECB EVTJSECB and process     */
*/*           termination functions when the ECB is posted.          */
*/*                                                                  */
*/* TERMINATION:                                                     */
*/*        1. Detach EOT, EOM, MGCR/E, WTO/R broadcast listeners     */
*/*           processing subtasks.                                   */
*/*                                                                  */
*/*        2. Deactivate the zECF subsystem by inserting a word      */
*/*           of zeros into the SSCTSSVT field of the subsystem      */
*/*           SSCT control block.                                    */
*/*                                                                  */
*/*        3. Delete all Common Service Area (CSA) and System queue  */
*/*           Area (SQA) cell pools.                                 */
*/*                                                                  */
*/*        4. Deactivate performance data capture Disabled Interrupt */
*/*           Exit (DIE).                                            */
*/*                                                                  */
*/*        5. Delete subsystem (SSI) support load module ECFCSM      */
*/*           from the zOS dynamic LPA via the CSVDYLPA delete       */
*/*           service call.                                          */
*/*                                                                  */
*/*        6. Close DEBUG log and Trace log data sets, if opened.    */
*/*                                                                  */
*/*        7. Close TRACE log and Trace log data sets, if opened.    */
*/*                                                                  */
*/*        8. Remove user SVC by invoking the SVCUPDTE delete        */
*/*           service call.                                          */
*/*                                                                  */
*/*        9. Delete subsystem service Stacking PC environment.      */
*/*                                                                  */
*/*       10. Storage release the Events Vector table (EVT) from     */
*/*           the System Queue Area (SQA).                           */
*/*                                                                  */
*/*       11. Delete jobstep task and subtasks peocessing and        */
*/*           recovery stacks.                                       */
*/*                                                                  */
*/*       12. Terminate Event Capture subsystem.                     */
*/*                                                                  */
*/*                                                                  */
*/* Input Regs: R1  input parameter                                  */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=8/0                 */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 09262020 | Ben Marino  | SVC support enhancements      *
* @03 | V1R1 | 10042020 | Ben Marino  | Name/Token pair support       *
* @04 | V1R1 | 10232020 | Ben Marino  | Resource utilization support  *
* @05 | V1R1 | 11092020 | Ben Marino  | Serviceability enhancements   *
* @06 | V2R1 | 03152021 | Ben Marino  | zOS serviceability support    *
* @07 | V2R2 | 05182021 | Ben Marino  | zOS security server support   *
* @08 | V2R2 | 06172021 | Ben Marino  | CPF command prefix support    *
* @09 | V2R3 | 07272021 | Ben Marino  | Added ECFSVC AMODE=31 support *
* @10 | V2R3 | 07272021 | Ben Marino  | Added MONITOR event trigger   *
* @11 | V2R3 | 09152021 | Ben Marino  | Added SVC screening support   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
         COPY  $GLBLS
ECFSUB   $ENTRY STACK=JSTTCB           entry
         ST    R1,DSAIPAR              save PARM reg
         SLR   R11,R11                 zero EVT base
         MVC   DSAREL,MIDREL           ID subsystem release
         MVC   DSAMSUB,MIDSUB          ID subsystem name
*
**       Obtain subtasks stack storage
*
         $CALL STAKINI                 init stacks
         LTR   R15,R15                 successful?
         BZ    OPNDBUG                 yes, carry on               @05C
         MVC   DSARSN,=AL4(RSN3004)    no, set RSN
         B     SUBABEND                ABEND
*
**       Open DBUGLOG log data set
*
OPNDBUG  DS    0H                                                  @05A
         $CALL DBGOPEN                 open DBUGLOG log            @05A
         LTR   R15,R15                 successful?
         BNZ   SUBABEND                no, ABEND
*
**       Open TRCELOG log data set
*
         $CALL TRCOPEN                 open TRCELOG log            @05A
         LTR   R15,R15                 successful?
         BNZ   SUBABEND                no, ABEND
*
**       Set nonswappable attributes
*
         MODESET MF=(E,SUPSTATE)       Supervisor state
         XR    R2,R2                   sanity
         IPK   ,                       get my protect key
         ST    R2,DSAEKEY              save entry PSW key
         SPKA  0(0)                    set protect key zero
         XC    DSASKEY,DSASKEY         set supervisor protect key
         L     R2,STKSTKEC             top STKE address
         USING STKE,R2                 set addressability
         XC    STKEKEY,STKEKEY         set STKE key
         SYSEVENT TRANSWAP             make us nonswappable
         OI    STKFLG1,STK@SUPR        set supervisor indicator
         DROP  R2
*
**       Establish recovery environment
*
         L     R4,STKRTMA              ECFRTM EPA
         MVC   DSAESTAE(ESTAEL),ESTAE  listform
         ESTAE (R4),                                                   +
               PARAM=(R9),             STK address                     +
               TERM=YES,               invoke during termination       +
               TOKEN=DSATOKN,          return token here           @06A+
               MF=(E,DSAESTAE)         establish recovery
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    INISUBS                 yes, carry on
         MVC   DSARSN,=AL4(RSN0116)    set RSN
         B     SUBABEND                ABEND
*
**       Check MSAS system recovery
*
INISUBS  DS    0H
         OI    DSAFLG1,DSA@STA         ESTAE established           @05M
         $CALL MASINI                  MSAS subroutine
         TM    DSAFLG3,DSA@EXIT        exit requested?
         BNZ   TERMSTR                 yes, terminate
         MVC   DSAINITP,ECFINIT        set init parm
*
**       Initialize Event Capture facility
*
         $CALL STCINI                  PARM= subroutine
         LTR   R15,R15                 successful?
         BZ    INIEVTA                 yes, carry on
         TM    DSAFLG3,DSA@989E        ECF989E issued?
         BNZ   SUBEXIT                 yes, just exit
         MVC   DSARSN,=AL4(RSN0552)    no, set error RSN
         B     SUBABEND                ABEND
*
**       Establish EVT addressability
*
INIEVTA  DS    0H
         L     R11,DSAEVT              EVT address
         USING EVT,R11                 set addressability
         ST    R11,STKEVTA             save EVT address in stack
*                                                                  @05A
**       Validity check RCV={NO|YES} option                        @05A
*                                                                  @05A
         TM    EVTFLG2,EVT@RCVY        RCV=YES?                    @05A
         BNZ   INIRTRY                 yes, carry on               @05A
         TM    DSAFLG1,DSA@STA         ESTAE active?               @05A
         BZ    INIRTRY                 no, carry on                @05A
         ESTAE 0,TOKEN=DSATOKN         delete recovery             @06C
         NI    DSAFLG1,XFF-DSA@STA     recovery deactivated        @05A
*
**       Activate initialization recovery
*
INIRTRY  DS    0H                                                  @05A
         MVC   DSARSN,=AL4(RSN0624)    set RSN
         $RETRY TERMSTR,               activate retry                  +
               SDUMP=YES,              skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Call initialization routines
*
INITSTR  DS    0H
         LA    R6,SRTINIT              EXEC=INIT service routines
         USING SRI,R6                  set addressability
         MVC   DSAFCID,=CL4'INIT'      set INIT indicator
         MVC   DSAINITP,ECFINIT        set ECFINIT init parm
*
INIT000  DS    0H
         CLC   SRIEPA,SRITEND          end of table?
         BE    INIT200                 yes, exit loop
         CLI   SRIEXEC,SRI@INIT        EXEC=INIT entry?
         BNE   INIT100                 no, skip it
         L     R1,SRIPARM              set input parm-R1
         L     R0,SRIPARM0             set input parm-R0
         L     R15,SRIEPA              service routine EPA
         BALR  R14,R15                 call service routine
         L     R2,DSASKEY              my protect key
         SPKA  0(R2)                   restore my protect key
         ST    R15,DSARC               save service RC
         ST    R0,DSARSN               save service RSN
         CLC   DSARC,=AL4(RC0)         successful?
         BE    INIT100                 yes, carry on
*
**       Issue initialization failed msg
*
         $WTO  MID=ECF097E,                                            +
               VAR1=DSARC,             show error RC                   +
               VAR2=DSARSN             show error RSN
         B     TERMSTR                 terminate
*
INIT100  DS    0H
         LA    R6,SRI@SIZE(,R6)        next SRI entry
         B     INIT000                 loop
         DROP  R6
*
**       Issue initialization complete msg
*
INIT200  DS    0H
         STIMER WAIT,DINTVL=INITIMER   wait a few seconds
         TM    DSAFLG3,DSA@002I        issue ECF002I msg?
         BZ    INIT300                 no, skip it
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    INIT300                 no, skip it
         $WTO  MID=ECF113I             yes, issue msg
*
INIT300  DS    0H
         TM    DSAFLG1,DSA@SSM         SSI-LMOD CSA-loaded?
         BZ    INIT400                 no, carry on
         TM    STKFLG2,STK@191I        ECF191I issued?
         BNZ   INIT400                 yes, carry on
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    INIT400                 no, skip it
         $WTO  MID=ECF191I,                                            +
               VAR1=DSASSMN,           show LMOD name                  +
               VAR2=DSAXRC,            show RC                         +
               VAR3=DSASSML            show module size
*
INIT400  DS    0H
         TM    EVTFLG1,EVT@TERM        terminating?
         BNZ   TERMSTR                 yes, terminate
         TM    EVTFLG5,EVT@HZOS        zOS host?
         BZ    INIT500                 no, skip UTC to LOCAL
         $CALL TODCNV                  get init time & date
*
INIT500  DS    0H
         $WTO  MID=ECF002I             subsystem is up!
*
**       Wait for termination request
*
WAIT000  DS    0H
         MVC   DSAFCID,=CL4'ACTV'      set active indicator
         MVC   EVTZFCID,DSAFCID        set active indicator
         OI    EVTFLG1,EVT@WAIT        entering wait state
         XC    EVTJSECB,EVTJSECB       zero ECB word
         $WAIT ECB=EVTJSECB            wait for termination request
         NI    EVTFLG1,XFF-EVT@WAIT    reset waiting indicator
*
**       Call Termination routines
*
TERMSTR  DS    0H
         L     R2,DSASKEY              my protect key
         SPKA  0(R2)                   set my protect key
         OI    EVTFLG1,EVT@TERM        we're terminating
         LA    R6,SRTTERM              EXEC=TERM table
         USING SRI,R6                  set addressability
         MVC   DSAFCID,=CL4'TERM'      set TERM indicator
         MVC   EVTZFCID,DSAFCID        set TERM indicator
*
**       Activate termination recovery
*
         MVC   DSARSN,=AL4(RSN0628)    set RSN
         $RETRY TERM000,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
TERM000  DS    0H
         CLC   SRIEPA,SRITEND          end of table?
         BE    TERM999                 yes, exit loop
         CLI   SRIEXEC,SRI@TERM        EXEC=TERM entry?
         BNE   TERM100                 no, skip it
         L     R1,SRIPARM              set input parm
         L     R15,SRIEPA              service routine EPA
         BALR  R14,R15                 call service routine
         L     R2,DSASKEY              my protect key
         SPKA  0(R2)                   set my protect key
         ST    R15,DSARC               save service RC
         ST    R0,DSARSN               save service RSN
*
TERM100  DS    0H
         LA    R6,SRI@SIZE(,R6)        next SRI entry
         B     TERM000                 loop
*
**       Issue termination complete msg
*
TERM999  DS    0H
         LA    R11,DSAEVTB             local EVT address
         $WTO  MID=ECF099I             termination complete msg
         DROP  R6
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
SUBEXIT  DS    0H
         TM    DSAFLG1,DSA@STA         ESTAE active?
         BZ    SUBXIT10                no, carry on                @05C
         ESTAE 0,TOKEN=DSATOKN         delete recovery             @06C
         NI    DSAFLG1,XFF-DSA@STA     recovery deactivated        @05M
*
SUBXIT10 DS    0H
         L     R2,DSAEKEY              entry protect key
         SPKA  0(R2)                   restore protect key
         $CALL DBGCLOS                 close DBUGLOG log           @05A
         $CALL TRCLOSE                 close TRCELOG log           @05A
*
         MODESET MF=(E,PRBSTATE)       set problem state
*
         $EXIT PARM=DSAOPAR,           exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        ABEND exit routine                                           *
*--------+---------+---------+---------+---------+---------+---------+*
SUBABEND DS    0H
         L     R3,DSARSN               show RSN in R3
         ABEND X'FF1',DUMP,REASON=(R3) ABEND
*---------------------------------------------------------------------*
*        VCONs                                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFRTMA  DC    V(ECFRTM)               ECFRTM recovery manager
ECFCSAA  DC    V(ECFCSA)               ECFCSA load service EPA
ECFWTOA  DC    V(ECFWTO)               ECFWTO message service EPA
ECFSSIA  DC    V(ECFSSI)               ECFSSI $SSIREQ service EPA
SRIENVA  DC    V(SRIENV)               ECFENV SRVentry environment EPA
SRXENVA  DC    V(SRXENV)               ECFENV SRVexit environment EPA
SBIENVA  DC    V(SBIENV)               ECFENV SUBentry environment EPA
SBXENVA  DC    V(SBXENV)               ECFENV SUBexit environment EPA
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFPARM  DC    CL8'PARMLIB'            default parameter library
ECFMSTR  DC    CL8'ECFMSTR'            default init member name
ECFINIT  DC    CL8'$$zECF$$'           initialization caller parm
REBREG0  DC    CL4'SUB'                initialization caller parm
SRITEND  DC    XL4'FFFFFFFF'           SRI table end indicator
         DS    0D
INITIMER DC    CL8'00000300'           hhmmssth timer
*---------------------------------------------------------------------*
*        Initialization Service routines Table                        *
*--------+---------+---------+---------+---------+---------+---------+*
SRTINIT  DS    0F
         $SRINIT TYPE=INITIAL
*
         $SRINIT TYPE=ENTRY,                                           +
               SR=ECFIIO,            read PARMLIB init parms           +
               EXEC=INIT,            -init service routine             +
               PARM=ECFINIT,         -input parameter-R1               +
               PARM0=ECFPARM,        -input parameter-R0               +
               CALLSEQ=1             -3rd call
*
         $SRINIT TYPE=ENTRY,                                           +
               SR=ECFPAR,            validity check init parms         +
               EXEC=INIT,            -init service routine             +
               CALLSEQ=2             -4th call
*
         $SRINIT TYPE=ENTRY,                                           +
               EP=GETRES,            obtain subsystem resources        +
               EXEC=INIT,            -init service routine             +
               CALLSEQ=3             -5th call
*
         $SRINIT TYPE=ENTRY,                                           +
               SR=ECFREB,            implement defined rules           +
               EXEC=INIT,            -init service routine             +
               PARM=ECFINIT,         -input parameter(R1)              +
               PARM0=REBREG0,        -input parameter(R0)              +
               CALLSEQ=4             -6th call
*
         $SRINIT TYPE=ENTRY,                                           +
               EP=INISUB,            initialize subsystem              +
               EXEC=INIT,            -init service routine             +
               CALLSEQ=5             -7th call
*
         $SRINIT TYPE=ENTRY,                                           +
               EP=ATTACH,            attach event subtasks             +
               EXEC=INIT,            -init service routine             +
               CALLSEQ=6             -8th call
*
         $SRINIT TYPE=FINAL
SRTINSZE EQU   *-SRTINIT
*---------------------------------------------------------------------*
*        Termination Service Routines Table                           *
*--------+---------+---------+---------+---------+---------+---------+*
SRTTERM  DS    0F
         $SRINIT TYPE=INITIAL
*
         $SRINIT TYPE=ENTRY,                                           +
               EP=DETACH,            detach event subtasks             +
               EXEC=TERM,            -term service routine             +
               CALLSEQ=1             -1nd call
*
         $SRINIT TYPE=ENTRY,                                           +
               EP=PARCLSE,           Close PARMLIB                     +
               EXEC=TERM,            -term service routine             +
               CALLSEQ=2             -2nd call
*
         $SRINIT TYPE=ENTRY,                                           +
               EP=TRMSUB,            terminate subsystem               +
               EXEC=TERM,            -term service routine             +
               CALLSEQ=3             -5th call
*
         $SRINIT TYPE=FINAL
SRTERSZE EQU   *-SRTTERM
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ESTAE    ESTAE 0,MF=L
ESTAEL   EQU   *-ESTAE
         DS    0F
SUPSTATE MODESET MODE=SUP,MF=L
         DS    0F
PRBSTATE MODESET MODE=PROB,MF=L
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: STAKINI                                                    */
*/*                                                                  */
*/* Function: Obtain key=8 stacks and work areas                     */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R1  input parameter                                  */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
STAKINI  $SUBINI
         USING STKE,R13
*
**       Storage obtain ECFSRV(S34) subtask stack
*
         L     R3,STACKSZE             stack size
         GETMAIN RU,LV=(R3),SP=SP112   stack storage
         ST    R1,DSASTK34             ECFSRV(S34SRV) stack
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear stack storage
*
**       Storage obtain ECFSRV(S35) subtask stack
*
         L     R3,STACKSZE             stack size
         GETMAIN RU,LV=(R3),SP=SP113   stack storage
         ST    R1,DSASTK35             ECFSRV(S35SRV) stack
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear stack storage
*
**       Storage obtain ECFSRV(RFR) subtask stack
*
         L     R3,STACKSZE             stack size
         GETMAIN RU,LV=(R3),SP=SP114   stack storage
         ST    R1,DSASTKRF             ECFSRV(RFRSRV) stack
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear stack storage
*
**       Storage obtain ECFSRV(ADD) subtask stack
*
         L     R3,STACKSZE             stack size
         GETMAIN RU,LV=(R3),SP=SP115   stack storage
         ST    R1,DSASTKAD             ECFSRV(ADDSRV) stack
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear stack storage
*
**       Storage obtain ECFSRV(COM) subtask stack
*
         L     R3,STACKSZE             stack size
         GETMAIN RU,LV=(R3),SP=SP116   stack storage
         ST    R1,DSASTKCO             ECFSRV(COMSRV) stack
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear stack storage
*
**       Storage obtain ECFSRV(STC) subtask stack
*
         L     R3,STACKSZE             stack size
         GETMAIN RU,LV=(R3),SP=SP117   stack storage
         ST    R1,DSASTKST             ECFSRV(STCSRV) stack
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear stack storage
*
**       Storage obtain ECFSRV(DIE) subtask stack
*
         L     R3,STACKSZE             stack size                  @04A
         GETMAIN RU,LV=(R3),SP=SP118   stack storage
         ST    R1,DSASTKDI             ECFSRV(DIESRV) stack
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear stack storage
*
**       Storage obtain ECFSRV(SYS) subtask stack
*
         L     R3,STACKSZE             stack size                  @10A
         GETMAIN RU,LV=(R3),SP=SP120   stack storage
         ST    R1,DSASTKSY             ECFSRV(SYSSRV) stack
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear stack storage
*
**       Storage obtain ECFSRV(SVC) subtask stack
*
         L     R3,STACKSZE             stack size                  @11A
         GETMAIN RU,LV=(R3),SP=SP121   stack storage
         ST    R1,DSASTKSV             ECFSRV(SVCSRV) stack
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear stack storage
*
**       Storage obtain I/O buffer block
*
         MVC   STKPRCNT,IOBF128R       save record count
         MVC   STKB064K,IOBF064K       I/O buffer size (64K)
         MVC   STKB064R,IOBF064R       save record count
         MVC   STKB128K,IOBF128K       I/O buffer size (128K)
         MVC   STKB128R,IOBF128R       save record count
         MVC   STKB256K,IOBF256K       I/O buffer size (256K)
         MVC   STKB256R,IOBF256R       save record count
*
         L     R3,IOBF128K             I/O buffer size             @06C
         ST    R3,STKPRBUF             save size
         MVC   STKPRCNT,IOBF128R       save record count
         GETMAIN RU,LV=(R3),SP=SP101,LOC=BELOW
         ST    R1,STKPRLIB             I/O buffer address
         LR    R2,R1
         XR    R15,R15
         MVCL  R2,R14                  clear I/O buffer
         L     R2,STKPRLIB             I/O buffer address
         L     R3,STKPRBUF             I/O buffer size
         LA    R2,0(R3,R2)             get end of buffer
         ST    R2,STKPREND             end of I/O buffer
*
**       Storage obtain ECFSUB RTB table
*
         L     R3,=AL4(RTB@BLKZ)       RTB size
         ST    R3,STKRTBSZ             init RTB size
         GETMAIN RU,LV=(R3),SP=SP101,LOC=BELOW                     @06C
         ST    R1,STKRTBAD             save table address
         LR    R2,R1                   copy storage address
         XR    R5,R5                   zero
         MVCL  R2,R4                   scrub RTB
         LR    R6,R1                   copy address
         USING RTB,R6                  RTB addressability
         MVC   RTBID,=CL4'RTB'         ID RTB
         LA    R2,RTB@SIZE(,R6)        get 1st RTBE address
         ST    R2,RTBCURR              set current RTBE address
         LA    R2,RTB@BLKZ(,R6)        RTB end address
         ST    R2,RTBTEND              set RTB table end address
         DROP  R6
*
**       Storage obtain ECFSRV(RFR) RTB table
*
         L     R3,=AL4(RTB@BLKZ)       RTB size                    @06A
         GETMAIN RU,LV=(R3),SP=SP114,LOC=BELOW                     @06A
         ST    R1,DSARTRFR             save table address          @06A
         LR    R2,R1                   copy storage address        @06A
         XR    R5,R5                   zero                        @06A
         MVCL  R2,R4                   scrub RTB                   @06A
         LR    R6,R1                   copy address                @06A
         USING RTB,R6                  RTB addressability          @06A
         MVC   RTBID,=CL4'RTB'         ID RTB                      @06A
         LA    R2,RTB@SIZE(,R6)        get 1st RTBE address        @06A
         ST    R2,RTBCURR              set current RTBE address    @06A
         LA    R2,RTB@BLKZ(,R6)        RTB end address             @06A
         ST    R2,RTBTEND              set RTB table end address   @06A
         DROP  R6                                                  @06A
*
**       Storage obtain ECFSRV(ADD) RTB table
*
         L     R3,=AL4(RTB@BLKZ)       RTB size                    @06A
         GETMAIN RU,LV=(R3),SP=SP115,LOC=BELOW                     @06A
         ST    R1,DSARTADD             save table address          @06A
         LR    R2,R1                   copy storage address        @06A
         XR    R5,R5                   zero                        @06A
         MVCL  R2,R4                   scrub RTB                   @06A
         LR    R6,R1                   copy address                @06A
         USING RTB,R6                  RTB addressability          @06A
         MVC   RTBID,=CL4'RTB'         ID RTB                      @06A
         LA    R2,RTB@SIZE(,R6)        get 1st RTBE address        @06A
         ST    R2,RTBCURR              set current RTBE address    @06A
         LA    R2,RTB@BLKZ(,R6)        RTB end address             @06A
         ST    R2,RTBTEND              set RTB table end address   @06A
         DROP  R6                                                  @06A
*
**       Storage obtain DBUGLOG DCB
*
         L     R3,=AL4(DBUGLOGL)       DBUGLOG DCB size            @05A
         GETMAIN RU,LV=(R3),SP=SP99,LOC=BELOW                      @05A
         ST    R1,STKDDCB              save DCB address            @05A
         XC    0(DBUGLOGL,R1),0(R1)                                @05A
*
**       Storage obtain TRCELOG DCB
*
         L     R3,=AL4(TRCELOGL)       DBUGLOG DCB size            @05A
         GETMAIN RU,LV=(R3),SP=SP99,LOC=BELOW                      @05A
         ST    R1,STKTDCB              save DCB address            @05A
         XC    0(TRCELOGL,R1),0(R1)                                @05A
*
STAKEXIT DS    0H
         L     R3,=AL4(SDSASIZE)       subtasks DSA size
         ST    R3,DSASDSA              save size
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
IOBF064K DC    AL4(65536)              I/O buffer size (64K        @05C
IOBF064R DC    AL4(65536/80-1)         I/O buffer max # of records @05C
         DS    0F
IOBF128K DC    AL4(131072)             I/O buffer size (128K)      @05C
IOBF128R DC    AL4(131072/80-1)        I/O buffer max # of records @05C
         DS    0F
IOBF256K DC    AL4(262144)             I/O buffer size (256K)      @05C
IOBF256R DC    AL4(262144/80-1)        I/O buffer max # of records @05C
*
SDSASIZE EQU   4096                    subtasks DSA size
STACKSZE DC    AL4(SDSASIZE+STK@SIZE+SDSA@MAX)
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MASINI                                                     */
*/*                                                                  */
*/* Function: MSAS environment initialization subroutine             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R1  input parameter                                  */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MASINI   $SUBINI
         USING STKE,R13                STKE addressability
*
**       Validity check PARMs
*
         L     R1,DSAIPAR              input parm reg
         USING MSAS,R1                 set addressability
         CLC   MSASID,=CL4'MSAS'       MSAS caller?
         BNE   MAS0099                 no, exit
         MVC   DSAPARM,MSASCBUF        copy input parms
         OI    DSAFLG2,DSA@MSAS        indicate MSAS caller
         CLI   DSAPARM+7,BLANK         any PARMs?
         BE    MAS0000                 no, use defaults
         CLC   DSAPARM+7(2),=CL2','    any PARMs?
         BNE   MAS0010                 yes, carry on
*
MAS0000  DS    0H
         OI    DSAFLG3,DSA@DFLT        no, use defaults
*
**       Save Master Scheduler ASCB
*
MAS0010  DS    0H
         USING PSA,0                   FLC
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTMSER              MSAS base work area
         USING BASE,R3                 set addressability
         MVC   DSAMSAS,BAASCB          init MSAS ASCB
         DROP  R3
*
**       Identify ECF PARMLIB data set
*
MAS0020  DS    0H
         LA    R3,DSARECB              ECB address
         LA    R2,DSAREPLY             reply address
         MVI   DSAREPLY,BLANK          scrub reply area
         MVC   DSAREPLY+1(DSARPLYZ-1),DSAREPLY
         MVC   DSAWTOR(ECF800AL),ECF800A
         XC    DSARECB,DSARECB         zero ECB word
         WTOR  ,(2),,(3),MF=(E,DSAWTOR)
         WAIT  ECB=DSARECB             reply wait
         CLC   =CL5'EXIT',DSAREPLY     exit requestd?
         BNE   MAS0030                 no, test further
         OI    DSAFLG3,DSA@EXIT        yes, set exit indicator
         B     MAS0099                 exit
*
**       Allocate ECF PARMLIB data set
*
MAS0030  DS    0H
         LA    R4,DSAZIO               ZIO block address
         USING ZIO,R4                  set addressabilty
         XC    ZIO(ZIO@SIZE),ZIO       zero ZIO block
         MVC   ZIOID,=CL4'ZIO'         ID ZIO
         MVI   ZIOFUNC,ZIO@MSAS        set function ID
         MVC   ZIODDNAM,=CL8'PARMLIB'  set DDname
         MVC   ZIODSNAM,DSAREPLY       set DSname
         $CALL VR=ECFDYN,PARM=(R4)
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   MAS0020                 no, re-issue WTOR
         DROP  R4
*
MAS0099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
MASEXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFDYN   DC    V(ECFDYN)               DYNALLOC service routine
*---------------------------------------------------------------------*
*        WTOR Messages                                                *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECF800A  WTOR  'ECF800A Specify ECF initialization PARMLIB DSName or EX+
               IT',0,44,0,ROUTCDE=(2,11),MF=L
ECF800AL EQU   *-ECF800A
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: STCINI                                                     */
*/*                                                                  */
*/* Function: Initialize Event Capture environment                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R1  input parameter                                  */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
STCINI   $SUBINI
         USING PSA,0                   FLC addressability
         USING STKE,R13                STKE addressability
*                                                                  @06A
**       Identify host sysytem                                     @06A
*                                                                  @06A
         L     R3,FLCCVT               CVT address                 @06A
         USING CVT,R3                  set addressability          @06A
         SL    R3,=F'40'               prefix                      @06A
         CLC   0(4,R3),=CL4'SP7.'      zOS host?                   @06A
         BNE   STC0000                 no, skip this               @06A
         MVC   DSAPRODN,0(R3)          yes, copy SP7.n.n name      @06A
         MVC   DSAPRODI,8(R3)          copy HBBnnnn FMID           @06A
         OI    STKFLG1,STK@HZOS        indicate zOS host           @06A
         DROP  R3                                                  @06A
*
**       Initialize Local EVT
*
STC0000  DS    0H                                                  @06M
         LA    R11,DSAEVTB             local EVT address
         USING EVT,R11                 set addressability
         MVC   EVTID,=CL4'EVT'         set ID
         MVC   EVTLOCAD,=CL8'LOCAL'    ID EVT location
         MVC   EVTSUBNM,=CL4'zECF'     set subsystem name          @06C
         MVC   STKSUBNM,EVTSUBNM       copy it to STK              @06A
         DROP  R11
*
**       Serialize ECF instance
*
         L     R3,PSAAOLD              ASCB address
         USING ASCB,R3                 set addressability
         ICM   R2,15,ASCBJBNS          STC address space?
         BZ    STC0002                 no, carry on                @06C
         CLC   0(8,R2),=CL8'INIT'      initiator address space?    @11A
         BE    STC0002                 yes                         @11A
         MVC   DSASTCNM,0(R2)          copy ECF STCname
         DROP  R3
         MVC   DSAENQ(ECFSTCL),ECFSTC  init listform
         LA    R2,DSASTCNM             major name
         ENQ   ((R2)),MF=(E,DSAENQ)    serialize resource
         ST    R15,DSARC               save RC
         LTR   R15,R15                 are we already up?
         BZ    STC0002                 no, carry on                @06C
         $WTO  MID=ECF989E             error
         OI    DSAFLG3,DSA@989E        set issued indicator
         B     STCEXIT                 exit
*
**       Parse PARM= JCL parameters
*
STC0002  DS    0H                                                  @06C
         MVI   DSAPARM,BLANK
         MVC   DSAPARM+1(DSAPARMZ-1),DSAPARM
         MVC   DSAPRFX,=CL1'?'         set CMD prefix default
         MVC   DSACSAN,=CL4'NO'        set CSA=NO default
         MVC   DSAMSUB,=CL4'zECF'      set SUB=zECF default        @06C
         MVC   DSARCVN,=CL3'YES'       set RCV=YES default
         MVC   DSAOPTS,=CL8'NOSHOW'    set OPT=NOSHOW default
         MVC   DSASSMN,=CL8'ECFLSM'    set SSM=ECFLSM default
         MVC   DSAMEMN,=CL8'ECFMSTR'   set INI=ECFMSTR default
         TM    DSAFLG2,DSA@MSAS        running in MSAS?
         BNZ   ST00004                 yes, carry on               @06C
         L     R1,DSAIPAR              input parm reg
         L     R2,0(,R1)               parmlist address
         LH    R1,0(,R2)               PARM= data length
         LTR   R1,R1                   PARM= specified?
         BZ    STC0025                 no, use defaults
         ST    R1,DSAPLEN              init PARM= data length
         BCTR  R1,0                    subtract one for EXecute
         EX    R1,COPYPARM             copy PARM= data
*
ST00004  DS    0H                                                  @06C
         LA    R2,DSAPARMZ             PARM= data length
         LA    R3,DSAPARM              PARM= data address
*
STC0005  DS    0H
         LA    R4,PARMCNT              number of PARM= keywords
         LA    R5,PARMTAB              PARM= KEYWORD TABLE ADDRESS
         USING PARM,R5                 PARM addressability
*
STC0010  DS    0H
         LH    R1,PARMKEYL             PARM= keyword length
         BCTR  R1,0                    decrement for execute
         EX    R1,COMPPKEY             PARM= keyword found?
         BE    STC0020                 yes, carry on
         LA    R5,PARM@SZE(,R5)        next keyword entry
         BCT   R4,STC0010              loop
*
STC0015  DS    0H
         LA    R3,1(,R3)               walk thru parm data
         BCT   R2,STC0005              loop
*
**       Release previous instance resources
*
         SLR   R11,R11                 zero EVT address
         $CALL PREFRE,                                                 +
               PARMPTR==CL4'INIT'      init caller
         LA    R11,DSAEVTB             local EVT address
         USING EVT,R11                 set addressability
         B     STC0025                 carry on
*
STC0020  DS    0H
         STM   R0,R5,DSASAV2           save these regs
         LR    R1,R3                   set keyword address
         L     R15,PARMEPA             keyword routine address
         BALR  R14,R15                 call keyword routine
         LM    R0,R5,DSASAV2           restore these regs
         B     STC0015                 loop
*
**       Load SSI-support LMOD into CSA
*
STC0025  DS    0H
         CLC   DSACSAN,=CL4'NO'        CSA=NO default?
         BE    STC0035                 yes, load LMOD from LPA
         TM    STKFLG1,STK@HZOS        running on zOS host?        @06A
         BNZ   STC0026                 yes, carry on               @06A
         $LOAD LMOD=DSASSMN,INTO=CSA   no, load LMOD into CSA      @06C
         B     STC0028                 carry on                    @06A
*
**       Load SSI-support LMOD into dynamic LPA
*
STC0026  DS    0H                                                  @06A
         OI    STKFLG2,STK@CURR        delete current SSI LMOD     @06A
         $DELETE LMOD=DSASSMN,FROM=LPA current LMOD instance       @06A
         NI    STKFLG2,XFF-STK@CURR    reset indicator             @06A
         $LOAD LMOD=DSASSMN,INTO=LPA   load LMOD using CSVDYLPA    @06C
         LTR   R15,R15                 successful?                 @06A
         BZ    STC0027                 yes, carry on               @06A
         ST    R15,DSARC               no, save RC                 @06A
         $WTO  MID=ECF906E,VAR1=DSASSMN no, error                  @06A
         B     STCEXIT                 exit                        @06A
*
STC0027  DS    0H                                                  @06A
         MVC   DSASSMA,EVTSSMA         copy LMOD storage address   @06A
         MVC   DSASSML,EVTSSMSZ        copy LMOD storage size      @06A
         MVC   STKLPATK,EVTLPATK       copy CVDYLPA ADD token      @06A
         OI    STKFLG1,STK@HLPA        set loaded by CSVDYLPA ADD  @06A
         L     R11,EVTSSMA             set common EVT address      @06A
         USING EVT,R11                 set addressability          @06A
         OI    DSAFLG1,DSA@SSM         SSI-support LMOD CSA-loaded @06A
         B     STC0045                 carry on                    @06A
*
STC0028  DS    0H                                                  @06A
         ST    R0,DSARSN               R0=RSN if request failed
         ST    R15,DSARC               save RC
         ST    R15,DSAXRC              save in XRC
         LTR   R15,R15                 successful?
         BZ    STC0030                 yes, carry on
         $WTO  MID=ECF906E,VAR1=DSASSMN no, error
         B     STCEXIT                 exit
*
STC0030  DS    0H
         ST    R0,DSASSML              R0=LMOD size when RC=0
         ST    R1,DSASSMA              save LMOD address
         LR    R11,R1                  get common EVT address
         USING EVT,R11                 set addressability
         OI    DSAFLG1,DSA@SSM         SSI-support LMOD CSA-loaded
         B     STC0045                 carry on
*
**       Load SSI-support LMOD from LPA
*
STC0035  DS    0H
         LOAD  EPLOC=DSASSMN,          subsystem load module           +
               ERRET=STC0040           error exit
         ST    R0,DSASSMA              save storage address
         ST    R1,DSASSML              save size(doublewords)
         LR    R11,R0                  get EVT address
         NI    DSAFLG1,XFF-DSA@SSM     LMOD loaded from LPA
         B     STC0045                 carry on
*
**       Issue load failed error message
*
STC0040  DS    0H
         MVC   DSARC,=AL4(RC8)
         MVC   DSARSN,=AL4(RSN0110)    set error RSN
         $WTO  MID=ECF906E,VAR1=DSASSMN no, error
         B     STCEXIT                 exit w/errors
*
**       Crosscheck EVT vector table size
*
STC0045  DS    0H
         L     R3,EVTCSIZE             EVT size
         CL    R3,=AL4(EVT@SIZE)       EVT size match?
         BE    STC0050                 yes, carry on
         MVC   DSARC,=AL4(RC8)         no, set error RC
         $WTO  MID=ECF907E             error msg
         B     STCEXIT                 exit
*
**       Crosscheck ECF release level
*
STC0050  DS    0H
         CLC   EVTRELNO,DSAREL         release match?
         BE    STC0055                 yes, carry on
         MVC   DSARC,=AL4(RC8)         no, set error RC
         $WTO  MID=ECF990E,            error msg                       +
               VAR1=DSAREL,VAR2=EVTRELNO
         B     STCEXIT                 exit
*
**       Relocate EVT vector table to SQA
*
STC0055  DS    0H
         L     R4,DSASSMA              ECFSSM address
         LA    R3,EVT@SIZE             EVT size
         GETMAIN RC,                   obtain EVT storage              +
               LV=(R3),                EVT storage size                +
               SP=245                  SQA subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    STC0060                 yes, carry on
         $WTO  MID=ECF021E,                                            +
               VAR1==CL7'obtain',VAR2=DSARC
*
**       Release CSA SSI-support load module
*
         TM    DSAFLG1,DSA@SSM         SSI-support lmod in CSA?
         BZ    STCERROR                no, exit w/errors
         TM    STKFLG1,STK@HZOS        running on zOS host?        @06A
         BNZ   STC0056                 yes, carry on               @06A
         $DELETE LMOD=DSASSMN,FROM=CSA delete LMOD from CSA        @06C
         ST    R0,DSARSN               save RSN
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    STCERROR                yes. This is not a bug
         MVC   DSARSN,=AL4(RSN2080)    set RSN
         $WTO  MID=ECF028E,            no, issue error msg             +
               VAR1==CL3'CSA',VAR2=DSARC,VAR3=DSARSN,VAR4=DSASSMN
         B     STCEXIT                 exit
*
STC0056  DS    0H                                                  @06A
         $DELETE LMOD=DSASSMN,FROM=LPA delete LMOD using CSVDYLPA  @06C
         ST    R0,DSARSN               save RSN                    @06A
         ST    R15,DSARC               save RC                     @06A
         LTR   R15,R15                 successful?                 @06A
         BZ    STCERROR                yes. This is not a bug      @06A
         MVC   DSARSN,=AL4(RSN2096)    set RSN                     @06A
         $WTO  MID=ECF023E,            no, issue error msg         @06A+
               VAR1==CL3'DEL',VAR2=DSASSMN,VAR3=DSARC,VAR4=DSARSN  @06A
         B     STCEXIT                 exit                        @06A
*
**       Initialize Event Capture instance
*
STC0060  DS    0H
         LR    R2,R1                   copy storage address
         LR    R5,R3                   copy length
         MVCL  R2,R4                   relocate EVT to SQA
         LR    R11,R1                  reset EVT addressability
         ST    R11,DSAEVT              init address locally
         ST    R11,STKEVTA             init EVT address in stack
         ST    R11,EVTEVTAD            init address globally
         ST    R9,EVTSTKAD             init ECFSUB STK address
         MVC   EVTPSTA,ECFPSTA         init post routine EPA
         MVC   EVTREBA,ECFREBA         init rule routine EPA
         MVC   EVTIIOA,ECFIIOA         init I/O read routine EPA
         MVC   EVTOIOA,ECFOIOA         init I/O write routine EPA
         MVC   EVTDYNA,ECFDYNA         init DYNALLOC routine EPA
         MVC   EVTVRXA,ECFVRXA         init variables routine EPA
         MVC   EVTCOMA,ECFCOMA         init command routine EPA
         MVC   EVTSTCA,ECFSTCA         init STC recovery service EPA
         MVC   EVTKLOOP,LOCKFAIL       init $LOCK failsafe value
*
         MVC   EVTASCB,PSAAOLD         init ECF ASCB address
         MVC   STKASCB,PSAAOLD         init ECF ASCB address       @06A
         MVC   EVTJSTCB,PSATOLD        init ECF JSTCB address
         MVC   EVTSSMA,DSASSMA         init ECFSSM storage address
         MVC   EVTMSAS,DSAMSAS         init MSAS ASCB address
         MVC   EVTSSMSZ,DSASSML        init ECFSSM size(doublewords)
         MVC   EVTLPATK,STKLPATK       init ECFCSM CSVDYLPA token  @06A
         MVC   EVTSUBNM,DSAMSUB        init subsystem name
         MVC   STKSUBNM,EVTSUBNM       copy it to STK              @06A
         MVC   EVTCMDCH,DSAPRFX        init command prefix character
         MVC   EVTSPNUM,=AL4(245)      init EVT subpool
         MVC   EVTSZEVT,=AL4(EVT@SIZE) init EVT size
         MVC   EVTMASTR,DSAMEMN        init INI={ECFMSTR|member}
         MVC   EVTSSMNM,DSASSMN        init SSM={ECFCSM|ECFLSM|lmod}
         MVC   EVTINITP,DSAINITP       init ECFINIT parameter
         MVC   EVTOPTSH,DSAOPTS        init OPT={SHOW|NOSHOW} option
         MVC   EVTCSAOP,DSACSAN        init CSA={NO|YES} option
*
         MVC   EVTPRLIB,STKPRLIB       init I/O buffer address
         MVC   EVTPREND,STKPREND       init I/O buffer end address
         MVC   EVTPRBUF,STKPRBUF       init I/O buffer size
         MVC   EVTPRCNT,STKPRCNT       init I/O buffer record count
         MVC   EVTB064K,STKB064K       init 1/O buffer size (64K)
         MVC   EVTB064R,STKB064R       init 1/O buffer # of records
         MVC   EVTB128K,STKB128K       init 1/O buffer size (128K)
         MVC   EVTB128R,STKB128R       init 1/O buffer # of records
         MVC   EVTB256K,STKB256K       init 1/O buffer size (256K)
         MVC   EVTB256R,STKB256R       init 1/O buffer # of records
         OI    EVTFLG3,EVT@CLIB        I/O buffer block obtained
*
         MVC   EVTRTBAD,STKRTBAD       init RTB storage table address
         MVC   EVTRTBSZ,STKRTBSZ       init RTB storage table size
         MVC   EVTRTADD,DSARTADD       init ADDSRV RTB address     @06A
         MVC   EVTRTRFR,DSARTRFR       init RFRSRV RTB address     @06A
*
         TM    DSAFLG2,DSA@SHOW        OPT=SHOW specified?
         BZ    STC0065                 no, carry on
         OI    EVTFLG2,EVT@SHOW        yes, set OPT=SHOW indicator
*
STC0065  DS    0H
         MVC   EVTZRCVY,DSARCVN        init RCV={NO|YES}
         TM    DSAFLG2,DSA@RCVN        RCV=NO specified?
         BNZ   STC0070                 yes, carry on
         OI    EVTFLG2,EVT@RCVY        no, set RCV=YES indicator
*
STC0070  DS    0H
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    STC0075                 no, carry on
         OI    EVTFLG2,EVT@DBUG        yes, set DEBUG=ON
*
STC0075  DS    0H
         TM    STKFLG1,STK@TRCE        TRACE=ON?
         BZ    STC0080                 no, carry on
         OI    EVTFLG2,EVT@TRCE        yes, set TRACE=ON
*
STC0080  DS    0H
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         ICM   R3,15,CVTSMCA           SMCA init?
         BZ    STC0085                 no, carry on
         USING SMCABASE,R3             set addressability
         MVC   EVTSYSID,SMCASID        init system ID
         MVC   STKSYSID,SMCASID        init system ID
*
STC0085  DS    0H                                                  @06A
         TM    STKFLG1,STK@HZOS        zOS host?                   @06A
         BZ    STC0090                 no, skip ECVT reference     @06A
         L     R3,FLCCVT               CVT address                 @06A
         USING CVT,R3                  set addressability          @06A
         L     R3,CVTECVT              ECFT address                @06A
         USING ECVT,R3                 set addressability          @06A
         SAM31 ,                                                   @06A
         MVC   DSALPAR,ECVTLPNM        copy LPAR name              @06A
         MVC   DSAVMID,ECVTVMNM        copy VM host ID             @06A
         SAM24 ,                                                   @06A
         MVC   EVTLPARN,DSALPAR        init LPAR name              @06A
         CLC   EVTLPARN,EVTBLNKS       LPAR name init?             @06A
         BNE   STC0090                 yes, carry on               @06A
         MVC   EVTLPARN,DSAVMID        no, init VM host ID         @06A
         MVC   EVTVMID,DSAVMID         copy VMID field             @06A
*
STC0090  DS    0H
         L     R3,PSAAOLD              ASCB address
         USING ASCB,R3                 set addressability
         MVC   EVTASID,ASCBASID        init ASID
         ICM   R2,15,ASCBJBNI          JOB address space?          @11C
         BZ    STC0092                 no                          @11C
         MVC   EVTSTCNM,0(R2)          init jobname                @11M
         B     STC0095
*
STC0092  DS    0H
         L     R2,ASCBJBNS             STC name address            @11A
         MVC   EVTSTCNM,0(R2)          init STC name
*
STC0095  DS    0H
         SAM31 ,                                                   @06A
         L     R3,ASCBASSB             ASSB address                @06A
         USING ASSB,R3                 set addressability          @06A
         MVC   EVTSTOKN,ASSBSTKN       save zECF STOKEN            @06A
         SAM24 ,                                                   @06A
         DROP  R3
         OI    EVTFLG1,EVT@INIT        EVT initialized
         NI    EVTFLG1,XFF-EVT@TERM    reset TERM indicator
         TM    DSAFLG1,DSA@SSM         SSI-support LMOD loaded in CSA?
         BZ    STC0100                 no, carry on
         OI    EVTFLG1,EVT@CSSM        set lmod loaded in CSA
         TM    STKFLG1,STK@HZOS        zOS host system?            @06A
         BNZ   STC0100                 yes, skip this              @06A
         L     R2,EVTSVCA              ECFSVC EPA                  @02A
         LA    R2,4(,R2)               skip past branch            @02A
         USING SVC,R2                  SVC addressability          @02A
         MVC   SVCSUB,EVTSUBNM         set subsystem name          @02A
         DROP  R2                                                  @02A
*
STC0100  DS    0H
         TM    STKFLG1,STK@HZOS        zOS host system?            @06A
         BZ    STC0110                 no, keep defaults           @06A
         OI    EVTFLG5,EVT@HZOS        yes, indicate zOS host      @06A
         MVC   EVTPRODN,DSAPRODN       copy SP7.n.n name           @06A
         MVC   EVTPRODI,DSAPRODI       copy HBBnnnn FMID           @06A
         TM    STKFLG1,STK@HLPA        ECFCSM loaded via CSVDYLPA? @06A
         BZ    STC0110                 no, carry on                @06A
         OI    EVTFLG5,EVT@HLPA        yes, set indicator          @06A
*                                                                  @03A
**       Create ECF instance token tables                          @03A
*                                                                  @03A
STC0110  DS    0H                                                  @06A
         $WTO  MID=ECF001I             init in progress            @06M
         OI    DSAFLG1,DSA@001         ECF001I msg issued          @06M
         $CALL TOKENS                  enable token support        @03A
*
**       Issue Event Capture init complete msg
*
STC0115  DS    0H                                                  @06C
         TM    DSAFLG3,DSA@DFLT        default PARMs?
         BZ    STC0999                 no, carry on
         MVC   DSAPARM(60),DEFPARMS    yes, show default PARMs
         $WTO  MID=ECF804I,            echo PARMs                      +
               VAR1=DSAPARM            show PARM= parameters
         XC    DSARC,DSARC             set RC
         B     STCEXIT                 exit
*
STC0999  DS    0H
         $WTO  MID=ECF004I,            echo PARMs                      +
               VAR1=DSAPARM            show PARM= parameters
         XC    DSARC,DSARC             set RC
         B     STCEXIT                 exit
*
**       INI= keyword subroutine
*
STCPINI  DS    0H
         MVI   DSAMEMN,BLANK
         MVC   DSAMEMN+1(DSAMEMNZ-1),DSAMEMN
         LH    R15,PARMKEYL            keyword length
         LA    R1,0(R15,R1)            point to keyword data
         LR    R15,R1                  copy member name address
         LH    R4,PARMDATL             member name length
*
STCINI00 DS    0H
         CLI   0(R1),C' '              end of keyword value?
         BE    STCINI10                yes, carry on
         CLI   0(R1),C','              end of keyword value?
         BE    STCINI10                yes, carry on
         LA    R1,1(,R1)               walk thru text
         BCT   R4,STCINI00             loop
*
STCINI10 DS    0H
         CR    R1,R15                  null member name?
         BER   R14                     yes, exit
         SLR   R1,R15                  get member name length
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYMEMN             copy INI=member-name
         OI    STKFLG3,STK@JINI        found in JCL PARMs
         BR    R14                     exit
*
**       SUB= keyword subroutine
*
STCPSUB  DS    0H
         MVI   DSAMSUB,BLANK
         MVC   DSAMSUB+1(DSAMSUBZ-1),DSAMSUB
         LH    R15,PARMKEYL            keyword length
         LA    R1,0(R15,R1)            point to keyword data
         LR    R15,R1                  copy lmod-name address
         LH    R4,PARMDATL             lmod-name length
*
STCSUB00 DS    0H
         CLI   0(R1),C' '              end of keyword value?
         BE    STCSUB10                yes, carry on
         CLI   0(R1),C','              end of keyword value?
         BE    STCSUB10                yes, carry on
         LA    R1,1(,R1)               walk thru text
         BCT   R4,STCSUB00             loop
*
STCSUB10 DS    0H
         CR    R1,R15                  null subsys-name?
         BER   R14                     yes, exit
         SLR   R1,R15                  get subsys-name length
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYSUBS             copy SUB=subsystem name
         OI    STKFLG3,STK@JSUB        found in JCL PARMs
         BR    R14                     exit
*
**       CMD= keyword subroutine
*
STCPRFX  DS    0H
         MVI   DSAPRFX,BLANK
         LH    R15,PARMKEYL            keyword length
         LA    R1,0(R15,R1)            point to keyword data
         LR    R15,R1                  copy lmod-name address
         LH    R4,PARMDATL             lmod-name length
*
STCPFX00 DS    0H
         CLI   0(R1),C' '              end of keyword value?
         BE    STCPFX10                yes, carry on
         CLI   0(R1),C','              end of keyword value?
         BE    STCPFX10                yes, carry on
         LA    R1,1(,R1)               walk thru text
         BCT   R4,STCPFX00             loop
*
STCPFX10 DS    0H
         CR    R1,R15                  null comand prefix?
         BNE   STCPFX15                no, test further            @08C
         MVC   DSAPRFX,C'?'            set default prefix char     @08A
         B     STCPFX20                carry on                    @08A
*
STCPFX15 DS    0H                                                  @08A
         SLR   R1,R15                  get command prefix length
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYPRFX             copy CMDPFX=command-prefix
         OI    STKFLG3,STK@JCMD        found in JCL PARMs
         CLI   DSAPRFX,C'$'            restricted command prefix?
         BNE   STCPFX20                no, exit
         MVC   DSARSN,=AL4(RSN0128)    set error RSN
         $WTO  MID=ECF012E,                                        @06C+
               VAR1=DSAPRFX,VAR2=DSARC,VAR3=DSARSN
         B     STCABEND                ABEND                       @08C
*
STCPFX20 DS    0H
         USING PSA,0
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTJESCT             JES control table
         USING JESCT,R3                set addressability
         L     R4,JESSSCT              top SSCT address
         USING SSCT,R4                 set addressability
         MVC   DSARSN,=AL4(RSN0130)    set error RSN
         $RETRY STCPFX40,              activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
STCPFX30 DS    0H
         LA    R3,SSCTSIZE(,R4)        SCTX address
         USING SCTX,R3                 set addressability
         CLC   SCTXID,=CL4'SCTX'       valid indeed?
         BNE   STCPFX40                no, test further
         CLC   SCTXCPFX,DSAPRFX        command prefix match?
         BE    STCPFX70                yes, test further
*
STCPFX40 DS    0H
         ICM   R4,15,SSCTSCTA          get next SSCT
         BNZ   STCPFX30                loop
         $RETRY OFF                    turn off retry
*
         TM    STKFLG1,STK@HZOS        running on zOS host?        @08A
         BZR   R14                     no, exit                    @08A
         MVI   DSAPREFX,BLANK
         MVC   DSAPREFX+1(7),DSAPREFX  clear CPT prefix field      @08A
         MVC   DSAOWNER,DSAPREFX       clear CPT owner field       @08A
         MVC   DSAPREFX(1),DSAPRFX     init command prefix         @08A
         MVC   DSAOWNER(4),DSAMSUB     init subsystem owner        @08A
*
         ST    R14,DSAGR14             protect return address      @08A
         CPF   REQUEST=DELETE,         delete prefix               @08A+
               PREFIX=DSAPREFX,        prefix character                +
               MF=(E,DSACPF)
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         TM    STKFLG1,STK@DBUG        DEBUG=ON?                   @08A
         BZ    STCPFX50                no                          @08A
         $WTO  MID=ECF198I,                                        @08A+
               VAR1==CL6'Delete',VAR2=DSARC,VAR3=DSARSN
*
STCPFX50 DS    0H
         CPF   REQUEST=DEFINE,         define prefix               @08A+
               OWNER=DSAOWNER,         ECF instance is owner           +
               PREFIX=DSAPREFX,        prefix character                +
               SCOPE=SYSTEM,           this system only                +
               REMOVE=NO,              keep prefix with commands       +
               FAILDISP=RETAIN,        keep it defined until deleted   +
               MF=(E,DSACPF)
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         TM    STKFLG1,STK@DBUG        DEBUG=ON?                   @08A
         BZ    STCPFX60                no                          @08A
         $WTO  MID=ECF198I,                                        @08A+
               VAR1==CL6'Define',VAR2=DSARC,VAR3=DSARSN
*
STCPFX60 DS    0H                                                  @08A
         CLC   DSARC,=AL4(RC0)         prefix registered OK?       @08A
         BE    STCPFX65                yes                         @08A
         $WTO  MID=ECF012E,                                        @08A+
               VAR1=DSAPRFX,VAR2=DSARC,VAR3=DSARSN
         MVC   DSARSN,=AL4(RSN0194)    set error RSN
         B     STCABEND                ABEND                       @08C
*
STCPFX65 DS    0H
         L     R14,DSAGR14             restore return address      @08A
         BR    R14                     exit
*
STCPFX70 DS    0H
         CLC   SSCTSNAM,DSAMSUB        our subsystem?
         BE    STCPFX40                yes, loop
         $WTO  MID=ECF013E,                                            +
               VAR1=DSAPRFX,VAR2=SSCTSNAM
         B     STCABEND                ABEND                       @08C
         DROP  R3,R4
*
**       SSM= keyword subroutine
*
STCPSSM  DS    0H
         MVI   DSASSMN,BLANK
         MVC   DSASSMN+1(DSASSMNZ-1),DSASSMN
         LH    R15,PARMKEYL            keyword length
         LA    R1,0(R15,R1)            point to keyword data
         LR    R15,R1                  copy lmod-name address
         LH    R4,PARMDATL             lmod-name length
*
STCSSM00 DS    0H
         CLI   0(R1),C' '              end of keyword value?
         BE    STCSSM10                yes, carry on
         CLI   0(R1),C','              end of keyword value?
         BE    STCSSM10                yes, carry on
         LA    R1,1(,R1)               walk thru text
         BCT   R4,STCSSM00             loop
*
STCSSM10 DS    0H
         CR    R1,R15                  null lmod-name?
         BER   R14                     yes, exit
         SLR   R1,R15                  get lmod-name length
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYLMOD             copy SSM=lmod-name
         OI    STKFLG3,STK@JSSM        found in JCL PARMs
         BR    R14                     exit
*
**       OPT= keyword subroutine
*
STCPOPT  DS    0H
         MVI   DSAOPTS,BLANK
         MVC   DSAOPTS+1(DSAOPTSZ-1),DSAOPTS
         LH    R15,PARMKEYL            keyword length
         LA    R1,0(R15,R1)            point to keyword data
         LR    R15,R1                  copy option value address
         LH    R4,PARMDATL             option value length
*
STCOPT00 DS    0H
         CLI   0(R1),C' '              end of keyword value?
         BE    STCOPT10                yes, carry on
         CLI   0(R1),C','              end of keyword value?
         BE    STCOPT10                yes, carry on
         LA    R1,1(,R1)               walk thru text
         BCT   R4,STCOPT00             loop
*
STCOPT10 DS    0H
         CR    R1,R15                  null option?
         BE    STCOPT20                yes, carry on
         SLR   R1,R15                  get option value address
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYOPTS             copy OPT=option
         OI    STKFLG3,STK@JOPT        found in JCL PARMs
*
STCOPT20 DS    0H
         OI    DSAFLG2,DSA@SHOW        assume OPT=SHOW specified
         CLC   DSAOPTS,=CL8'SHOW'      OPT=SHOW?
         BER   R14                     yes, exit
         NI    DSAFLG2,XFF-DSA@SHOW    no, indicate OPT=NOSHOW
         BR    R14                     exit
*
**       RCV= keyword subroutine
*
STCRCVY  DS    0H
         MVI   DSARCVN,BLANK
         MVC   DSARCVN+1(DSARCVSZ-1),DSARCVN
         LH    R15,PARMKEYL            keyword length
         LA    R1,0(R15,R1)            point to keyword data
         LR    R15,R1                  copy option value address
         LH    R4,PARMDATL             option value length
*
STCRCV00 DS    0H
         CLI   0(R1),C' '              end of keyword value?
         BE    STCRCV10                yes, carry on
         CLI   0(R1),C','              end of keyword value?
         BE    STCRCV10                yes, carry on
         LA    R1,1(,R1)               walk thru text
         BCT   R4,STCRCV00             loop
*
STCRCV10 DS    0H
         CR    R1,R15                  null option?
         BE    STCRCV20                yes, carry on
         SLR   R1,R15                  get option value address
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYRCVY             copy RCV=option
         OI    STKFLG3,STK@JRCV        found in JCL PARMs
*
STCRCV20 DS    0H
         OI    DSAFLG2,DSA@RCVN        assume RCV=NO specified
         CLC   DSARCVN,=CL3'NO'        RCV=NO?
         BER   R14                     yes, exit
         NI    DSAFLG2,XFF-DSA@RCVN    no, indicate RCV=NO
         BR    R14                     exit
*
**       CSA= keyword subroutine
*
STCPCSA  DS    0H
         MVI   DSACSAN,BLANK
         MVC   DSACSAN+1(DSACSASZ-1),DSACSAN
         LH    R15,PARMKEYL            keyword length
         LA    R1,0(R15,R1)            point to keyword data
         LR    R15,R1                  copy option value address
         LH    R4,PARMDATL             option value length
*
STCCSA00 DS    0H
         CLI   0(R1),C' '              end of keyword value?
         BE    STCCSA10                yes, carry on
         CLI   0(R1),C','              end of keyword value?
         BE    STCCSA10                yes, carry on
         LA    R1,1(,R1)               walk thru text
         BCT   R4,STCCSA00             loop
*
STCCSA10 DS    0H
         CR    R1,R15                  null option?
         BE    STCCSA20                yes, carry on
         SLR   R1,R15                  get option value address
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYCSAP             copy CSA=option
         OI    STKFLG3,STK@JCSA        found in JCL PARMs
*
STCCSA20 DS    0H
         OI    DSAFLG2,DSA@CSAN        assume CSA=YES specified
         CLC   DSACSAN,=CL4'YES'       CSA=YES?
         BER   R14                     yes, exit
         NI    DSAFLG2,XFF-DSA@CSAN    no, indicate CSA=NO
         BR    R14                     exit
*
**       DEBUG= keyword subroutine
*
STCDBUG  DS    0H
         MVI   DSADBUG,BLANK
         MVC   DSADBUG+1(DSADBGSZ-1),DSADBUG
         LH    R15,PARMKEYL            keyword length
         LA    R1,0(R15,R1)            point to keyword data
         LR    R15,R1                  copy option value address
         LH    R4,PARMDATL             option value length
*
STCDBG00 DS    0H
         CLI   0(R1),C' '              end of keyword value?
         BE    STCDBG10                yes, carry on
         CLI   0(R1),C','              end of keyword value?
         BE    STCDBG10                yes, carry on
         LA    R1,1(,R1)               walk thru text
         BCT   R4,STCDBG00             loop
*
STCDBG10 DS    0H
         CR    R1,R15                  null option?
         BE    STCDBG20                yes, carry on
         SLR   R1,R15                  get option value address
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYDBUG             copy DEBUG=opion
*
STCDBG20 DS    0H
         OI    STKFLG1,STK@DPRM        DEBUG= specified by JCL PARM
         OI    STKFLG1,STK@DBUG        assume DEBUG=ON specified
         CLC   DSADBUG,=CL3'ON'        DEBUG=ON?
         BER   R14                     yes, exit
         NI    STKFLG1,XFF-STK@DBUG    no, indicate DEBUG=OFF
         BR    R14                     exit
*
**       TRACE= keyword subroutine
*
STCTRCE  DS    0H
         MVI   DSATRCE,BLANK
         MVC   DSATRCE+1(DSATRCSZ-1),DSATRCE
         LH    R15,PARMKEYL            keyword length
         LA    R1,0(R15,R1)            point to keyword data
         LR    R15,R1                  copy option value address
         LH    R4,PARMDATL             option value length
*
STCTRC00 DS    0H
         CLI   0(R1),C' '              end of keyword value?
         BE    STCTRC10                yes, carry on
         CLI   0(R1),C','              end of keyword value?
         BE    STCTRC10                yes, carry on
         LA    R1,1(,R1)               walk thru text
         BCT   R4,STCTRC00             loop
*
STCTRC10 DS    0H
         CR    R1,R15                  null option?
         BE    STCTRC20                yes, carry on
         SLR   R1,R15                  get option value address
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYTRCE             copy TRACE=opion
*
STCTRC20 DS    0H
         OI    STKFLG1,STK@TPRM        TRACE= specified by JCL PARM
         OI    STKFLG1,STK@TRCE        assume TRACE=ON specified
         CLC   DSATRCE,=CL3'ON'        TRACE=ON?
         BER   R14                     yes, exit
         NI    STKFLG1,XFF-STK@TRCE    no, indicate TRACE=OFF
         BR    R14                     exit
*
**       Error exit
*
STCERROR DS    0H
         MVC   DSARC,=AL4(RC16)        set error RC
         MVC   DSARSN,=AL4(RSN0106)    set error RSN
*
**       Exit
*
STCEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*
STCABEND DS    0H                                                  @08A
         $RETRY OFF                    disable recovery            @08A
         MVC   DSARC,=AL4(RC12)        set error RC                @08A
         L     R3,DSARSN               show RSN in R3              @08A
         ABEND X'FF1',DUMP,REASON=(R3)                             @08A
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COMPPKEY CLC   0(*-*,R3),PARMKEYV      EXecuted instruction
COPYPARM MVC   DSAPARM(*-*),2(R2)      EXecuted instruction
COPYMEMN MVC   DSAMEMN(*-*),0(R15)     EXecuted instruction
COPYLMOD MVC   DSASSMN(*-*),0(R15)     EXecuted instruction
COPYOPTS MVC   DSAOPTS(*-*),0(R15)     EXecuted instruction
COPYRCVY MVC   DSARCVN(*-*),0(R15)     EXecuted instruction
COPYCSAP MVC   DSACSAN(*-*),0(R15)     EXecuted instruction
COPYSUBS MVC   DSAMSUB(*-*),0(R15)     EXecuted instruction
COPYPRFX MVC   DSAPRFX(*-*),0(R15)     EXecuted instruction
COPYDBUG MVC   DSADBUG(*-*),0(R15)     EXecuted instruction
COPYTRCE MVC   DSATRCE(*-*),0(R15)     EXecuted instruction
*---------------------------------------------------------------------*
*        JCL PARM= Keyword Table                                      *
*            PARMKEYL +00 PARM keyword length                         *
*            PARMDATL +02 PARM keyword name length                    *
*            PARMEPA  +04 PARM subroutine entry address               *
*            PARMKEYV +08 PARM keyword                                *
*--------+---------+---------+---------+---------+---------+---------+*
PARMTAB  DS    0F
         DC    AL2(04),AL2(08),A(STCPINI),CL8'INI='    {ECFMSTR|member}
         DC    AL2(04),AL2(04),A(STCPSUB),CL8'SUB='    {ECF|any}
         DC    AL2(04),AL2(01),A(STCPRFX),CL8'CMD='    {CMD=?|other}
         DC    AL2(04),AL2(06),A(STCPOPT),CL8'OPT='    {SHOW|NOSHOW}
         DC    AL2(04),AL2(08),A(STCPSSM),CL8'SSM='    {ECFSSM|Lmod}
         DC    AL2(04),AL2(03),A(STCPCSA),CL8'CSA='    {NO|YES}
         DC    AL2(04),AL2(03),A(STCRCVY),CL8'RCV='    {NO|YES}
         DC    AL2(06),AL2(03),A(STCDBUG),CL8'DEBUG='  {ON|OFF}
PARMENTY DC    AL2(06),AL2(03),A(STCTRCE),CL8'TRACE='  {ON|OFF}
PARMSIZE EQU   *-PARMENTY
PARMTABL EQU   *-PARMTAB
PARMCNT  EQU   (*-PARMTAB)/PARMSIZE
*---------------------------------------------------------------------*
*        VCONs                                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFPSTA  DC    V(ECFPST)               ECFPST EPA
ECFIEWA  DC    V(ECFIEW)               ECFIEW EPA
ECFREBA  DC    V(ECFREB)               ECFREB EPA
ECFIIOA  DC    V(ECFIIO)               ECFIIO EPA
ECFOIOA  DC    V(ECFOIO)               ECFOIO EPA
ECFDYNA  DC    V(ECFDYN)               ECFDYN EPA
ECFVRXA  DC    V(ECFVRX)               ECFVRX EPA
ECFCOMA  DC    V(ECFCOM)               ECFCOM EPA
ECFSTCA  DC    V(ECFSTC)               ECFSTC EPA
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
LOCKFAIL DC    AL4(4096*4096)          $LOCK failsafe value
         DS  0C
DEFPARMS DC  CL60'SUB=ECF,CMD=?,INI=ECFMSTR,SSM=ECFLSM,CSA=NO,RCV=YES'
*---------------------------------------------------------------------*
*        ECF Instance Serialization                                   *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFSTC   ENQ   (0,STCINIT,E,8,SYSTEM),RET=USE,MF=L
ECFSTCL  EQU   *-ECFSTC
         DS    0C
STCINIT  DC    CL8'ECFINIT'            Minor name
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: INISUB                                                     */
*/*                                                                  */
*/* Function: Initialize Event Capture Facility subsystem            */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
INISUB   $SUBINI
         USING PSA,0                   FLC
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set RC
         MVC   DSARSN,=AL4(RSN0632)    set RSN
         $RETRY INIEXIT,               activate retry                  +
               SDUMP=YES,              take SVC dump                   +
               RSN=DSARSN              ABEND RSN
*
**       Serialize subsystem initialization
*
         MVC   DSAENQ(ENQINIL),ENQINI  init listform
         ENQ   MF=(E,DSAENQ)           serialize resource
         OI    DSAFLG2,DSA@ENQ         set ENQ indicator
*
**       Serialize selected SVC number                           15@06A
*
         LA    R2,SVC255               minor name
         LA    R3,EVTSVCNM             minor name
         MVC   DSAENQ(ECFSVCL),ECFSVC  init listform
         ENQ   ((R2),(R3)),MF=(E,DSAENQ)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 SVC number in use?
         BZ    INI0000                 no, carry on
         $WTO  MID=ECF985E,            error                           +
               VAR1=EVTSVCNM,VAR2==CL4'?'
         B     INIABEND                ABEND
*
**       Serialize SVCUPDTE service call                         35@06A
*
INI0000  DS    0H
         TM    STKFLG1,STK@HZOS        zOS host system?
         BZ    INI0005                 no, MVS system
         TM    EVTFLG4,EVT@USVC        SVC=number specified?
         BZ    INI0030                 no, skip SVC install
         MVC   DSAENQ(SVCENQL),SVCENQ  init listform
         ENQ   MF=(E,DSAENQ)           serialize resource
         OI    DSAFLG3,DSA@SVCQ        set ENQ indicator
*
**       Install zOS SVC support manager
*
         XR    R2,R2                   scrub
         IC    R2,EVTUSVCN             dynamic SVC number
         L     R3,EVTSVCA              ECFSVC entry address
         ST    R3,EVTSVCEA             save for status display
         MVC   DSASVCUP(SVCUPDTL),SVCUPDAT
         SAM31 ,
         SVCUPDTE (2),EP=(3),USEECVT=YES,                              +
               MF=(E,DSASVCUP)
         SAM24 ,
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   INI0002                 no, error
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    INI0030                 no, skip debug msg
         $WTO  MID=ECF119I,VAR1=EVTSVCNM
         B     INI0030                 carry on
*
**       Issue SVCUPDTE replace failed error msg
*
INI0002  DS    0H
         $WTO  MID=ECF984E,                                            +
               VAR1==CL7'Replace',     show function                   +
               VAR2=EVTSVCNM,          show SVC number                 +
               VAR3=DSARC              show RC
         B     INIABEND                ABEND
*
**       Install MVS SVC support manager
*
INI0005  DS    0H
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTABEND             SCVT address
         USING SCVTSECT,R3             set addressability
         L     R3,SCVTSVCT             SVC table address
         XR    R1,R1
         IC    R1,EVTUSVCN             SVC=number
         SLL   R1,3                    multiply by 8
         LA    R3,0(R1,R3)             SVC table entry
         USING SVCENTRY,R3             set addressability
         L     R2,SVCEP                SVC EPA                   15@02A
         LA    R2,4(,R2)               skip past branch
         USING SVC,R2                  set addressability
         CLC   SVCNAME,=CL8'ECFSVC'    previously installed?
         BNE   INI0020                 no, carry on
         CLC   SVCSUB,EVTSUBNM         same subsystem owner?
         BE    INI0020                 yes, carry on
*
INI0010  DS    0H
         MVC   DSARC,=AL4(RC12)        set RC
         MVC   DSARSN,=AL4(RSN0204)    set RSN
         $WTO  MID=ECF985E,VAR1=EVTSVCNM,VAR2=SVCSUB
         B     INIABEND                ABEND
*
INI0020  DS    0H
         ST    R3,EVTSVCEA             save for status display
         MVC   EVTSVCEN,0(R3)          save original entry
         XC    SVCENTRY(8),SVCENTRY    clear SVC entry
         MVC   SVCEP,EVTSVCA           set ECFSVC EPA
         OI    SVCATTR1,SVCTP34        TYPE-3 SVC
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    INI0030                 no, skip debug msg
         $WTO  MID=ECF119I,VAR1=EVTSVCNM
         DROP  R2,R3
*
**       Issue initialization in progress msg
*
INI0030  DS    0H
         TM    DSAFLG1,DSA@001         ECF001I msg issued?
         BNZ   INI0100                 yes, skip it
         $WTO  MID=ECF001I             no, issue init in progress
*
**       Validity check $SSVT block length
*
INI0100  DS    0H
         LA    R1,SSVTFSIZ             SSVT matrix length
         LA    R2,$SSVTMX              $SSVT matrix length
         CR    R1,R2                   valid indeed?
         BE    INI0200                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set RC
         MVC   DSARSN,=AL4(RSN0104)    set RSN
         $WTO  MID=ECF986E,VAR1=DSARC,VAR2=DSARSN
         B     INIABEND                ABEND
*
INI0200  DS    0H
         LA    R1,SSVTSIZE             SSVT block length
         LA    R2,$SSVT@SZ             $SSVT block length
         CR    R1,R2                   valid indeed?
         BE    INI0300                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set RC
         $WTO  MID=ECF986E,VAR1=DSARC,VAR2=DSARSN
         B     INIABEND                ABEND
*
**       Relocate SSVT vector table to CSA
*
INI0300  DS    0H
         LA    R5,$SSVT@SZ             my SSVT size
         ST    R5,EVTSSVTZ             save my SSVT size
         GETMAIN RC,                   obtain SSVT storage             +
               LV=$SSVT@SZ,            SSVT size                       +
               SP=241                  common subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    INI0310                 yes, carry on
         MVC   DSARSN,=AL4(RSN0126)    set RSN
         $WTO  MID=ECF018E,            no, error                       +
               VAR1==CL4'SSVT',        show element                    +
               VAR2==CL7'obtain',      show function                   +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
         B     INIABEND                ABEND
*
INI0310  DS    0H
         LR    R2,R1                   copy storage address
         ST    R2,EVTSSVT              save SSVT address
         LA    R3,SSVTSIZE             SSVT length
         L     R4,EVT$SSVT             my SSVT address
         MVCL  R2,R4                   relocate $SSVT to CSA
         OI    DSAFLG1,DSA@CSA         $SSVT relocated indicator
*
**       Locate events capture subsystem SSCT
*
         USING PSA,0
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTJESCT             JES control table
         USING JESCT,R3                set addressability
         L     R4,JESSSCT              top SSCT address
         USING SSCT,R4                 set addressability
*
INI0400  DS    0H
         CLC   SSCTSNAM,EVTSUBNM       are we there?
         BNE   INI0500                 no, test further
         ST    R4,EVTSSCT              save SSCT address
         B     INI0900                 carry on
*
INI0500  DS    0H
         ICM   R4,15,SSCTSCTA          get next SSCT
         BNZ   INI0400                 find us
*
**       Initialize SSCT control table
*
         GETMAIN RC,                   obtain SSCT                     +
               LV=SSCTSIZE+SCTX@SZE,   SSCT+SCTX size                  +
               SP=241                  common subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    INI0600                 yes, carry on
         $WTO  MID=ECF018E,            no, error                       +
               VAR1==CL4'SSCT',        show element                    +
               VAR2==CL7'obtain',      show function                   +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
         B     INIABEND                ABEND
*
INI0600  DS    0H
         LR    R4,R1                   copy storage address
         ST    R4,EVTSSCT              save SSCT address
         XC    SSCT(SSCTSIZE+SCTX@SZE),SSCT zero SSCT/SCTX
         MVC   SSCTID,=CL4'SSCT'       ID SSCT
         MVC   SSCTSNAM,EVTSUBNM       set subsystem name
         LA    R3,SSCTSIZE(,R4)        SCTX extension address
         USING SCTX,R3                 set addressability
         ST    R3,EVTSCTX              save SCTX address           @07A
         MVC   SCTXID,=CL4'SCTX'       ID SCTX
         MVC   SCTXSTCN,EVTSTCNM       init subsystem owner
         MVC   SCTXEVTA,EVTEVTAD       init EVT address
         MVC   SCTXEVTZ,EVTSZEVT       init EVT size
         MVC   SCTXSPNM,EVTSPNUM       init EVT subpool
         MVC   SCTXCPFX,EVTCMDCH       init CMDPFX=prefix character
         MVC   SCTXSREQ,EVTSSREQ       init SSREQ={NO|YES} option
         MVC   SCTXLPTK,EVTLPATK       init CSVDYLPA ADD token     @06A
         DROP  R3
*
**       Add control table to SSCT chain
*
INI0700  DS    0H
         L     R2,EVTSSCT              our SSCT address
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTJESCT             JES control table
         USING JESCT,R3                set addressability
         L     R4,JESSSCT              top SSCT address
*
INI0800  DS    0H
         LR    R1,R4                   protect last SSCT address
         ICM   R4,15,SSCTSCTA          last SSCT?
         BNZ   INI0800                 no, loop
         LR    R4,R1                   restore las SSCT address
         XR    R0,R0                   prime for compare & swap
         CS    R0,R2,SSCTSCTA          chain our subsystem
         BNZ   INI0700                 changed, try again
         OI    DSAFLG1,DSA@CHN         SSCT chained indicator
*
**       Activate event capture subsystem
*
INI0900  DS    0H
         L     R2,EVTSSVT              SSVT address
         L     R4,EVTSSCT              SSCT address
         ST    R11,SSCTSUSE            set EVT address
         XR    R0,R0                   prime for compare & swap
         CS    R0,R2,SSCTSSVT          activate subsystem
         OI    EVTFLG1,EVT@SACT        set active indicator
         NI    EVTFLG1,XFF-EVT@TERM    reset TERM indicator
         LA    R3,SSCTSIZE(,R4)        SCTX extension address
         USING SCTX,R3                 set addressability
         ST    R3,EVTSCTX              save SCTX address           @07A
         MVC   SCTXID,=CL4'SCTX'       ID SCTX
         MVC   SCTXSTCN,EVTSTCNM       init subsystem owner
         MVC   SCTXEVTA,EVTEVTAD       init EVT address
         MVC   SCTXEVTZ,EVTSZEVT       init EVT size
         MVC   SCTXSPNM,EVTSPNUM       init EVT subpool
         MVC   SCTXCPFX,EVTCMDCH       init CMDPFX=prefix character
         MVC   SCTXSREQ,EVTSSREQ       init SSREQ={NO|YES} option
         MVC   SCTXLPTK,EVTLPATK       init CSVDYLPA ADD token     @06A
         DROP  R3
*
**       Initialize PC services environment
*
INI0910  DS    0H
         $CALL XPCINI                                              @07A
         LTR   R15,R15                 successful?                 @07A
         BNZ   INIABEND                no, ABEND                   @07A
*
**       Create ECF subsystem instance token
*
         $CALL CRTOKEN                 create token                @07C
*
**       Register WTO-broadcasts listener
*
         TM    STKFLG1,STK@HZOS        zOS host system?            @06A
         BNZ   INI0930                 yes, ignore SSREQ={NO|YES}  @06A
         CLC   EVTSSREQ,=CL3'YES'      SSREQ=YES specified?
         BNE   INI0940                 no, disable if enabled
*
INI0930  DS    0H                                                  @06A
         $SSIREQ ENABLE                yes, call ECFSSI routine
         B     INI0950                 exit
*
**       Deregister WTO-broadcasts listener
*
INI0940  DS    0H
         TM    STKFLG1,STK@HZOS        zOS host system?            @06A
         BNZ   INI0950                 yes, ignore SSREQ=YES       @06A
         $SSIREQ DISABLE               no, disable if enabled
*
**       Enable DIE timer interrupt exit
*
INI0950  DS    0H
         ICM   R1,15,EVTDINTV          valid timer interval?
         BZ    INI0960                 no, skip DIE enable         @06C
         $SETDIE ENABLE                yes, enable DIE timer
*
INI0960  DS    0H
         OI    DSAFLG3,DSA@INIT        set complete indicator      @06A
*
**       Release initialization serialization
*
INI0999  DS    0H
         TM    DSAFLG2,DSA@ENQ         DEQ required?
         BZ    INI099A                 no, skip DEQ                @06A
         NI    DSAFLG2,XFF-DSA@ENQ     yes, reset ENQ indicator
         MVC   DSADEQ(DEQINIL),DEQINI  init listform
         DEQ   MF=(E,DSADEQ)           release serialization
*
INI099A  DS    0H                                                10@06A
         TM    DSAFLG3,DSA@SVCQ        DEQ required?
         BZ    INI9999                 no, skip DEQ
         NI    DSAFLG3,XFF-DSA@SVCQ    yes, reset ENQ indicator
         MVC   DSADEQ(SVCDEQL),SVCDEQ  init listform
         DEQ   MF=(E,DSADEQ)           release serialization
*
INI9999  DS    0H
         TM    DSAFLG3,DSA@INIT        init complete?
         BZ    INIEXIT                 no, exit
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*---------------------------------------------------------------------*
*        Exit routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
INIEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        ABEND exit routine                                           *
*--------+---------+---------+---------+---------+---------+---------+*
INIABEND DS    0H
         $RETRY OFF                    disable recovery
         L     R3,DSARSN               show RSN in R3
         ABEND X'FF1',DUMP,REASON=(R3) ABEND
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFREQ   DC    V(ECFREQ)               ECFREQ EPA
*---------------------------------------------------------------------*
*        SVCUPDTE listforms                                       @06A*
*--------+---------+---------+---------+---------+---------+---------+*
SVCUPDAT DS    0F
         SVCUPDTE 0,REPLACE,EP=0,TYPE=3,AR=NO,APF=NO,NPRMPT=YES,MF=L
SVCUPDTL EQU   *-SVCUPDAT
         DS    0F
SVCENQ   ENQ   (SVCMAJ,SVCMIN,E,8,SYSTEM),RET=HAVE,MF=L
SVCENQL  EQU   *-SVCENQ
         DS    0F
SVCDEQ   DEQ   (SVCMAJ,SVCMIN,8,SYSTEM),MF=L
SVCDEQL  EQU   *-SVCDEQ
         DS    0F
ECFSVC   ENQ   (SVC255,SVC255M,E,3,SYSTEM),RET=USE,MF=L
ECFSVCL  EQU   *-ECFSVC
         DS    0C
SVCMAJ   DC    CL8'SYSZSVC'
SVCMIN   DC    CL8'TABLE'
SVC255   DC    CL8'SVCUPDTE'
SVC255M  DC    CL3'255'
*---------------------------------------------------------------------*
*        Subsystem initialization serialization                       *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ENQINI   ENQ   (SSIMAJ,SSIMIN,E,8,SYSTEM),RET=NONE,MF=L
ENQINIL  EQU   *-ENQINI
         DS    0F
DEQINI   DEQ   (SSIMAJ,SSIMIN,8,SYSTEM),MF=L
DEQINIL  EQU   *-DEQINI
         DS    0C
SSIMAJ   DC    CL8'ECFSSI'             Major name
SSIMIN   DC    CL8'ECFINIT'            Minor name
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ATTACH                                                     */
*/*                                                                  */
*/* Function: Attach Event Capture subtasks                          */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ATTACH   $SUBINI
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARSN,=AL4(RSN0506)    RSN
         $RETRY ATCABND,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Attach ECFSRV(S34) event subtask
*
         MVC   DSATASK,=CL8'S34SRV'
         MVC   DSATTACH(ATTACHZL),ATTACHZ
         ATTACH EPLOC=ECFSRV,                                          +
               TID=S34,                task ID                         +
               SM=SUPV,                Supervisor                      +
               KEY=PROP,               key=8                           +
               DISP=YES,               dispatchable                    +
               SZERO=NO,               don't share SP=0                +
               JSTCB=NO,               attach as subtask               +
               SVAREA=YES,             save area required              +
               MF=(E,(R11)),SF=(E,DSATTACH)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ATCABND                 no, ABEND
         ST    R1,EVTCMTCB             save TCB address
         USING TCB,R1                  set addressability
         MVC   TCBUSER,DSASTK34        set stack address
         L     R4,TCBSTCB              STCB address                @10A
         USING STCB,R4                 set addressability          @10A
         SAM31 ,                                                   @10A
         MVC   EVTCMTKN,STCBTTKN       copy TCB token              @10A
         SAM24 ,                                                   @10A
         L     R3,DSASTK34             get stack address
         AL    R3,DSASDSA              compute STK address
         ST    R3,EVTCMSTK             set STK address globally
*
**       Attach ECFSRV(S35) event subtask
*
         MVC   DSATASK,=CL8'S35SRV'
         MVC   DSATTACH(ATTACHZL),ATTACHZ
         ATTACH EPLOC=ECFSRV,                                          +
               TID=S35,                task ID                         +
               SM=SUPV,                Supervisor                      +
               KEY=PROP,               key=8                           +
               DISP=YES,               dispatchable                    +
               SZERO=NO,               don't share SP=0                +
               JSTCB=NO,               attach as subtask               +
               SVAREA=YES,             save area required              +
               MF=(E,(R11)),SF=(E,DSATTACH)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ATCABND                 no, ABEND
         ST    R1,EVTWTTCB             save TCB address
         MVC   TCBUSER,DSASTK35        set stack address
         L     R4,TCBSTCB              STCB address                @10A
         SAM31 ,                                                   @10A
         MVC   EVTWTTKN,STCBTTKN       copy TCB token              @10A
         SAM24 ,                                                   @10A
         L     R3,DSASTK35             get stack address
         AL    R3,DSASDSA              compute STK address
         ST    R3,EVTWTSTK             set STK address globally
*
**       Attach ECFSRV(RFR) event subtask
*
         MVC   DSATASK,=CL8'RFRSRV'
         MVC   DSATTACH(ATTACHZL),ATTACHZ
         ATTACH EPLOC=ECFSRV,                                          +
               TID=RFR,                task ID                         +
               SM=SUPV,                Supervisor                      +
               KEY=PROP,               key=8                           +
               DISP=YES,               dispatchable                    +
               SZERO=NO,               don't share SP=0                +
               JSTCB=NO,               attach as subtask               +
               SVAREA=YES,             save area required              +
               MF=(E,(R11)),SF=(E,DSATTACH)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ATCABND                 no, ABEND
         ST    R1,EVTRFTCB             save TCB address
         MVC   TCBUSER,DSASTKRF        set stack address
         L     R4,TCBSTCB              STCB address                @10A
         SAM31 ,                                                   @10A
         MVC   EVTRFTKN,STCBTTKN       copy TCB token              @10A
         SAM24 ,                                                   @10A
         L     R3,DSASTKRF             get stack address
         AL    R3,DSASDSA              compute STK address
         ST    R3,EVTRFSTK             set STK address globally
*
**       Attach ECFSRV(ADD) event subtask
*
         MVC   DSATASK,=CL8'ADDSRV'
         MVC   DSATTACH(ATTACHZL),ATTACHZ
         ATTACH EPLOC=ECFSRV,                                          +
               TID=ADD,                task ID                         +
               SM=SUPV,                Supervisor                      +
               KEY=PROP,               key=8                           +
               DISP=YES,               dispatchable                    +
               SZERO=NO,               don't share SP=0                +
               JSTCB=NO,               attach as subtask               +
               SVAREA=YES,             save area required              +
               MF=(E,(R11)),SF=(E,DSATTACH)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ATCABND                 no, ABEND
         ST    R1,EVTADTCB             save TCB address
         MVC   TCBUSER,DSASTKAD        set stack address
         L     R4,TCBSTCB              STCB address                @10A
         SAM31 ,                                                   @10A
         MVC   EVTADTKN,STCBTTKN       copy TCB token              @10A
         SAM24 ,                                                   @10A
         L     R3,DSASTKAD             get stack address
         AL    R3,DSASDSA              compute STK address
         ST    R3,EVTADSTK             set STK address globally
*
**       Attach ECFSRV(COM) event subtask
*
         MVC   DSATASK,=CL8'COMSRV'
         MVC   DSATTACH(ATTACHZL),ATTACHZ
         ATTACH EPLOC=ECFSRV,                                          +
               TID=COM,                task ID                         +
               SM=SUPV,                Supervisor                      +
               KEY=PROP,               key=8                           +
               DISP=YES,               dispatchable                    +
               SZERO=NO,               don't share SP=0                +
               JSTCB=NO,               attach as subtask               +
               SVAREA=YES,             save area required              +
               MF=(E,(R11)),SF=(E,DSATTACH)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ATCABND                 no, ABEND
         ST    R1,EVTCOTCB             save TCB address
         MVC   TCBUSER,DSASTKCO        set stack address
         L     R4,TCBSTCB              STCB address                @10A
         SAM31 ,                                                   @10A
         MVC   EVTCOTKN,STCBTTKN       copy TCB token              @10A
         SAM24 ,                                                   @10A
         L     R3,DSASTKCO             get stack address
         AL    R3,DSASDSA              compute STK address
         ST    R3,EVTCOSTK             set STK address globally
*
**       Attach ECFSRV(STC) event subtask
*
         MVC   DSATASK,=CL8'STCSRV'
         MVC   DSATTACH(ATTACHZL),ATTACHZ
         ATTACH EPLOC=ECFSRV,                                          +
               TID=STC,                task ID                         +
               SM=SUPV,                Supervisor                      +
               KEY=PROP,               key=8                           +
               DISP=YES,               dispatchable                    +
               SZERO=NO,               don't share SP=0                +
               JSTCB=NO,               attach as subtask               +
               SVAREA=YES,             save area required              +
               MF=(E,(R11)),SF=(E,DSATTACH)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ATCABND                 yes, carry on
         ST    R1,EVTSTTCB             save TCB address
         MVC   TCBUSER,DSASTKST        set stack address
         L     R4,TCBSTCB              STCB address                @10A
         SAM31 ,                                                   @10A
         MVC   EVTSTTKN,STCBTTKN       copy TCB token              @10A
         SAM24 ,                                                   @10A
         L     R3,DSASTKST             get stack address
         AL    R3,DSASDSA              compute STK address
         ST    R3,EVTSTSTK             set STK address globally
*
**       Attach ECFSRV(DIE) event subtask
*
         MVC   DSATASK,=CL8'DIESRV'
         MVC   DSATTACH(ATTACHZL),ATTACHZ
         ATTACH EPLOC=ECFSRV,                                          +
               TID=DIE,                task ID                         +
               SM=SUPV,                Supervisor                      +
               KEY=PROP,               key=8                           +
               DISP=YES,               dispatchable                    +
               SZERO=NO,               don't share SP=0                +
               JSTCB=NO,               attach as subtask               +
               SVAREA=YES,             save area required              +
               MF=(E,(R11)),SF=(E,DSATTACH)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ATCABND                 yes, carry on
         ST    R1,EVTDITCB             save TCB address
         MVC   TCBUSER,DSASTKDI        set stack address
         L     R4,TCBSTCB              STCB address                @10A
         SAM31 ,                                                   @10A
         MVC   EVTDITKN,STCBTTKN       copy TCB token              @10A
         SAM24 ,                                                   @10A
         L     R3,DSASTKDI             get stack address
         AL    R3,DSASDSA              compute STK address
         ST    R3,EVTDISTK             set STK address globally
*
**       Attach ECFSRV(SYS) event subtask
*
         MVC   DSATASK,=CL8'SYSSRV'                                @10A
         MVC   DSATTACH(ATTACHZL),ATTACHZ
         ATTACH EPLOC=ECFSRV,                                          +
               TID=SYS,                task ID                         +
               SM=SUPV,                Supervisor                      +
               KEY=PROP,               key=8                           +
               DISP=YES,               dispatchable                    +
               SZERO=NO,               don't share SP=0                +
               JSTCB=NO,               attach as subtask               +
               SVAREA=YES,             save area required              +
               MF=(E,(R11)),SF=(E,DSATTACH)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ATCABND                 yes, carry on
         ST    R1,EVTSYTCB             save TCB address
         MVC   TCBUSER,DSASTKSY        set stack address
         L     R4,TCBSTCB              STCB address
         SAM31 ,
         MVC   EVTSYTKN,STCBTTKN       copy TCB token
         SAM24 ,
         L     R3,DSASTKSY             get stack address
         AL    R3,DSASDSA              compute STK address
         ST    R3,EVTSYSTK             set STK address globally
*
**       Attach ECFSRV(SVC) event subtask
*
         MVC   DSATASK,=CL8'SVCSRV'                                @11A
         MVC   DSATTACH(ATTACHZL),ATTACHZ
         ATTACH EPLOC=ECFSRV,                                          +
               TID=XVC,                task ID                         +
               SM=SUPV,                Supervisor                      +
               KEY=PROP,               key=8                           +
               DISP=YES,               dispatchable                    +
               SZERO=NO,               don't share SP=0                +
               JSTCB=NO,               attach as subtask               +
               SVAREA=YES,             save area required              +
               MF=(E,(R11)),SF=(E,DSATTACH)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   ATCABND                 yes, carry on
         ST    R1,EVTSVTCB             save TCB address
         MVC   TCBUSER,DSASTKSV        set stack address
         L     R4,TCBSTCB              STCB address
         SAM31 ,
         MVC   EVTSVTKN,STCBTTKN       copy TCB token
         SAM24 ,
         L     R3,DSASTKSV             get stack address
         AL    R3,DSASDSA              compute STK address
         ST    R3,EVTSVSTK             set STK address globally
         DROP  R1
*
**       Issue subtasks attached debug msg
*
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    ATCEXIT                 no, skip debug msg
         $WTO  MID=ECF105I,                                            +
               VAR1==CL8'attached'
         B     ATCEXIT                 exit
*
ATCABND  DS    0H
         $WTO  MID=ECF904E,                                            +
               VAR1=DSATASK            show subtask name
         $RETRY OFF                    disable recovery
         L     R3,DSARSN               show RSN in R3
         ABEND X'FF1',DUMP,REASON=(R3)                             @06C
*
ATCEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFSRV   DC    CL8'ECFSRV'             Event capture routine name
         DS    0F
ATTACHZ  ATTACH SF=L                   ATTACH listform
ATTACHZL EQU   *-ATTACHZ
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DETACH                                                     */
*/*                                                                  */
*/* Function: Detach Event Capture subtasks                          */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DETACH   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Issue termination in progress msg
*
         $WTO  MID=ECF098I             terminating msg
         OI    EVTFLG1,EVT@TERM        subsystem terminating
*
**       Terminate ECFSRV(S34SRV) subtask
*
         $RETRY DTCH010,SDUMP=NO       activate retry
         POST  EVTCMECB                S34 ECB address
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DTCH010                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1==CL8'S34SRV',VAR2=EVTCMTCB,VAR3==CL7'ended'
*
**       Terminate ECFSRV(S35SRV) subtask
*
DTCH010  DS    0H
         $RETRY DTCH020,SDUMP=NO       activate retry
         POST  EVTWTECB                S35 ECB address
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DTCH020                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1==CL8'S35SRV',VAR2=EVTWTTCB,VAR3==CL7'ended'
*
**       Terminate ECFSRV(RFRSRV) subtask
*
DTCH020  DS    0H
         $RETRY DTCH030,SDUMP=NO       activate retry
         POST  EVTRFECB                RFR ECB address
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DTCH030                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1==CL8'RFRSRV',VAR2=EVTRFTCB,VAR3==CL7'ended'
*
**       Terminate ECFSRV(ADDSRV) subtask
*
DTCH030  DS    0H
         $RETRY DTCH040,SDUMP=NO       activate retry
         POST  EVTADECB                ADD ECB address
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DTCH040                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1==CL8'ADDSRV',VAR2=EVTADTCB,VAR3==CL7'ended'
*
**       Terminate ECFSRV(COMSRV) subtask
*
DTCH040  DS    0H
         $RETRY DTCH050,SDUMP=NO       activate retry
         POST  EVTCOECB                COM ECB address
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DTCH050                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1==CL8'COMSRV',VAR2=EVTCOTCB,VAR3==CL7'ended'
*
**       Terminate ECFSRV(STCSRV) subtask
*
DTCH050  DS    0H
         $RETRY DTCH060,SDUMP=NO       activate retry
         POST  EVTSTECB                STC ECB address
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DTCH060                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1==CL8'STCSRV',VAR2=EVTSTTCB,VAR3==CL7'ended'
*
**       Terminate ECFSRV(DIESRV) subtask
*
DTCH060  DS    0H
         $RETRY DTCH065,SDUMP=NO       activate retry
         POST  EVTDIECB                DIE ECB address
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DTCH065                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1==CL8'DIESRV',VAR2=EVTDITCB,VAR3==CL7'ended'
*
**       Terminate ECFSRV(SVCSRV) subtask
*
DTCH065  DS    0H                                                  @11A
         $RETRY DTCH070,SDUMP=NO       activate retry
         POST  EVTSVECB                SVC ECB address
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DTCH070                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1==CL8'SVCSRV',VAR2=EVTSVTCB,VAR3==CL7'ended'
*
**       Terminate ECFSRV(SYSSRV) subtask
*
DTCH070  DS    0H                                                  @10A
         $RETRY DTCH080,SDUMP=NO       activate retry
         STIMERM CANCEL,ID=EVTSYTMR,MF=(E,DSACTIMR)
         POST  EVTSYECB                SYS ECB address
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DTCH080                 no, skip debug msg
         $WTO  MID=ECF106I,            yes, issue msg                  +
               VAR1==CL8'SYSSRV',VAR2=EVTSYTCB,VAR3==CL7'ended'
*
**       Clear terminating TCB pointers
*
DTCH080  DS    0H
         $RETRY DTCH090,SDUMP=NO       activate retry
         STIMER WAIT,DINTVL=DETIMER    give subtasks time to exit
         XC    EVTCMTCB,EVTCMTCB       zero S34 TCB address
         XC    EVTWTTCB,EVTWTTCB       zero S35 TCB address
         XC    EVTRFTCB,EVTRFTCB       zero RFR TCB address
         XC    EVTADTCB,EVTADTCB       zero ADD TCB address
         XC    EVTCOTCB,EVTCOTCB       zero COM TCB address
         XC    EVTSTTCB,EVTSTTCB       zero STC TCB address
         XC    EVTDITCB,EVTDITCB       zero DIE TCB address
         XC    EVTSYTCB,EVTSYTCB       zero SYS TCB address        @10A
*
**       Issue subtasks detached debug msg
*
DTCH090  DS    0H
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    DTCHEXIT                no, skip debug msg
         $WTO  MID=ECF105I,                                            +
               VAR1==CL8'detached'
*
DTCHEXIT DS    0H
         XC    DSARC,DSARC             set RC
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0D
DETIMER  DC    CL8'00000500'           hhmmssth                    @05A
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TRMSUB                                                     */
*/*                                                                  */
*/* Function: Terminate Event Capture subsystem                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TRMSUB   $SUBINI
         LTR   R11,R11                 EVT init?
         BZ    TRM0999                 no, exit
         USING EVT,R11                 set addressability
         USING STKE,R13                STKE addressability
         OI    EVTFLG1,EVT@TERM        set terminating indicator
         NI    EVTFLG1,XFF-EVT@SACT    set inactive indicator
         STIMER WAIT,DINTVL=TRMTIMR2   wait                        @07A
*
**       Copy common EVT to local storage
*
         LR    R4,R11                  EVT address
         LA    R2,DSAEVTB              local EVT block
         L     R3,EVTSZEVT             EVT size
         LR    R5,R3                   copy EVT size
         MVCL  R2,R4                   relocate EVT to local
         LA    R2,DSAEVTB              get local EVT address
         ST    R2,STKEVTA              update EVT address
*
**       Disable timer interrupt exit
*
TRM0100  DS    0H
         ICM   R1,15,EVTDINTV          timer active?
         BZ    TRM0200                 no, skip call
         $SETDIE DISABLE               call service routine
*
**       Locate event capture subsystem
*
TRM0200  DS    0H
         USING PSA,0
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTJESCT             JES control table
         USING JESCT,R3                set addressability
         L     R4,JESSSCT              top SSCT address
         USING SSCT,R4                 set addressability
*
TRM0300  DS    0H
         CLC   SSCTSNAM,EVTSUBNM       are we there?
         BE    TRM0400                 yes, carry on
         ICM   R4,15,SSCTSCTA          get next SSCT
         BNZ   TRM0300                 find us
         B     TRM0500                 carry on
*
**       Deactivate ECF subsystem instance
*
TRM0400  DS    0H
         XC    SSCTSSVT,SSCTSSVT       zero SSVT
         XC    SSCTSUS2,SSCTSUS2       zero SLX                    @07A
         LA    R3,30                   wait interval               @07A
*
TRM0410  DS    0H                                                  @07A
         ICM   R1,15,EVTSSICT          active listeners?           @07A
         BZ    TRM0500                 no                          @07A
         STIMER WAIT,DINTVL=TRMTIMER   yes, wait                   @07A
         BCT   R3,TRM0410
*
**       Release Event Capture subsystem SSVT
*
TRM0500  DS    0H
         ICM   R3,15,EVTSSVT           SSVT init?
         BZ    TRM0600                 no, test further
         L     R2,EVTSSVTZ             SSVT size
         FREEMAIN RC,                                                  +
               A=(R3),                 storage address                 +
               LV=(R2),                storage size                    +
               SP=241                  storage subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    TRM0600                 yes, carry on
         $WTO  MID=ECF018E,            no, error                       +
               VAR1==CL4'SSVT',        show element                    +
               VAR2==CL7'release',     show function                   +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
*
**       Delete Event Capture cell pools
*
TRM0600  DS    0H
         $CALL DELCPL,                                                 *
               PARMPTR==CL4'TERM'      delete cell pools
*
**       Restore original IEWFETCH entry point
*
         TM    STKFLG1,STK@HZOS        zOS host system?            @06A
         BNZ   TRM0610                 yes, skip hooks restore     @06A
         $CALL RESFTC,                                                 +
               PARMPTR==CL4'TERM'      restore hooks
*
**       Deregister WTO-broadcasts listener
*
TRM0610  DS    0H                                                  @06A
         $SSIREQ DISABLE               call service routine
*
**       Deinstall MVS SVC support manager
*
         SPKA  0(0)                                                @05A
         TM    EVTFLG4,EVT@USVC        SVC=number specified?
         BZ    TRM0700                 no, skip deinstall
         TM    STKFLG1,STK@HZOS        zOS host system?            @06A
         BNZ   TRM0620                 yes, carry on               @06A
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTABEND             SCVT address
         USING SCVTSECT,R3             set addressability
         L     R3,SCVTSVCT             SVC table address
         XR    R1,R1
         IC    R1,EVTUSVCN             SVC=number
         SLL   R1,3                    multiply by 8
         LA    R3,0(R1,R3)             SVC table entry
         USING SVCENTRY,R3             set addressability
         L     R2,SVCEP                SVC EPA                     @02A
         LA    R2,4(,R2)               skip past branch            @02A
         USING SVC,R2                  set addressability          @02A
         CLC   SVCNAME,=CL8'ECFSVC'    previously installed?       @02A
         BNE   TRM0700                 no, skip entry restore      @02A
         CLC   SVCREL,EVTRELNO         same ECF release?           @02A
         BNE   TRM0700                 no, skip entry restore      @02A
         MVC   0(8,R3),EVTSVCEN        restore original entry
         NI    EVTFLG4,XFF-EVT@USVC    reset installed indicator
         B     TRM0700                 carry on                    @06A
         DROP  R2,R3
*
**       Validity check PERSIST environment                        @06A
*
TRM0620  DS    0H
         TM    EVTFLG5,EVT@EXIT        PERSIST=NO?                 @11A
         BZ    TRM0630                 yes, carry on               @11A
         $WTO  MID=ECF908I             PERSIST=YES                 @11A
         B     TRM0999                 exit                        @11A
*
**       Deinstall zOS SVC support manager                         @06A
*
TRM0630  DS    0H
         TM    EVTFLG4,EVT@USVC        SVC=number specified?
         BZ    TRM0700                 no, skip SVC deinstall
         MVC   DSAENQ(TVCENQL),TVCENQ  init listform
         ENQ   MF=(E,DSAENQ)           serialize resource
         OI    DSAFLG3,DSA@SVCQ        set ENQ indicator
         XR    R2,R2                   scrub
         IC    R2,EVTUSVCN             dynamic SVC number
         MVC   DSASVCUP(TVCUPDTL),TVCUPDAT
         SAM31 ,
         SVCUPDTE (2),MF=(E,DSASVCUP)
         SAM24 ,
         ST    R15,DSARC               save RC
         MVC   DSADEQ(TVCDEQL),TVCDEQ  init listform
         DEQ   MF=(E,DSADEQ)           release serialization
         CLC   DSARC,=AL4(0)           successful?
         BE    TRM0700                 yes, carry on
*
**       Issue SVCUPDTE delete failed error msg
*
         $WTO  MID=ECF984E,                                            +
               VAR1==CL7'Delete',      show function                   +
               VAR2=EVTSVCNM,          show SVC number                 +
               VAR3=DSARC              show RC
*
**       Release Event Capture subsystem EVT
*
TRM0700  DS    0H
         LR    R2,R11                  copy EVT address
         L     R2,EVTSPNUM             EVT subpool
         L     R3,EVTSZEVT             EVT size
         FREEMAIN RC,                                                  +
               A=(R11),                storage address                 +
               SP=(R2),                storage subpool                 +
               LV=(R3)                 storage size
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    TRM0800                 yes, carry on
         $WTO  MID=ECF021E,                                            +
               VAR1==CL7'release',VAR2=DSARC
*
TRM0800  DS    0H
         LA    R3,SSCTSIZE(,R4)        SCTX address
         USING SCTX,R3                 set addressability
         XC    SSCTSUSE,SSCTSUSE       zero EVT address
         XC    SCTXEVTA,SCTXEVTA       zero EVT address
         XC    SCTXEVTZ,SCTXEVTZ       zero EVT size
         XC    SCTXSPNM,SCTXSPNM       zero EVT subpool
         XC    SCTXSREQ,SCTXSREQ       zero SSREQ={NO|YES) indicator
         DROP  R3
*
**       Release CSA SSI-support load module
*
         L     R11,STKEVTA             reset EVT addressability
         MVC   EVTLOCAD,=CL8'LOCAL'    indicate local EVT address
         TM    DSAFLG1,DSA@SSM         SSI-support LMOD in CSA?
         BZ    TRM0900                 no, carry on
         TM    STKFLG1,STK@HZOS        running on zOS host?        @06A
         BNZ   TRM0810                 yes, carry on               @06A
         $DELETE LMOD=DSASSMN,FROM=CSA no, delete LMOD from CSA
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         LTR   R15,R15                 successful?
         BZ    TRM0900                 yes, carry on
         $WTO  MID=ECF028E,            no, error                       +
               VAR1==CL3'CSA',VAR2=DSARC,VAR3=DSARSN,VAR4=DSASSMN
         B     TRM0900                 carry on
*
TRM0810  DS    0H                                                 8@06A
         $DELETE LMOD=DSASSMN,FROM=LPA delete LMOD using CSVDYLPA
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         LTR   R15,R15                 successful?
         BZ    TRM0900                 yes, carry on
         $WTO  MID=ECF023E,            no, error                       +
               VAR1==CL3'DEL',VAR2=DSASSMN,VAR3=DSARC,VAR4=DSARSN
*
**       Issue common resource released msg
*
TRM0900  DS    0H
         $WTO  MID=ECF003I             ECF resources released
*
TRM0999  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
TRMXIT   DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0D
TRMTIMER DC    CL8'00000100'           hhmmssth
TRMTIMR2 DC    CL8'00000500'           hhmmssth                    @07A
*---------------------------------------------------------------------*
*        SVCUPDTE listforms                                        @06A
*--------+---------+---------+---------+---------+---------+---------+*
TVCUPDAT DS    0F
         SVCUPDTE 0,DELETE,MF=L
TVCUPDTL EQU   *-TVCUPDAT
         DS    0F
TVCENQ   ENQ   (TVCMAJ,TVCMIN,E,8,SYSTEM),RET=HAVE,MF=L
TVCENQL  EQU   *-TVCENQ
         DS    0F
TVCDEQ   DEQ   (TVCMAJ,TVCMIN,8,SYSTEM),MF=L
TVCDEQL  EQU   *-TVCDEQ
         DS    0C
TVCMAJ   DC    CL8'SYSZSVC'            Major name
TVCMIN   DC    CL8'TABLE'              Minor name
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DBGOPEN                                                    */
*/*                                                                  */
*/* Function: Open DBUGLOG log dat set                               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DBGOPEN  $SUBINI
         USING PSA,0
         USING STKE,R13                STKE addressability
         L     R3,FLCCVT               CVT address                 @05A
         USING CVT,R3                  set addressability          @05A
         L     R3,CVTMSER              MSAS base work area         @05A
         USING BASE,R3                 set addressability          @05A
         CLC   PSAAOLD,BAASCB          MSAS?                       @05A
         BNE   DBGO000                 no, carry on                @05A
         XC    DSARC,DSARC             yes, set RC                 @05A
         B     DBGOXIT                 exit                        @05A
         DROP  R3                                                  @05A
*
DBGO000  DS    0H
         DEVTYPE OPDEBUG,DSADEVTP
         LTR   R15,R15                 DBUGLOG allocated?
         BZ    DBGO010                 yes, open it
         XC    DSARC,DSARC             no, set RC
         B     DBGOXIT                 no, exit
*
DBGO010  DS    0H
         ICM   R4,15,STKDDCB           log open?                   @05C
         BZ    DBGO020                 no, error                   @05A
         USING IHADCB,R4               set addressability
         MVC   DSAOLST,OPENDBGL        OPEN listform
         MVC   0(DBUGLOGL,R4),DBUGLOG  relocate DCB
         OPEN  ((R4),OUTPUT),MF=(E,DSAOLST)
         TM    DCBOFLGS,DCBOFOPN       successful?
         BZ    DBGO020                 no, issue error msg
         OI    STKFLG2,STK@DLOG        DBUGLOG opened              @04C
         PUT   (R4),DBUGHDR            write debug log header
         XC    DSARC,DSARC             set RC
         B     DBGOXIT                 exit
*
DBGO020  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0600)    set error RSN
         $WTO  MID=ECF038E,            issue error msg                 +
               VAR1==CL8'DBUGLOG',     show DDname                     +
               VAR2==CL5'Open',        show Open                       +
               VAR3=DSARSN             show RSN
*
DBGOXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        DBUGLOG DCB                                                  *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
OPENDBGL OPEN  (,),MF=L                OPEN listform
         DS    0F
DBUGLOG  DCB   DDNAME=DBUGLOG,         DDNAME                          +
               DSORG=PS,               sequential                      +
               LRECL=133,              record length                   +
               RECFM=FB,               record format                   +
               MACRF=PM                macro format
         DS    0D
DBUGLOGL EQU   *-DBUGLOG               DCB listform
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
OPDEBUG  DC    CL8'DBUGLOG'
         DS    0C
DBUGHDR  DS    0CL133
         DC    CL22' '
         DC    CL111'*** DBUGLOG LOG DATA ***'
DBUGHDRL EQU   *-DBUGHDR
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DBGCLOS                                                    */
*/*                                                                  */
*/* Function: Close DBUGLOG log dat set                              */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DBGCLOS  $SUBINI
         USING STKE,R13                STKE addressability
         TM    STKFLG2,STK@DLOG        log open?                   @04C
         BZ    DBGC099                 no, exit
         ICM   R4,15,STKDDCB           log open?
         BZ    DBGC099                 no, exit
         XC    STKDDCB,STKDDCB         zero DCB address
         DEVTYPE CLDEBUG,DSADEVTP
         LTR   R15,R15                 log allocated?
         BNZ   DBGC099                 no, exit
*
         MVC   DSACLST,CLOSLST         listform
         CLOSE ((R4)),MF=(E,DSACLST)   close log
         NI    STKFLG2,XFF-STK@DLOG    log closed                  @04C
*
DBGC099  DS    0H
         XC    DSARC,DSARC             set RC
*
DBGCXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
CLOSLST  CLOSE (,),MF=L                CLOSE listform
         DS    0C
CLDEBUG  DC    CL8'DBUGLOG'            DBUGLOG DDname
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TRCOPEN                                                    */
*/*                                                                  */
*/* Function: Open TRCELOG log dat set                               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TRCOPEN  $SUBINI
         USING STKE,R13                STKE addressability
         USING PSA,0
         L     R3,FLCCVT               CVT address                 @05A
         USING CVT,R3                  set addressability          @05A
         L     R3,CVTMSER              MSAS base work area         @05A
         USING BASE,R3                 set addressability          @05A
         CLC   PSAAOLD,BAASCB          MSAS?                       @05A
         BNE   TRCO000                 no, carry on                @05A
         XC    DSARC,DSARC             yes, set RC                 @05A
         B     TRCOXIT                 exit                        @05A
         DROP  R3                                                  @05A
*
TRCO000  DS    0H
         DEVTYPE OPTRACE,DSADEVTP
         LTR   R15,R15                 TRCELOG allocated?
         BZ    TRCO010                 yes, open it
         XC    DSARC,DSARC             no, set RC
         B     TRCOXIT                 exit
*
TRCO010  DS    0H
         ICM   R4,15,STKTDCB           log open?                   @05C
         BZ    TRCO020                 no, error                   @05A
         USING IHADCB,R4               set addressability
         MVC   DSAOLST,TRCOPLST        listform
         MVC   0(TRCELOGL,R4),TRCELOG
         OPEN  ((R4),OUTPUT),MF=(E,DSAOLST)
         TM    DCBOFLGS,DCBOFOPN       successful?
         BZ    TRCO020                 no, issue error msg
         LOAD  EPLOC=ECFTRC            load trace module
         ST    R0,STKTRCA              init ECFTRC EPA
         OI    STKFLG2,STK@TLOG        TREGLOG opened              @04C
         PUT   (R4),TRCEHDR            write trace log header
         XC    DSARC,DSARC             set RC
         B     TRCOXIT                 exit
*
TRCO020  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0602)    set error RSN
         $WTO  MID=ECF038E,            issue error msg                 +
               VAR1==CL8'TRCELOG',     show DDname                     +
               VAR2==CL5'Open',        show Open                       +
               VAR3=DSARSN             show RSN
*
TRCOXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        TRCELOG DCB                                                  *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
TRCOPLST OPEN  (,),MF=L                OPEN listform
         DS    0F
TRCELOG  DCB   DDNAME=TRCELOG,         DDNAME                          +
               DSORG=PS,               sequential                      +
               LRECL=80,               record length                   +
               RECFM=FB,               record format                   +
               MACRF=PM                macro format
         DS    0D
TRCELOGL EQU   *-TRCELOG               DCB listform
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
ECFTRC   DC    CL8'ECFTRC'
OPTRACE  DC    CL8'TRCELOG'
         DS    0C
TRCEHDR  DS    0CL80
         DC    CL22' '
         DC    CL58'*** TRCELOG LOG DATA ***'
TRCEHDRL EQU   *-TRCEHDR
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TRCLOSE                                                    */
*/*                                                                  */
*/* Function: Close TRCELOG log dat set                              */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TRCLOSE  $SUBINI
         USING STKE,R13                STKE addressability
         TM    STKFLG2,STK@TLOG        log open?                   @04C
         BZ    TRCC099                 no, exit
         ICM   R4,15,STKTDCB           log open?
         BZ    TRCC099                 no, exit
         XC    STKTDCB,STKTDCB         zero DCB address
         DEVTYPE CLTRACE,DSADEVTP
         LTR   R15,R15                 log allocated?
         BNZ   TRCC099                 no, exit
*
         MVC   DSACLST,CLOSTRC         listform
         CLOSE ((R4)),MF=(E,DSACLST)   close log
         NI    STKFLG2,XFF-STK@TLOG    log closed                  @04C
*
TRCC099  DS    0H
         XC    DSARC,DSARC             set RC
*
TRCCXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
CLOSTRC  CLOSE (,),MF=L                CLOSE listform
         DS    0C
CLTRACE  DC    CL8'TRCELOG'            TRCELOG DDname
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: PARCLSE                                                    */
*/*                                                                  */
*/* Function: Close PARMLIB data set                                 */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
PARCLSE  $SUBINI
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
         ICM   R4,15,STKPDCB           PARMLIB open?
         BZ    PARL099                 no, exit
         XC    STKPDCB,STKPDCB         zero DCB address
         DEVTYPE PARLDDN,DSADEVTP
         LTR   R15,R15                 log allocated?
         BNZ   PARL099                 no, exit
*
         MVC   DSACLST,CLSPARL         listform
         CLOSE ((R4)),MF=(E,DSACLST)   close log
         XC    STKPDCB,STKPDCB         zero DCB
*
PARL099  DS    0H
         XC    DSARC,DSARC             set RC
*
PARLXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
CLSPARL  CLOSE (,),MF=L                CLOSE listform
         DS    0C
PARLDDN  DC    CL8'PARMLIB'            PARMLIB DDname
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: GETRES                                                     */
*/*                                                                  */
*/* Function: Obtain Event Capture instance resources                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
GETRES   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Build REB element Cell Pool
*
         MVC   DSARC,=AL4(RC12)        set RC
         MVC   DSARSN,=AL4(RSN0216)    set RSN
         $RETRY GETRXIT,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
         MVC   DSAHDR,=CL24'nnnn-nnnn-REB-CELL-POOL'
         MVC   DSAHSUB,EVTSUBNM        set subsystem name
         MVC   DSAHREL,=CL6'&REL'      set subsystem version
         $CPOOL BUILD,                                                 +
               CPID=DSACPID,           return CPID here                +
               CELLS=EVTREBCL,         number of cells                 +
               XTNT=EVTREBXT,          number of extents               +
               CSIZE==AL4(REB@SIZE),   cell size                       +
               SP=241,                 subpool                         +
               KEY=DSASKEY,            supervisor key                  +
               MODE=COND,              conditional request             +
               HDR=DSAHDR,             cell pool header                +
               MF=(E,DSAPLST)
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RN
         LTR   R15,R15                 successful?
         BZ    GETR010                 yes, carry on
*
         $WTO  MID=ECF020E,            issue msg                       +
               VAR1==CL3'REB',         show pool ID                    +
               VAR2==CL6'BUILD',       show function                   +
               VAR3=DSARSN             show error RSN
         B     GETRXIT                 exit
*
GETR010  DS    0H
         L     R3,DSACPID              get REB cell pool ID
         $ST   R3,EVTREBCP             save it                     @05C
         $OI   EVTFLG3,EVT@CREB        REB cell pool built         @05C
*
**       Trace REB Cell Pool build
*
         $TRACE $CPOOL,                                                +
               MID=ECFSUB,             trace caller                    +
               A=DSACPID,              trace storage addrss            +
               LN=0                    ECFTRC computes size
*
**       Build REBX element Cell Pool
*
         MVC   DSAHDR,=CL24'nnnn-nnnn-REBX-CELL-POOL'
         MVC   DSAHSUB,EVTSUBNM        set subsystem name
         MVC   DSAHREL,=CL6'&REL'      set subsystem version
         $CPOOL BUILD,                                                 +
               CPID=DSACPID,           return CPID here                +
               CELLS=EVTREBCL,         number of cells (same as REB)   +
               XTNT=EVTREBXT,          number of extents (same as REB) +
               CSIZE==AL4(REBX@SZE),   cell size                       +
               SP=109,                 subpool                         +
               KEY=DSAEKEY,            problem key                     +
               MODE=COND,              conditional request             +
               HDR=DSAHDR,             cell pool header                +
               MF=(E,DSAPLST)
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RN
         LTR   R15,R15                 successful?
         BZ    GETR020                 yes, carry on
*
         $WTO  MID=ECF022E,            issue msg                       +
               VAR1==CL6'BUILD',       show function                   +
               VAR2=DSARSN             show error RSN
         B     GETRXIT                 exit
*
GETR020  DS    0H
         L     R3,DSACPID              get REBX cell pool ID
         $ST   R3,EVTREBXC             save it                     @05C
         $OI   EVTFLG3,EVT@XREB        REBX cell pool built        @05C
*
**       Trace REBX Cell Pool build
*
         $TRACE $CPOOL,                                                +
               MID=ECFSUB,             trace caller                    +
               A=DSACPID,              trace storage addrss            +
               LN=0                    ECFTRC computes size
*
**       Build SRB element Cell Pool
*
         MVC   DSAHDR,=CL24'nnnn-nnnn-SRB-CELL-POOL'
         MVC   DSAHSUB,EVTSUBNM        set subsystem name
         MVC   DSAHREL,=CL6'&REL'      set subsystem version
         $CPOOL BUILD,                                                 +
               CPID=DSACPID,           return CPID here                +
               CELLS=EVTSRBCL,         number of cells                 +
               XTNT=EVTSRBXT,          number of extents               +
               CSIZE==AL4(SRBSIZE+ZIRB@SZE),                           +
               SP=245,                 subpool                         +
               KEY=DSASKEY,            supervisor key                  +
               MODE=COND,              conditional request             +
               HDR=DSAHDR,             cell pool header                +
               MF=(E,DSAPLST)
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RN
         LTR   R15,R15                 successful?
         BZ    GETR030                 yes, carry on
*
         $WTO  MID=ECF024E,            issue msg                       +
               VAR1==CL3'SRB',         show pool ID                    +
               VAR2==CL6'BUILD',       show function                   +
               VAR3=DSARSN             show error RSN
         B     GETRXIT                 exit
*
GETR030  DS    0H
         L     R3,DSACPID              get SRB cell pool ID
         $ST   R3,EVTSRBCP             save it                     @05C
         $OI   EVTFLG3,EVT@CSRB        SRB cell pool built         @05C
*
**       Trace SRB Cell Pool build
*
         $TRACE $CPOOL,                                                +
               MID=ECFSUB,             trace caller                    +
               A=DSACPID,              trace storage addrss            +
               LN=0                    ECFTRC computes size
*
**       Build SRE element Cell Pool
*
         MVC   DSAHDR,=CL24'nnnn-nnnn-SRE-CELL-POOL'
         MVC   DSAHSUB,EVTSUBNM        set subsystem name
         MVC   DSAHREL,=CL6'&REL'      set subsystem version
         $CPOOL BUILD,                                                 +
               CPID=DSACPID,           return CPID here                +
               CELLS=EVTSRECL,         number of cells                 +
               XTNT=EVTSREXT,          number of extents               +
               CSIZE==AL4(SRE@SIZE),                                   +
               SP=241,                 subpool                         +
               KEY=DSASKEY,            supervisor key                  +
               MODE=COND,              conditional request             +
               HDR=DSAHDR,             cell pool header                +
               MF=(E,DSAPLST)
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RN
         LTR   R15,R15                 successful?
         BZ    GETR040                 yes, carry on
*
         $WTO  MID=ECF024E,            issue msg                       +
               VAR1==CL3'SRE',         show pool ID                    +
               VAR2==CL6'BUILD',       show function                   +
               VAR3=DSARSN             show error RSN
         B     GETRXIT                 exit
*
GETR040  DS    0H
         L     R3,DSACPID              get SRE cell pool ID
         $ST   R3,EVTSRECP             save it                     @05C
         $OI   EVTFLG3,EVT@CSRE        SRE cell pool built         @05C
*
**       Trace SRE Cell Pool build
*
         $TRACE $CPOOL,                                                +
               MID=ECFSUB,             trace caller                    +
               A=DSACPID,              trace storage addrss            +
               LN=0                    ECFTRC computes size
*
GETRXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: PREFRE                                                     */
*/*                                                                  */
*/* Function: Release previous Event Capture resources               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R1  SSCT address                                     */
*/*             R9  STK address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 Previous EVT address                             */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
PREFRE   $SUBINI
         USING PSA,0                   FLC addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARSN,=AL4(RSN0522)    set RSN
         $RETRY PRE0099,               activate retry                  +
               RSN=DSARSN,             RSN code                        +
               SDUMP=NO                skip SVC dump
*
**       Locate previous ECF subsystem SSCT
*
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTJESCT             JES control table
         USING JESCT,R3                set addressability
         L     R4,JESSSCT              top SSCT address
         USING SSCT,R4                 set addressability
*
PRE0000  DS    0H
         CLC   SSCTSNAM,DSAMSUB        are we there?
         BE    PRE0010                 no, test further
         ICM   R4,15,SSCTSCTA          end of SSCTs?
         BNZ   PRE0000                 no, loop
         B     PRE0099                 yes, exit
*
PRE0010  DS    0H
         LA    R3,SSCTSIZE(,R4)        SCTX address
         USING SCTX,R3                 set addressability
         CLC   SCTXID,=CL4'SCTX'       valid indeed?
         BNE   PRE0099                 no, exit
         ICM   R11,15,SCTXEVTA         EVT init?
         BZ    PRE0099                 no, exit
         USING EVT,R11                 set addressability
         CLC   EVTID,=CL4'EVT'         valid indeed?
         BNE   PRE0099                 no, exit
         CLC   EVTSUBNM,DSAMSUB        subsystem name match?
         BNE   PRE0020                 no, exit w/errors
         CLC   EVTSTCNM,SCTXSTCN       STC name match?
         BNE   PRE0020                 no, ezit w/errors           @06C
         MVC   STKLPATK,SCTXLPTK       copy CSVDYLPA ADD token     @06A
         B     PRE0030                 carry on                    @06A
*
PRE0020  DS    0H
         $WTO  MID=ECF988E,            ownership error                 +
               VAR1=EVTSUBNM,          show subsystem name             +
               VAR2=SCTXSTCN           show owner STCname
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0528)    set error RSN
         $RETRY OFF                    disable recovery
         L     R3,DSARSN               show RSN in R3
         ABEND X'FF1',DUMP,REASON=(R3)                             @06C
         DROP  R3
*
**       Disable DIE timer interrupt exit
*
PRE0030  DS    0H
         ICM   R1,15,EVTDINTV          timer active?
         BZ    PRE0040                 no, skip call
         XC    EVTXINTV,EVTXINTV       disable timer interval
         $SETDIE DISABLE               call service routine
*
**       Copy previous EVT to local storage
*
PRE0040  DS    0H
         LR    R2,R11                  EVT address
         LA    R0,DSAEVTB              local EVT block
         L     R1,EVTSZEVT             EVT size
         LR    R3,R1                   copy EVT size
         MVCL  R0,R2                   relocate EVT to local
         LA    R11,DSAEVTB             set local EVT addressability
         MVC   EVTLOCAD,=CL8'LOCAL'    indicate local EVT
*
**       Deactivate previous subsystem instance
*
         OI    EVTFLG1,EVT@TERM        set terminationg indicator
         NI    EVTFLG1,XFF-EVT@SACT    set inactive indicator
         ICM   R3,15,SSCTSSVT          subsystem active?
         BZ    PRE0050                 no, skip $SSVT release
         XC    SSCTSSVT,SSCTSSVT       inact previous subsys instance
         XC    SSCTSUS2,SSCTSUS2       zero SLX                    @07A
         $WTO  MID=ECF016W             previous instance deactivated
*
**       Storage release previous instance SSVT
*
         L     R2,EVTSSVTZ             $SSVT size
         FREEMAIN RC,                                                  +
               A=(R3),                 storage address                 +
               LV=(R2),                storage size                    +
               SP=241                  storage subpool
         ST    R15,DSARC               save error RC
         LTR   R15,R15                 successful?
         BZ    PRE0050                 yes, carry on
         $WTO  MID=ECF018E,            no, error                       +
               VAR1==CL4'SSVT',        show element                    +
               VAR2==CL7'release',     show function                   +
               VAR3=DSARC,             show RC                         +
               VAR4=DSARSN             show RSN
*
**       Delete Event Capture cell pools
*
PRE0050  DS    0H
         $CALL DELCPL,                                                 *
               PARMPTR==CL4'INIT'      delete cell pools
*
**       Restore original IEWFETCH entry point
*
         TM    STKFLG1,STK@HZOS        zOS host system?            @06A
         BNZ   PRE0055                 yes, skip hooks restore     @06A
         $CALL RESFTC,                                                 +
               PARMPTR==CL4'INIT'      restore hooks
*
**       Deregister WTO-broadcasts listener
*
PRE0055  DS    0H                                                  @06A
         $SSIREQ DISABLE               call service routine
*
**       Deinstall SVC support manager
*
PRE0060  DS    0H                                                  @06A
         TM    STKFLG1,STK@HZOS        zOS host system?            @06A
         BNZ   PRE0070                 yes, skip SVC deinstall     @06A
         TM    EVTFLG4,EVT@USVC        SVC=number specified?
         BZ    PRE0070                 no, skip deinstall
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTABEND             SCVT address
         USING SCVTSECT,R3             set addressability
         L     R3,SCVTSVCT             SVC table address
         XR    R1,R1
         IC    R1,EVTUSVCN             SVC=number
         SLL   R1,3                    multiply by 8
         LA    R3,0(R1,R3)             SVC table entry
         USING SVCENTRY,R3             set addressability
         L     R2,SVCEP                SVC EPA                     @02A
         LA    R2,4(,R2)               skip past branch            @02A
         USING SVC,R2                  set addressability          @02A
         CLC   SVCNAME,=CL8'ECFSVC'    previously installed?       @02A
         BNE   PRE0070                 no, skip entry restore      @02A
         CLC   SVCREL,EVTRELNO         same ECF release?           @02A
         BNE   PRE0070                 no, skip entry restore      @02A
         MVC   0(8,R3),EVTSVCEN        restore original entry
         NI    EVTFLG4,XFF-EVT@USVC    rest installed indicator
         DROP  R2,R3
*
**       Release CSA SSI-support load module
*
PRE0070  DS    0H
         TM    STKFLG1,STK@HZOS        zOS host system?            @06A
         BNZ   PRE0075                 yes, skip freemain          @06A
         TM    EVTFLG1,EVT@CSSM        SSI-support lmod in CSA?
         BZ    PRE0080                 no, carry on
         DELETE EPLOC=EVTSSMNM         delete SSI-support module
         ICM   R1,15,EVTSSMA           SSI-support module EPA init?
         BZ    PRE0080                 no, carry on
         XC    EVTSSMA,EVTSSMA         zero ECFCSM address         @02A
         L     R2,EVTSSMSZ             SSI module doublewords size
         FREEMAIN RC,                                                  +
               A=(R1),                 storage address                 +
               LV=(R2),                storage size                    +
               SP=228                  storage subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    PRE0080                 yes, carry on
         MVC   DSARSN,=AL4(RSN2076)    set RSN
         $WTO  MID=ECF028E,            no, issue error msg             +
               VAR1==CL3'CSA',VAR2=DSARC,VAR3=DSARSN,VAR4=DSASSMN
*
**       LPA delete SSI-support load module
*
PRE0075  DS    0H                                                  @06A
         XC    EVTSSMA,EVTSSMA         zero ECFCSM address         @06A
         $DELETE LMOD=DSASSMN,FROM=LPA delete LMOD using CSVDYLPA  @06A
         ST    R15,DSARC               save RC                     @06A
         ST    R0,DSARSN               save reason                 @06A
         LTR   R15,R15                 successful?                 @06A
         BZ    PRE0080                 yes, carry on               @06A
         $WTO  MID=ECF023E,            no, issue error msg         @06A+
               VAR1==CL3'DEL',VAR2=DSASSMN,VAR3=DSARC,VAR4=DSARSN  @06A
*
**       Release previous subsystem instance EVT
*
PRE0080  DS    0H
         LA    R3,SSCTSIZE(,R4)        SCTX address
         USING SCTX,R3                 set addressability
         L     R1,SCTXEVTA             set EVT address
         L     R2,SCTXSPNM             previous EVT subpool
         L     R3,SCTXEVTZ             previous EVT size
         XC    SSCTSUSE,SSCTSUSE       zero EVT address
         DROP  R3
         FREEMAIN RC,                                                  +
               A=(R1),                 storage address                 +
               SP=(R2),                storage subpool                 +
               LV=(R3)                 storage size
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    PRE0090                 yes, carry on
         $WTO  MID=ECF017W,                                            +
               VAR1==CL3'EVT',VAR2=DSARC
*
**       Issue previous instance resources freed msg
*
PRE0090  DS    0H
         $WTO  MID=ECF011I             ECF resources freed
*
PRE0099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
PREEXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RESFTC                                                     */
*/*                                                                  */
*/* Function: Restore IEWFETCH intercept subroutine                  */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RESFTC   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Restore IEWFETCH program fetch EPA
*
         $RETRY RESF099,               activate retry                  +
               SDUMP=NO                skip SVC dump
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R7,CVTFETCH             get IEWFETCH EPA
         USING IEW,R7                  set addressability
         CLC   IEWNAME,=CL8'ECFIEW'    IEWFETCH intercepted?
         BNE   RESF099                 no, exit
         ST    R7,DSAIEWA              ECFIEW storage address
         MVC   DSAIEWL,IEWFTCL         ECFIEW storage length
         L     R0,CVTFETCH             ECFIEW hook EPA
         L     R2,IEWFTCH              IEWFETCH real EPA
         CS    R0,R2,CVTFETCH          restore IEWFETCH EPA
         L     R0,DSAIEWL              ECFIEW storage length
         L     R1,DSAIEWA              ECFIEW storage address
         FREEMAIN RC,                                                  +
               A=(R1),                 address                         +
               LV=(R0),                length                          +
               SP=245                  SQA subpool
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    RESF000                 yes, carry on
         MVC   DSARSN,=AL4(RSN2084)    set RSN
         $WTO  MID=ECF028E,            no, issue error msg             +
               VAR1==CL3'SQA',VAR2=DSARC,VAR3=DSARSN,VAR4==CL8'ECFIEW'
         B     RESF099                 exit
*
RESF000  DS    0H
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    RESF099                 no, exit
         $WTO  MID=ECF111I,                                            +
               VAR1==CL11'deactivated'
*
RESF099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
RESFXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DELCPL                                                     */
*/*                                                                  */
*/* Function: Delete Event Capture cell pools subroutine             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DELCPL   $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Delete REB Cell Pool
*
         $RETRY DEL0010,               set retry address               +
               SDUMP=NO                skip SVC dump
         ICM   R1,15,EVTREBCP          REB cell pool init?
         BZ    DEL0010                 no, skip delete
         $XC   EVTREBCP,EVTREBCP       zero cell pool ID           @05C
         $CPOOL DELETE,                                                +
               CPID=(R1),              cell pool ID                    +
               MODE=COND               conditional request
         ST    R15,DSARC               save error RC
         ST    R0,DSARSN               save error RSN
         OI    DSAFLG2,DSA@DCPL        cell pool deleted
         LTR   R15,R15                 successful?
         BZ    DEL0010                 yes, carry on
         NI    DSAFLG2,XFF-DSA@DCPL    cell pool not deleted
         $WTO  MID=ECF020E,                                            +
               VAR1==CL3'REB',         show pool ID                    +
               VAR2==CL6'delete',      show function                   +
               VAR3=DSARSN             show RSN
*
**       Delete SRB Cell pool
*
DEL0010  DS    0H
         $RETRY DEL0020,               activate retry                  +
               SDUMP=NO                skip SVC dump
         ICM   R1,15,EVTSRBCP          SRB cell pool init?
         BZ    DEL0020                 no, skip delete
         $XC   EVTSRBCP,EVTSRBCP       zero cell pool ID           @05C
         $CPOOL DELETE,                                                +
               CPID=(R1),              cell pool ID                    +
               MODE=COND               conditional request
         ST    R15,DSARC               save error RC
         ST    R0,DSARSN               save error RSN
         LTR   R15,R15                 successful?
         BZ    DEL0020                 yes, carry on
         $WTO  MID=ECF020E,                                            +
               VAR1==CL3'SRB',         show pool ID                    +
               VAR2==CL6'delete',      show function                   +
               VAR3=DSARSN             show RSN
*
**       Delete SRE Cell pool
*
DEL0020  DS    0H
         $RETRY DEL0030,               activate retry                  +
               SDUMP=NO                skip SVC dump
         ICM   R1,15,EVTSRECP          SRE cell pool init?
         BZ    DEL0030                 no, skip delete
         $XC   EVTSRECP,EVTSRECP       zero cell pool ID           @05C
         $CPOOL DELETE,                                                +
               CPID=(R1),              cell pool ID                    +
               MODE=COND               conditional request
         ST    R15,DSARC               save error RC
         ST    R0,DSARSN               save error RSN
         LTR   R15,R15                 successful?
         BZ    DEL0030                 yes, carry on
         $WTO  MID=ECF020E,                                            +
               VAR1==CL3'SRE',         show pool ID                    +
               VAR2==CL6'delete',      show function                   +
               VAR3=DSARSN             show RSN
*
**       Delete REBX Cell pool
*
DEL0030  DS    0H
         $RETRY DEL0099,               activate retry                  +
               SDUMP=NO                skip SVC dump
         CLC   DSAFCID,=CL4'TERM'      TERM caller?
         BNE   DEL0040                 no, carry on
         ICM   R1,15,EVTREBXC          REBX cell pool init?
         BZ    DEL0099                 no, skip delete
         $XC   EVTREBXC,EVTREBXC       zero cell pool ID           @05C
         $CPOOL DELETE,                                                +
               CPID=(R1),              cell pool ID                    +
               MODE=COND               conditional request
         ST    R15,DSARC               save error RC
         ST    R0,DSARSN               save error RSN
         LTR   R15,R15                 successful?
         BZ    DEL0099                 yes, carry on
         $WTO  MID=ECF022E,                                            +
               VAR1==CL6'delete',      show function                   +
               VAR2=DSARSN             show RSN
         B     DEL0099                 carry on
*
**       Previous instance CPOOLs released
*
DEL0040  DS    0H
         TM    DSAFLG2,DSA@DCPL        cell pools released?
         BZ    DEL0099                 no, skip debug msg
         $WTO  MID=ECF114I             issue debug msg
*
DEL0099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
DELEXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TOKENS                                                     */
*/*                                                                  */
*/* Function: Storage obtain name/token tables                       */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  TKN address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TOKENS   $SUBINI
         USING PSA,0
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Load Name/Token Pair services
*
         TM    EVTFLG5,EVT@HZOS        zOS host?                   @10A
         BZ    TKN0000                 no, MVS 3.8                 @10A
         LOAD  EP=IEANTCR              create service EPA          @10A
         ST    R0,EVTNTPCR             save EPA                    @10A
         LOAD  EP=IEANTDL              delete service EPA          @10A
         ST    R0,EVTNTPDL             save EPA                    @10A
         LOAD  EP=IEANTRT              retrieve service EPA        @10A
         ST    R0,EVTNTPRT             save EPA                    @10A
*
**       Storage obtain Task-Level token table
*
TKN0000  DS    0H
         GETMAIN RU,                                                   +
               LV=TKN@TSZE,            token table size                +
               SP=SP102,               private subpool                 +
               BNDRY=PAGE              page boundary
         LR    R2,R1                   scrub
         XR    R15,R15                 dynamic
         L     R3,=AL4(TKN@TSZE)       storage length
         MVCL  R2,R14                  storage area
         LR    R7,R1                   copy storage address
         USING TKN,R7                  set addressability
         MVC   TKNID,=CL4'TKN'         init ID
         LA    R3,TKN1ST               1st token address
         ST    R3,TKNTOP               init top token address
         XC    TKNCNT,TKNCNT           init active token count
         MVC   TKNSPN,=AL4(SP102)      init table subpool
         MVC   TKNTOT,=AL4(TKN@NUM)    init total token count
         MVC   TKNSZE,=AL4(TKN@TSZE)   init table size
         L     R4,PSATOLD              TCB address
         USING TCB,R4                  set addressability
         ICM   R4,7,TCBFSAB            FSA address
         ST    R7,0(,R4)               activate token service
         DROP  R4
*
**       Storage obtain Address-Space-Level token table
*
         GETMAIN RU,                                                   +
               LV=TKN@TSZE,            token table size                +
               SP=SP102,               private subpool                 +
               BNDRY=PAGE              page boundary
         LR    R2,R1                   scrub
         XR    R15,R15                 dynamic
         L     R3,=AL4(TKN@TSZE)       storage length
         MVCL  R2,R14                  storage area
         LR    R7,R1                   copy storage address
         USING TKN,R7                  set addressability
         MVC   TKNID,=CL4'TKN'         init ID
         LA    R3,TKN1ST               1st token address
         ST    R3,TKNTOP               init top token address
         XC    TKNCNT,TKNCNT           init active token count
         MVC   TKNSPN,=AL4(SP102)      init table subpool
         MVC   TKNTOT,=AL4(TKN@NUM)    init total token count
         MVC   TKNSZE,=AL4(TKN@TSZE)   init table size
         ST    R7,EVTASLVL             activate token services
*
**       Storage obtain System-Level token table
*
         L     R4,FLCCVT               CVT address
         USING CVT,R4                  set addressability
         L     R4,CVTMSER              MSAS base work area
         USING BASE,R4                 set addressability
         L     R4,BAASCB               MSAS ASCB address
         USING ASCB,R4                 set addressability
         L     R4,ASCBASXB             ASXB address
         USING ASXB,R4                 set addressability
         MVC   EVTUSRID,ASXBUSR8       copy user ID                @06A
         L     R4,ASXBFTCB             IEEVIPL TCB address
         USING TCB,R4                  set addressability
         ST    R4,EVTMTCB              MSAS IEEVIPL TCB
         ICM   R3,7,TCBFSAB            token table init?
         BZ    TKN0010                 no, create it               @06C
         LA    R3,TCBFSA               get FSA address
         ST    R3,EVTSYLVL             activate token service
         OI    EVTFLG2,EVT@TOKN        token tables initialized
         B     TKN0099                 carry on
*
TKN0010  DS    0H                                                  @06C
         GETMAIN RU,                                                   +
               LV=TKN@TSZE,            token table size                +
               SP=SP245,               private subpool                 +
               BNDRY=PAGE              page boundary
         LR    R2,R1                   scrub
         XR    R15,R15                 dynamic
         L     R3,=AL4(TKN@TSZE)       storage length
         MVCL  R2,R14                  storage area
         LR    R7,R1                   copy storage address
         USING TKN,R7                  set addressability
         MVC   TKNID,=CL4'TKN'         init ID
         LA    R3,TKN1ST               1st token address
         ST    R3,TKNTOP               init top token address
         XC    TKNCNT,TKNCNT           init active token count
         MVC   TKNSPN,=AL4(SP245)      init table subpool
         MVC   TKNTOT,=AL4(TKN@NUM)    init total token count
         MVC   TKNSZE,=AL4(TKN@TSZE)   init table size
         STCM  R7,7,TCBFSAB            set System-Level token table
         LA    R3,TCBFSA               get FSA address
         ST    R3,EVTSYLVL             activate token service
         OI    EVTFLG2,EVT@TOKN        token tables initialized
         DROP  R4
*
**       Token tables services initialized
*
TKN0099  DS    0H
         OI    DSAFLG3,DSA@002I        set ECF002I issue indicator
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
TKNEXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TODCNV                                                     */
*/*                                                                  */
*/* Function: Store Clock Conversion subroutine                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TODCNV   $SUBINI
         USING PSA,0
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Convert UTC to LOCAL clock
*
         L     R1,FLCCVT               CVT
         USING CVT,R1                  set addressability
         L     R1,CVTEXT2              CVT extension
         USING CVTXTNT2,R1             set addressability
         STCK  EVTISTCK                current UTC/GMT clock value
         LM    R2,R3,EVTISTCK          load clock value
         LM    R4,R5,CVTLDTO           load offset value
         ALR   R3,R5                   add time offset
         ALCR  R2,R4                   add w/carry offset
         LM    R4,R5,CVTLSO            load leap seconds
         SLR   R3,R5                   subtract leap seconds
         SLBR  R2,R4                   subtract w/borrow leap seconds
         STM   R2,R3,EVTISTCK          store LOCAL time clock
*
**       Convert LOCAL clock to decimal
*
         MVC   DSARC,=AL4(RC8)         set RC
         TM    EVTFLG5,EVT@HZOS        zOS host?
         BZ    TODEXIT                 no, exit
         MVC   DSASCONV(STCK@CNL),STCKLIST
         STCKCONV STCKVAL=EVTISTCK,    convert clock to decimal        +
               CONVVAL=EVTOSTCK,TIMETYPE=DEC,DATETYPE=MMDDYYYY,        +
               MF=(E,DSASCONV)
         ST    R15,DSARC               save RC
*
TODEXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
STCKLIST STCKCONV MF=L
STCK@CNL EQU   *-STCKLIST
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: XPCINI                                                     */
*/*                                                                  */
*/* Function: Define Stacking PC Environment Subroutine              */
*/*                                                                  */
*/* Description: Connect an entry table to a linkage index and       */
*/*              connect it to the linkage table of every address    */
*/*              space, both present an future.                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R6  SCTX address                                     */
*/*             R7  ETE address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
XPCINI   $SUBINI                                                 99@07A
         USING PSA,0
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC8)         set RC
         MVC   DSARSN,=AL4(RSN0848)    set RSN
         $RETRY XPCEXIT,               activate retry                  +
               SDUMP=YES,              skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Set authorized authorization index
*
         AXEXT ,                       extract AX
         ST    R0,EVTAXEXT             save it
         LA    R0,1                    request AX=1
         ST    R0,EVTAXSET             save it
         AXSET AX=(0)                  set it
*
**       Reserve System Linkage Index
*
         L     R6,EVTSCTX              SCTX address
         USING SCTX,R6                 set addressability
         ICM   R2,15,SCTXPCLX          SLX initialized?
         BZ    XPC0000                 no, acquire SLX
         MVC   EVTLXVAL,SCTXPCLX       yes, copy LSX
         B     XPC0010                 carry on
*
XPC0000  DS    0H
         LA    R2,1
         ST    R2,DSALXCNT             SLX=1
         MVC   DSAPLST(LXR@SZE),LXRES
         LXRES LXLIST=DSALXRES,MF=(E,DSAPLST)
         MVC   EVTLXVAL,DSALXVAL       copy SLX value
         MVC   SCTXPCLX,DSALXVAL       copy SLX to SCTX
*
**       Define Entry Table Entry
*
XPC0010  DS    0H
         L     R2,EVTXPCA              ECFXPC
         LA    R7,DSAPLST              ETD header
         LA    R7,ETDLEN(,R7)          ETD entry
         USING ETDELE,R7               set addressability
         MVC   DSAPLST(DEF@ALLZ),DEFINIT
         ETDEF TYPE=SET,ETEADR=(7),                                    +
               ROUTINE=(2),            PC routine EPA                  +
               PC=STACKING,            stacking PC                     +
               SASN=NEW,               SASN=PASN                       +
               RAMODE=31,              AMODE=31                        +
               ASCMODE=PRIMARY,        execute in ECF address space    +
               SSWITCH=NO,             CR1 & CR7 set to primary        +
               STATE=SUPERVISOR,       Supervisor state                +
               AKM=(0:15),             all callers are welcome         +
               EKM=(0:15)              PKM key mask
*
**       Build Entry Table Descriptor
*
         LA    R7,DSAPLST              ETD header
         ETCRE ENTRIES=(7)             create PC routine
         ST    R0,EVTETTKN             Save ET token
*
**       Connect LX to Entry Table
*
         LA    R2,1
         ST    R2,DSAETCNT             ETE=1
         MVC   DSAETTKN,EVTETTKN       ETE token
         ST    R2,DSALXCNT             SLX=1
         MVC   DSALXVAL,EVTLXVAL       SLX value
         MVC   DSAPLST(ETCON@SZ),ETCON
         LA    R3,DSAETCON             ETE list
         LA    R4,DSALXRES             SLX list
         ETCON TKLIST=(3),LXLIST=(4),MF=(E,DSAPLST)
         ST    R15,DSARC               save RC
         XC    DSARSN,DSARSN           zero RSN
*
**       Publish Event Capture PC Routine
*
         L     R5,EVTSSCT              SSCT address
         USING SSCT,R5                 set addressability
         MVC   SSCTSUS2,EVTLXVAL       publish PC
         MVC   EVTPCNUM,EVTLXVAL       publish PC
*
**       Issue PC installed debug msg
*
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON?
         BZ    XPCEXIT                 no, exit
         $WTO  MID=ECF120I,                                            +
               VAR1==CL11'initialized',                                +
               VAR2=EVTPCNUM
*
XPCEXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ETCON    ETCON MF=L
ETCON@SZ EQU   *-ETCON
         DS    0F
LXRES    LXRES SYSTEM=YES,                                             +
               REUSABLE=NO,                                            +
               LXLIST=0,MF=L
LXR@SZE  EQU   *-LXRES
         DS    0D
DEFINIT  ETDEF TYPE=INITIAL
DEFXPC   ETDEF TYPE=ENTRY,                                             +
               PC=STACKING,            stacking                        +
               SASN=NEW,               SASN=PASN                       +
               RAMODE=31,              AMODE=31                        +
               ROUTINE=0,              ECFXPC                          +
               ASCMODE=PRIMARY,        execute in ECF address space    +
               SSWITCH=NO,             CR1 & CR7 set to primary        +
               STATE=SUPERVISOR,       Supervisor state                +
               AKM=(0:15),             all callers are welcome         +
               EKM=(0:15)              PKM key mask
DEFINAL  ETDEF TYPE=FINAL
DEF@ALLZ EQU   *-DEFINIT               complete ETD size
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: CRTOKEN                                                    */
*/*                                                                  */
*/* Function: Create Persistent System-Level Token Subroutine        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
CRTOKEN  $SUBINI                                                 99@07A
         USING PSA,0
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Delete ECF instance token
*
         LA    R3,DSATOKEN             NTP address
         USING NTP,R3                  set addressability
         MVC   NTPTNAME,EVTKNMDL       token model
         MVC   NTPVER,EVTRELNO         subsysytm version
         MVC   NTPSUB,EVTSUBNM         subsystem name
         MVC   EVTKNMDL,NTPTNAME       replace model w/real name
         $TOKEN DELETE,LEVEL=SYSTEM,NAME=NTPTNAME
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         LTR   R15,R15                 successful?
         BZ    CRT0010                 yes
         CLC   DSARC,=AL4(RC4)         token found?
         BE    CRT0010                 no
         MVC   DSATKNID,=CL8'Delete'   request ID
         B     CRT0099                 error
*
**       Create ECF instance token
*
CRT0010  DS    0H
         LA    R1,EVTSVC               SVC instruction address
         ST    R1,NTPSVCA              init in token
         MVC   NTPEVTA,EVTEVTAD        EVT address
         MVC   NTPASCB,EVTASCB         ASCB address
         MVC   NTPPCNUM,EVTPCNUM       init PC EX/LX
         OI    STKFLG2,STK@SUBS        ECFSUB caller
         $TOKEN CREATE,LEVEL=SYSTEM,NAME=NTPTNAME,TOKEN=NTPTOKEN
         NI    STKFLG2,XFF-STK@SUBS    reset ECFSUB caller
         ST    R15,DSARC               save RC
         ST    R0,DSARSN               save RSN
         LTR   R15,R15                 successful?
         BNZ   CRT0020                 no
         OI    EVTFLG5,EVT@SLVL        System-Level token created  @10A
         B     CRTEXIT                 exit
*
CRT0020  DS    0H
         MVC   DSATKNID,=CL8'Create'   request ID
*
CRT0099  DS    0H
         $WTO  MID=ECF063E,                                            +
               VAR1=DSATKNID,VAR2=NTPTNAME,                            +
               VAR3=DSARC,VAR4=DSARSN
         L     R3,DSARSN
         ABEND X'FF1',DUMP,REASON=(R3)
*
CRTEXIT  DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFMAS ,
         $ECFREB ,
         $ECFZIO ,
         $ECFRCT ,
         $ECFTKN ,
         $ECFSRE ,
         $ECFEQU ,
         $ECFSSVT DSECT=YES
         $XMPOST MAP=YES
         $SRINIT DSECT=YES
         $MODID ID=SVC,DSECT=YES
         $SREQID ID=ZID,DSECT=YES
         $IEWFID ID=IEW,DSECT=YES
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASVA   DS    18F                     save area
DSASAV2  DS    7F                      STCINI subroutine save area
         DS    0X
DSAFLG1  DS    XL1                     flags
DSA@INI  EQU   X'80'                   initialization complete
DSA@NOS  EQU   X'40'                   no previous subsys instance
DSA@STA  EQU   X'20'                   ESTAE established
DSA@FRE  EQU   X'10'                   previous instance cleaned up
DSA@001  EQU   X'08'                   ECF001I issued indicator
DSA@CHN  EQU   X'04'                   SSCT added successfully
DSA@CSA  EQU   X'02'                   $SSVT relocated to CSA
DSA@SSM  EQU   X'01'                   SSI-support LMOD loaded in CSA
         DS    0X
DSAFLG2  DS    XL1                     flags
DSA@ENQ  EQU   X'80'                   init resource ENQ indicator
DSA@SHOW EQU   X'40'                   OPT={SHOW|NOSHOW} indicator
DSA@LCSA EQU   X'20'                   ECFSSM loaded into CSA
DSA@RCVN EQU   X'10'                   RCV={NO|YES} indicator
DSA@CSAN EQU   X'08'                   CSA={NO|YES} indicator
DSA@DSUB EQU   X'04'                   SUB=ECF default indicator
DSA@DCPL EQU   X'02'                   previous cell pools indicator
DSA@MSAS EQU   X'01'                   running in MSAS indicator
         DS    0X
DSAFLG3  DS    XL1                     flags
DSA@DFLT EQU   X'80'                   PARM=defaults used indicator
DSA@EXIT EQU   X'40'                   WTOR reply exit indicator
DSA@989E EQU   X'20'                   ECF989E message issued
DSA@002I EQU   X'10'                   ECF002I message indicator
DSA@SVCQ EQU   X'08'                   SVCUPDTE resource ENQ       @06C
DSA@INIT EQU   X'04'                   INISUB complete indicator   @06C
DSA@RV36 EQU   X'02'                   -available
DSA@RV37 EQU   X'01'                   -available
         DS    0X
DSAFLG4  DS    XL1                     flags
DSA@RV40 EQU   X'80'                   -available
DSA@RV41 EQU   X'40'                   -available
DSA@RV42 EQU   X'20'                   -available
DSA@RV43 EQU   X'10'                   -available
DSA@RV44 EQU   X'08'                   -available
DSA@RV45 EQU   X'04'                   -available
DSA@RV46 EQU   X'02'                   -available
DSA@RV47 EQU   X'01'                   -available
         DS    0F
DSARC    DS    F                       return code
DSAXRC   DS    F                       $LOAD return code
DSARSN   DS    F                       reason code
DSAEVT   DS    F                       EVT address
DSAEVTC  DS    F                       current EVT address
DSAGR14  DS    F                       R14 save area               @08A
DSATOKN  DS    F                       ESTAE token                 @06A
DSASPNM  DS    F                       previous EVT subpool
DSAZEVT  DS    F                       previous EVT size
DSASSMA  DS    F                       ECFSSM storage address
DSASSML  DS    F                       ECFSSM size(doublewords)
DSAREQA  DS    F                       ECFREQ storage address
DSAREQL  DS    F                       ECFREQ storage length
DSAIEWA  DS    F                       ECFIEW storage address
DSAIEWL  DS    F                       ECFIEW storage length
DSAEKEY  DS    F                       entry protect key
DSASKEY  DS    F                       supervisor protect key
DSACPID  DS    F                       cell pool address
DSACELL  DS    F                       cell address
DSAIPAR  DS    F                       input PARM regs
DSAOPAR  DS    F                       output PARM reg
DSAPLEN  DS    F                       PARM= data length
DSAMSAS  DS    F                       Master Scheduler ASCB/zero
DSARECB  DS    F                       WTOR ECB word
DSATCBA  DS    F                       TCB address
         DS    0F
DSASDSA  DS    F                       subtasks DSA size
DSASTK34 DS    F                       ECFSRV(S34) stack address
DSASTK35 DS    F                       ECFSRV(S35) stack address
DSASTKRF DS    F                       ECFSRV(RFR) stack address
DSASTKAD DS    F                       ECFSRV(ADD) stack address
DSASTKCO DS    F                       ECFSRV(COM) stack address
DSASTKST DS    F                       ECFSRV(STC) stack address
DSASTKDI DS    F                       ECFSRV(DIE) stack address
DSASTKSY DS    F                       ECFSRV(SYS) stack address   @10A
DSASTKSV DS    F                       ECFSRV(SVC) stack address   @11A
DSARTADD DS    F                       ECFSRV(ADD) RTB table addr  @06A
DSARTRFR DS    F                       ECFSRV(RFR) RTB table addr  @06A
         DS    0F
DSALXRES DS    0F                      LXRES/LXFRE
DSALXCNT DS    F                       -one system LX
DSALXVAL DS    F                       -returned LX value
DSA@LXSZ EQU   *-DSALXRES              LXRES/LXFRE list size
         DS    0F
DSAETCON DS    0F                      ETCON/ETDIS list
DSAETCNT DS    F                       -one ETE
DSAETTKN DS    F                       -ETE token
DSA@ETSZ EQU   *-DSAETCON              ETCON/ETDIS list size
         DS    0F
DSADEVTP DS    6F                      DEVTYPE work area
         DS    0C
DSAREL   DS    CL8                     subsystem release
DSARELZ  EQU   *-DSAREL
         DS    0C
DSAPRFX  DS    CL1                     CMD={?|other} parm
DSAPRFXZ EQU   *-DSAPRFX
         DS    0C
DSAMSUB  DS    CL4                     SUB={ECF} parm
DSAMSUBZ EQU   *-DSAMSUB
         DS    0C
DSAFCID  DS    CL4                     function ID
DSASTCNM DS    CL8                     ECF STCname
DSAINITP DS    CL8                     ECFINIT initialization parm
DSATASK  DS    CL8                     ECFSRV(subtask) ID
DSALPAR  DS    CL8                     ECVTLPNM LPAR name          @06A
DSAVMID  DS    CL8                     ECVTVMNM VM host ID         @06A
DSAPREFX DS    CL8                     CPF command prefix          @08A
DSAOWNER DS    CL8                     CPF command prefix owner    @08A
         DS    0C
DSAPRODN DS    CL8                     product name from CVTPRODN  @06A
DSAPRODI DS    CL8                     FMID from CVTPRODI          @06A
DSATKNID DS    CL8                     name/token pair service ID  @06A
         DS    0C
DSAMEMN  DS    CL8                     INI={ECFMSTR|member} JCL parm
DSAMEMNZ EQU   *-DSAMEMN
         DS    0C
DSASSMN  DS    CL8                     SSM={ECFCSM|ECFLSM|lmod} parm
DSASSMNZ EQU   *-DSASSMN
         DS    0C
DSAOPTS  DS    CL8                     OPT={SHOW|NOSHOW} JCL parm
DSAOPTSZ EQU   *-DSAOPTS
         DS    0C
DSARCVN  DS    CL3                     RCV={NO|YES} JCL parm
DSARCVSZ EQU   *-DSARCVN
         DS    0C
DSACSAN  DS    CL4                     CSA={NO|YES} JCL parm
DSACSASZ EQU   *-DSACSAN
         DS    0C
DSADBUG  DS    CL3                     DEBUG={ON|OFF} parm
DSADBGSZ EQU   *-DSADBUG
         DS    0C
DSATRCE  DS    CL3                     TRACE={ON|OFF} parm
DSATRCSZ EQU   *-DSATRCE
         DS    0F
DSAISTCK DS    0CL16                   STCKCOV output
DSA@ITML EQU   *-DSAISTCK
         DS    0D
DSADWRD  DS    D                       conversion work area
DSADWRD2 DS    D                       conversion work area
         DS    0F
DSAHDR   DS    0CL24                   cell pool header
DSAHSUB  DS    CL4                     -subsystem name
DSAHFL1  DS    CL1                     -filler
DSAHREL  DS    CL4                     -subsystem release
DSAHFL2  DS    CL1                     -filler
DSAHTXT  DS    CL14                    -cell pool header name
DSAH@SZE EQU   *-DSAHDR                keep it together
         DS    0D
DSAPARM  DS    CL100                   PARM= parameters
DSAPARMZ EQU   *-DSAPARM               max parm length
         DS    0C
DSAVAR   DS    CL8                     variable data
DSAVARX  DS    CL1                     slack byte
DSA@VARZ EQU   *-DSAVAR                keep it together
         DS    0F
DSAREPLY DS    CL44                    WTOR reply work area
DSARPLYZ EQU   *-DSAREPLY              max reply length
         DS    0F
DSATTACH DS    CL(ATTACHZL)            ATTACH listform
         DS    0F
DSATOKEN DS    CL(NTP@SIZE)            Name/token pair             @03A
         DS    0F
DSAOLST  OPEN  (,),MF=L                OPEN listform
         DS    0F
DSACLST  CLOSE (,),MF=L                CLOSE listform
         DS    0F
DSAENQ   DS    CL(ECFSTCL)             ENQ listform
         DS    0F
DSADEQ   DS    CL(DEQINIL)             DEQ listform
         DS    0F
DSAESTAE DS    CL(ESTAEL)              ESTAE listform
         DS    0F                                                  @06A
DSASVCUP DS    CL(SVCUPDTL)            SVCUPDTE listform           @06A
         DS    0F                                                  @06A
DSASCONV DS    CL(STCK@CNL)            STCKCONV listform           @06A
         DS    0F
DSAZIO   DS    CL(ZIO@SIZE)            ZIO block
         DS    0D
DSACPFX  CPF   MF=(L,DSACPF)           CPF listform                @08A
         DS    0D
DSACTIMR STIMERM CANCEL,MF=L           STIMERM listform            @10A
         DS    0D
DSAEVTB  DS    CL(EVT@SIZE)            local EVT
         DS    0D
DSAPDCB  DS    CL100                   PARMLIB DCB
DSAPDCBL EQU   *-DSAPDCB
         DS    0F
DSAWTOR  DS    0CL100                  WTOR listform
DSAWRLN  DS    AL1                     -reply length
DSAWRAD  DS    AL3                     -reply address
DSAWREC  DS    AL4                     -reply ECB
DSAWMCS  DS    AL4                     -text/MCS
DSAWTXT  DS    CL84                    -msg text
DSAWTRL  DS    CL4                     -routing codes
DSAWTORL EQU   *-DSAWTOR               WTOR size
         DS    0D                      **must be dword bndry**
DSAPLST  DS    XL128                   parmlist
DSAPLSTL EQU   *-DSAPLST               parmlist size
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
**       PARM= Keyword table entry map
*
PARM     DSECT ,
PARMKEYL DS    AL2                     keyword length
PARMDATL DS    AL2                     keyword max data length
PARMEPA  DS    A                       keyword routine EPA
PARMKEYV DS    CL8                     keyword name
PARM@SZE EQU   *-PARM
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHASCVT ,
         IHASVC ,
         IHAASCB ,
         IHAASSB ,
         IHAASXB ,
         IHASRB ,
         IHAACEE ,
         IHAETD LIST=YES
         IKJTCB ,
         IHASTCB ,                                                 @10A
         IEFJESCT ,
         IEFJSCVT ,
         IEFJSSVT ,
         IEFJSSIB ,
         IEEBASEA ,
         IEESMCA ,
         CVT   DSECT=YES,LIST=YES
         IHAECVT ,
         DCBD  DSORG=PS,DEVD=DA
         END
./ ADD NAME=ECFSVC   0199-21068-21334-0731-01204-00703-01204-BENMAR  16
ECFSVC   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFSVC                                                     */
*/*                                                                  */
*/* Function: Event Capture Supervisor Call Router                   */
*/*                                                                  */
*/* Description: Routes control to the requested SVC routine. The    */
*/*              following SVC routines are currently supported:     */
*/*                                                                  */
*/*              TPROT   - Test fetch and store protection           */
*/*              AUTH    - Change system state and protect key       */
*/*              TRAPSVC - Restores SVC screening environment        */
*/*              USERSVC - Model SVC routine                         */
*/*                                                                  */
*/* Security: You need to protect these SVC routines by defining     */
*/*           profile zECF.SVC.AUTH under resource class ECFCLASS.   */
*/*                                                                  */
*/*           RDEFINE ECFCLASS ZECF.SVC.AUTH UACC(NONE)              */
*/*                                                                  */
*/*           Grant read access to users that are authorized to      */
*/*           issue these services.                                  */
*/*                                                                  */
*/*           PERMIT ZECF.SVC.AUTH +                                 */
*/*           CLASS(ECFCLASS) ID(user-ID) ACCESS(READ)               */
*/*                                                                  */
*/* Input Regs: R0  Parameter                                        */
*/*             R1  Parameter                                        */
*/*             R3  CVT address                                      */
*/*             R4  TCB address                                      */
*/*             R5  SVRB address                                     */
*/*             R6  Entry address                                    */
*/*             R7  ASCB address                                     */
*/*             R14 Exit prolog address                              */
*/*             R15 Function ID                                      */
*/*                                                                  */
*/* Regs Usage: R4  TCB address                                      */
*/*             R5  SVRB address                                     */
*/*             R6  EVT address                                      */
*/*             R7  FRR address                                      */
*/*             R8  SVX address                                      */
*/*             R9  SVCE address                                     */
*/*             R10 Base address                                     */
*/*             R11 DSA address                                      */
*/*             R12 XSA address                                      */
*/*             R13 Savearea address                                 */
*/*                                                                  */
*/* Attributes: Reentrant                                            */
*/*             key zero                                             */
*/*             Supersvisor state                                    */
*/*             Dynamic LPA                                          */
*/*             Non-preemptive                                       */
*/*             Page fixed                                           */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 05072021 | Ben Marino  | zOS serviceability support    *
* @03 | V2R2 | 05172021 | Ben Marino  | Added SAF authorization check *
* @04 | V2R3 | 07252021 | Ben Marino  | Extended authorization SVC    *
* @05 | V2R3 | 09212021 | Ben Marino  | Added SVC screening support   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFSVC   $ENTRY SAVE=NO,EPR=R6                                   99@05C
         LR    R10,R6                  copy base
         USING PSA,0                   FLC addressability
         USING RBSECT,R5               SVRB addressability
         USING ECFSVC,R10              base addressability
*
**       Save parameters GPRs/ARs
*
         LA    R12,RBEXSAVE            XSA address
         USING XSA,R12                 set addressability
         XC    XSA(XSA@SIZE),XSA       clear XSA
         STM   R14,R1,XSASAVE          save regs
         STMH  R14,R1,XSAHSAVE         save high regs
         EAR   R6,AR0                  copy AR0 in R6
         EAR   R7,AR1                  copy AR1 in R7
         EAR   R8,AR14                 copy AR14 in R8
         EAR   R9,AR15                 copy AR15 in R9
*
**       Validity check caller RB
*
         XR    R3,R3                   zero
         ICM   R3,7,RBLINKB            SVC caller RB
ZSVRB    USING RBSECT,R3               set addressability
         LA    R3,ZSVRB.RBOPSW         SVC caller PSW
         USING PSW,R3                  set addressability
         L     R3,PSWIA                NSI address
         SLL   R3,1                    drop AMODE bit
         SRL   R3,1                    restore address
         SAM31 ,
         CLI   0(R3),X'0A'             SVC screening FCID?
         BNE   SVC0000                 no, general SVC call
         CLC   2(2,R3),XCID            SVC screening XCID?
         BNE   SVC0000                 no, general SVC call
         OI    XSAFLG1,XSA@SCRN        SVC screening entry call
*
**       Extract caller issued SVC
*
SVC0000  DS    0H
         SL    R3,ZDELTA               point to caller issued SVC
         XR    R2,R2                   scrub
         IC    R2,1(,R3)               SVC number
         STC   R2,XSASVCN              save it
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         L     R3,CVTABEND             SCVT
         USING SCVTSECT,R3             set addressability
         L     R3,SCVTSVCT             SVC table origin
         SLL   R2,3                    multiply SVC number by 8
         LA    R3,0(R2,R3)             SVC entry address
         USING SVCENTRY,R3             establish addressability
         TM    SVCTP,SVCTP6            T6 SVC?
         BZ    SVC0005                 no
         OI    XSAFLG1,XSA@TYP6        yes
         DROP  R3
*
**       Storage obtain DSA
*
SVC0005  DS    0H
         SAM24 ,
         STORAGE OBTAIN,COND=NO,SP=253,                                +
               LENGTH=DSA@SIZE,LOC=BELOW,LINKAGE=SYSTEM
         LR    R11,R1                  DSA address
         USING DSA,R11                 set addressability
         LA    R13,DSASAVE             savearea address
         LR    R0,R1                   scrub,
         XR    R15,R15                 dynamic,
         LA    R1,DSA@SIZE             DSA size
         MVCL  R0,R14                  clear it
         ST    R2,DSASVCN              save SVC number
         ST    R5,DSASVRB              save SVRB address
         STM   R6,R9,DSAARS            save ARs
         MVC   DSAEVTA,ECFEVTA         read only EVT address
         MVC   DSAFRRA,ECFFRRA         ECFFRR entry address
         MVC   DSAFCID,XSAGR15         copy FCID
         OI    XSAFLG2,XSA@DSAI        set debug indicator
*
**       Check for SVC screening
*
         TM    XSAFLG1,XSA@SCRN        SVC screening entry call
         BZ    SVC0050                 no, carry on
         USING TCB,R4                  TCB addressability
         ICM   R1,15,TCBSVCA2          SVC screening active?
         BNZ   SVC0010                 yes
         NI    XSAFLG1,XFF-XSA@SVCS    set inactive indicator
         B     SVC0050                 carry on
*
**       Obtain LOCAL lock
*
SVC0010  DS    0H
         SETLOCK OBTAIN,TYPE=LOCAL,                                    +
               MODE=UNCOND,REGS=SAVE,                                  +
               RELATED=('Serialize local supervisor')
*
**       Establish FRR recovery
*
         L     R3,DSAFRRA
         SETFRR A,FRRAD=(R3),MODE=FULLXM,PARMAD=(R7),                  +
               WRKREGS=(R14,R15)
         USING FRR,R7
         XC    FRR(FRR@SIZE),FRR       zero
         MVC   FRRID,=CL3'FRR'         ID
         ST    R11,FRRPARM             DSA address
         ST    R12,FRRXSA              XSA address
         LA    R3,SVC0030              retry address
         ST    R3,FRRRETRY             activate retry
         LA    R3,DSARGPRS             retry regs address
         ST    R3,FRRSAVE              retry regs address
         STM   R0,R15,DSARGPRS         save retry regs
         OI    XSAFLG2,XSA@FRRS        set debug indicator
*
**       Validity check SVCE table
*
         L     R9,TCBSVCA2             SVCE address
         USING SVCE,R9                 set addressability
         CLC   SVCEID,=CL4'SVCE'       valid indeed?
         BNE   SVC0030                 no
         OI    XSAFLG1,XSA@OKAY        tutto bene
         ST    R9,DSASVCEA             save SVCE address
*
**       Validity check EVT table
*
         L     R6,SVCEEVTA             EVT address
         USING EVT,R6                  set addressability
         CLC   EVTID,=CL4'EVT'         valid indeed?
         BNE   SVC0020                 no
         OI    XSAFLG3,XSA@EVTA        EVT available
         $DBUG 44,V1                   debug
*
**       Identify SVC request caller
*
SVC0020  DS    0H
         XR    R2,R2                   zero
         ICM   R2,7,RBLINKB            SVC caller RB
XRB      USING RBSECT,R2               set addressability
         LA    R3,XRB.RBOPSW           RBOPSW
         USING PSW,R3                  set addressability
         DROP  XRB
         MVC   DSANSI,PSWIA            copy PSW NSI
         DROP  R3
         NI    DSANSI,XFF-PSWAMODE31   turn off AMODE bit
         CLI   DSANSI,X'00'            is it us?
         BNE   SVC0030                 no
         L     R3,DSANSI               check NSI for SVXE
         USING SVXE,R3                 SVXE addressability
         CLC   SVCEFCID,SVXEFCID       ECFSVS caller?
         BNE   SVC0030                 no
         CLC   SVCEXCID,SVXEXCID       ECFSVS caller?
         BNE   SVC0030                 no
         L     R8,SVXESVXA             SVX address
         USING SVX,R8                  set addressability
         CLC   SVXID,=CL4'SVX'         valid indeed?
         BNE   SVC0030                 no
         OI    XSAFLG1,XSA@SVXK        yes
         ST    R8,DSASVXA              save SVX locally
         MVC   DSAFCID,ZSVCHOOK        set $SVCHOOK FCID
*
**       Copy parm ARs and GPRs
*
         MVC   SVXOLGRS,XSASAVE        copy low GPRs
         MVC   SVXOHGRS,XSAHSAVE       copy high GPRs
         MVC   SVXOARS,DSAARS          copy ARs
*
**       SVC screen attached TCB
*
         TM    SVXFLG3,SVX@ATTC        ATTACH/X SVC?
         BZ    SVC0030                 no
         ICM   R3,15,XSAGR15           ATTACH?X successful?
         BNZ   SVC0030                 no
         ICM   R3,15,XSAGR1            TCB address init?
         BZ    SVC0030                 no
XTCB     USING TCB,R3                  yes
         CLC   XTCB.TCBTCBID,=CL4'TCB' Valid indeed?
         BNE   SVC0030                 no
         ST    R3,SVCEJTCB             save TCB address
         OI    XTCB.TCBFLGS7,TCBSVCS   activate SVC screening
         OI    XSAFLG3,XSA@ATTC        attched TCB SVC screened
         DROP  XTCB
*
**       Recovery retry routine
*
SVC0030  DS    0H
         TM    FRRFLG1,FRR@RTRY        FRR entered?
         BZ    SVC0040                 no
         OI    XSAFLG1,XSA@ABND        yes
         TM    XSAFLG3,XSA@EVTA        EVT available?
         BZ    SVC0040                 no
         $DBUG 46,V2                   debug
*
**       Delete FRR recovery
*
SVC0040  DS    0H
         SETFRR D,WRKREGS=(R14,R15)    delete FRR
*
**       Release LOCAL lock
*
         SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,                         +
               RELATED=('Release local supervisor serialization')
*
         TM    XSAFLG1,XSA@ABND        did we fail?
         BNZ   SVCABEND                yes
         OI    XSAFLG2,XSA@EPAT        set debug indicator
         TM    XSAFLG3,XSA@EVTA        EVT available?
         BZ    SVC0050                 no
         $DBUG 48,V3                   debug
*
**       Call target SVC routine
*
SVC0050  DS    0H
         LA    R3,EPATABLE             SVC routine table
         USING ZSVC,R3                 set addressability
*
SVC0055  DS    0H
         CLC   ZSVCEPA,EPATBEND        end of table?
         BE    SVCABEND                yes, ABEND
         CLC   ZSVCFCID,DSAFCID        FCID match?
         BNE   SVC0060                 no, next entry
         ICM   R15,15,ZSVCEPA          SVC entry init?
         BZ    SVC0060                 no, next entry
         BALR  R14,R15                 call SVC routine
*
**       Log SVC return data record
*
         TM    XSAFLG1,XSA@SCRN        SVC screening entry call
         BZ    SVCEXIT                 no, exit
         TM    SVXFLG3,SVX@SD60        IEFSD060 TCB?
         BNZ   SVCEXIT                 yes, exit
         ICM   R1,15,DSASVXA           SVX init?
         BZ    SVCEXIT                 no
         MVC   SVXSRID,=CL3'END'       set SRID
         L     R15,ECFLOGA             log processor
         BALR  R14,R15                 log SVC record
         TM    XSAFLG3,XSA@EVTA        EVT available?
         BZ    SVCEXIT                 no
         $DBUG 50,V4                   debug
         B     SVCEXIT                 exit
*
SVC0060  DS    0H
         LA    R3,ZSVC@SZE(,R3)        next ZSVC entry
         B     SVC0055                 loop
*---------------------------------------------------------------------*
*        Exit                                                         *
*--------+---------+---------+---------+---------+---------+---------+*
SVCEXIT  DS    0H
         TM    XSAFLG1,XSA@SCRN        SVC screening entry call?
         BZ    SVCXIT20                no
         TM    XSAFLG1,XSA@OKAY        SVCE valid?
         BZ    SVCXIT00                no
         MVC   SVCESVCF,XSAFLG1        preserve XSA flags
*
SVCXIT00 DS    0H
         TM    XSAFLG1,XSA@SVXK        SVX valid?
         BZ    SVCXIT20                no
         TM    XSAFLG3,XSA@EVTA        EVT valid?
         BZ    SVCXIT10                no
         MVC   EVTXDATA(4),SVCEFLG1    debug
         MVC   EVTXDATA+4(4),SVXSVCNM  debug
*
**       Storage release SVX
*
SVCXIT10 DS    0H
         L     R0,SVXSIZE              SVX block size
         STORAGE RELEASE,COND=NO,                                      +
               ADDR=(R8),LENGTH=(R0),SP=253,                           +
               LINKAGE=SYSTEM
*
**       Storage release DSA
*
SVCXIT20 DS    0H
         LAM   AR6,AR9,DSAARS          load output ARs
         STORAGE RELEASE,COND=NO,                                      +
               ADDR=(R11),LENGTH=DSA@SIZE,SP=253,                      +
               LINKAGE=SYSTEM
*
**       Restore SVC caller ARs/GPRs
*
         LM    R15,R1,XSAOPAR          load output GPRs
         LMH   R14,R1,XSAHSAVE         reload high output regs
         CPYA  AR0,AR6                 load AR0 from AR6
         CPYA  AR1,AR7                 load AR1 from AR7
         CPYA  AR14,AR8                load AR14 from AR8
         CPYA  AR15,AR9                load AR15 from AR9
*
**       Return to exit prolog
*
         L     R14,XSAGR14             exit prolog address
         TM    XSAFLG1,XSA@SCRN        SVC screening entry call
         BZR   R14                     no
         TM    XSAFLG1,XSA@SVCS        reactivate SVC screening?
         BZR   R14                     no
         OI    XSAFLG1,XSA@SACT        yes
         OI    TCBFLGS7,TCBSVCS        reactivate SVC screening
         TM    XSAFLG3,XSA@EVTA        EVT available?
         BZR   R14                     no
         $DBUG 52,V5                   debug
         BR    R14                     exit
*---------------------------------------------------------------------*
*        ABEND Exit                                                   *
*--------+---------+---------+---------+---------+---------+---------+*
SVCABEND DS    0H
         L     R3,DSAFCID              show FCID in R3
         ABEND X'FFE',DUMP,REASON=(R3)                             @02C
*---------------------------------------------------------------------*
*        SVC Routines Table                                           *
*            Function codes are defined in $ECFEQU macro.             *
*--------+---------+---------+---------+---------+---------+---------+*
EPATABLE DS    0F
         $SVCENTY TYPE=INITIAL
*
         $SVCENTY TYPE=ENTRY,                                          +
               EP=TPROT,             TPROT SVC                         +
               FCID=$TPROT           function code
*
         $SVCENTY TYPE=ENTRY,                                          +
               EP=AUTH,              AUTH SVC                          +
               FCID=$AUTH            function code
*
         $SVCENTY TYPE=ENTRY,                                          +
               EP=TRAPSVC,           SVC screening routine             +
               FCID=$SVCHOOK         function code
*
         $SVCENTY TYPE=ENTRY,                                          +
               EP=USERSVC,           USER SVC model routine            +
               FCID=$USERSVC         function code
*
         $SVCENTY TYPE=FINAL
EPATABSZ EQU   *-EPATABLE
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFEVTA  DC    V(ECFVTA)             read only EVT
ECFFRRA  DC    V(ECFFRR)             FRR routine EA
ECFLOGA  DC    V(ECFLOG)             SVC screening log EPA
ZDELTA   DC    AL4(4)                SVC delta
EPATBEND DC    XL4'FFFFFFFF'         SVC table end indicator
ZSVCHOOK DC    AL4($SVCHOOK)         FCID
XCID     DC    XL2'FFFF'             XCID
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TPROT                                                      */
*/*                                                                  */
*/* Function: Test protection SVC routine                            */
*/*                                                                  */
*/* Description: Validates an address range by determining if the    */
*/*              storage key and protect key match. Switch to the    */
*/*              caller's protect key and perform fetch and store    */
*/*              into the page. An invalid fetch and store will be   */
*/*              handled by the FRR routine.                         */
*/*                                                                  */
*/* Why?         The TPROT instruction does not distinguish between  */
*/*              valid or invalid virtual storage addresses. When    */
*/*              the referenced page is swapped out TPROT sets CC 3, */
*/*              translation not available.                          */
*/*                                                                  */
*/* Calling Macro: $TPROT                                            */
*/* Note:          Refer to MAC($TPROT) macro for call examples.     */
*/*                                                                  */
*/* Input Regs: R11 DSA address                                      */
*/*             R12 XSA address                                      */
*/*                 XSAGR0  - Starting storage address               */
*/*                 XSAGR1  - Ending storage address or zero         */
*/*                 XSAGR15 - SVC router function code               */
*/*             R13 Svearea address                                  */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs usage: R9  FRR address                                      */
*/*             R10 Base address                                     */
*/*             R11 DSA address                                      */
*/*             R12 XSA address                                      */
*/*             R13 Savearea address                                 */
*/*                                                                  */
*/* Output Regs: R0  - R14 restored                                  */
*/*              R15 - return code                                   */
*/*                    00 - address is valid                         */
*/*                    04 - 0C4-4  Protection Exception              */
*/*                    08 - 0C5-5  Addressing Exception              */
*/*                    12 - 0C4-10 Segment Translation Exception     */
*/*                    16 - 0C4-11 Page Translation Exception        */
*/*                    20 - Internal service routine failure         */
*/*                                                                  */
*/********************************************************************/
TPROT    DS    0H
         USING DSA,R11
         USING XSA,R12
         B     12(,R15)
         DC    CL8'TPROT'              TYPE-3 SVC
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         LR    R10,R15                 set base address
         USING TPROT,R10               base addressability
         LA    R1,DSASVCSA             Chain,
         ST    R13,GPR@BWD(,R1)        save,
         ST    R1,GPR@FWD(,R13)        areas.
         LR    R13,R1
*
**       Obtain LOCAL lock
*
         SETLOCK OBTAIN,TYPE=LOCAL,                                    +
               MODE=UNCOND,REGS=USE,                                   +
               RELATED=('Serialize local Supervisor')
*
**       Establish FRR recovery
*
         L     R3,DSAFRRA
         SETFRR A,FRRAD=(R3),                                          +
               PARMAD=(R9),MODE=FULLXM,WRKREGS=(R14,R15)
         USING FRR,R9                  FRR addressability
         XC    FRR(FRR@SIZE),FRR       zero
         MVC   FRRID,=CL3'FRR'         ID
         MVI   FRRXRC,X'20'            initial RC
         ST    R11,FRRPARM             DSA address
         ST    R12,FRRXSA              XSA address
         LA    R3,TPROT40              retry address
         ST    R3,FRRRETRY             retry address
         LA    R3,DSARGPRS             retry regs address
         ST    R3,FRRSAVE              save retry regs address
         STM   R0,R15,DSARGPRS         save retry regs
         OI    FRRFLG1,FRR@PICC        program check indicator
*
**       Validity check address range
*
         XR    R8,R8                   range counter
         L     R1,XSAGR0               start address
         LA    R1,0(R1)                purify start address
         L     R2,XSAGR1               end address
         LA    R2,0(R2)                purify end address
         N     R1,WORDBDY              round start addr to word bndry
         N     R2,PAGEBDY              round en addr to word bndry
         BZ    TPROT10                 branch if range not specified
         LR    R3,R1                   save start address
         N     R3,PAGEBDY              round start addr to page bndry
         CR    R3,R2                   start & end addr on same page?
         BE    TPROT10                 yes, only validate one page
         LR    R8,R2                   set range conter
         SR    R8,R3                   get size of range
         SRL   R8,12                   divide by size of page
*
TPROT10  DS    0H
         LA    R8,1(,R8)               add one to validated pages
         USING PSA,0
         L     R6,PSATOLD              TCB address
         USING TCB,R6                  set addressability
         IC    R6,TCBPKF               TCB key
         SPKA  0(R6)                   switch to TCB key
         DROP  R6
*
TPROT20  DS    0H                      page test loop
         L     R6,0(R1)                pick up word from page
*
TPROT30  DS    0H
         CS    R6,R6,0(R1)             perform fetch & store
         BNZ   TPROT30                 repeat if unequal
         N     R1,PAGEBDY              rount to page bndry
         A     R1,PAGESIZE             increment start addr by page
         BCT   R8,TPROT20              repeat check for page range
         SPKA  0(0)                    set Supervisor key
         XC    XSARC,XSARC             set RC=0
*
**       Recovery retry routine
*
TPROT40  DS    0H
         TM    FRRFLG1,FRR@RTRY        FRR entered?
         BZ    TPROT50                 no
         MVC   XSARC,FRRCODE           set program check RC
*
**       Delete FRR recovery
*
TPROT50  DS    0H
         SETFRR D,WRKREGS=(R14,R15)    delete FRR
*
**       Release LOCAL lock
*
TPROT99  DS    0H
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,                          +
               RELATED=('Release local Supervisor serialization')
*
**       Exit routine
*
TPROTXIT DS    0H
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
PAGESIZE DC    F'4096'                 4k page size
WORDBDY  DC    XL4'FFFFFFFC'           word boundary reset value
PAGEBDY  DC    XL4'FFFFF000'           page boundary reset value
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: AUTH                                                       */
*/*                                                                  */
*/* Function: Authorization SVC routine                              */
*/*                                                                  */
*/* Description: Supports the following authorization sevices:       */
*/*                                                                  */
*/* Security: The SVC caller must have READ authority to profile     */
*/*           ZECF.SVC.AUTH, for RACF class, ECFCLASS, before        */
*/*           calling this SVC routine.                              */
*/*                                                                  */
*/* 1. Change RBOPSW key and system state as requested by the SVC    */
*/*    caller.                                                       */
*/*                                                                  */
*/*    This support is implemented by calling macro IEARBUP, which   */
*/*    updates the official PSW located in the XSB control block.    */
*/*    Starting with z/OS V1R13, the RBOPSW still contains the PSW,  */
*/*    but it's no longer relied upon by MVS. The official 16-byte   */
*/*    dispatch PSW is kept in field XSBOPSW16. The original RBOPSW  */
*/*    is kept in XSB_Orig_RBOPSW.                                   */
*/*    When the system detects that RBOPSW differs from the PSW kept */
*/*    in XSB_Orig_RBOPSW, a corresponding update is made to the PSW */
*/*    in XSBOPSW16.                                                 */
*/*                                                                  */
*/*    The following example shows how to invoke the ECF $AUTH macro */
*/*    to alter PSW key and system state:                            */
*/*                                                                  */
*/*    - MYPGM is running PSW key=8,        +------------+           */
*/*      problem state --------------------->START       |           */
*/*                                         | ..         |           */
*/*                                         | ..         |           */
*/*    - MYPGM now needs to run PSW key=0,  | ..         |           */
*/*      supervisor state ------------------> $AUTH SUP  |           */
*/*                                         | ..         |           */
*/*                                         | ..         |           */
*/*                                         | ..         |           */
*/*                                         | ..         |           */
*/*    - MYPGM now needs to return to PSW   | ..         |           */
*/*      key=8, problem state --------------> $AUTH PROB |           */
*/*                                         | ..         |           */
*/*                                         | ..         |           */
*/*                                         |END MYPGM   |           */
*/*                                         +------------+           */
*/*                                                                  */
*/*                                                                  */
*/* 2. Change jobstep task authorization as requested by SVC caller  */
*/*    by setting JSCBAUTH bit on or off. This allows TSO users to   */
*/*    issued the MODESET SVC as required to change system state and */
*/*    protect key.                                                  */
*/*                                                                  */
*/*    The following example shows how to invoke the ECF $AUTH macro */
*/*    to alter the protect key and system state:                    */
*/*                                                                  */
*/*    - MYPGM is running PSW key=8,        +------------+           */
*/*      problem state --------------------->START       |           */
*/*                                         | ..         |           */
*/*                                         | ..         |           */
*/*    - MYPGM needs to issue MODESET so    | ..         |           */
*/*      it can switch PSW key and system   | ..         |           */
*/*      state -----------------------------> $AUTH ON   |           */
*/*                                         | ..         |           */
*/*                                         | ..         |           */
*/*                                         | MODESET    |           */
*/*                                         | ..         |           */
*/*    - MYPGM no longer needs to issue     | ..         |           */
*/*      MODESET ---------------------------> $AUTH OFF  |           */
*/*                                         | ..         |           */
*/*                                         | ..         |           */
*/*                                         |END MYPGM   |           */
*/*                                         +------------+           */
*/*                                                                  */
*/* Calling Macro: $AUTH                                             */
*/*                                                                  */
*/* Note: Refer to MAC($AUTH) macro for call examples.               */
*/*                                                                  */
*/*                                                                  */
*/* Input Regs: R11 DSA address                                      */
*/*             R12 XSA address                                      */
*/*                 XSAGR0  - Authorization code                     */
*/*                           1 = Set JSCBAUTH bit on                */
*/*                           2 = Set JSCBAUTH bit off               */
*/*                           3 = Set PSW key=0, Supervisor state    */
*/*                           4 = Set PSW key=8, Problem state       */
*/*                 XSAGR15 - SVC Router function code               */
*/*             R13 Savearea address                                 */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs usage: R10 Base address                                     */
*/*             R11 DSA address                                      */
*/*             R12 XSA address                                      */
*/*             R13 Savearea address                                 */
*/*                                                                  */
*/* Output Regs: R0  output parameter                                */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/********************************************************************/
AUTH     DS    0H
         USING DSA,R11
         USING XSA,R12
         B     12(,R15)
         DC    CL8'AUTH'               TYPE-3 SVC
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 set base address
         USING AUTH,R10                base addressability
         LA    R1,DSASVCSA             Chain,
         ST    R13,GPR@BWD(,R1)        save,
         ST    R1,GPR@FWD(,R13)        areas.
         LR    R13,R1
*
**       Initialize resource profile
*
         L     R3,DSAEVTA              read only EVT
         USING EVT,R3                  set addressbility
         MVC   DSACZSZE,EVTCLSZE       CLASS name size
         MVC   DSACZECF,EVTCLASS       init class name
         DROP  R3
         MVI   DSAENTTY,BLANK
         MVC   DSAENTTY+1(DSA@ENTL-1),DSAENTTY
         MVC   DSAENTEL(SSAFNAMZ),SSAF init entity length+name
         LA    R1,DSA@ENTZ             entity buffer length
         STH   R1,DSAENTBL             init buffer length
*
**       Call authorization server
*
         MVC   DSAROUTE(RACR@SZE),RACLIST                          @03A
         LA    R2,2                    UACC(READ)
         RACROUTE REQUEST=AUTH,                                        +
               ENTITYX=DSAENTBF,       entity buffer                   +
               CLASS=DSACLASS,         resource class                  +
               ATTR=(2),               UACC attribute                  +
               LOG=ASIS,               whatever                        +
               RELEASE=1.9,            server release                  +
               WORKA=DSARWORK,         SAF work area                   +
               MF=(E,DSAROUTE)
         ST    R15,DSAXRC              SAF RC                      @05C
         LA    R3,DSAROUTE             RACROUTE listform
         USING SAFP,R3                 set addressability
         MVC   XSARC,SAFPRRET          RACF RC
         MVC   XSAPAR0,SAFPRREA        RACF RSN
         DROP  R3
         CLC   DSAXRC,=AL4(RC0)        SAF RC okay?                @05C
         BNE   AUTH000                 no, ABEND                   @04A
         CLC   XSARC,=AL4(RC0)         RACF authorized?            @04A
         BE    AUTH010                 yes                         @04A
*
AUTH000  DS    0H
         MVC   DSAWTO(WTOMSG1L),WTOMSG1                            @05A
         MVC   DSAWCLAS,DSACZECF       RACF class                  @05A
         MVC   DSAWPROF,DSAENTTY       RACF profile                @05A
         WTO   MF=(E,DSAWTO)           error msg                   @05C
         L     R2,DSAXRC               show SAF RC                 @05C
         L     R3,XSARC                show RACF RC
         L     R4,XSAPAR0              show RACF RSN
         L     R5,XSAGR15              show FCID in R3
         ABEND X'FFE',DUMP,REASON=(R5) not authorized
*
**       Set JSCB authorization
*
AUTH010  DS    0H
         USING PSA,0
         L     R4,PSATOLD              TCB
         USING TCB,R4                  set addressability
         L     R3,TCBJSCB              JSCB address
         USING IEZJSCB,R3              set addressability
         CLC   XSAGR0,AUTHON           $AUTH ON macro call?
         BNE   AUTH020                 no, test further
         OI    JSCBOPTS,JSCBAUTH       set authorization
         XC    XSARC,XSARC             set RC
         B     AUTHEXIT                exit
*
**       Reset JSCB authorization
*
AUTH020  DS    0H
         CLC   XSAGR0,AUTHOFF          $AUTH OFF macro call?
         BNE   XPSW100                 no, test further            @04C
         NI    JSCBOPTS,XFF-JSCBAUTH   reset authorizarion
         XC    XSARC,XSARC             set RC
         B     AUTHEXIT                exit                        @04A
*
**       Update PSW with key=0 Supervisor state
*
XPSW100  DS    0H                                                  @04A
         CLC   XSAGR0,PSWSUP0          $AUTH SUP macro call?
         BNE   XPSW200                 no, test further
         USING RBSECT,R5               RB addressability
         ICM   R5,7,RBLINKB            SVC caller RB?
         BZ    ABENDXIT                no, chicken!
         LA    R5,RBOPSW               RBOPSW
         USING PSW,R5                  set addressability
         NI    PSWBYTE1,XFF-PSWKEY     set key=0  X'F0'
         NI    PSWBYTE1,XFF-PSWPROB    turn off problem state X'01'
         DROP  R5
         SAM31 ,
         IEARBUP WHICHRB=PREV,         SVC caller RB                   +
               FUNCTION=UPDATE,        update PSW                      +
               PSWBYTE03=YES,          bytes 0 thru 3                  +
               RETCODE=XSARC,          RC                              +
               RSNCODE=XSAPAR0,        RSN                             +
               MF=(E,DSAPSWL)
         SAM24 ,
         LTR   R15,R15                 successful?
         BZ    AUTHEXIT                yes
         B     ABENDXIT                no, ABEND
*
**       Update PSW with key=8 Problem state
*
XPSW200  DS    0H
         CLC   XSAGR0,PSWPROB8         $AUTH PROB macro call?      @04A
         BNE   ABENDXIT                no, ABEND
         USING RBSECT,R5               RB addressability
         ICM   R5,7,RBLINKB            SVC caller RB?
         BZ    ABENDXIT                no, chicken!
         LA    R5,RBOPSW               RBOPSW
         USING PSW,R5                  set addressability
         OI    PSWBYTE1,PSWKEY8        set key=8 X'80'
         OI    PSWBYTE1,PSWPROB        turn on problem state bit X'01'
         DROP  R5
         SAM31 ,
         IEARBUP WHICHRB=PREV,         SVC caller RB                   +
               FUNCTION=UPDATE,        update PSW                      +
               PSWBYTE03=YES,          bytes 0 thru 3                  +
               RETCODE=XSARC,          RC                              +
               RSNCODE=XSAPAR0,        RSN                             +
               MF=(E,DSAPSWL)
         SAM24 ,
         LTR   R15,R15                 successful?
         BNZ   ABENDXIT                no, ABEND
*
**       Normal exit
*
AUTHEXIT DS    0H
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*
**       ABEND exit
*
ABENDXIT DS    0H
         L     R2,XSARC                show RC in R2
         L     R3,XSAPAR0              show RSN in R3
         L     R4,XSAGR15              show FCID in R15
         ABEND X'FFE',DUMP,REASON=(R2)
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
AUTHON   DC    F'1'                    JSCB authorize FCID
AUTHOFF  DC    F'2'                    JSCB unauthorize FCID
PSWSUP0  DC    F'3'                    PSW authorize FCID          @04A
PSWPROB8 DC    F'4'                    PSW unauthorize FCID        @04A
SSAF     DS    0F
SSAFLEN  DC    AL2(SSAFNAML)           profile name length
SSAFNAME DC    C'ZECF.SVC.AUTH'        profile name
SSAFNAML EQU   *-SSAFNAME
SSAFNAMZ EQU   *-SSAF
         DS    0F
RACLIST  RACROUTE REQUEST=AUTH,CLASS=0,ENTITYX=0,RELEASE=1.9,MF=L
RACR@SZE EQU   *-RACLIST
         DS    0F
WTOMSG1  WTO   'ECF076E READ AUTHORIZATION REQUIRED; CLASS(ECFCLASS) PR+
               OFILE(ZECF.SVC.AUTH)',ROUTCDE=(2,11),DESC=(4),MF=L
WTOMSG1L EQU   *-WTOMSG1
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TRAPSVC                                                    */
*/*                                                                  */
*/* Function: Restore SVC screening processing routine               */
*/*                                                                  */
*/* Description: Update SVC caller PSW and reactivate SVC screening  */
*/*              by setting flag TCBSVCS in TCB flag byte TCBFLGS7.  */
*/*                                                                  */
*/* Input Regs: R4  TCB address                                      */
*/*             R5  SVRB address                                     */
*/*             R11 DSA address                                      */
*/*             R12 XSA address                                      */
*/*                 XSAGR0  - Input parameter                        */
*/*                 XSAGR1  - Input parameter                        */
*/*                 XSAGR15 - Input parameter                        */
*/*             R13 Savearea address                                 */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs Usage: R5  RB address                                       */
*/*             R6  EVT address                                      */
*/*             R8  SVX address                                      */
*/*             R9  SVCE address                                     */
*/*             R10 Base address                                     */
*/*             R11 DSA address                                      */
*/*             R12 XSA address                                      */
*/*             R13 Savearea address                                 */
*/*                                                                  */
*/* Output Regs: R0  output parameter                                */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/********************************************************************/
TRAPSVC  DS    0H                                                99@05A
         USING EVT,R6
         USING DSA,R11
         USING XSA,R12
         B     12(,R15)
         DC    CL8'TRAPSVC'            TYPE-3 SVC
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 set base address
         USING TRAPSVC,R10             base addressability
         LA    R1,DSASVCSA             Chain,
         ST    R13,GPR@BWD(,R1)        save,
         ST    R1,GPR@FWD(,R13)        areas.
         LR    R13,R1
*
**       Establish addressability
*
         L     R8,DSASVXA              SVX address
         USING SVX,R8                  set addressability
         L     R9,DSASVCEA             SVCE address
         USING SVCE,R9                 set addressability
         L     R6,SVCEEVTA             EVT address
         USING EVT,R6                  set addressability
         L     R5,SVXRB                SVC caller RB address
         USING RBSECT,R5               set addressability
         OI    XSAFLG2,XSA@ENTY        set debug indicator
*
**       Update back-end entry count
*
TRAP000  DS    0H
         L     R14,SVCESVCC            entry count
         LA    R15,1(,R14)             add one
         CS    R14,R15,SVCESVCC        update count
         BNE   TRAP000                 changed: try again
         TM    XSAFLG3,XSA@EVTA        EVT available?
         BZ    TRAP010                 no
         MVC   EVTSVCCT,SVCESVCC       copy back-end count
*
**       Restore SVC caller RBOPSW
*
TRAP010  DS    0H
         LA    R3,RBOPSW               RBOPSW address
         USING PSW,R3                  set addressability
         CLC   PSWBYT03,SVXCPSW0       PSW byes 0-3 changed?
         BE    TRAP020                 no
         MVC   SVXCPSW0,PSWBYT03       yes, propagate change
         OI    XSAFLG2,XSA@SWAP        set debug indcator
*
TRAP020  DS    0H
         MVC   PSW(8),SVXCPSW          restore SVC caller PSW
         SL    R5,ZRBPRFXL             RB prefix
         USING RBPRFXST,R5             set addressability
         L     R4,RBXSB                XSB address
         USING XSB,R4                  set addressability
         OI    XSAFLG2,XSA@SWUP        set debug indicator
*
**       Restore SVC caller RBOPSW analogs
*
         SAM31 ,                       AMODE=31
         LA    R3,XSB_ORIG_RBOPSW      copy of RBOPSW
         MVC   PSW(8),SVXCPSW          restore SVC caller PSW
         LA    R3,XSBOPSW16            16-byte PSW analog address
         USING PSWE,R3                 set addressability
         MVC   PSWEBYT03,SVXCPSW0      restore SVC caller State
         NI    PSWEBYTE1,XFF-PSWEECMOD turn off EC mode bit
         MVC   PSWEIABYT47,SVXCPSW4    restore SVC caller NSI
         NI    PSWEIABYT47,XFF-PSWEAMODE31 turn off AMODE=31 bit
         TM    SVXCPSW4,PSWEAMODE31    SVC caller in AMODE=31?
         BZ    TRAP030                 no
         OI    PSWEBYT47,PSWEAMODE31   turn on AMODE=31 bit
         OI    XSAFLG2,XSA@XPSW        set debug indicator
*
TRAP030  DS    0H
         SAM24 ,
         OI    SVXFLG2,SVX@UPOK        set debug indicator
         OI    XSAFLG1,XSA@UPDT        SVC caller PSWs updated
         XC    SVXRC,SVXRC             RC
         TM    XSAFLG3,XSA@EVTA        EVT available?
         BZ    TRAP040                 no
         $DBUG 54,T1                   debug
*
**       Restore SVC caller registers
*
TRAP040  DS    0H
         MVC   XSARC,XSAGR15           restore parm reg 15
         MVC   XSAPAR0,XSAGR0          restore parm reg 0
         MVC   XSAPAR1,XSAGR1          restore parm reg 1
         OI    XSAFLG1,XSA@SVCS        reactivate SVC screening
         OI    SVXFLG2,SVX@SVCS        set debug indicator
         TM    XSAFLG3,XSA@EVTA        EVT available?
         BZ    TRAPEXIT                no
         $DBUG 56,T2                   debug
*
**       SVC exit
*
TRAPEXIT DS    0H
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ZRBPRFXL DC    AL4(RBPRFLNA)           RB prefix length
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: USERSVC                                                    */
*/*                                                                  */
*/* Function: Use this model to define your user SVC routine.        */
*/*                                                                  */
*/*                                                                  */
*/* Description: This is a model to be used as a template for        */
*/*              creating USER SVCs.                                 */
*/*                                                                  */
*/*                                                                  */
*/* Input Regs: R11 DSA address                                      */
*/*             R12 XSA address                                      */
*/*                 XSAGR0  - Input parameter                        */
*/*                 XSAGR1  - Input parameter                        */
*/*                 XSAGR15 - SVC Router function code               */
*/*             R13 Savearea address                                 */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs usage: R10 Base address                                     */
*/*             R11 DSA address                                      */
*/*             R12 XSA address                                      */
*/*             R13 Savearea addess                                  */
*/*                                                                  */
*/* Output Regs: R0  output parameter                                */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/********************************************************************/
USERSVC  DS    0H
         USING DSA,R11
         USING XSA,R12
         B     12(,R15)
         DC    CL8'USERSVC'            TYPE-3 SVC
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 set base address
         USING USERSVC,R10             base addressability
         LA    R1,DSASVCSA             Chain,
         ST    R13,GPR@BWD(,R1)        save,
         ST    R1,GPR@FWD(,R13)        areas.
         LR    R13,R1
*
*        Code SVC routine here...
*
*        The mainline SVC router returns to the SVC caller
*        with data that you populate in the following XSA fields:
*
*        XSARC     - Contents of R15
*        XSAPAR0   - Contents of R0
*        XSAPAR1   - Contents of R1

*
**       SVC exit
*
USEREXIT DS    0H
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASAVE  DS    18F                     mainline savearea
DSASVCSA DS    18F                     SVC routine savearea
DSARGPRS DS    16F                     retry registers
DSAFLG1  DS    XL1                     flags
DSA@ABND EQU   X'80'                   ABEND indicator
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       RC
DSARSN   DS    F                       RSN
DSAXRC   DS    F                       SAF RC
DSANSI   DS    F                       PSW NSI
DSASVCN  DS    F                       SVC number
DSAFCID  DS    F                       FCID
DSAEVTA  DS    F                       read only EVT, nascosto
DSAFRRA  DS    F                       ECFFRR entry address
DSASVRB  DS    F                       SVRB address
DSASVXA  DS    F                       SVX address
DSASVCEA DS    F                       SVCE address
         DS    0F
DSAARS   DS    0F                      Access regs
DSAAR0   DS    F                       -AR0
DSAAR1   DS    F                       -AR1
DSAAR14  DS    F                       -AR14
DSAAR15  DS    F                       -AR15
DSA@ARSZ EQU   *-DSAARS                DONOT change order
         DS    0C
DSACLASS DS    0CL9                    CLASS field
DSACZSZE DS    AL1                     -size
DSACZECF DS    CL8                     -name
DSA@CLSZ EQU   *-DSACLASS              CLASS field size
         DS    0F
DSAENTBF DS    0CL255                  entity buffer               @03A
DSAENTBL DS    AL2                     -buffer length
DSAENTEL DS    AL2                     -entity length
DSAENTTY DS    CL251                   -entity name
DSA@ENTL EQU   *-DSAENTTY              -entity name length
DSA@ENTZ EQU   *-DSAENTBF              entity buffer lenght
         DS    0F
DSAROUTE DS    CL(RACR@SZE)            RACROUTE listform
         DS    0F
DSARBPSW IEARBUP MF=(L,DSAPSWL)        IEARBUP listform            @04A
         DS    0F
DSARWORK DS    XL512                   RACROUTE work area
         DS    0F
DSAWTO   DS    0CL100                  WTO msg work area
DSAWCDE  DS    XL4                     -MCS data
DSAWFX1  DS    CL43                    -msg text
DSAWCLAS DS    CL8                     -RACF Class
DSAWFX2  DS    CL10                    -msg text
DSAWPROF DS    CL13                    -RACF profile
DSAWFX3  DS    CL22                    -msg text
DSAWTOL  EQU   *-DSAWTO                WTO msg length
         DS    0D
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
**       SVRB Extended Save Area map
*
XSA      DSECT ,
XSAFLG1  DS    XL1                     flags
XSA@SVCS EQU   X'80'                   activate SVC screening
XSA@ABND EQU   X'40'                   ABENDed indicator
XSA@SCRN EQU   X'20'                   SVC screening entry call
XSA@TYP6 EQU   X'10'                   Type 6 SVC routine indicator
XSA@SACT EQU   X'08'                   SVC screening reactivated
XSA@UPDT EQU   X'04'                   SVC caller PSWs updated
XSA@OKAY EQU   X'02'                   SVCE valid indicator
XSA@SVXK EQU   X'01'                   SVX valid indicator
*
XSAFLG2  DS    XL1                     flags
XSA@ENTY EQU   X'80'                   TRAPSVC entry indicator
XSA@SWAP EQU   X'40'                   PSW bytes 0-3 changed indicator
XSA@SWUP EQU   X'20'                   caller PSW updated indicator
XSA@XPSW EQU   X'10'                   XSB PSWs updated indicator
XSA@DSAI EQU   X'08'                   DSA storage obtained indicator
XSA@FRRS EQU   X'04'                   SETFRR issued indicator
XSA@EPAT EQU   X'02'                   EP table scan indicator
XSA@2RV7 EQU   X'01'                   -available
*
XSAFLG3  DS    XL1                     flags
XSA@EVTA EQU   X'80'                   common EVT available indicator
XSA@ATTC EQU   X'40'                   ATTACH/X SVC screened indicator
XSA@3RV2 EQU   X'20'                   -available
XSA@3RV3 EQU   X'10'                   -available
XSA@3RV4 EQU   X'08'                   -available
XSA@3RV5 EQU   X'04'                   -available
XSA@3RV6 EQU   X'02'                   -available
XSA@3RV7 EQU   X'01'                   -available
*
XSASVCN  DS    XL1                     issued SVC number
*
XSAOPAR  DS    0F
XSARC    DS    F                       output R15
XSAPAR0  DS    F                       output R0
XSAPAR1  DS    F                       output R1
XSA@ORSZ EQU   *-XSAOPAR
*
XSASAVE  DS    0F                      savearea
XSAGR14  DS    F                       exit prolog reg 14
XSAGR15  DS    F                       parm reg 15
XSAGR0   DS    F                       parm reg 0
XSAGR1   DS    F                       parm reg 1
XSA@IRSZ EQU   *-XSASAVE
*
XSAHSAVE DS    0F                      savearea
XSAHGR14 DS    F                       parm high reg 14
XSAHGR15 DS    F                       parm high reg 15
XSAHGR0  DS    F                       parm high reg 0
XSAHGR1  DS    F                       parm high reg 1
XSA@HRSZ EQU   *-XSAHSAVE
         DS    0D
XSA@SIZE EQU   *-XSA                   size of XSA
XSA@SMAX DS    0XL(48-XSA@SIZE+1)      SVRB - RBEXSAVE restriction
*---------------------------------------------------------------------*
*        Subsystem Data Areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFVT ,
         $ECFSVX ,
         $ECFFRR ,
         $ECFSAF ,
         $ECFEQU ,
         $SVCENTY DSECT=YES
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         IHAASXB ,
         IEZJSCB ,
         CVT   DSECT=YES
         IHAECVT ,
         IKJTCB DSECT=YES
         IKJRB DSECT=YES
         IHASCVT DSECT=YES,LIST=NO
         IHASVC ,
         IHAXSB ,
         IHAPSW ,
         IHAFRRS ,
         IHASDWA ,
         ICHSAFP ,
         END
./ ADD NAME=ECFSVN   0102-21329-21329-1221-00033-00033-00003-BENMAR  31
ECFSVN   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFSVN                                                     */
*/*                                                                  */
*/* Function: SVC screening macro names table                        */
*/*                                                                  */
*/* Input Regs: n/a                                                  */
*/*                                                                  */
*/* Regs Usage: n/a                                                  */
*/*                                                                  */
*/* Oupput Regs: n/a                                                 */
*/*                                                                  */
*/* Attributes: non-exacutable, key zero, LPA-resident               */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V2R1 | 11252021 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
         COPY  $GLBLS
         ENTRY ECFSVN
         $ECFSVN DSECT=NO
         END
./ ADD NAME=ECFSVR   0103-21304-21305-0954-00122-00123-00006-BENMAR  22
ECFSVR   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFSVR                                                     */
*/*                                                                  */
*/* DESCRIPTION: Event Capture SVC Screening log processor           */
*/*                                                                  */
*/* FUNCTION: Called by the SVC screnning component to capture       */
*/*           screened SVC data.                                     */
*/*                                                                  */
*/* Input Regs: R1  SVX address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  SVX address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  Reason code                                     */
*/*              R1  Output parameter                                */
*/*              R15 Return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor state, key=0                   */
*/*                                                                  */
*/* Restrictions: SVCs cannot be issued                              */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V2R3 | 09272021 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFSVR   $ENTRY SAVE=NO
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         LR    R10,R15                 set base address
         USING ECFSVR,R10              base addressability
         LR    R8,R1                   SVX address
         USING SVX,R8                  set addressability
         LA    R1,SVXSVRS              Chain,
         ST    R13,GPR@BWD(,R1)        save,
         ST    R1,GPR@FWD(,R13)        areas.
         LR    R13,R1
*
**       .................................
*
SVR000   DS    0H




*
SVR0099  DS    0H
         B     SVREXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
SVREXIT  DS    0H
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem Data Areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT GEN
         $ECFVT ,
         $ECFSVX ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@RV0  EQU   X'80'                   -available
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
         DS    0F
DSAIPAR  DS    F                       input parm reg
DSAOPAR  DS    F                       output Parm reg
DSAWORD  DS    F                       work area
         DS    0D
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         IHAFRRS ,
         CVT   DSECT=YES
         END
./ ADD NAME=ECFSVS   0199-21251-21334-0710-00740-00006-00740-BENMAR  18
ECFSVS   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFSVS                                                     */
*/*                                                                  */
*/* Function: SVC screening front-end service routine                */
*/*                                                                  */
*/* Description: Receives control as a type 3 SVC from the SVC       */
*/*              First Level Interrupt Handler to process the        */
*/*              screened SVC routine.                               */
*/*                                                                  */
*/* Input Regs: R0  Parameter                                        */
*/*             R1  Parameter                                        */
*/*             R3  CVT address                                      */
*/*             R4  TCB address                                      */
*/*             R5  SVRB address                                     */
*/*             R6  Entry address                                    */
*/*             R7  ASCB address                                     */
*/*             R14 Exit prolog address                              */
*/*             R15 Parameter                                        */
*/*                                                                  */
*/* Access Regs: AR0  Parameter                                      */
*/*              AR1  Parameter                                      */
*/*              AR15 Parameter                                      */
*/*                                                                  */
*/* Regs Usage: R4  TCB address                                      */
*/*             R5  SVRB address                                     */
*/*             R6  Base address                                     */
*/*             R7  ASCB address                                     */
*/*             R8  SVX address                                      */
*/*             R9  SVCE address                                     */
*/*             R10 FRR address                                      */
*/*             R11 EVT address                                      */
*/*             R12 XSA address                                      */
*/*             R13 Savearea address                                 */
*/*                                                                  */
*/* Attributes: Reentrant                                            */
*/*             key zero                                             */
*/*             Supersvisor state                                    */
*/*             Dynamic LPA                                          */
*/*             Non-preemptive                                       */
*/*             Page fixed                                           */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V2R3 | 07172021 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFSVS   $ENTRY SAVE=NO,EPR=R6
         USING PSA,0                   FLC
         USING CVT,R3                  CVT addressability
         USING TCB,R4                  TCB addressability
         USING RBSECT,R5               RB addressability
         USING ECFSVS,R6               Base addressability
         USING ASCB,R7                 ASCB addressability
*
**       Deactivate SVC screening
*
         NI    TCBFLGS7,XFF-TCBSVCS    turn screening off
*
**       Save parm ARs/GPRs in XSA
*
         LA    R12,RBEXSAVE            XSA address
         USING XSA,R12                 set addressability
         STAM  R14,R1,XSAARS           save parm ARs
         STMG  R14,R1,XSAGPRS          save parm GPRs
*
**       Storage obtain SVX entry
*
         STORAGE OBTAIN,COND=NO,                                       +
               SP=253,LOC=BELOW,LENGTH=SVX@SIZE,                       +
               LINKAGE=SYSTEM
         LR    R8,R1                   SVX address
         USING SVX,R8                  set addressability
         XC    SVXCLR(SVX@ZERO),SVXCLR clear SVX
         MVC   SVXID,=CL4'SVX'         SVX ID
         MVC   SVXCID,IDCPSW           ID
         MVC   SVXHID,IDHPSW           ID
         MVC   SVX8ID,ID8PSW           ID
         MVC   SVXFID,IDFPSW           ID
         MVC   SVXFLGS,IDFLGS          ID
         ST    R5,SVXSVRB              save SVRB address
         ST    R8,SVXSVXA              save SVX address(self)
         LA    R2,SVX@SIZE             save
         ST    R2,SVXSIZE              SVX block size.
         LA    R13,SVXSAVE             my savearea address
*
**       Copy parm ARs/GPRs in SVX
*
         MVC   SVXIARS,XSAARS          save parm ARs
         MVC   SVXIREGS,XSAGPRS        copy parm GPRs
*
**       Extract caller RBOPSW
*
         XR    R2,R2                   zero
         ICM   R2,7,RBLINKB            SVC caller RB
         ST    R2,SVXRB                save it
ZRB      USING RBSECT,R2               set addressability
         MVC   SVXCPSW,ZRB.RBOPSW      copy SVC caller RBOPSW
*
**       Extact caller program name
*
         ICM   R1,15,ZRB.RBCDE         CDE address init?
         BZ    SVS0000                 no
         USING CDENTRY,R1              set addressability
         MVC   SVXPGMNM,CDNAME         copy program name
         DROP  R1
*
**       Identify caller environment
*
SVS0000  DS    0H
         CLI   ZRB.RBSTAB1,RBFTPRB     PRB caller?
         BE    SVS0005                 yes
         OI    SVXFLG3,SVX@SVRB        indicate SVRB caller
         DROP  ZRB
*
**       Extract caller issued SVC
*
SVS0005  DS    0H
         SL    R2,ZRBPRFXL             RB prefix
PFX      USING RBPRFXST,R2             set addressability
         LH    R1,PFX.RBINTCOD         caller issued SVC number
         STC   R1,SVXSVCNM             save SVC number
         DROP  PFX
         SAM31 ,
         L     R3,CVTABEND             SCVT
         USING SCVTSECT,R3             set addressability
         L     R3,SCVTSVCT             SVC table origin
         SLL   R1,3                    multiply SVC number by 8
         LA    R3,0(R1,R3)             SVC entry address
         USING SVCENTRY,R3             establish addressability
         MVC   SVXSVCEN,SVCENTRY       copy SVC entry
         TM    SVCTP,SVCTP6            T6 SVC?
         SAM24 ,
         BZ    SVS0010                 no
         OI    SVXFLG3,SVX@TYP6        yes
         DROP  R3
*
**       Obtain LOCAL lock
*
SVS0010  DS    0H
         SETLOCK OBTAIN,TYPE=LOCAL,                                    +
               MODE=UNCOND,REGS=SAVE,                                  +
               RELATED=('Serialize local supervisor')
*
**       Establish FRR recovery
*
         L     R3,ECFFRRA
         SETFRR A,FRRAD=(R3),MODE=FULLXM,PARMAD=(R10),                 +
               WRKREGS=(R14,R15)
         USING FRR,R10
         XC    FRR(FRR@SIZE),FRR       zero
         MVC   FRRID,=CL3'FRR'         ID
         ST    R12,FRRXSA              XSA address
         ST    R8,FRRPARM              SVX address
         LA    R3,SVS0050              retry address
         ST    R3,FRRRETRY             activate retry
         LA    R3,SVXRTRG              retry regs address
         ST    R3,FRRSAVE              FRR restores retry regs
         STM   R0,R15,SVXRTRG          retry regs
*
**       Validity check SVCE table
*
         L     R9,TCBSVCA2             SVCE address
         USING SVCE,R9                 set addressability
         CLC   SVCEID,=CL4'SVCE'       valid SVCE?
         BE    SVS0015                 yes
         OI    SVXDBUG,SVX@QIT1        set debug indicator
         OI    SVXFLG1,SVX@QUIT        quit SVC screening
         L     R15,=A(RSETPSW)         EPA
         BALR  R14,R15                 backup PSW 2-bytes
         B     SVS0050                 exit
*
SVS0015  DS    0H
         ST    R9,SVXSVCEA             init SVCE address
         MVC   SVCEPGMN,SVXPGMNM       copy program name
         CLI   SVXSVCNM,ATCHSVC        ATTACH/X SVC issud?
         BNE   SVS0020                 no
         OI    SVXFLG3,SVX@ATTC        set ATTACH/X indicator
*
**       Update front-end entry count
*
SVS0020  DS    0H
         L     R14,SVCESVSC            entry count
         LA    R15,1(,R14)             add one
         CS    R14,R15,SVCESVSC        update count
         BNE   SVS0020                 changed: try again
         TM    SVXFLG3,SVX@SVRB        SVC issued by SVRB caller?
         BZ    SVS0030                 no
*
**       Update SVRB issued SVC count
*
SVS0025  DS    0H
         L     R14,SVCESUPC            entry count
         LA    R15,1(,R14)             add one
         CS    R14,R15,SVCESUPC        update count
         BNE   SVS0025                 changed: try again
*
**       Validity check EVT table
*
SVS0030  DS    0H
         ST    R8,SVCESVXA             SVX address(testing only)
         OI    SVXFLG1,SVX@SVCE        SVCE available
         L     R11,SVCEEVTA            EVT address
         USING EVT,R11                 set addressability
         CLC   EVTID,=CL4'EVT'         valid indeed?
         BE    SVS0035                 yes
         OI    SVXDBUG,SVX@QIT2        set debug indicator
         OI    SVXFLG1,SVX@QUIT        quit SVC screening
         OI    SVXFLG1,SVX@EVTF        EVT failed validity check
         L     R15,=A(RSETPSW)         EPA
         BALR  R14,R15                 backup PSW 2-bytes
         B     SVS0050                 exit
*
SVS0035  DS    0H
         MVC   EVTSVSCT,SVCESVSC       copy front-end count
         MVC   EVTSVRBC,SVCESUPC       copy SVRB SVC issued count
         CLC   SVCESTCB,PSATOLD        IEFSD060 TCB?
         BNE   SVS0045                 no, skip count update
         OI    SVXFLG3,SVX@SD60        yes, set indicator
*
**       Update INITiator issued SVCs
*
SVS0040  DS    0H
         L     R14,SVCES60C            INITiator count
         LA    R15,1(,R14)             add one
         CS    R14,R15,SVCES60C        update count
         BNE   SVS0040                 changed: try again
*
**       Build hook RBOPSW
*
SVS0045  DS    0H
         L     R15,=A(HOOKPSW)         EPA
         BALR  R14,R15                 install instance hook
         OI    SVXDBUG,SVX@PSWU        set debug indicator
         OI    SVXFLG1,SVX@UPDT        PSW updated indicator
         TM    SVXFLG1,SVX@EVTF        EVT access failed?
         BNZ   SVS0050                 yes
         $DBUG 24,S1                   debug
*
**       Recovery retry routine
*
SVS0050  DS    0H
         TM    FRRFLG1,FRR@RTRY        did we ABEND?
         BZ    SVS0060                 no, carry on
         OI    SVXDBUG,SVX@QIT3        set debug indicator
         OI    SVXFLG1,SVX@QUIT        quit SVC screening
         TM    SVXFLG1,SVX@EVTF        EVT access failed?
         BNZ   SVS0060                 yes
         $DBUG 26,S2                   debug
*
**       Delete FRR recovery
*
SVS0060  DS    0H
         SETFRR D,WRKREGS=(R14,R15)    delete FRR
*
**       Release LOCAL lock
*
         SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,                         +
               RELATED=('Release local supervisor serialization')
*
**       Open SVCLOG log dataset
*
         CLC   PSATOLD,SVCESTCB        IEFSD060 TCB?
         BE    SVS0070                 yes, skip open
         TM    SVXFLG1,SVX@QUIT        quit SVC screening?
         BNZ   SVS0099                 yes
         TM    SVCEFLG1,SVCE@OPN       SVCLOG alrady open?
         BNZ   SVS0065                 yes
         L     R15,=A(OPENLOG)         EPA
         BALR  R14,R15                 open SVCLOG dataset
         TM    SVCEFLG1,SVCE@OPN       SVCLOG opened?
         BZ    SVS0070                 no
         OI    SVXDBUG,SVX@OPEN        set debug indicator
*
**       Log SVC entry data record
*
SVS0065  DS    0H
         MVC   SVXSRID,=CL3'INI'       set SRID
         LR    R1,R8                   SVX address
         L     R15,=V(ECFLOG)          log processor
         BALR  R14,R15                 log SVC record
         $DBUG 28,S3                   debug
*
SVS0070  DS    0H
         OI    SVXDBUG,SVX@EXIT        set debug indicator
         MVC   SVCEDBGF,SVXDBUG        preserve debug flags
         MVC   SVCESVSF,SVXFLG1        preserve SVX flags
         LMG   R14,R1,XSAGPRS          reload GPRs
         LAM   AR14,AR1,XSAARS         reload ARs
         TM    SVXFLG1,SVX@EVTF        EVT access failed?
         BNZR  R14                     yes, return to exit prolog
         MVC   EVTS60CT,SVCES60C       copy INITiator SVC count
         $DBUG 30,S4                   debug
         BR    R14                     return to exit prolog
*
**       Deactivate SVC screening
*
SVS0099  DS    0H
         OI    SVXDBUG,SVX@ABND        set debug indicator
         TM    SVXFLG1,SVX@SVCE        SVCE available?
         BZ    SVSEXIT                 no
         MVC   SVCEDBGF,SVXDBUG        preserve debug flags
         MVC   SVCESVSF,SVXFLG1        preserve SVX flags
         ICM   R3,15,SVCESTCB          IEFSD050 TCB?
         BZ    SVSEXIT                 no
SD60     USING TCB,R3                  set addressability
         NI    SD60.TCBFLGS7,XFF-TCBSVCS  deactivate,
         XC    SD60.TCBSVCA2,SD60.TCBSVCA2 SVC screening.
         DROP  SD60
*
**       Storage release SVX entry
*
SVSEXIT  DS    0H
         L     R2,SVXRC                show ABEND RC
         L     R3,SVXRSN               show ABEND RSN
         L     R0,SVXSIZE              SVX size
         STORAGE RELEASE,COND=NO,                                      +
               SP=253,ADDR=(R8),LENGTH=(R0),                           +
               LINKAGE=SYSTEM
         ABEND X'FFE',DUMP,REASON=(R2)
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFFRRA  DC    V(ECFFRR)               FRR routine EPA
ZRBPRFXL DC    AL4(RBPRFLNA)           RB prefix length
         DS    0C
IDCPSW   DC    CL4'CPSW'               Debugging ID
IDHPSW   DC    CL4'HPSW'               Debugging ID
ID8PSW   DC    CL4'8PSW'               Debugging ID
IDFPSW   DC    CL4'FPSW'               Debugging ID
IDFLGS   DC    CL4'FLGS'               Debugging ID
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RSETPSW                                                    */
*/*                                                                  */
*/* Function: Backup RBOPSW and XSB PSWs subroutine                  */
*/*                                                                  */
*/* Description: Reset RBOPSW, XSB_Orig_RBOPSW and XSBOPSW16         */
*/*              to reissue caller SVC routine.                      */
*/*                                                                  */
*/* Input Regs: R8  SVX address                                      */
*/*             R12 XSA address                                      */
*/*             R13 Savearea address                                 */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs usage: R8  SVX address                                      */
*/*             R10 Base address                                     */
*/*             R12 XSA address                                      */
*/*             R13 Savearea addess                                  */
*/*                                                                  */
*/********************************************************************/
RSETPSW  DS    0H
         USING SVX,R8                  SVX addressability
         USING XSA,R12                 XSA addressability
         B     12(,R15)
         DC    CL8'RSETPSW'            ID
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 set base address
         USING RSETPSW,R10             base addressability
         LA    R1,SVXSUBS              chain
         ST    R13,GPR@BWD(,R1)         save
         ST    R1,GPR@FWD(,R13)          areas
         LR    R13,R1
*
**       Build 8-byte RBOPSW
*
         MVC   SVX8PSW,SVXCPSW         copy caller RBOPSW
         LA    R4,SVX8PSW              8-bytes work PSW
         USING PSW,R4                  set addressability
         NI    PSWIA,XFF-PSWAMODE31    turn off AMODE bit
         L     R1,SVX8PSW4             8-bytes work PSWIA
         SL    R1,PSWDELTA             subtract 2-bytes
         ST    R1,SVX8PSW4             update 8-bytes work PSWIA
         TM    SVXCPSW4,PSWAMODE31     SVC caller in AMODE=31?
         BZ    RSET000                 no
         OI    SVX8PSW4,PSWAMODE31     yes
*
**       Build 16-byte RBOPSW analogs
*
RSET000  DS    0H
         LA    R5,SVXFPSW              16-bytes work PSW
         USING PSWE,R5                 set addressability
         XC    SVXFPSW,SVXFPSW         clear work PSW
         MVC   PSWEIABYT47,SVX8PSW4    set PSWIA from 8-byte PSWIA
         NI    PSWEIABYT47,XFF-PSWEAMODE31 turn off AMODE=31 bit
         TM    SVXCPSW4,PSWAMODE31     SVC caller in AMODE=31?
         BZ    RSET010                 no
         OI    PSWEBYT47,PSWEAMODE31   yes
*
RSET010  DS    0H
         MVC   PSWEBYT03,SVX8PSW0      Copy PSW attributes
         NI    PSWEBYTE1,XFF-PSWEECMOD turn off EC mode bit
         DROP  R4,R5
*
**       Update RBOPSW & XSBPSWs
*
         L     R4,SVXRB                SVC caller RB
         USING RBSECT,R4               set addressability
         MVC   RBOPSW,SVX8PSW          update RBOPSW
         SL    R4,URBPRFXL             RB prefix
         USING RBPRFXST,R4             set addressability
         L     R4,RBXSB                XSB address
         USING XSB,R4                  set addressability
         SAM31 ,                       AMODE=31
         MVC   XSBOPSW16,SVXFPSW       update dispatcher PSW
         MVC   XSB_Orig_RBOPSW,SVX8PSW update original PSW
         SAM24 ,
         XC    SVXRC,SVXRC             RC
*
**       Subroutine Exit
*
RSETEXIT DS    0H
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
PSWDELTA DC    F'2'                    RBOPSW delta
URBPRFXL DC    AL4(RBPRFLNA)           RB prefix length
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: HOOKPSW                                                    */
*/*                                                                  */
*/* Function: Install instance hook subroutine                       */
*/*                                                                  */
*/* Description: Set RBOPSW, XSB_Orig_RBOPSW and XSBOPSW16 to issue  */
*/*              the SVC hook instruction set.                       */
*/*                                                                  */
*/* Input Regs: R8  SVX address                                      */
*/*             R9  SVCE address                                     */
*/*             R11 EVT address                                      */
*/*             R12 XSA address                                      */
*/*             R13 Savearea address                                 */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs usage: R8  SVX address                                      */
*/*             R9  SVCE address                                     */
*/*             R10 Base address                                     */
*/*             R11 EVT address                                      */
*/*             R12 XSA address                                      */
*/*             R13 Savearea addess                                  */
*/*                                                                  */
*/********************************************************************/
HOOKPSW  DS    0H
         USING SVX,R8                  SVX addressability
         USING SVCE,R9                 SVCE addressability
         USING EVT,R11                 EVT addressability
         USING XSA,R12                 XSA addressability
         B     12(,R15)
         DC    CL8'HOOKPSW'            ID
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 set base address
         USING HOOKPSW,R10             base addressability
         LA    R1,SVXSUBS              chain
         ST    R13,GPR@BWD(,R1)         save
         ST    R1,GPR@FWD(,R13)          areas
         LR    R13,R1
*
**       Build SVC hook RBOPSW
*
         L     R4,SVXRB                SVC caller RB
         USING RBSECT,R4               set addressability
         MVC   SVXHPSW,SVXCPSW         copy SVC caller PSW
         SL    R4,XRBPRFXL             RB prefix
         USING RBPRFXST,R4             set addressability
         MVC   SVXXSB,RBXSB            copy XSB address
         LA    R3,SVXHOOK              PSW hook address
         ST    R3,SVXHPSW4             set in RBOPSW bytes 4-7
         TM    SVXCPSW4,PSWAMODE31     caller in AMODE=31?
         BZ    HOOK000                 no
         OI    SVXHPSW4,PSWAMODE31     yes, set AMODE=31 bit
*
HOOK000  DS    0H
         MVC   SVXSVCI,SVOP            SVC OPcode
         MVC   SVXSVCN,SVXSVCNM        caller SVC number
         MVC   SVXZSVC,SVCEZSVC        ECFSVC SVC OPcode
         MVC   SVXFCID,SVCEZSVC        ECFSVC SVC OPcode
         MVC   SVXXCID,XCID            ECFSVC SVC XCID
         MVC   SVX8PSW,SVXHPSW         copy hook RBOPSW
*
**       Build 16-byte RBOPSW analog
*
         LA    R5,SVXFPSW              16-bytes work PSW
         USING PSWE,R5                 set addressability
         XC    SVXFPSW,SVXFPSW         clear 16-bytes work PSW
         MVC   PSWEIABYT47,SVX8PSW4    set PSWIA from 8-byte PSWIA
         NI    PSWEIABYT47,XFF-PSWEAMODE31 turn off AMODE=31 bit
         MVC   PSWEBYT03,SVX8PSW0      copy PSW attributes
         NI    PSWEBYTE1,XFF-PSWEECMOD turn off EC mode bit
         TM    SVXCPSW4,PSWEAMODE31    SVC caller in AMODE=31?
         BZ    HOOK010                 no
         OI    PSWEBYT47,PSWEAMODE31   turn on AMODE=31 bit
         DROP  R5
*
**       Update RBOPSW & XSB PSWs
*
HOOK010  DS    0H
         L     R4,SVXRB                SVC caller RB
         USING RBSECT,R4               set addressability
         MVC   RBOPSW,SVX8PSW          update RBOPSW
         L     R4,SVXXSB               XSB address
         USING XSB,R4                  set addressability
         SAM31 ,                       AMODE=31
         MVC   XSBOPSW16,SVXFPSW       update dispatcher PSW
         MVC   XSB_Orig_RBOPSW,SVX8PSW update original PSW
         SAM24 ,
         XC    SVXRC,SVXRC             RC
         $DBUG 32,S5                   debug
*
**       Subroutine Exit
*
HOOKEXIT DS    0H
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
XRBPRFXL DC    AL4(RBPRFLNA)           RB prefix length
SVOP     DC    XL1'0A'                 SVC OPcode
XCID     DC    XL2'FFFF'               XCID
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: OPENLOG                                                    */
*/*                                                                  */
*/* Function: Open TRAPSVC=DDname log dataset subroutine             */
*/*                                                                  */
*/* Input Regs: R8  SVX address                                      */
*/*             R9  SVCE address                                     */
*/*             R11 EVT address                                      */
*/*             R12 XSA address                                      */
*/*             R13 Savearea address                                 */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs usage: R7  SVR address                                      */
*/*             R8  SVX address                                      */
*/*             R9  SVCE address                                     */
*/*             R10 Base address                                     */
*/*             R11 EVT address                                      */
*/*             R12 XSA address                                      */
*/*             R13 Savearea addess                                  */
*/*                                                                  */
*/********************************************************************/
OPENLOG  DS    0H
         USING SVX,R8                  SVX addressability
         USING SVCE,R9                 SVCE addressability
         USING EVT,R11                 EVT addressability
         USING XSA,R12                 XSA addressability
         B     12(,R15)
         DC    CL8'OPENLOG'            ID
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 set base address
         USING OPENLOG,R10             base addressability
         LA    R1,SVXSUBS              chain
         ST    R13,GPR@BWD(,R1)         save
         ST    R1,GPR@FWD(,R13)          areas
         LR    R13,R1
         $DBUG 34,S6                   debug
*
**       Locate SVCLOG DDname
*
         USING PSA,0                   FLC
         L     R4,PSATOLD              TCB address
         USING TCB,R4                  set addressability
         ICM   R4,7,TCBJSTCA           jobstep TCB
         ICM   R3,15,TCBTIO            TIOT init?
         BZ    OPEN010                 no
         USING TIOT,R3                 set addressability
         XR    R2,R2                   zero
         ICM   R2,1,TIOELNGH           DDnames?
         BZ    OPEN010                 no
         LA    R3,TIOENTRY             1st DDname entry
         USING TIOENTRY,R3             entry addressability
*
OPEN000  DS    0H
         CLI   0(R3),X'00'             last DDname?
         BE    OPEN010                 yes
         CLC   TIOEDDNM,SVCEDDNM       DDname match?
         BE    OPEN020                 yes
         LA    R3,0(R2,R3)             next DDname
         B     OPEN000                 loop
*
OPEN010  DS    0H
         NI    SVCEFLG1,XFF-SVCE@DDN   DDname not found
         NI    SVCEFLG1,XFF-SVCE@OPN   SVCLOG not opened
         $DBUG 36,S7                   debug
         B     OPENEXIT                exit
*
**       Open SVCLOG dataset
*
OPEN020  DS    0H
         OI    SVCEFLG1,SVCE@DDN       DDname found
         MVC   SVCELFM,OPENLST         listform
         MVC   SVCEDCB(SVC@LOG),SVCLOG
         LA    R3,SVCEDCB              DCB
         USING IHADCB,R3               set addressability
         MVC   DCBDDNAM,SVCEDDNM       DDname
         OPEN  ((R3),OUTPUT),MF=(E,SVCELFM)
         TM    DCBOFLGS,DCBOFOPN       successful?
         BZ    OPENEXIT                no, exit
         OI    SVCEFLG1,SVCE@OPN       set open indicator
         $DBUG 38,S8                   debug
*
**       Log header records
*
         LA    R7,SVXSVRDA             SVR address
         USING SVR,R7                  set addressability
         LA    R2,SVRECORD             record address
         USING ZHD1,R2                 set addressability
         MVC   ZHD1REC(ZHD1@SZE),LOGHDR1
         MVC   ZHD1SYS,SVCESID         system ID
         PUT   (R3),(R2)               write header record-1
         PUT   (R3),LOGHDR2            write header record-2
         OI    SVCEFLG1,SVCE@HDR       headers logged indicator
         $DBUG 40,S9                   debug
*
**       Subroutine Exit
*
OPENEXIT DS    0H
         L     R13,GPR@BWD(,R13)       mainline save area
         LM    R14,R12,GPR@R14(R13)    restore mainline regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        SVCLOG DCB                                                   *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
OPENLST  OPEN  (,),MF=L
         DS    0F
SVCLOG   DCB   DDNAME=SVCLOG,DSORG=PS,LRECL=80,MACRF=PM
SVC@LOG  EQU   *-SVCLOG
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
LOGHDR1  DS    0CL80
         DC    CL33' '
         DC    CL07'System'
         DC    CL04'CBT'
         DC    CL36' '
LOG@HD1L EQU   *-LOGHDR1
*
LOGHDR2  DS    0CL80
         DC    CL30' '
         DC    CL17'SVC Screening Log'
         DC    CL33' '
LOG@HD2L EQU   *-LOGHDR2
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        SVRB Extended Save Area map                                  *
*--------+---------+---------+---------+---------+---------+---------+*
XSA      DSECT ,
XSAARS   DS    0F
XSAAR14  DS    F                       parm reg 14
XSAAR15  DS    F                       parm reg 15
XSAAR0   DS    F                       parm reg 0
XSAAR1   DS    F                       parm reg 1
XSA@ARSZ EQU   *-XSAARS
*
XSAGPRS  DS    0D
XSAGR14  DS    D                       parm reg 14
XSAGR15  DS    D                       parm reg 15
XSAGR0   DS    D                       parm reg 0
XSAGR1   DS    D                       parm reg 1
XSA@GPRZ EQU   *-XSAGPRS
*
XSA@SIZE EQU   *-XSA                   size of XSA
XSA@SMAX DS    0XL(48-XSA@SIZE+1)      SVRB - RBEXSAVE restriction
*---------------------------------------------------------------------*
*        SVCLOG Log record maps                                       *
*--------+---------+---------+---------+---------+---------+---------+*
ZHD1     DSECT ,
ZHD1REC  DS    0CL80
ZHD1B    DS    CL33' '
ZHD1ID   DS    CL07'System'
ZHD1SYS  DS    CL04'CBT'
ZHD1B2   DS    CL36' '
ZHD1@SZE EQU   *-ZHD1
*---------------------------------------------------------------------*
*        Subsystem Data Areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFVT ,
         $ECFSVX ,
         $ECFFRR ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA
         IHAASCB ,
         IHAASXB ,
         CVT   DSECT=YES
         IHAECVT ,
         IHASCVT ,
         IHASVC ,
         IKJTCB DSECT=YES
         IKJRB DSECT=YES,LIST=YES
         IHAXSB LIST=YES
         IHAPSW ,
         IHARBUP ,
         IHAFRRS ,
         IHACDE ,
TIOT     DSECT ,
         IEFTIOT1 ,
         DCBD  DSORG=PS,DEVD=DA
         END
./ ADD NAME=ECFSVT   0106-21068-21304-1646-00033-00034-00002-BENMAR  35
ECFSVT   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFSVT                                                     */
*/*                                                                  */
*/* Function: Event Capture Subsystem SSVT Vector Table              */
*/*                                                                  */
*/* Input Regs: n/a                                                  */
*/*                                                                  */
*/* Regs Usage: n/a                                                  */
*/*                                                                  */
*/* Output Regs: n/a                                                 */
*/*                                                                  */
*/* Attributes: non-exacutable, key zero, LPA-resident               */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
         ENTRY ECFSVT
         $ECFSSVT DSECT=NO
         END
./ ADD NAME=ECFSVX   0103-21251-21304-1646-00034-00033-00004-BENMAR  39
ECFSVX   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFSVX                                                     */
*/*                                                                  */
*/* Function: SVC screening control table                            */
*/*                                                                  */
*/* Input Regs: n/a                                                  */
*/*                                                                  */
*/* Regs Usage: n/a                                                  */
*/*                                                                  */
*/* Output Regs: n/a                                                 */
*/*                                                                  */
*/* Attributes: non-exacutable, key zero, LPA-resident               */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V2R3 | 09172021 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
         ENTRY ECFSVX
         $ECFSVX DSECT=NO
         IHAFRRS ,
         END
./ ADD NAME=ECFS34   0199-21068-21304-1646-00666-00559-00518-BENMAR  43
ECFS34   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFS34                                                     */
*/*                                                                  */
*/* Function: Event Capture Command Listener and Router              */
*/*                                                                  */
*/* Description: Receives control from Supervisor Call SVC 34        */
*/*              when system/subsystem commands are issued by        */
*/*              any task in any address space.                      */
*/*                                                                  */
*/* Input Regs: R0  SSCT address                                     */
*/*             R1  SSOB address                                     */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  SSCT address                                     */
*/*             R8  SSOB address                                     */
*/*             R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R11 EVT address                                      */
*/*             R12 dynamic storage area address                     */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=0, LPA-resident     */
*/*                                                                  */
*/* Restrictions: 1. R9 thru R12 are permanently assigned            */
*/*               2. $TRACE macro calls CANNOT be issued             */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 05052020 | Ben Marino  | Serviceability enhancements   *
* @03 | V2R2 | 03172021 | Ben Marino  | Added command security support*
* @04 | V2R3 | 08022021 | Ben Marino  | Added TCBTOKEN validity checks*
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFS34   $ENTRY SPN=230,STACK=SSITCB   entry
         STM   R0,R1,DSAIPAR           save PARM regs
         USING PSA,0                   FLC addressability
         LR    R7,R0                   SSCT address
         USING SSCT,R7                 set addressability
         LR    R8,R1                   SSOB address
         USING SSOB,R8                 set addressability
*
**       Establish recovery environment
*
         L     R4,STKRTMA              ECFRTM EPA
         MVC   DSAESTAE(ESTAEL),ESTAE  listform
         ESTAE (R4),                                                   +
               PARAM=(R9),             STK address                     +
               TOKEN=DSATOKN,          store token here            @03A+
               MF=(E,DSAESTAE)         establish recovery
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   S34EXIT                 no, error
         OI    DSAFLG1,DSA@STA         recovery established
         MVC   DSARSN,=AL4(RSN0952)    set RSN
*
**       Activate recovery
*
         $RETRY S34EXIT,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Prevent MGCR SVC recursion loop
*
         $TESTSVC SVC=34,              MGCR SVC recursively issued?    +
               EXIT=S34EXIT            yes, exit
*
**       Check subsystem availability
*
         L     R11,SSCTSUSE            EVT address
         USING EVT,R11                 set addressability
         CLC   EVTID,=CL4'EVT'         valid indeed?
         BNE   S34EXIT                 no, exit
         ST    R11,STKEVTA             save EVT in stack
         OI    DSAFLG1,DSA@EVTA        Valid EVT address           @03A
         TM    EVTFLG4,EVT@CWTO        COMPWTO init option set?    @03A
         BZ    S340010                 no, carry on                @03A
         OI    STKFLG1,STK@CWTO        yes, propagate indicator    @03A
*                                                                  @03A
*
**       Update active listener count
*
S340010  DS    0H                                                  @03A
         L     R2,EVTSSICT             active listeners count      @03A
         LA    R3,1(,R2)               add one                     @03A
         CS    R2,R3,EVTSSICT          update count                @03A
         BNE   S340010                 changed: try again          @03A
         OI    DSAFLG1,DSA@SSIC        set update indictor         @03A
*
**       Validity check ECF instance
*
         MVC   STKWTOA,EVTWTOA         enable message service
         MVC   STKASCB,EVTASCB         copy subsysytm ASCB         @03A
         MVC   STKSYSID,EVTSYSID       copy sysytem name           @03A
         MVC   STKSUBNM,EVTSUBNM       copy subsysytem name        @03A
         TM    EVTFLG1,EVT@TERM        subsystem terminated?
         BNZ   S34EXIT                 yes, exit
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BE    S340020                 yes, skip test
         LOCASCB STOKEN=EVTSTOKN       locate zECF                 @03C
         LTR   R15,R15                 zECF instance active?       @03A
         BNZ   S34EXIT                 no, exit                    @03A
*
**       Propagate DEBUG={ON|OFF} option
*
S340020  DS    0H
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON set?
         BZ    S340030                 no, carry on
         OI    STKFLG1,STK@DBUG        yes, set DEBUG=ON
*
**       Validity check issued command
*
S340030  DS    0H
         LA    R1,SSCMSCMD             assume,
         ST    R1,SSOBRETN             not our command.
         L     R6,SSOBINDV             SSCM address
         USING SSOBEXT,R6              set addressability
         L     R6,SSCMBUFF             CMD buffer address
         LH    R3,0(,R6)               get buffer length
         LTR   R3,R3                   null CMD?
         BZ    S34EXIT                 yes, exit
         LA    R1,DSA@CMDZ             max buffer length
         CLR   R3,R1                   length exceed max?
         BNH   S340100                 no, copy CMD buffer
         LR    R3,R1                   set max CMD length
*
S340100  DS    0H
         MVC   DSASCID,SSCMSCID        command source
         MVC   DSACNID,SSCMCNID        console ID                  @03A
         MVC   DSACART,SSCMCART        command & response token    @03A
         MVC   DSACONS,SSCMSCNM        console name                @03A
         MVI   DSACMDBF,BLANK          clear CMD buffer
         MVC   DSACMDBF+1(DSA@CMDZ-1),DSACMDBF
         BCTR  R3,0                    decrement for EXecute
         EX    R3,COPYBUFF             copy CMD buffer
         CLC   EVTCMDCH,DSACMDID       ECF subsystem CMD?
         BNE   S340300                 no, test further
*
**       Extract command issuer user ID
*
         L     R3,PSAAOLD              ASCB address
         USING ASCB,R3                 set addressability
         ICM   R1,15,ASCBASXB          chicken!
         BZ    S340110                 no
         USING ASXB,R1                 set addressability
         MVC   DSAUSER,ASXBUSR8        copy user ID
         DROP  R1
*
**       Check command issuer authorization
*
         LA    R1,DSACMDBF             command buffer address      @03A
         $CALL SR=ECFSAF               check authorization         @03A
         ST    R15,DSARC               save RC                     @03A
         ST    R0,DSARSN               save RSN                    @03A
         LTR   R15,R15                 successful?                 @03A
         BZ    S340200                 yes, carry on               @03A
         CLC   DSARSN,=AL4(RSN0872)    command entity found?       @03A
         BE    S340110                 no, check OPER authority    @03A
         $WTO  MID=ECF071E,VAR1=DSACMDBF                           @03A
         B     S34EXIT                 exit                        @03A
*
**       Check command issuer OPER authorization
*
S340110  DS    0H
         ICM   R1,15,ASCBTSB           TSU address space?
         BZ    S340200                 no, carry on
         L     R3,PSATOLD              TCB address
         USING TCB,R3                  set addressability
         L     R3,TCBJSCB              JSCB address
         USING IEZJSCB,R3              set addessability
         L     R3,JSCBACT              active JSCB
         ICM   R3,15,JSCBPSCB          PSCB address init?
         BZ    S340200                 no, carry on
         USING PSCB,R3                 set addressability
         TM    PSCBATR1,PSCBCTRL       OPER CMD user?
         BNZ   S340200                 yes, carry on
         $WTO  MID=ECF041E,VAR1=DSACMDBF
         B     S34EXIT                 exit
*
S340200  DS    0H
         LA    R1,SSCMSUBC             ECF subsystem command
         ST    R1,SSOBRETN             tell SVC-34 it's our command
*
**       Obtain SRE Cell element
*
         $CPOOL GET,                   get SRE cell                    +
               CPID=EVTSRECP,          cell pool ID                    +
               CELL=DSASREA,           return SRE cell here            +
               MODE=COND               conditional request
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   S34EXIT                 no, exit
*
**       Initialize service request element
*
         L     R6,DSASREA              SRE cell address
         USING SRE,R6                  set addressability
         XC    SRE(SRE@SIZE),SRE       zero SRE element
         MVC   SREID,=CL4'SRE'         ID SRE
         MVC   SRESCID,DSASCID         command source
         MVC   SRECNID,DSACNID         console ID                  @03A
         MVC   SRECART,DSACART         command & response token    @03A
         MVC   SRECONS,DSACONS         console name                @03A
         MVC   SREUSER,DSAUSER         user ID                     @03A
         MVC   SREDATA,DSACMDBF        copy command buffer
         OI    SREFLG1,SRE@DISP        set command indicator
*
**       Queue SRE to command queue
*
         MVC   DSALOCK,=CL5'COMLK'                                 @02A
         $LOCK EVTCOMLK,SSI=YES,FAIL=S34FAIL                       @02A
         L     R5,DSASREA              get SRE address
         L     R3,EVTCOMQA             top SRE queue ptr
         ST    R3,SRECHPTR             chain top refresh SRE ptr
         ST    R5,EVTCOMQA             make my SRE top SRE
         L     R1,EVTCOCNT             get COM processed count
         LA    R1,1(,R1)               add one
         ST    R1,EVTCOCNT             update count
         $UNLOCK EVTCOMLK,SSI=YES      unlock COM queue
         DROP  R6
*
**       Schedule command service request
*
         $XMPOST EP=EVTPSTA,           ECFPST EPA                      +
               EVT=(R11),              EVT address                     +
               CALLER=COM,             COM caller                      +
               ASCB=EVTASCB,           subsystem ASCB                  +
               TCB=EVTCOTCB,           ECFCOM subtask TCB              +
               ECB=EVTCOECB,           ECFCOM subtask ECB              +
               SRE=DSASREA,            SRE cell address                +
               KEY=SUPR,               Supervisor key                  +
               MF=(E,DSAIRB)
         XC    DSARC,DSARC             set RC
         B     SVC35CHK                test further                @02C
*
**       Test subsystem termination request
*
S340300  DS    0H
         LA    R2,DSA@CMDZ             loop value
         LA    R3,DSACMDBF             CMD buffer address
         LA    R3,2(,R3)               skip past CMD verb
         CLC   ZSTOP,DSACMDBF          STOP command?
         BE    S340400                 yes, test further
         LA    R3,5(,R3)               skip past CMD verb
         CLC   ZSTOP2,DSACMDBF         STOP command?
         BNE   S340999                 no, check CMD monitoring
*
S340400  DS    0H
         CLI   0(R3),BLANK             CMD data?
         BNE   S340500                 yes, carry on
         LA    R3,1(,R3)               walk thru blanks
         BCT   R2,S340400              loop
         B     S340999                 check CMD monitoring
*
S340500  DS    0H
         CLC   EVTSTCNM,0(R3)          STOP request?
         BE    S340600                 yes, stop it
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BNE   S340999                 no, check CMD monitoring
         CLC   =CL4'ECF',0(R3)         STOP request?
         BNE   S340999                 no, check CMD monitoring
*
**       Schedule termination service request
*
S340600  DS    0H
         $WTO  MID=ECF096I             issue CMD accepted msg
         $XMPOST EP=EVTPSTA,           ECFPST EPA                      +
               EVT=(R11),              EVT address                     +
               CALLER=S34,             SVC-34 listener                 +
               ASCB=EVTASCB,           subsystem ASCB                  +
               TCB=EVTJSTCB,           ECFSUB jobstep task TCB         +
               ECB=EVTJSECB,           ECFSUB jobstep task ECB         +
               KEY=SUPR,               Supervisor key                  +
               MF=(E,DSAIRB)
         XC    DSARC,DSARC             set RC
         B     S34EXIT                 exit
*
**       Process command event rule REB elements
*
S340999  DS    0H
         ICM   R5,15,EVTREBQA          any queued REBs?
         BZ    S34EXIT                 no, exit
         $CALL SCHDREB,                call subroutine                 +
               PARM=EVTCMDQA           CMD-REB queue address
         B     S34EXIT                 exit
*
**       Issue lock obtain failed error msg
*
S34FAIL  DS    0H                                                  @02A
         $WTO  MID=ECF913E,            error msg                   @02A+
               VAR1==CL6'ECFS34',      show requestor              @02A+
               VAR2==CL7'Command',     show listener               @02A+
               VAR3=DSALOCK            show lock ID                @02A
         B     S34EXIT                 exit                        @02A
*
**       Issue lock obtain failed error on behalf of ECFS35
*
SVC35CHK DS    0H                                                  @02A
         TM    EVTFLG4,EVT@LCKR        lock failed indicator set?  @02A
         BZ    S34EXIT                 exit                        @02A
         NI    EVTFLG4,XFF-EVT@LCKR    reset indicator             @02A
         $WTO  MID=ECF913E,            error msg                   @02A+
               VAR1==CL6'ECFS35',      show requestor              @02A+
               VAR2==CL7'Message',     show listener               @02A+
               VAR3=EVTLCKID           show lock ID                @02A
         B     S34EXIT                 exit                        @02A
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
S34EXIT  DS    0H
         TM    DSAFLG1,DSA@STA         recovery established?
         BZ    S34XIT00                no                          @03C
         ESTAE 0,TOKEN=DSATOKN         delete recovery             @03C
*
S34XIT00 DS    0H                                                  @03A
         TM    DSAFLG1,DSA@EVTA        EVT valid?                  @03C
         BZ    S34XIT99                no                          @03C
         TM    DSAFLG1,DSA@SSIC        listen count updated?       @03A
         BZ    S34XIT99                no                          @03C
*
S34XIT10 DS    0H
         L     R2,EVTSSICT             active listeners count      @03A
         LR    R3,R2                   copy count                  @03A
         BCTR  R3,0                    subtract one                @03A
         CS    R2,R3,EVTSSICT          decrement count             @03A
         BNE   S34XIT10                changed: try again          @03A
*
S34XIT99 DS    0H                                                  @03C
         XC    DSARC,DSARC             set RC
         $EXIT SPN=230,RC=DSARC        exit
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYBUFF MVC   DSACMDBF(*-*),4(R6)     EXecuted instruction
*---------------------------------------------------------------------*
*        VCONs                                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFRTMA  DC    V(ECFRTM)               ECFRTM recovery manager
SRIENVA  DC    V(SRIENV)               ECFENV SRVentry environment EPA
SRXENVA  DC    V(SRXENV)               ECFENV SRVexit environment EPA
SBIENVA  DC    V(SBIENV)               ECFENV SUBentry environment EPA
SBXENVA  DC    V(SBXENV)               ECFENV SUBexit environment EPA
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ESTAE    ESTAE 0,MF=L                  listform
ESTAEL   EQU   *-ESTAE
         DS    0F
CMDTEND  DC    XL4'FFFFFFFF'           CMD table end indicator
         DS    0C
ZSTOP    DC    CL2'P'                  STOP command alias
ZSTOP2   DC    CL5'STOP'               STOP command
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SCHDREB                                                    */
*/*                                                                  */
*/* Function: Schedule command event REB                             */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R1  CMD-REB queue address                            */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SCHDREB  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
*
**       Activate recovery
*
         $RETRY SCHD900,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Locate matching command REB
*
         XC    DSAQREB,DSAQREB         no REB matched
         MVC   DSALOCK,=CL5'REBLK'                                 @02A
         $LOCK EVTREBLK,SSI=YES,FAIL=SCHDERR                       @02A
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   SCHD010                 yes, carry on
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         XC    DSARC,DSARC             set RC
         B     SCHDEXIT                exit
*
SCHD010  DS    0H
         USING REB,R5                  REB addressability
         CLC   REBID,=CL4'REB'         valid indeed?
         BNE   SCHD040                 no, loop
         TM    REBFLG1,REB@ACTV        active REB?
         BZ    SCHD040                 no, loop
         CLI   REBTYPE,REB@CMD         command REB?
         BNE   SCHD040                 no, loop
         ICM   R2,15,REBEDATL          valid event data length?
         BZ    SCHD040                 no, loop
         LA    R3,REBEDATA             event data address
         LA    R4,DSACMDBF             CMD buffer address
*
SCHD020  DS    0H
         CLC   0(1,R3),0(R4)           character match?
         BE    SCHD030                 yes, loop
         CLI   0(R3),C'*'              wild character?
         BNE   SCHD040                 no, loop
*
SCHD030  DS    0H
         LA    R3,1(,R3)               next event data char
         LA    R4,1(,R4)               next CMD buffer char
         BCT   R2,SCHD020              loop
         ST    R5,DSAQREB              save target REB address
         B     SCHD050                 carry on
*
SCHD040  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   SCHD010                 yes, loop
         DROP  R5
*
**       Release REB queue serialization
*
SCHD050  DS    0H
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         ICM   R1,15,DSAQREB           matching REB found?
         BNZ   SCHD060                 yes, carry on
         XC    DSARC,DSARC             set RC
         B     SCHDEXIT                exit
*
**       Obtain REB Cell element
*
SCHD060  DS    0H
         $CPOOL GET,                   get REB cell                    +
               CPID=EVTREBCP,          cell pool ID                    +
               CELL=DSAREBA,           return REB cell here            +
               MODE=COND               conditional request
         LTR   R15,R15                 successful?
         BNZ   SCHDEXIT                no, exit
         OI    DSAFLG1,DSA@CELL        cell obtained
*
**       Relocate triggered REB element
*
         L     R3,DSAQREB              triggered REB address
         L     R5,DSAREBA              REB cell address
         USING REB,R5                  set addressability
         MVC   0(REB@SIZE,R5),0(R3)    relocate triggered REB
         XC    REBCHPTR,REBCHPTR       zero chain pointer
*
**       Resolve common event variables
*
         $CNVX DSAVAR,DSASCID          convert command source
         MVC   REBCONID,DSAVAR         copy command source
         MVC   REBSDATA,DSACMDID       copy issued CMD
         $CALL SR=ECFVAR,                                              +
               PARM=DSAREBA            pass REB address
         ST    R0,DSARSN               save RSN
         LTR   R15,R15                 successful?
         BZ    SCHD070                 yes, carry on
*
**       Free relocated REB cell element
*
         $CPOOL FREE,                                                  +
               CPID=EVTREBCP,          REB cell pool ID                +
               CELL=DSAREBA            REB cell element address
         NI    DSAFLG1,XFF-DSA@CELL    cell released
         XC    DSARC,DSARC             set RC
         B     SCHDEXIT                exit
*
**       Queue REB to command REB queue
*
SCHD070  DS    0H
         MVC   DSALOCK,=CL5'CMDLK'                                 @02A
         $LOCK EVTCMDLK,SSI=YES,FAIL=SCHDERR                       @02A
         L     R3,EVTCMDQA             top CMD-REB ptr
         ST    R3,REBCHPTR             chain top REB to my REB
         ST    R5,EVTCMDQA             make my REB top REB
         L     R1,EVTCMCNT             get events processed count
         LA    R1,1(,R1)               add one
         ST    R1,EVTCMCNT             update count
         $UNLOCK EVTCMDLK,SSI=YES      unlock CMD-REB queue
*
**       Schedule service request
*
         $XMPOST EP=EVTPSTA,           ECFPST EPA                      +
               EVT=(R11),              EVT address                     +
               CALLER=S34,             SVC-34 listener                 +
               ASCB=EVTASCB,           subsystem ASCB                  +
               TCB=EVTCMTCB,           ECFSRV(S34SRV) subtask TCB      +
               ECB=EVTCMECB,           ECFSRV(S34SRV) subtask ECB      +
               REB=DSAREBA,            CMD-REB address                 +
               KEY=SUPR,               Supervisor key                  +
               MF=(E,DSAIRB)
         OI    DSAFLG1,DSA@IRB         IRB scheduled
         XC    DSARC,DSARC             set RC
         B     SCHDEXIT                exit
*
**       ABEND recovery clean routine
*
SCHD900  DS    0H
         $RETRY OFF                    deactivate retry
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         $UNLOCK EVTCMDLK,SSI=YES      unlock CMD-REB queue
         XC    DSARC,DSARC             set RC
*
         TM    DSAFLG1,DSA@IRB         IRB scheduled?
         BNZ   SCHDEXIT                yes, exit
*
         TM    DSAFLG1,DSA@CELL        CMD-REB cell obtained?
         BZ    SCHDEXIT                no, exit
         $CPOOL FREE,                                                  +
               CPID=EVTREBCP,          CMD-REB cell pool ID            +
               CELL=DSAREBA            CMD-REB cell address
         NI    DSAFLG1,XFF-DSA@CELL    cell released
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0480)    set error RSN
         B     SCHDEXIT                exit                        @02A
*                                                                  @02A
**       Issue lock obtain failed error msg                        @02A
*                                                                  @02A
SCHDERR  DS    0H                                                  @02A
         $WTO  MID=ECF913E,            error msg                   @02A+
               VAR1==CL6'ECFS34',      show requestor              @02A+
               VAR2==CL7'Command',     show listener               @02A+
               VAR3=DSALOCK            show lock ID                @02A
*
SCHDEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFEQU ,
         $ECFSTK ,
         $ECFSRE ,
         $ECFREB ,
         $ECFCPT ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASVA   DS    18F                     save area
         DS    0X
DSAFLG1  DS    XL1                     flags
DSA@STA  EQU   X'80'                   ESTAE established
DSA@IRB  EQU   X'40'                   IRB scheduled
DSA@CELL EQU   X'20'                   REB cell element obtained
DSA@ACTV EQU   X'10'                   event rule activated
DSA@NACT EQU   X'08'                   event rule inactivated
DSA@WACT EQU   X'04'                   REB was active indicator
DSA@SSIC EQU   X'02'                   active listener indictor
DSA@EVTA EQU   X'01'                   EVT valid indicator
         DS    0X
DSAFLG2  DS    XL1                     flags
D3A@RS20 EQU   X'80'                   -available
D3A@RS21 EQU   X'40'                   -available
D3A@RS22 EQU   X'20'                   -available
D3A@RS23 EQU   X'10'                   -available
DSA@RS24 EQU   X'08'                   -available
DSA@RS25 EQU   X'04'                   -available
DSA@RS26 EQU   X'02'                   -available
DSA@RS27 EQU   X'01'                   -available
         DS    0X
DSAFL234 DS    XL2                     -available flags
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSASAFRC DS    F                       RCROUTE RC                  @03A
DSATOKN  DS    F                       ESTAE token                 @03A
DSAQREB  DS    F                       triggered REB address
DSAREBA  DS    F                       REB address
DSASREA  DS    F                       SRE address
DSASCID  DS    F                       SSCMSCID
DSACNID  DS    F                       SSCMCNID                    @03A
DSACART  DS    CL8                     SSCMCART                    @03A
DSACONS  DS    CL8                     SSCMSCNM                    @03A
DSAUSER  DS    CL8                     ASXBUSR8                    @03A
         DS    0F
DSAOPAR  DS    F                       output parm reg
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
         DS    0F
DSAIRB   $XMPOST MF=L                  listform
DSA@IRBL EQU   *-DSAIRB                listform size
         DS    0F
DSAESTAE DS    CL(ESTAEL)              ESTAE listform
         DS    0F
DSACMDBF DS    0CL120                  CMD buffer
DSACMDID DS    CL1                     CMD character
DSACMDTA DS    CL119                   CMD operands
DSA@CMDZ EQU   *-DSACMDBF              CMD buffer length
         DS    0C
DSALOCK  DS    CL5                     lock identifier             @02A
DSAVAR   DS    CL8                     variable data
DSAVARX  DS    CL1                     slack byte
DSA@VARZ EQU   *-DSAVAR                keep it together
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         IHAASXB ,
         IHAACEE ,
         CVT   DSECT=YES
         IEFJESCT ,
         IEFJSCVT ,
         IEFJSSIB ,
         IEFJSSOB (CM),CONTIG=NO
         IKJTCB DSECT=YES
         IKJRB DSECT=YES
         IEZJSCB ,
         IKJPSCB ,
         END
./ ADD NAME=ECFS35   0199-21068-21333-0731-01679-00926-00882-BENMAR  59
ECFS35   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFS35                                                     */
*/*                                                                  */
*/* Function: Event Capture Message Listener and router              */
*/*                                                                  */
*/* Description: Receives control from the MVS SSI when WTO/R        */
*/*              messages are issued by any task in any address      */
*/*              space.                                              */
*/*                                                                  */
*/* Input Regs: R0  SSCT address                                     */
*/*             R1  SSOB address                                     */
*/*             R13 savearea address                                 */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R6  WQE address                                      */
*/*             R7  SSCT address                                     */
*/*             R8  SSOB address                                     */
*/*             R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=0, LPA-Resident     */
*/*                                                                  */
*/* Restrictions: 1. R9 thru R12 are permanently assigned            */
*/*               2. $WTO macro calls CANNOT be issued               */
*/*               3. WTO/R macro calls CANNOT be issued              */
*/*               4. $TRACE macro calls CANNOT be issued             */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 10102020 | Ben Marino  | WTOR reply ID 4-digit support *
* @03 | V1R1 | 05052020 | Ben Marino  | Serviceability enhancements   *
* @04 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
* @05 | V2R3 | 08022021 | Ben Marino  | Added MONITOR event trigger   *
* @06 | V2R3 | 09072021 | Ben Marino  | Added SVC screening support   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
         COPY  $GLBLS
         SYSSTATE OSREL=ZOSV1R6
ECFS35   $ENTRY SPN=230,STACK=SSITCB   entry
         STM   R0,R1,DSAIPAR           save PARM regs
         USING PSA,0                   FLC addressability
         LR    R7,R0                   SSCT address
         USING SSCT,R7                 set addressability
         LR    R8,R1                   SSOB address
         USING SSOB,R8                 set addressability
         L     R6,SSOBINDV             SSWT address
         USING SSOBEXT,R6              set addressability
         L     R6,SSWTWQE              WQE address
         USING WQE,R6                  set addressability
         LA    R1,SSWTRTOK             continue normal,
         ST    R1,SSOBRETN             WTO/R processing.
*
**       Prevent WTO/R recursive loop
*
         L     R3,FLCCVT               CVT address
         USING CVT,R3                  set addressability
         LA    R1,CVTBRET              get branch return address
         ST    R1,STKWTOA              disable msg service
         DROP  R3
*
**       Establish recovery environment
*
         L     R4,STKRTMA              ECFRTM EPA
         MVC   DSAESTAE(ESTAEL),ESTAE
         ESTAE (R4),                                                   +
               PARAM=(R9),             STK address                     +
               TOKEN=DSATOKN,          store token here            @04A+
               MF=(E,DSAESTAE)         establish recovery
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   S35EXIT                 no, error
         OI    DSAFLG1,DSA@STA         recovery established
*
**       Activate recovery
*
         MVC   DSARSN,=AL4(RSN0948)    set RSN
         $RETRY S350099,                                               +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       WTO/R SVC recursion loop test
*
         $TESTSVC SVC=35,              exit if SVC-35,                 +
               EXIT=S35EXIT            issued recursively.
*
**       Check subsystem availability
*
         L     R11,SSCTSUSE            EVT address
         USING EVT,R11                 set addressability
         CLC   EVTID,=CL4'EVT'         valid indeed?
         BNE   S35EXIT                 no, exit
         ST    R11,STKEVTA             save EVT in stack
         OI    DSAFLG1,DSA@EVTA        EVT valid indicator         @04A
         TM    EVTFLG4,EVT@CWTO        COMPWTO init option set?    @02A
         BZ    S350000                 no, carry on                @02A
         OI    STKFLG1,STK@CWTO        yes, propagate indicator    @02A
*                                                                  @02A
**       Update active listener count
*
S350000  DS    0H
         L     R2,EVTSSICT             active listeners count      @04A
         LA    R3,1(,R2)               add one                     @04A
         CS    R2,R3,EVTSSICT          update count                @04A
         BNE   S350000                 changed: try again          @04A
         OI    DSAFLG1,DSA@SSIC        set update indictor         @04A
*
**       Validity check subsystem instance
*
         MVC   STKASCB,EVTASCB         copy subsysytm ASCB         @02A
         MVC   STKSYSID,EVTSYSID       copy sysytem name           @02A
         MVC   STKSUBNM,EVTSUBNM       copy subsysytem name        @02A
         TM    EVTFLG1,EVT@TERM        subsystem terminated?
         BNZ   S35EXIT                 yes, exit
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BE    S350005                 yes, skip test
         LOCASCB STOKEN=EVTSTOKN       locate zECF                 @04C
         LTR   R15,R15                 zECF instance active?       @04A
         BNZ   S35EXIT                 no, exit                    @04A
*
**       Exit if WTO/R is issued by ECF
*
S350005  DS    0H
         CLC   EVTASCB,PSAAOLD         ECF subsystem?
*        BE    S35EXIT                 yes, exit                   @05D
         ICM   R5,15,EVTREBQA          any queued REBs?
         BZ    S35EXIT                 no, exit
*
**       Propagate DEBUG={ON|OFF} option
*
         TM    EVTFLG2,EVT@DBUG        DEBUG=ON set?
         BZ    S350010                 no, carry on
         OI    STKFLG1,STK@DBUG        yes, set DEBUG=ON
*
**       Parse issued WTO/R message text
*
S350010  DS    0H
         MVI   DSAWTOBF,BLANK          clear msg buffer
         MVC   DSAWTOBF+1(DSA@WTOZ-1),DSAWTOBF
         CLI   WQETXT,BLANK            first character blank?
         BNE   S350020                 no, test further
         MVC   DSAWTOBF,WQETXT+1       copy msg text
         CLI   WQETXT+1,C'+'           problem pgm msg?
         BNE   S350050                 no, carry on
         MVC   DSAWTOBF,WQETXT+2       yes, copy msg text
         B     S350050                 carry on
*
S350020  DS    0H
         CLI   WQETXT,C'*'             WTOR msg?
         BE    S350030                 yes, extrct replyID
         CLI   WQETXT,C'@'             WTOR msg?
         BE    S350030                 yes, extract replyID
         MVC   DSAWTOBF,WQETXT         copy msg text
         B     S350050                 carry on
*
**       Extract WTOR message replyID
*
S350030  DS    0H
         LA    R2,WQETXT+1             WTOR msg text               @02A
         L     R1,EVTREPLY             REPLYID=zize option         @02A
         LA    R2,0(R1,R2)             skip WTOR replyID           @02A
         MVI   DSAREPLY,BLANK          clear replyID               @02A
         MVC   DSAREPLY+1(DSA@REZL-1),DSAREPLY                     @02A
         CLI   0(R2),BLANK             replyID end?                @02A
         BE    S350040                 yes, carry on               @02A
         MVC   DSAWTOBF,WQETXT+1       copy WTOR msg text          @02M
         B     S350050                 carry on                    @02M
*                                                                  @02A
S350040  DS    0H                                                  @02A
         BCTR  R1,0                    decrement for EXecute       @02A
         EX    R1,REPLYID              extract WTOR replyID        @02A
         MVC   DSAWTOBF,1(R2)          copy WTOR msg text          @02C
         OI    DSAFLG1,DSA@WTOR        indicate WTOR msg           @02M
*
**       Process local message table
*
S350050  DS    0H
         LA    R4,MSGTABLE             msg table
         USING MSG,R4                  set addressability
*
S350060  DS    0H
         CLC   MSGEPA,MSGTEND          end of table?
         BE    S350080                 yes, exit loop
         CLI   MSGFLG1,MSG@CUR         run routine locally?
         BNE   S350070                 no, loop
         LH    R1,MSGSIZE              msg text length
         BCTR  R1,0                    decrement for EXecute
         EX    R1,CHKMSG               msg match?
         BNE   S350070                 no, loop
         L     R15,MSGEPA              msg routine EPA
         BALR  R14,R15                 call msg routine
*
S350070  DS    0H
         LA    R4,MSG@SZE(,R4)         next msg entry
         B     S350060                 loop
*
**       Schedule WTO/R message event REB
*
S350080  DS    0H
         $CALL SCHDREB,                call subroutine                 +
               PARM=EVTWTOQA           msg REB queue address
         B     S35EXIT                 exit
*
**       ABEND recovery clean routine
*
S350099  DS    0H
         MVC   EVTWTRSN,DSARSN         set error RSN
         B     S35EXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
S35EXIT  DS    0H
         TM    DSAFLG1,DSA@STA         recovery established?
         BZ    S35XIT00                no
         ESTAE 0,TOKEN=DSATOKN         delete recovery             @04C
*
S35XIT00 DS    0H                                                  @04A
         TM    DSAFLG1,DSA@EVTA        EVT valid?                  @04C
         BZ    S35XIT99                no                          @04C
         TM    DSAFLG1,DSA@SSIC        listen count updated?       @04A
         BZ    S35XIT99                no                          @04C
*
S35XIT10 DS    0H
         L     R2,EVTSSICT             active listeners count      @04A
         LR    R3,R2                   copy count                  @04A
         BCTR  R3,0                    subtract one                @04A
         CS    R2,R3,EVTSSICT          decrement count             @04A
         BNE   S35XIT10                changed: try again          @04A
*
S35XIT99 DS    0H                                                  @04C
         XC    DSARC,DSARC             set RC=0
         $EXIT SPN=230,RC=DSARC        exit
*---------------------------------------------------------------------*
*        EXecuted Instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
CHKMSG   CLC   DSAWTOBF(*-*),MSGTEXT   EXecuted instruction
REPLYID  MVC   DSAREPLY(*-*),WQETXT+1  EXecuted instruction        @02A
*---------------------------------------------------------------------*
*        VCONs                                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFRTMA  DC    V(ECFRTM)               ECFRTM recovery manager
SRIENVA  DC    V(SRIENV)               ECFENV SRVentry environment EPA
SRXENVA  DC    V(SRXENV)               ECFENV SRVexit environment EPA
SBIENVA  DC    V(SBIENV)               ECFENV SUBentry environment EPA
SBXENVA  DC    V(SBXENV)               ECFENV SUBexit environment EPA
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ESTAE    ESTAE 0,MF=L                  listform
ESTAEL   EQU   *-ESTAE
         DS    0F
MSGTEND  DC    XL4'FFFFFFFF'           end-of table marker
*---------------------------------------------------------------------*
*        Service Routine Table                                        *
*--------+---------+---------+---------+---------+---------+---------+*
MSGTABLE DS    0F
         $MSGCALL TYPE=INITIAL
*
         $MSGCALL TYPE=ENTRY,                                          +
               EP=MSG450I,           service routine EPA               +
               EXEC=LOCAL,           run in current address space      +
               LEN=8,                msgID length                      *
               MSG=IEF450I           job ABEND msgID
*
         $MSGCALL TYPE=ENTRY,                                          +
               EP=MSG452I,           service routine EPA               +
               EXEC=LOCAL,           run in current address space      +
               LEN=8,                msgID length                      *
               MSG=IEF452I           job JCL ERROR msgID
*
         $MSGCALL TYPE=ENTRY,                                      @06A+
               EP=MSG453I,           service routine EPA               +
               EXEC=LOCAL,           run in current address space      +
               LEN=8,                msgID length                      *
               MSG=IEF453I           job JCL ERROR msgID
*
         $MSGCALL TYPE=ENTRY,                                      @06A+
               EP=INITSVC,           service routine EPA               +
               EXEC=LOCAL,           run in current address space      +
               LEN=8,                msgID length                      *
               MSG=IEF403I           job starting msgID
*
         $MSGCALL TYPE=ENTRY,                                      @06A+
               EP=TERMSVC,           service routine EPA               +
               EXEC=LOCAL,           run in current address space      +
               LEN=8,                msgID length                      *
               MSG=IEF404I           job ended  msgID
*
         $MSGCALL TYPE=ENTRY,                                          +
               EP=STOPECF,           service routine EPA               +
               EXEC=LOCAL,           run in current address space      +
               LEN=8,                msgID length                      *
               MSG=BSPSD999          shutting down MVS msgID
*
         $MSGCALL TYPE=FINAL
MSG@SIZE EQU   *-MSGTABLE
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SCHDREB                                                    */
*/*                                                                  */
*/* Function: Schedule message REB                                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
SCHDREB  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0800)    set error RSN
         $RETRY SCHD911,               activate retry                  +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Locate matching message REB
*
         XC    DSAQREB,DSAQREB         target REB
         MVC   DSALOCK,=CL5'REBLK'                                 @03A
         $LOCK EVTREBLK,SSI=YES,FAIL=SCHDERR                       @03A
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   SCHD000                 yes, carry on
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         XC    DSARC,DSARC             set RC
         B     SCHDEXIT                exit
*
SCHD000  DS    0H
         USING REB,R5                  addressability
         CLC   REBID,=CL4'REB'         valid indeed?
         BNE   SCHD060                 no, loop
         TM    REBFLG1,REB@ACTV        active REB?
         BZ    SCHD060                 no, loop
         TM    REBFLG1,REB@TRIG        rule trigger set?
         BZ    SCHD005                 no, carry on
         NI    REBFLG1,XFF-REB@TRIG    reset trigger idicator
         B     SCHD030                 carry on
*
SCHD005  DS    0H
         CLI   REBTYPE,REB@WTO         msg REB?
         BE    SCHD010                 yes                         @05C
         CLI   REBTYPE,REB@SYS         MONITOR rule REB?           @05A
         BNE   SCHD060                 no, loop                    @05A
*
SCHD010  DS    0H                                                  @05A
         ICM   R2,15,REBEDATL          valid event data length?
         BZ    SCHD060                 no, loop
         LR    R1,R2                   copy event data length
         BCTR  R1,0                    subtract one
         EX    R1,CHECKMSG             event data match?
         BE    SCHD030                 yes, carry on
         LA    R3,REBEDATA             msg event data address
         LA    R4,DSAWTOBF             msg text address
*
SCHD015  DS    0H
         CLC   0(1,R3),0(R4)           character match?            @05C
         BE    SCHD020                 yes, loop
         CLI   0(R3),C'*'              wild character?
         BNE   SCHD060                 no, loop
*
SCHD020  DS    0H
         LA    R3,1(,R3)               next event data char
         LA    R4,1(,R4)               next buffer data char
         BCT   R2,SCHD015              loop                        @05C
*
**       Validity check event type
*
SCHD030  DS    0H
         L     R3,PSAAOLD              ASCB address
         USING ASCB,R3                 set addressability
         CLI   REBEVENT,REB@MONT       MONITOR event type?         @05A
         BE    SCHD040                 yes, carry on               @05A
         CLI   REBEVENT,REB@STCI       STCINIT event type?
         BE    SCHD040                 yes, carry on
         CLI   REBEVENT,REB@STCT       STCTERM event type?
         BE    SCHD040                 yes, carry on
         CLI   REBEVENT,REB@JOBI       JOBINIT event type?
         BE    SCHD050                 yes, carry on
         CLI   REBEVENT,REB@JOBT       JOBTERM event type?
         BE    SCHD050                 yes, carry on
         CLI   REBEVENT,REB@TSUI       TSUINIT event type?
         BE    SCHD055                 yes, carry on
         CLI   REBEVENT,REB@TSUT       TSUTERM event type?
         BE    SCHD055                 yes, carry on
         ST    R5,DSAQREB              save target REB address
         B     SCHD070                 schedule REB
*
SCHD040  DS    0H
         ICM   R1,15,ASCBJBNS          STC address space?
         BZ    SCHD060                 no, loop
         CLC   0(8,R1),=CL8'INIT'      JES initiator?              @06A
         BE    SCHD060                 yes, loop                   @06A
         ST    R5,DSAQREB              save target REB address
         CLI   REBTYPE,REB@SYS         MONITOR rule REB?          6@05A
         BNE   SCHD070                 no, schedule REB
         XC    DSAQREB,DSAQREB         zero REB address
         TM    REBFLG2,REB@MTRG        already triggered?
         BNZ   SCHD060                 yes, skip schedule
         OI    REBFLG2,REB@MTRG        set trigger indicator
         ST    R5,DSAQREB              save target REB address
         B     SCHD070                 schedule REB
*
SCHD050  DS    0H
         ICM   R1,15,ASCBJBNI          JOB address space?
         BZ    SCHD060                 no, loop
         ST    R5,DSAQREB              save target REB address
         B     SCHD070                 schedule REB
*
SCHD055  DS    0H
         ICM   R1,15,ASCBTSB           TSU address space?
         BZ    SCHD060                 no, loop
         ST    R5,DSAQREB              save target REB address
         B     SCHD070                 schedule REB
         DROP  R3
*
SCHD060  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   SCHD000                 yes, loop
         $UNLOCK EVTREBLK,SSI=YES      no, unlock REB queue
         XC    DSARC,DSARC             set RC
         B     SCHDEXIT                exit
*
**       Obtain REB Cell element
*
SCHD070  DS    0H
         MVC   DSAJCLER,REBJCLER       copy &JCLERR variable
         MVI   REBJCLER,REB@JCLN       reset &JCLERR to 'NONE'
         MVC   DSAABEND,REBABEND       copy &ABEND variable
         MVC   REBABEND,=CL4'NONE'     reset &ABEND to 'NONE'
         DROP  R5
         $CPOOL GET,                   get REB cell                    +
               CPID=EVTREBCP,          cell pool ID                    +
               CELL=DSAREBA,           return REB cell here            +
               MODE=COND               conditional request
         ST    R0,EVTWTRSN             save RSN
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    SCHD080                 yes, carry on
         $UNLOCK EVTREBLK,SSI=YES      no, unlock REB queue
         XC    DSARC,DSARC             set RC
         B     SCHDEXIT                exit
*
**       Relocate triggered REB element
*
SCHD080  DS    0H
         OI    DSAFLG1,DSA@CELL        cell obtained
         L     R3,DSAQREB              triggered REB address
         L     R5,DSAREBA              REB cell address
         USING REB,R5                  set addressability
         MVC   0(REB@SIZE,R5),0(R3)    relocate triggered REB
         MVC   REBJCLER,DSAJCLER       copy &JCLERR variable
         MVC   REBABEND,DSAABEND       copy &ABEND variable
         XC    REBCHPTR,REBCHPTR       zero chain pointer
*
**       Resolve common event variables
*
         MVC   REBSDATA,DSAWTOBF       copy issued msg
         TM    DSAFLG1,DSA@WTOR        WTOR msg?
         BZ    SCHD090                 no, WTO msg
         L     R1,EVTREPLY             REPLYID=size option         @02A
         BCTR  R1,0                    decrement for EXecute       @02A
         EX    R1,COPYRPLY             copy &REPLYID variable      @02A
         OI    REBFLG1,REB@WTOR        set WTOR indicator
*
SCHD090  DS    0H
         $CALL SR=ECFVAR,                                              +
               PARM=DSAREBA            pass REB address
         ST    R15,DSARC               save RC
         ST    R0,EVTWTRSN             save RSN
         LTR   R15,R15                 successful?
         BZ    SCHD095                 yes, carry on
*
**       Free relocated REB cell element
*
         $CPOOL FREE,                                                  +
               CPID=EVTREBCP,          REB cell pool ID                +
               CELL=DSAREBA            REB cell element address
         NI    DSAFLG1,XFF-DSA@CELL    cell released
         L     R5,DSAQREB              get target REB address
         XC    DSAQREB,DSAQREB         zero target REB address
         B     SCHD060                 process next REB
*
**       Queue REB to message REB queue
*
SCHD095  DS    0H
         MVC   DSALOCK,=CL5'WTOLK'                                 @03A
         $LOCK EVTWTOLK,SSI=YES,FAIL=SCHDERR                       @03C
         L     R3,EVTWTOQA             top WTO/R-REB ptr
         ST    R3,REBCHPTR             chain top REB to my REB
         ST    R5,EVTWTOQA             make my REB top REB
         L     R1,EVTWTCNT             get events processed count
         LA    R1,1(,R1)               add one
         ST    R1,EVTWTCNT             update count
         $UNLOCK EVTWTOLK,SSI=YES      unlock WTO/R-REB queue
*
**       Schedule service request
*
         $XMPOST EP=EVTPSTA,           ECFPST EPA                      +
               EVT=(R11),              EVT address                     +
               CALLER=S35,             SVC-35 listener                 +
               ASCB=EVTASCB,           subsystem ASCB                  +
               TCB=EVTWTTCB,           ECFSRV(S35SRV) subtask TCB      +
               ECB=EVTWTECB,           ECFSRV(S35SRV) subtask ECB      +
               REB=DSAREBA,            WTO/R-REB address               +
               KEY=SUPR,               Supervisor key                  +
               MF=(E,DSAIRB)
         OI    DSAFLG1,DSA@IRB         IRB scheduled
         L     R5,DSAQREB              get target REB address
         XC    DSAQREB,DSAQREB         zero target REB address
         B     SCHD060                 process next REB
*
**       ABEND recovery clean routine
*
SCHD911  DS    0H
         $RETRY SCHDEXIT,              reset retry                     +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         $UNLOCK EVTWTOLK,SSI=YES      unlock WTO/R-REB queue
         TM    DSAFLG1,DSA@IRB         IRB scheduled?
         BNZ   SCHDEXIT                yes, exit
         TM    DSAFLG1,DSA@CELL        WTO/R-REB cell obtained?
         BZ    SCHDEXIT                no, exit
*
         $CPOOL FREE,                                                  +
               CPID=EVTREBCP,          WTO/R-REB cell pool ID          +
               CELL=DSAREBA            WTO/R-REB cell address
         NI    DSAFLG1,XFF-DSA@CELL    cell released
         B     SCHDEXIT                exit                        @03A
*
**       Set lock obtain failed indicator                          @03A
*
SCHDERR  DS    0H                                                  @03A
         MVC   EVTLCKID,DSALOCK        init lock ID                @03A
         OI    EVTFLG4,EVT@LCKR        lock obtain failed          @03A
         $UNLOCK EVTREBLK,SSI=YES      release lock if held        @03A
         $UNLOCK EVTWTOLK,SSI=YES      release lock if held        @03A
*
SCHDEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        EXecuted Instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
CHECKMSG CLC   DSAWTOBF(*-*),REBEDATA  EXecuted instruction
COPYRPLY MVC   REBREPLY(*-*),DSAREPLY  Executed instruction        @02A
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MSG450I                                                    */
*/*                                                                  */
*/* Function: Process job ABEND message ID                           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Message: 'IEF450I jobname jobname - ABEND Snnn Unnnn'            */
*/*                                                                  */
*/* Input Regs: R4  MSG address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MSG450I  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0808)    set error RSN
         $RETRY M450I99,                                               +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
         LA    R4,DSAWTOBF             msg data address
         LA    R3,DSA@WTOZ-8           msg data length
*
M450I00  DS    0H
         CLC   0(6,R4),ABEND           ABEND offset found?
         BE    M450I10                 yes, carry on
         LA    R4,1(,R4)               next byte
         BCT   R3,M450I00              loop
         MVC   DSAABEND,NOABEND        unknown ABEND
         B     M450I30                 exit
*
M450I10  DS    0H
         CLC   11(6,R4),UABEND         user ABEND?
         BE    M450I20                 no, system ABEND
         MVC   DSAABEND,12(R4)         yes, copy user ABEND code
         B     M450I30                 exit
*
M450I20  DS    0H
         MVC   DSAABEND,6(R4)          copy system ABEND code
*
**       Locate IEF404I message REB
*
M450I30  DS    0H
         MVC   DSALOCK,=CL5'REBLK'                                 @03A
         $LOCK EVTREBLK,SSI=YES,FAIL=M450ERR                       @03C
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   M450I40                 yes, carry on
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     M450IXIT                exit
*
M450I40  DS    0H
         USING REB,R5                  set addressability
         CLI   REBTYPE,REB@WTO         messsage REB?
         BNE   M450I50                 no, loop
         ICM   R1,15,REBEDATL          valid event data length?
         BZ    M450I50                 no, loop
         CLC   REBEDATA(8),IEF404I     IEF404I msg ID?
         BNE   M450I50                 no, loop
         MVC   REBABEND,DSAABEND       copy ABEND code to REB
*
M450I50  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   M450I40                 yes, loop
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     M450IXIT                exit
*
**       ABEND recovery clean routine
*
M450I99  DS    0H
         MVC   EVTWTRSN,DSARSN         set error RSN
         $RETRY M450IXIT,                                              +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     M450IXIT                exit                        @03A
*
**       Set lock obtain failed indicator                          @03A
*
M450ERR  DS    0H                                                  @03A
         MVC   EVTLCKID,DSALOCK        init lock ID                @03A
         OI    EVTFLG4,EVT@LCKR        lock obtain failed          @03A
*
M450IXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
ABEND    DC    CL6'ABEND'              system ABEND
UABEND   DC    CL6'U0000'              User ABEND
NOABEND  DC    CL4'NONE'               unknown ABEND code
IEF404I  DC    CL8'IEF404I'            target msg ID
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MSG452I                                                    */
*/*                                                                  */
*/* Function: Process JCL ERROR message ID                           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Message: 'IEF452I jjjjjjjj JOB NOT RUN - JCL ERROR'              */
*/*                                                                  */
*/* Input Regs: R4  MSG address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MSG452I  $SUBINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0812)    set error RSN
         $RETRY M452I99,               activate retry                  +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Locate target REB
*
M452I00  DS    0H
         MVC   DSAWTXBF,DSAWTOBF       copy WTO text
         MVC   DSAWTXBF(8),MSG404I     overlay IEF452I w/IEF404I
         MVC   DSALOCK,=CL5'REBLK'                                 @03A
         $LOCK EVTREBLK,SSI=YES,FAIL=M452ERR                       @03C
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   M452I10                 yes, carry on
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     M452IXIT                exit
*
M452I10  DS    0H
         USING REB,R5                  REB addressability
         CLC   REBID,=CL4'REB'         valid indeed?
         BNE   M452I40                 no, loop
         TM    REBFLG1,REB@ACTV        active REB?
         BZ    M452I40                 no, loop
         CLI   REBTYPE,REB@WTO         msg REB?
         BNE   M452I40                 no, loop
         ICM   R2,15,REBEDATL          valid event data length?
         BZ    M452I40                 no, loop
         LR    R1,R2                   copy event data length
         BCTR  R1,0                    subtract one
         EX    R1,M452IMSG             event data match?
         BE    M452I50                 yes, carry on
         LA    R3,REBEDATA             msg event data address
         LA    R4,DSAWTXBF             msg text address
*
M452I20  DS    0H
         CLC   0(1,R3),0(R4)           character match?
         BE    M452I30                 yes, loop
         CLI   0(R3),C'*'              wild character?
         BNE   M452I40                 no, loop
*
M452I30  DS    0H
         LA    R3,1(,R3)               next event data char
         LA    R4,1(,R4)               next msg buffer data char
         BCT   R2,M452I20              loop
         B     M452I50                 exit
*
M452I40  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   M452I10                 yes, loop
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     M452IXIT                exit
*
M452I50  DS    0H
         MVI   REBJCLER,REB@JCLY       init &JCLERR variable
         OI    REBFLG1,REB@TRIG        set rule trigger indicator
         B     M452I40                 loop
*
**       ABEND recovery clean routine
*
M452I99  DS    0H
         MVC   EVTWTRSN,DSARSN         set error RSN
         $RETRY M452IXIT,                                              +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     M452IXIT                exit                        @03A
*
**       Set lock obtain failed indicator                          @03A
*
M452ERR  DS    0H                                                  @03A
         MVC   EVTLCKID,DSALOCK        init lock ID                @03A
         OI    EVTFLG4,EVT@LCKR        set lock failed indicator   @03A
*
M452IXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        EXecuted Instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
M452IMSG CLC   DSAWTXBF(*-*),REBEDATA  EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
MSG404I  DC    CL8'IEF404I'            target msg ID
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MSG453I                                                    */
*/*                                                                  */
*/* Function: Process JCL ERROR message ID                           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Message: 'IEF453I jjjjjjjj - JOB FAILED - JCL ERROR'             */
*/*                                                                  */
*/* Input Regs: R4  MSG address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
MSG453I  $SUBINI                                                 99@06A
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0814)    set error RSN
         $RETRY M453I99,               activate retry                  +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Locate target REB
*
M453I00  DS    0H
         MVC   DSAWTXBF,DSAWTOBF       copy WTO text
         MVC   DSAWTXBF(8),MSG404II    overlay IEF453I w/IEF404I
         MVC   DSALOCK,=CL5'REBLK'
         $LOCK EVTREBLK,SSI=YES,FAIL=M453ERR
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   M453I10                 yes, carry on
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     M453IXIT                exit
*
M453I10  DS    0H
         USING REB,R5                  REB addressability
         CLC   REBID,=CL4'REB'         valid indeed?
         BNE   M453I40                 no, loop
         TM    REBFLG1,REB@ACTV        active REB?
         BZ    M453I40                 no, loop
         CLI   REBTYPE,REB@WTO         msg REB?
         BNE   M453I40                 no, loop
         ICM   R2,15,REBEDATL          valid event data length?
         BZ    M453I40                 no, loop
         LR    R1,R2                   copy event data length
         BCTR  R1,0                    subtract one
         EX    R1,M453IMSG             event data match?
         BE    M453I50                 yes, carry on
         LA    R3,REBEDATA             msg event data address
         LA    R4,DSAWTXBF             msg text address
*
M453I20  DS    0H
         CLC   0(1,R3),0(R4)           character match?
         BE    M453I30                 yes, loop
         CLI   0(R3),C'*'              wild character?
         BNE   M453I40                 no, loop
*
M453I30  DS    0H
         LA    R3,1(,R3)               next event data char
         LA    R4,1(,R4)               next msg buffer data char
         BCT   R2,M453I20              loop
         B     M453I50                 exit
*
M453I40  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   M453I10                 yes, loop
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     M453IXIT                exit
*
M453I50  DS    0H
         MVI   REBJCLER,REB@JCLY       init &JCLERR variable
         OI    REBFLG1,REB@TRIG        set rule trigger indicator
         B     M453I40                 loop
*
**       ABEND recovery clean routine
*
M453I99  DS    0H
         MVC   EVTWTRSN,DSARSN         set error RSN
         $RETRY M453IXIT,                                              +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     M453IXIT                exit
*
**       Set lock obtain failed indicator
*
M453ERR  DS    0H
         MVC   EVTLCKID,DSALOCK        init lock ID
         OI    EVTFLG4,EVT@LCKR        set lock failed indicator
*
M453IXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        EXecuted Instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
M453IMSG CLC   DSAWTXBF(*-*),REBEDATA  EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
MSG404II DC    CL8'IEF404I'            target msg ID
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: STOPECF                                                    */
*/*                                                                  */
*/* Function: STOP ECF when MVS is shutting down subroutine          */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R6  WQE address                                      */
*/*             R8  SSOB address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R6  WQE address                                      */
*/*             R8  SSOB address                                     */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
STOPECF  $SUBINI
         USING PSA,0                   FLC addressability
         USING WQE,R6                  WQE addressability
         USING SSOB,R8                 SSOB addressability
         USING EVT,R11                 EVT addressability
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0824)    set error RSN
         $RETRY STOP099,                                               +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Stop ECF when MVS is shutting down
*
         CLC   TK4@CMD1,DSAWTOBF       MVS shutting down?
         BNE   STOPEXIT                no, exit
         $XMPOST EP=EVTPSTA,           ECFPST EPA                      +
               EVT=(R11),              EVT address                     +
               CALLER=S35,             SVC-35 listener                 +
               ASCB=EVTASCB,           subsystem ASCB                  +
               TCB=EVTJSTCB,           ECFSUB jobstep task TCB         +
               ECB=EVTJSECB,           ECFSUB jobstep task ECB         +
               KEY=SUPR,               Supervisor key                  +
               MF=(E,DSAIRB)
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         B     STOPEXIT                exit
*
**       ABEND recovery clean routine
*
STOP099  DS    0H
         $RETRY STOPEXIT,                                              +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              ABEND RSN
         MVC   EVTWTRSN,DSARSN         set error RSN
*
STOPEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
TK4@CMD1 DC    CL28'BSPSD999 - Shutting down MVS'
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: INITSVC                                                    */
*/*                                                                  */
*/* Function: SVC screening initialization subroutine                */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R4  MSG address                                      */
*/*             R6  SVX address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
INITSVC  $SUBINI                                                 99@06A
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         TM    EVTFLG5,EVT@HZOS        zOS host?
         BZ    INISVCXT                no, exit
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0802)    set error RSN
         $RETRY INSV911,               activate retry                  +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Deactivate previous screening instance
*
         L     R4,PSATOLD              IEFSD060 TCB
         USING TCB,R4                  set addressability
         ICM   R7,15,TCBSVCA2          SVC screeening active?
         BZ    INISV00                 no, carry on
         NI    TCBFLGS7,XFF-TCBSVCS    turn off,
         XC    TCBSVCA2,TCBSVCA2        SVC screening.
         USING SVCE,R7                 set addressability
         CLC   SVCEID,=CL4'SVCE'       valid indeed?
         BNE   INISV00                 no, carry on
         $DBUG 00,W1                   debug
*
**       Free previous SVCE instance table
*
         L     R3,SVCESIZE
         STORAGE RELEASE,COND=NO,                                      +
               SP=253,ADDR=(R7),LENGTH=(R3)
         OI    DSAFLG2,DSA@SVCF        SVCE debug indicator
         $DBUG 02,W2                   debug
*
**       Validity check screening environment
*
INISV00  DS    0H
         TM    EVTFLG5,EVT@SVCN        TRAPSVC=NO set?
         BNZ   INISVCXT                yes, exit
         TM    EVTFLG4,EVT@USVC        SVC=nnn installed?
         BZ    INISVCXT                no, exit
         CLI   EVTUSVCN,X'0D'          ECFSVC?
         BE    INISVCXT                no, exit
*
**       Serialize active REB queue
*
         MVC   DSALOCK,=CL5'REBLK'
         $LOCK EVTREBLK,SSI=YES,FAIL=INSVERR
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   INISV10                 yes, carry on
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     INISVCXT                exit
*
INISV10  DS    0H
         USING REB,R5                  addressability
         CLC   REBID,=CL4'REB'         valid indeed?
         BNE   INISV20                 no, loop
         CLI   REBTYPE,REB@SVC         SVC screening REB?
         BNE   INISV20                 no, loop
         TM    REBFLG1,REB@ACTV        active REB?
         BZ    INISV20                 no, loop
*
**       Locate matching REB element
*
         $CALL PARSE                   parse job
         LTR   R15,R15                 matching REB?
         BZ    INISV30                 yes, carry on
*
INISV20  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   INISV10                 yes, loop
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         $DBUG 04,W3                   debug
         B     INISVCXT                exit
*
**       SVC screen address space
*
INISV30  DS    0H
         OI    REBFLG2,REB@SVCA        set screening indicator
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
*
**       Rebuild SVC screening table
*
         STORAGE OBTAIN,COND=NO,                                       +
               SP=253,LOC=BELOW,LENGTH=SVCE@TBZ
         LR    R7,R1                   SVCE address
         USING SVCE,R7                 set addressability
         L     R2,EVTSVXA              ECFSVX table address
         LA    R3,SVCE@TBZ             SVC table size
         LR    R0,R1                   storage address
         LR    R1,R3                   copy length
         MVCL  R0,R2                   relocate SVC table
         LA    R1,SVCE@TBZ             SVC table size
         ST    R1,SVCESIZE             save SVCE size
         ST    R11,SVCEEVTA            EVT address
         MVC   SVCEZSVC,EVTSVC         SVC=nnn default
         MVC   SVCEFCID,EVTSVC         SVC=nnn FCID
         MVC   SVCESTCB,PSATOLD        IEFSD060 TCB address
         MVC   SVCEDDNM,EVTRPSVC       TRAPSVC=DDname
*
         MVC   SVCEJOBN,DSASVCAS       copy jobname
         MVC   SVCEJTYP,DSASVCJT       copy job type
         MVC   SVCESID,EVTSYSID        copy SID
         MVC   SVCEVMID,EVTVMID        copy VMID
         MVC   SVCELPAR,EVTLPARN       copy LPAR
*
         MVI   SVCE3,OVERRIDE          never screen EXIT
         MVI   SVCE13,OVERRIDE         never screen ABEND
         MVI   SVCE35,OVERRIDE         never screen WTO/R
         MVI   SVCE51,OVERRIDE         never screen SDUMP/X
         OI    DSAFLG2,DSA@SVCE        SVCE debug indicator
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    INISV40                 no
         OI    SVCEFLG1,SVCE@DBG       yes
         $DBUG 06,W4                   debug
*
**       Set IEFSD060 jobstep TCB SVC screening
*
INISV40  DS    0H
         L     R4,PSATOLD              IEFSD060 TCB address
         USING TCB,R4                  set addressability
         LA    R3,SVCETAB              SVC table address
         ST    R3,TCBSVCA2             screen IEFSD060 TCB
         OI    TCBFLGS7,TCBSVCS        activate SVC screening
         OI    TCBFLGS7,TCBSVCSP       set ATTACH/X propagation bit
         OI    SVCEFLG1,SVCE@ACT       SVC screening activated
         OI    SVCEFLG1,SVCE@S60       set debug indicator
         $DBUG 08,W5                   debug
         B     INISVCXT                exit
*
**       ABEND recovery clean routine
*
INSV911  DS    0H
         $RETRY INISVCXT,              reset retry                     +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         $DBUG 10,W6                   debug
         B     INISVCXT                exit
*
**       Set lock obtain failed indicator
*
INSVERR  DS    0H
         MVC   EVTLCKID,DSALOCK        init lock ID
         OI    EVTFLG4,EVT@LCKR        lock obtain failed
*
**       Exit
*
INISVCXT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
OVERRIDE EQU   X'80'                   never screen override
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TERMSVC                                                    */
*/*                                                                  */
*/* Function: SVC screening termination subroutine                   */
*/*                                                                  */
*/* Input Regs: R8  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R4  TCB address                                      */
*/*             R6  SVX address                                      */
*/*             R7  SVCE address                                     */
*/*             R8  DCB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
TERMSVC  $SUBINI                                                 99@06A
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         TM    EVTFLG5,EVT@HZOS        zOS host?
         BZ    TERMEXIT                no, exit
*
**       Activate recovery
*
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0806)    set error RSN
         $RETRY TERM911,               activate retry                  +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Validity check SVCE table
*
         L     R4,PSATOLD              IEFSD060 TCB
         USING TCB,R4                  set addressability
         ICM   R7,15,TCBSVCA2          screeening active?
         BZ    TERMEXIT                no, exit
         USING SVCE,R7                 set addressability
         CLC   SVCEID,=CL4'SVCE'       valid indeed?
         BNE   TERMEXIT                no, exit
         OI    SVCEFLG1,SVCE@NAC       set debug indicator
         TM    EVTFLG5,EVT@SVCN        TRAPSVC=NO set?
         BNZ   TERMEXIT                yes, exit
         $DBUG 12,W7                   debug
*
**       Locate matching message REB
*
         XC    DSAQREB,DSAQREB
         MVC   DSALOCK,=CL5'REBLK'
         $LOCK EVTREBLK,SSI=YES,FAIL=TERMERR
         ICM   R5,15,EVTREBQA          queued REBs?
         BNZ   TERM010                 yes, carry on
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     TERMEXIT                exit
*
TERM010  DS    0H
         USING REB,R5                  addressability
         CLC   REBID,=CL4'REB'         valid indeed?
         BNE   TERM020                 no, loop
         CLI   REBTYPE,REB@SVC         SVC screening REB?
         BNE   TERM020                 no, loop
         TM    REBFLG1,REB@ACTV        active REB?
         BZ    TERM020                 no, loop
*
**       Locate matching REB element
*
         $CALL PARSE
         LTR   R15,R15                 matching REB?
         BZ    TERM030                 yes, carry on
*
TERM020  DS    0H
         ICM   R5,15,REBCHPTR          more REBs?
         BNZ   TERM010                 yes, loop
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         B     TERMEXIT                exit
*
**       Obtain REB Cell element
*
TERM030  DS    0H
         ST    R5,DSAQREB              save target REB address
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         $CPOOL GET,                   get REB cell                    +
               CPID=EVTREBCP,          cell pool ID                    +
               CELL=DSAREBA,           return REB cell here            +
               MODE=COND               conditional request
         ST    R0,EVTWTRSN              ave RSN
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    TERM040                 yes, carry on
         $UNLOCK EVTREBLK,SSI=YES      no, unlock REB queue
         XC    DSAQREB,DSAQREB         zero target reb address
         B     TERMEXIT                exit
*
**       Relocate triggered REB element
*
TERM040  DS    0H
         OI    DSAFLG1,DSA@CELL        cell obtained
         L     R3,DSAQREB              triggered REB address
         L     R5,DSAREBA              REB cell address
         USING REB,R5                  set addressability
         MVC   0(REB@SIZE,R5),0(R3)    relocate triggered REB
         MVC   REBSDATA,DSAWTOBF       copy issued msg
*
**       Resolve common event variables
*
         $CALL SR=ECFVAR,                                              +
               PARM=DSAREBA            pass REB address
         ST    R15,DSARC               save RC
         ST    R0,EVTWTRSN             save RSN
         LTR   R15,R15                 successful?
         BNZ   TERM050                 no, free REB element
         MVC   SVCEJOBN,REBASTYP       copy address space type
         MVC   SVCEJTYP,REBASNAM       copy address space name
         B     TERM060                 carry on
*
**       Free relocated REB cell element
*
TERM050  DS    0H
         $CPOOL FREE,                                                  +
               CPID=EVTREBCP,          REB cell pool ID                +
               CELL=DSAREBA            REB cell element address
         NI    DSAFLG1,XFF-DSA@CELL    cell released
         XC    DSAQREB,DSAQREB         zero target REB address
         B     TERMEXIT                exit
*
**       Queue REB to SVC screening queue
*
TERM060  DS    0H
         MVC   DSALOCK,=CL5'SVCLK'
         $LOCK EVTSVCLK,SSI=YES,FAIL=TERMERR
         L     R3,EVTSVCQA             top CVC-REB ptr
         ST    R3,REBCHPTR             chain top REB to my REB
         ST    R5,EVTSVCQA             make my REB top REB
         L     R1,EVTSVCNT             get events processed count
         LA    R1,1(,R1)               add one
         ST    R1,EVTSVCNT             update count
         $UNLOCK EVTSVCLK,SSI=YES      unlock SVC-REB queue
*
**       Schedule service request
*
         $XMPOST EP=EVTPSTA,           ECFPST EPA                      +
               EVT=(R11),              EVT address                     +
               CALLER=XVC,             SVC screening caller            +
               ASCB=EVTASCB,           subsystem ASCB                  +
               TCB=EVTSVTCB,           ECFSRV(SVCSRV) subtask TCB      +
               ECB=EVTSVECB,           ECFSRV(SVCSRV) subtask ECB      +
               REB=DSAREBA,            SVC-REB address                 +
               KEY=SUPR,               Supervisor key                  +
               MF=(E,DSAIRB)
         OI    DSAFLG1,DSA@IRB         IRB scheduled
         $DBUG 14,W8                   debug
         B     TERMEXIT                exit
*
**       ABEND recovery clean routine
*
TERM911  DS    0H
         $RETRY TERMEXIT,              reset retry                     +
               WTO=NO,                 skip ABEND WTO                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
         $UNLOCK EVTREBLK,SSI=YES      unlock REB queue
         $UNLOCK EVTSVCLK,SSI=YES      unlock SVC-REB queue
         TM    DSAFLG1,DSA@IRB         IRB scheduled?
         BNZ   TERMEXIT                yes, exit
         TM    DSAFLG1,DSA@CELL        SVC-REB cell obtained?
         BZ    TERMEXIT                no, exit
*
         $CPOOL FREE,                                                  +
               CPID=EVTREBCP,          SVC-REB cell pool ID            +
               CELL=DSAREBA            SVC-REB cell address
         XC    DSAREBA,DSAREBA         zero SVC-REB address
         NI    DSAFLG1,XFF-DSA@CELL    cell released
         $DBUG 16,W9                   debug
         B     TERMEXIT                exit
*
**       Set lock obtain failed indicator
*
TERMERR  DS    0H
         MVC   EVTLCKID,DSALOCK        init lock ID
         OI    EVTFLG4,EVT@LCKR        lock obtain failed
         $UNLOCK EVTREBLK,SSI=YES      release lock if held
         $UNLOCK EVTSVCLK,SSI=YES      release lock if held
         $DBUG 18,WA                   debug
*
TERMEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: PARSE                                                      */
*/*                                                                  */
*/* Function: Trigger data parse subroutine                          */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R5  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R3  local REB address                                */
*/*             R5  common REB address                               */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
PARSE    $SUBINI                                                 99@06A
         USING REB,R5                  REB addressability
         USING EVT,R11                 EVT addressability
*
**       Resolve common event variables
*
         MVC   DSAREBLK(DSA@REBZ),REB  copy REB locally
         LA    R1,DSAREBLK             local REB address
         $CALL SR=ECFVAR               call service routine
         ST    R15,DSARC               save RC
         ST    R0,EVTWTRSN             save RSN
         LTR   R15,R15                 successful?
         BNZ   PARS099                 no, exit
*
**       Copy event AStype and ASname
*
         LA    R3,DSAREBLK             local REB address
LREB     USING REB,R3                  set addressability
         MVC   DSASVCJT,LREB.REBASTYP  copy {JOB|STC|TSU} type
         MVC   DSASVCAS,LREB.REBASNAM  copy {JOB|STC|TSU} name
         DROP  LREB
*
**       Validity check generic ASname
*
         LA    R2,8                    ASname size
         LA    R3,REBEDATA             event data address
         LA    R4,DSASVCAS             ASname address
*
PARS010  DS    0H
         CLC   0(1,R3),0(R4)           ASname char match?
         BE    PARS020                 yes, loop
         CLI   0(R3),C'*'              wild char?
         BNE   PARS099                 no match
*
PARS020  DS    0H
         LA    R3,1(,R3)               next event data char
         LA    R4,1(,R4)               next buffer data char
         BCT   R2,PARS010              walk thru ASname
         XC    DSARC,DSARC             set RC
         $DBUG 20,WB                   debug
         B     PARSEXIT                exit
*
PARS099  DS    0H
         MVC   DSARC,=AL4(RC8)         no match
*
PARSEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFEQU ,
         $ECFSTK ,
         $ECFREB ,
         $ECFSVX ,                                                 @06A
         $ECFTKN ,                                                 @06A
         $MSGCALL DSECT=YES
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASVA   DS    18F                     save area
         DS    0X
DSAFLG1  DS    XL1                     flags
DSA@STA  EQU   X'80'                   ESTAE established
DSA@WTOR EQU   X'40'                   WTOR msg indicator
DSA@IRB  EQU   X'20'                   IRB scheduled
DSA@CELL EQU   X'10'                   REB cell element obtained
DSA@SSIC EQU   X'08'                   listener count updated
DSA@EVTA EQU   X'04'                   EVT valid indicator
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLG2  DS    XL1                     flags
DSA@SVCE EQU   X'80'                   SVCE obtained indicator
DSA@SVCF EQU   X'40'                   SVCE released indicator
DSA@RV22 EQU   X'20'                   -available
DSA@RV23 EQU   X'10'                   -available
DSA@RV24 EQU   X'08'                   -available
DSA@RV25 EQU   X'04'                   -available
DSA@RV26 EQU   X'02'                   -available
DSA@RV27 EQU   X'01'                   -available
         DS    0X
DSAFLG3  DS    XL1                     flags
DSA@RV30 EQU   X'80'                   -available
DSA@RV31 EQU   X'40'                   -available
DSA@RV32 EQU   X'20'                   -available
DSA@RV33 EQU   X'10'                   -available
DSA@RV34 EQU   X'08'                   -available
DSA@RV35 EQU   X'04'                   -available
DSA@RV36 EQU   X'02'                   -available
DSA@RV37 EQU   X'01'                   -available
         DS    0X
DSAJCLER DS    CL1                     &JCLERR variable data
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSAREBA  DS    F                       WTO-REB address
DSAQREB  DS    F                       triggered REB address
DSATOKN  DS    F                       ESTAE token                 @04A
DSAEVTA  DS    F                       EVT address                 @06A
DSASVCID DS    F                       STIMERM ID                  @06A
DSAABEND DS    F                       &ABEND variable data
         DS    0F
DSAOPAR  DS    F                       output parm reg
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
         DS    0F
DSADEVTP DS    6F                      DEVTYPE work area
         DS    0F
DSAIRB   $XMPOST MF=L                  listform
DSA@IRBL EQU   *-DSAIRB                listform size
         DS    0F
DSAESTAE DS    CL(ESTAEL)              ESTAE listform
         DS    0F
DSASVCTM DS    CL8                     STIMERM DINTVL=interval     @06A
         DS    0F
DSALOCK  DS    CL5                     lock identifier             @03A
DSASVCAS DS    CL8                     SVC screeening jobname      @06A
DSASVCJT DS    CL3                     SVC job type {JOB}STC|TSU}  @06A
DSAREPLY DS    0CL4                    WTOR replyID
DSAREPID DS    CL2                     -replyID (00-99)
DSAREPI2 DS    CL2                     -furure replyID extension   @02C
DSA@REZL EQU   *-DSAREPLY              replyID length
         DS    0F
DSAWTOBF DS    CL120                   WQETXT msg text
DSA@WTOZ EQU   *-DSAWTOBF              WQETXT msg length
         DS    0F
DSAREBLK DS    CL(REB@SIZE)            local REB block             @06A
DSA@REBZ EQU   *-DSAREBLK              local REB length            @05A
         DS    0F
DSAWTXBF DS    CL32                    snip of WQETXT message text
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         IHAASXB ,
         IHAFRRS ,
         IKJTCB DSECT=YES
         IKJRB DSECT=YES
         CVT   DSECT=YES
         IHAWQE ,
         IEFJESCT ,
         IEFJSCVT ,
         IEFJSSVT ,
         IEFJSSIB ,
         IEFJSSOB (WT),CONTIG=NO
         IEANTASM ,
TIOT     DSECT ,
         IEFTIOT1 ,
         END
./ ADD NAME=ECFTCB   0116-21214-21304-1646-00189-00123-00090-BENMAR  54
ECFTCB   CSECT
ECFTCB   AMODE 31
ECFTCB   RMODE 24
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFTCB                                                     */
*/*                                                                  */
*/* Description: TCB Token Validation Service Routine                */
*/*                                                                  */
*/* Function: Called by event listeners to validate a TCB            */
*/*           instance in the Event Capture address space server.    */
*/*                                                                  */
*/* Input Regs: R0  TCB address                                      */
*/*             R1  TCB token address                                */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  EVT address                                      */
*/*             R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor state, key=0                   */
*/*                                                                  */
*/* Restrictions: 1. R9 thru R12 are permanently assigned            */
*/*               2. $TRACE macro calls CANNOT be issued             */
*/*               3. WTO/R SVC CANNOT be issued                      */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V2R3 | 08022021 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFTCB   $SRVINI
         USING PSA,0                   FLC addressability
         DROP  R11
         LR    R8,R11                  copy EVT address
         USING EVT,R8                  set addressability
         STM   R0,R1,DSAIPAR           save parm regs
*
**       Validity check requestor
*
         CLC   PSAAOLD,EVTMSAS         running in MSAS?
         BNE   TCX0000                 no, carry on
         MVC   DSARC,=AL4(256)         yes, error
         MVC   DSARSN,=AL4(RSN1090)    error RSN
         B     TCXEXIT                 exit
*
**       Establish ECF secondary addressability
*
         ESAR  R2                      extract ASID
         ST    R2,DSAESAR              save it
         LH    R2,EVTASID              ECF ASID
         SSAR  R2                      set addressability
*
**       Obtain ECF LOCAL address space lock
*
TCX0000  DS    0H
         SETLOCK OBTAIN,                                               +
               ASCB=EVTASCB,                                           +
               REGS=USE,                                               +
               TYPE=CML,                                               +
               MODE=UNCOND,                                            +
               RELATED=('Required by TCBTOKEN service')
*
**       Validity check Target TCB instance
*
         TCBTOKEN TYPE=TOTTOKEN,                                       +
               TCB=DSAIGR0,            target TCB                      +
               STOKEN=EVTSTOKN,        target ASCB                     +
               TTOKEN=DSATOKEN,        returned TCB token              +
               MF=(E,DSATCBTK)
         ST    R15,DSARC               save RC
*
**       Release ECF LOCAL address space lock
*
         SETLOCK RELEASE,                                              +
               ASCB=EVTASCB,                                           +
               REGS=USE,                                               +
               TYPE=CML,                                               +
               RELATED=('Release address space serialization')
*
**       Restore caller secondary addressability
*
         L     R2,DSAESAR              ESAR ASID
         SSAR  R2                      set addressability
*
**       Validity check returned TCB token
*
         CLC   DSARC,=AL4(RC0)         TCBTOKEN successful?
         BE    TCX0010                 no
         MVC   DSARSN,=AL4(RSN1092)    set error RSN
         B     TCXEXIT                 exit
*
**       Validity check target TCB instance
*
TCX0010  DS    0H
         L     R3,DSAIGR1              target TCB token
         CLC   DSATOKEN,0(R3)          same TCB instance?
         BE    TCX0099                 yes
         MVC   DSARC,=AL4(RC256)       set error RC
         MVC   DSARSN,=AL4(RSN1096)    set error RSN
         B     TCXEXIT                 exit
*
TCX0099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         B     TCXEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
TCXEXIT  DS    0H
         $SRVXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem Data Areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@RV0  EQU   X'80'                   -available
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSAESAR  DS    F                       ESAR ASID
DSAIPAR  DS    0F
DSAIGR0  DS    F                       TCB address
DSAIGR1  DS    F                       output Parm reg
DSA@IPRL EQU   *-DSAIPAR
DSATOKEN DS    XL16                    TCB token
         DS    0F
DSATCBTK TCBTOKEN MF=L                 TCBTOKEN listform
         DS    0D
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         CVT   DSECT=YES
         IKJTCB DSECT=YES
         END
./ ADD NAME=ECFTKN   0149-21113-21304-1646-00878-00567-00533-BENMAR  57
ECFTKN   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFTKN                                                     */
*/*                                                                  */
*/* Function: Event Capture Name/Token Pair Processor                */
*/*                                                                  */
*/* Description: This routine creates, retrieves, and deletes        */
*/*              Name/Token pairs. The following token levels        */
*/*              are supported:                                      */
*/*                                                                  */
*/*              o Task-Level                                        */
*/*              o Address-Space-Level                               */
*/*              o Persistent-System-Level                           */
*/*                                                                  */
*/* Input Regs: R0  NAME address                                     */
*/*             R1  TOKEN address                                    */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R7  TKN address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, key=Callerkey           */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R3 | 08162021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFTKN   $SRVINI
         USING PSA,0                   FLC
         USING EVT,R11                 EVT addressability
         USING STKE,R13                STKE addressability
         STM   R0,R1,DSAIPAR           save parm regs
*
**       Establish recovery environment
*
         MVC   DSARSN,=AL4(RSN0836)    ser RSN
         $RETRY TKN0099,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Validity check token level
*
TKN0100  DS    0H
         L     R5,GPR@BWD(,R13)        caller's savearea
         L     R5,GPR@R14(,R5)         caller return address
         SL    R5,=AL4(TKA@ATTR)       $TOKEN macro attributes
         ST    R5,DSATKA               save TKA address
         USING TKA,R5                  set addressability
         TM    TKALVL,TKA@TCB          Task-Level?
         BZ    TKN0200                 no, test further
         TM    EVTFLG5,EVT@HZOS        zOS host?                   @02A
         BNZ   TKN0110                 yes                         @02A
         L     R4,PSATOLD              TCB address
         USING TCB,R4                  set addressability
         ICM   R4,7,TCBFSAB            FSA
         MVC   DSATKNA,0(R4)           set target token table
*
TKN0110  DS    0H
         OI    DSAFLG1,DSA@TCB         Task-Level indicator
         MVC   DSATKLVL,=CL20'Task-Level'
         MVC   DSALEVEL,=AL4(IEANT_TASK_LEVEL)                     @02A
         B     TKN0500                 carry on
         DROP  R4
*
TKN0200  DS    0H
         TM    TKALVL,TKA@ASC          Address-Space-Level?
         BZ    TKN0300                 no, test further
         TM    EVTFLG5,EVT@HZOS        zOS host?                   @02A
         BNZ   TKN0210                 yes                         @02A
         MVC   DSATKNA,EVTASLVL        set target token table
*
TKN0210  DS    0H
         OI    DSAFLG1,DSA@ASC         Address-Space-Level indicator
         MVC   DSATKLVL,=CL20'Address-Space-Level'
         MVC   DSALEVEL,=AL4(IEANT_HOME_LEVEL)                     @02A
         B     TKN0500                 carry on
*
TKN0300  DS    0H
         TM    TKALVL,TKA@SYS          System-Level?
         BZ    TKN0400                 no, error
         TM    EVTFLG5,EVT@HZOS        zOS host?                   @02A
         BNZ   TKN0310                 yes                         @02A
         L     R4,EVTSYLVL             MSAS IEEVIPL FSA address
         MVC   DSATKNA,0(R4)           set target token table
*
TKN0310  DS    0H
         OI    DSAFLG1,DSA@SYS         System-Level indicator
         MVC   DSATKLVL,=CL20'System-Level'
         MVC   DSALEVEL,=AL4(IEANT_SYSTEM_LEVEL)                   @02A
         B     TKN0500                 carry on
*
TKN0400  DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0828)    set error RC
         B     TKNEXIT                 exit
*
**       CREATE Name/Token pair
*
TKN0500  DS    0H
         L     R7,DSATKNA              target table
         USING TKN,R7                  token table
         TM    TKATYPE,TKA@CRE         create request?
         BZ    TKN0600                 no, test further
         TM    EVTFLG5,EVT@HZOS        zOS host?                   @02A
         BNZ   TKN0510                 yes, use Name/Token pair    @02A
         $CALL CREATE                  create token
         B     TKNEXIT                 exit
*
TKN0510  DS    0H                                                  @02A
         $CALL ZCREATE                 create Name/Token pair      @02A
         B     TKNEXIT                 exit
*
**       DELETE Name/Token pair
*
TKN0600  DS    0H
         TM    TKATYPE,TKA@DEL         delete request?
         BZ    TKN0700                 no, test further
         TM    EVTFLG5,EVT@HZOS        zOS host?                   @02A
         BNZ   TKN0610                 yes, use Name/Token pair    @02A
         $CALL DELETE                  delete token
         B     TKNEXIT                 exit
*
TKN0610  DS    0H                                                  @02A
         $CALL ZDELETE                 delete Name/Token pair      @02A
         B     TKNEXIT                 exit
*
**       RETRIEVE Name/Token pair
*
TKN0700  DS    0H
         TM    TKATYPE,TKA@RET         retrieve request?
         BZ    TKNERROR                no, error
         TM    EVTFLG5,EVT@HZOS        zOS host?                   @02A
         BNZ   TKN0710                 yes, use Name/Token pair    @02A
         $CALL RETRIEVE                retrieve token
         B     TKNEXIT                 exit
*
TKN0710  DS    0H                                                  @02A
         $CALL ZRETRIEV                retrieve Name/Token pair    @02A
         B     TKNEXIT                 exit                        @02A
*
**       Release token table lock
*
TKN0099  DS    0H
         TM    EVTFLG5,EVT@HZOS        zOS host?                   @02A
         BNZ   TKNEXIT                 yes                         @02A
         ICM   R7,15,DSATKNA           table ptr init?
         BZ    TKNEXIT                 no, exit
         CLC   TKNID,=CL4'TKN'         valid indeed?
         BNE   TKNEXIT                 no, exit
         $UNLOCK TKNLOCK               release lock
         B     TKNEXIT                 exit
*
**       Invalid Name/Token pair request
*
TKNERROR DS    0H
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0832)    set error RC
         B     TKNEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
TKNEXIT  DS    0H
         $TRACE $SRVXIT,                                               +
               MID=ECFTKN,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
         $SRVXIT PARM=DSAOPAR,RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ZCREATE                                                    */
*/*                                                                  */
*/* Function: Create Name/Token Pair routine                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* MACRO: $TOKEN CREATE,NAME=(),TOKEN=(),LEVEL()                    */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ZCREATE  $SUBINI                                                 99@02A
         USING PSA,R0
         USING EVT,R11
         USING STKE,R13
*
**       Create Name/Token pair
*
         L     R3,DSAGPR0              token name address
         MVC   DSATKNAM,0(R3)          copy token name
         L     R3,DSAGPR1              token value address
         MVC   DSATOKEN,0(R3)          copy token value
         L     R5,DSATKA               TKA address
         USING TKA,R5                  set addressability
         TM    TKALVL,TKA@SYS          System-Level?
         BZ    ZCRE000                 no
         SPKA  0(0)                    set key zero
*
ZCRE000  DS    0H
         SAM31 ,
         L     R15,EVTNTPCR            IEANTCR EPA
         CALL  (R15),(DSALEVEL,DSATKNAM,DSATOKEN,ZPERSIST,DSARC),      +
               MF=(E,DSAPLST)
         SAM24 ,
         TM    TKALVL,TKA@SYS          System-Level?
         BZ    ZCRE010                 no
         L     R2,STKEKEY              my protect key
         SPKA  0(R2)                   restore my key
*
ZCRE010  DS    0H
         LTR   R15,R15                 successful?
         BNZ   ZCREXIT                 no, exit
*
**       Issue Debug message
*
         TM    STKFLG2,STK@SUBS        ECFSUB caller?
         BZ    ZCRE099                 no, issue debug msg
         $WTO  MID=ECF072I,                                            +
               VAR1=DSATKNAM,          show name                       +
               VAR2==CL9'created'      show function
         B     ZCREXIT                 exit
*
ZCRE099  DS    0H
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    ZCREXIT                 no, skip msg
         $WTO  MID=ECF101I,                                            +
               VAR1==CL8'Create',      show function                   +
               VAR2=DSATKLVL,          show level                      +
               VAR3=DSATKNAM           show token name
*
ZCREXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ZPERSIST DC    AL4(IEANT_PERSIST)
ZDUPTOKN DC    AL4(IEANT_DUP_NAME)
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: CREATE                                                     */
*/*                                                                  */
*/* Function: CREATE token subroutine                                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R6  TKE address                                      */
*/*             R7  TKN address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* MACRO: $TOKEN CREATE,NAME=(),TOKEN=(),LEVEL=()                   */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
CREATE   $SUBINI
         USING PSA,R0
         USING EVT,R11
         USING STKE,R13
*
**       Establish lock release recovery
*
         MVC   DSARSN,=AL4(RSN0614)    ser RSN
         $RETRY CRE0099,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Serialize Name/Token pair table
*
         L     R7,DSATKNA              target table
         USING TKN,R7
         $LOCK TKNLOCK                 lock token table
         L     R5,TKNTOT               token slots
         L     R6,TKNTOP               top token slot
         USING TKE,R6
         L     R3,DSAGPR0              token name address
         MVC   DSATKNAM,0(R3)          copy token name
*
CRE0020  DS    0H
         CLI   TKESTAT,TKE@ACT         active slot?
         BNE   CRE0030                 no, test further
         CLC   TKENAME,0(R3)           token found?
         BE    CRE0040                 yes, carry on
*
CRE0030  DS    0H
         LA    R6,TKE@SIZE(,R6)        next token slot
         BCT   R5,CRE0020              loop
         B     CRE0050                 carry on
*
CRE0040  DS    0H
         MVC   DSARC,=AL4(RC8)         duplicate token RC
         MVC   DSARSN,=AL4(RSN0184)    duplicate token RSN
         B     CRE0099                 release token table lock
*
CRE0050  DS    0H
         L     R5,TKNTOT               token slots
         L     R6,TKNTOP               top token slot address
*
CRE0060  DS    0H
         CLI   TKESTAT,TKE@FRE         free lot?
         BE    CRE0070                 yes, define slot
         LA    R6,TKE@SIZE(,R6)        next token slot
         BCT   R5,CRE0060              loop
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0172)    set error RSN
         B     CRE0099                 release token table lock
*
CRE0070  DS    0H
         MVC   TKEID,=CL4'TKE'         ID slot
         MVI   TKESTAT,TKE@ACT         token slot active
         L     R1,TKNCNT               get defined count
         LA    R1,1(,R1)               add one
         ST    R1,TKNCNT               update count
         L     R3,DSAGPR0              token name address
         MVC   TKENAME,0(R3)           init token name
         L     R3,DSAGPR1              TOKEN value address
         MVC   TKETOKN,0(R3)           init TOKEN value
         STCK  TKESTCK                 creation clock
         MVC   DSARC,=AL4(RC0)         set RC
         MVC   DSARSN,=AL4(RSN0)       set RSN
*
**       Release Name/Token table serialization
*
CRE0099  DS    0H
         ICM   R7,15,DSATKNA           table ptr init?
         BZ    CREEXIT                 no, exit
         CLC   TKNID,=CL4'TKN'         valid indeed?
         BNE   CREEXIT                 no, exit
         $UNLOCK TKNLOCK               release lock
*
**       Issue Debug message
*
         TM    STKFLG2,STK@SUBS        ECFSUB caller?              @02A
         BZ    CRE0999                 no, issue debug msg         @02A
         $WTO  MID=ECF072I,                                        @02A+
               VAR1=DSATKNAM,          show name                       +
               VAR2==CL9'created'      show function
         B     CREEXIT                 exit                        @02A
*
CRE0999  DS    0H                                                  @02A
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    CREEXIT                 no, skip msg
         $WTO  MID=ECF101I,                                            +
               VAR1==CL8'Create',      show function                   +
               VAR2=DSATKLVL,          show level                      +
               VAR3=DSATKNAM           show token name
*
CREEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ZDELETE                                                    */
*/*                                                                  */
*/* Function: Delete Name/Token Pair routine                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE Address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* MACRO: $TOKEN DELETE,NAME=(),LEVEL=()                            */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ZDELETE  $SUBINI                                                 99@02A
         USING PSA,R0
         USING EVT,R11
         USING STKE,R13
*
**       Delete Name/Token Pair.
*
         L     R3,DSAGPR0              token name address
         MVC   DSATKNAM,0(R3)          copy token name
*
         SAM31 ,
         L     R15,EVTNTPDL            IEANTDL EPA
         CALL  (R15),(DSALEVEL,DSATKNAM,DSARC),MF=(E,DSAPLST)
         SAM24 ,
         LTR   R15,R15                 successful?
         BNZ   ZDELXIT                 no, exir
*
**       Issue Debug message
*
         TM    STKFLG2,STK@SUBS        ECFSUB caller?
         BZ    ZDEL099                 no, issue debug msg
         $WTO  MID=ECF072I,                                            +
               VAR1=DSATKNAM,          show name                       +
               VAR2==CL9'deleted'      show function
         B     ZDELXIT                 exit
*
ZDEL099  DS    0H
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    ZDELXIT                 no, skip msg
         $WTO  MID=ECF101I,                                            +
               VAR1==CL8'Delete',      show function                   +
               VAR2=DSATKLVL,          show level                      +
               VAR3=DSATKNAM           show token name
*
ZDELXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: DELETE                                                     */
*/*                                                                  */
*/* Function: DELETE token subroutine                                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R6  TKE address                                      */
*/*             R7  TKN address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE Address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* MACRO: $TOKEN DELETE,NAME=(),LEVEL=()                            */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
DELETE   $SUBINI
         USING PSA,R0
         USING EVT,R11
         USING STKE,R13
*
**       Establish lock release recovery
*
         MVC   DSARSN,=AL4(RSN0616)    set RSN
         $RETRY DEL0099,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Serialize Name/Token pair table
*
         L     R7,DSATKNA              target table
         USING TKN,R7
         $LOCK TKNLOCK                 lock token table
         L     R5,TKNTOT               token slots
         L     R6,TKNTOP               top token slot
         USING TKE,R6
         L     R3,DSAGPR0              token name address
         MVC   DSATKNAM,0(R3)          copy token name
*
DEL0020  DS    0H
         CLI   TKESTAT,TKE@ACT         active slot?
         BNE   DEL0030                 no, test further
         CLC   TKENAME,0(R3)           token found?
         BE    DEL0040                 yes, carry on
*
DEL0030  DS    0H
         LA    R6,TKE@SIZE(,R6)        next token slot
         BCT   R5,DEL0020              loop
         MVC   DSARC,=AL4(RC4)         token not found RC
         MVC   DSARSN,=AL4(RSN0176)    token not found RSN
         B     DEL0099                 release lock & exit
*
DEL0040  DS    0H
         L     R1,TKNCNT               get defined count
         BCTR  R1,0                    subtract one
         ST    R1,TKNCNT               update count
         MVI   TKESTAT,TKE@FRE         mark it free
         XC    TKENAME,TKENAME         clear token name
         XC    TKETOKN,TKETOKN         clear token value
         MVC   DSARC,=AL4(RC0)         token RC
         MVC   DSARSN,=AL4(RSN0)       token RSN

*
**       Release Name/Token table serialization
*
DEL0099  DS    0H
         ICM   R7,15,DSATKNA           table ptr init?
         BZ    DELEXIT                 no, exit
         CLC   TKNID,=CL4'TKN'         valid indeed?
         BNE   DELEXIT                 no, exit
         $UNLOCK TKNLOCK               release lock
*
**       Issue Debug message
*
         TM    STKFLG2,STK@SUBS        ECFSUB caller?              @02A
         BZ    DEL0999                 no, issue debug msg         @02A
         $WTO  MID=ECF072I,                                        @02A+
               VAR1=DSATKNAM,          show name                       +
               VAR2==CL9'deleted'      show function
         B     DELEXIT                 exit                        @02A
*
DEL0999  DS    0H                                                  @02A
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    DELEXIT                 no, skip msg
         $WTO  MID=ECF101I,                                            +
               VAR1==CL8'Delete',      show function                   +
               VAR2=DSATKLVL,          show level                      +
               VAR3=DSATKNAM           show token name
*
DELEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: ZRETRIEV                                                   */
*/*                                                                  */
*/* Function: Retrieve Name/Token Pair routine                       */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* MACRO: $TOKEN RETRIEVE,NAME=(),TOKEN=(),LEVEL=()                 */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
ZRETRIEV $SUBINI                                                 99@02A
         USING PSA,R0
         USING EVT,R11
         USING STKE,R13
*
**       Retrieve Name/Token pair
*
         L     R3,DSAGPR0              token name address
         MVC   DSATKNAM,0(R3)          copy token name
*
         SAM31 ,
         L     R15,EVTNTPRT            IEANTRT EPA
         CALL  (R15),(DSALEVEL,DSATKNAM,DSATOKEN,DSARC),MF=(E,DSAPLST)
         SAM24 ,
         LTR   R15,R15                 successful?
         BNZ   ZRETXIT                 no, exit
         MVC   0(TKE@VSZE,R3),DSATOKEN return token to caller
*
**       Issue Debug message
*
         TM    STKFLG2,STK@SUBS        ECFSUB caller?
         BZ    ZRET099                 no, issue debug msg
         $WTO  MID=ECF072I,                                            +
               VAR1=DSATKNAM,          show name                       +
               VAR2==CL9'retrieved'    show function
         B     ZRETXIT                 exit
*
ZRET099  DS    0H
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    ZRETXIT                 no, skip msg
         $WTO  MID=ECF101I,                                            +
               VAR1==CL8'Retrieve',    show function                   +
               VAR2=DSATKLVL,          show level                      +
               VAR3=DSATKNAM           show token name
*
ZRETXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ZRTTASKL DC    AL4(IEANT_TASK_LEVEL)
ZRTHOMEL DC    AL4(IEANT_HOME_LEVEL)
ZRTPERST DC    AL4(IEANT_PERSIST)
ZRTLEVEL DC    AL4(IEANT_SYSTEM_LEVEL)
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RETRIEVE                                                   */
*/*                                                                  */
*/* Function: RETRIEVE token subroutine                              */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R6  TKE address                                      */
*/*             R7  TKN address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 STKE address                                     */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* MACRO: $TOKEN RETRIEVE,NAME=(),TOKEN=(),LEVEL=()                 */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RETRIEVE $SUBINI
         USING PSA,R0
         USING EVT,R11
         USING STKE,R13
*
**       Establish lock release recovery
*
         MVC   DSARSN,=AL4(RSN0620)    set RSN
         $RETRY RET0099,               activate retry                  +
               SDUMP=NO,               skip SVC dump                   +
               RSN=DSARSN              RSN code
*
**       Serialize Name/Token pair table
*
         L     R7,DSATKNA              target table
         USING TKN,R7
         $LOCK TKNLOCK                 lock token table
         L     R5,TKNTOT               token slots
         L     R6,TKNTOP               top token slot
         USING TKE,R6
         L     R3,DSAGPR0              token name address
         MVC   DSATKNAM,0(R3)          copy token name
*
RET0020  DS    0H
         CLI   TKESTAT,TKE@ACT         active slot?
         BNE   RET0030                 no, test further
         CLC   TKENAME,0(R3)           token found?
         BE    RET0040                 yes, carry on
*
RET0030  DS    0H
         LA    R6,TKE@SIZE(,R6)        next token slot
         BCT   R5,RET0020              loop
         MVC   DSARC,=AL4(RC8)         token not found RC
         MVC   DSARSN,=AL4(RSN0180)    token not found RSN
         B     RET0099                 release lock & exit
*
RET0040  DS    0H
         L     R3,DSAGPR1              TOKEN data address
         MVC   0(TKE@VSZE,R3),TKETOKN  return token to caller
         MVC   DSARC,=AL4(RC0)         token RC
         MVC   DSARSN,=AL4(RSN0)       token RSN
*
**       Release Name/Token table serialization
*
RET0099  DS    0H
         ICM   R7,15,DSATKNA           table ptr init?
         BZ    RETEXIT                 no, exit
         CLC   TKNID,=CL4'TKN'         valid indeed?
         BNE   RETEXIT                 no, exit
         $UNLOCK TKNLOCK               release lock
*
**       Issue Debug message
*
         TM    STKFLG2,STK@SUBS        ECFSUB caller?              @02A
         BZ    RET0999                 no, issue debug msg         @02A
         $WTO  MID=ECF072I,                                        @02A+
               VAR1=DSATKNAM,          show name                       +
               VAR2==CL9'retrieved'    show function
         B     RETEXIT                 exit                        @02A
*
RET0999  DS    0H                                                  @02A
         TM    STKFLG1,STK@DBUG        DEBUG=ON?
         BZ    RETEXIT                 no, skip msg
         $WTO  MID=ECF101I,                                            +
               VAR1==CL8'Retrieve',    show function                   +
               VAR2=DSATKLVL,          show level                      +
               VAR3=DSATKNAM           show token name
*
RETEXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFTKN ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@TCB  EQU   X'80'                   Task-Level indicator
DSA@ASC  EQU   X'40'                   Address-Space-Level indicator
DSA@SYS  EQU   X'20'                   System-Level indicator
DSA@SUP  EQU   X'10'                   Supervisor key indicator
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSATKA   DS    F                       TKA address                 @02A
DSATKNA  DS    F                       target token table
DSALEVEL DS    F                       Name/Token pair level       @02A
         DS    0F
DSAIPAR  DS    0F                      input parms
DSAGPR0  DS    F                       -NAME address
DSAGPR1  DS    F                       -TOKEN address
DSAOPAR  DS    F                       -output parm reg
DSAIPARL EQU   *-DSAIPAR               keep it together
         DS    0F
DSATKNAM DS    CL16                    token name
DSATOKEN DS    CL16                    token value
DSATKLVL DS    CL20                    token level
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         IHAASXB ,
         IKJTCB LIST=YES
         IEEBASEA ,
         IEANTASM ,
         CVT   DSECT=YES
         END
./ ADD NAME=ECFTMP   0109-21068-21304-1647-00236-00234-00008-BENMAR  01
ECFTMP   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFTMP                                                     */
*/*                                                                  */
*/* Function: TSO/TMP Interface Service Processor                    */
*/*                                                                  */
*/* Input Regs: R1  TSX address                                      */
*/*             R11 EVT address                                      */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  TSX address                                      */
*/*             R9  return address                                   */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Problem state, key=8                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFTMP   $ENTRY SAVE=NO                module ID
         LR    R10,R15                 set base address
         USING ECFTMP,R10              set addressability
         LR    R8,R1                   TSX address
         USING TSX,R8                  set addressability
         USING EVT,R11                 EVT addressability
         LR    R9,R14                  protect return address
*
**       Storage obtain dynamic storage area
*
         GETMAIN RU,LV=DSA@SIZE
         LR    R2,R1
         LA    R3,DSA@SIZE             clear,
         XR    R15,R15                 DSA,
         MVCL  R2,R14                  storage.
         LR    R13,R1                  set save area
         LR    R12,R13                 set DSA address
         USING DSA,R12                 set addressability
*
**       Establish recovery environment
*
TMP0000  DS    0H
         LA    R2,TMP0099              retry address
         ST    R2,DSARETRY             set retry address
         LA    R3,RECOVERY             recovery routine EPA
         MVC   DSAPLST(ESTAEL),ESTAE   listform
         ESTAE (R3),                   retry address                   +
               PARAM=(R12),            SDWAPARM - DSA address          +
               TOKEN=DSATOKN,          store token here            @02A+
               MF=(E,DSAPLST)
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   TMP0010                 no, ABEND
         OI    DSAFLG1,DSA@STAE        recovery established
         STM   R0,R15,DSARGPRS         set retry registers
         B     TMP0020                 carry on
*
TMP0010  DS    0H
         MVC   DSARSN,=AL4(RSN3056)    set RSN
         L     R3,DSARSN               show RSN in R3
         ABEND X'FF1',DUMP,REASON=(R3)                             @02C
*
**       Call Terminal Monitor Program
*
TMP0020  DS    0H
         LOAD  EPLOC=EVTTMPNM          TMP name
         LR    R15,R0                  copy EPA
         LA    R1,DSAPAR               parm ptr
         LA    R2,DSAPARM              parm data field
         ST    R2,0(,R1)               set parm ptr
         OI    0(R1),X'80'             set end-of-parm
         BALR  R14,R15                 andiamo!
         B     TMPEXIT                 exit
*
**       ABEND recovery routine
*
TMP0099  DS    0H
         B     TMPEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
TMPEXIT  DS    0H
         TM    DSAFLG1,DSA@STAE        ESTAE active?
         BZ    TMPXIT00                no, delete
         ESTAE 0,TOKEN=DSATOKN         yes, delete recovery        @02C
*
TMPXIT00 DS    0H
         FREEMAIN RU,A=(R12),LV=DSA@SIZE
         LR    R14,R9                  set return address
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ESTAE    ESTAE 0,MF=L                  listform
ESTAEL   EQU   *-ESTAE
         DS    0C
TSOTMP   DC    CL8'IKJEFT01'           TSO/TMP service routine
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        ABEND recovery routine                                       *
*--------+---------+---------+---------+---------+---------+---------+*
RECOVERY DS    0H
         USING RECOVERY,R15            base addressability
         CL    R0,NOSDWA               SDWA available?
         BNE   REC0000                 yes, carry on
         DROP  R15                     release addresability
         LA    R15,0                   indicate no retry
         BR    R14                     return to RTM
*
REC0000  DS    0H
         STM   R14,R12,12(R13)         save RTM regs
         LR    R10,R15                 copy base
         USING RECOVERY,R10            set addressability
         LR    R9,R1                   SDWA address
         USING SDWA,R9                 set addressability
*
         L     R12,SDWAPARM            DSA address
         USING DSA,R12                 set addressability
         LA    R1,DSARTMSV             my save area
         ST    R13,4(,R1)              chain save area
         LR    R13,R1                  current save area
*
         TM    SDWAERRD,SDWACLUP       clean up only?
         BNZ   NORETRY                 yes, skip retry
         TM    SDWAERRC,SDWAPERC       percolated ABEND?
         BNZ   NORETRY                 yes, skip retry
*
RETRY    DS    0H
         L     R3,DSARETRY             retry address
         MVC   SDWASRSV,DSARGPRS       set retry regs
         SETRP RC=4,                   retry                           +
               WKAREA=(R9),            SDWA address                    +
               RETADDR=(R3),           retry address                   +
               RECPARM=RECPARM,        recovery data                   +
               RETREGS=YES,            retry regs                      +
               FRESDWA=YES             release SDWA
         B     RETRYXIT                exit
*
NORETRY  DS    0H
         SETRP RC=0,                   percolate ABEND                 +
               WKAREA=(R9)             SDWA address
*
RETRYXIT DS    0H
         L     R13,4(,R13)             RTM save area address
         LM    R14,R12,12(R13)         restore RTM regs
         BR    R14                     return to RTM
*---------------------------------------------------------------------*
*        Recovery data                                                *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
NOSDWA   DC    AL4(12)                 no SDWA indicator
MAXABEND DC    AL4(08)                 max ABENDs allowed?
         DS    0C
RECPARM  DS    0CL24                   RECPARM
RECPLMOD DC    CL8'ECFTMP'             LMOD name
RECPSECT DC    CL8'ECFTMP'             CSECT name
RECPRTNE DC    CL8'RECOVERY'           recovery routine name
RECPRECL EQU   *-RECPARM               RECPARM size
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFVT  ,
         $ECFEQU ,
         $ECFRCT ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAMSAVE DS    18F                     mainline save area
DSARTMSV DS    18F                     ECFRTM save area
DSARGPRS DS    16F                     retry registers
         DS    0X
DSAFLG1  DS    XL1                     flags
DSA@STAE EQU   X'80'                   ESTAE established
DSA@AUTH EQU   X'40'                   authorization indicator
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSAIPAR  DS    F                       input parm
DSATOKN  DS    F                       ESTAE token                 @02A
DSARETRY DS    F                       retry address
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSAWORD  DS    F                       fullword workarea
         DS    0F
DSAPAR   DS    F                       TMP parm ptr
DSAPARM  DS    AL2                     IKJEFT01 parm length
DSAPARMD DS    CL100                   IKJEFT01 parm data
         DS    0F
DSAESTAE DS    CL(ESTAEL)              ESTAE listform
         DS    0F
DSAPLST  DS    CL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IKJTCB ,
         IEZJSCB ,
         IHASDWA ,
         END
./ ADD NAME=ECFTRC   0116-21068-21304-1647-01896-01887-01889-BENMAR  05
ECFTRC   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFTRC                                                     */
*/*                                                                  */
*/* Function: Event Capture Trace Service Processor                  */
*/*                                                                  */
*/* Function: Performs trace processing on behalf of all Event       */
*/*           Capture subsystem components.                          */
*/*                                                                  */
*/* Requirements: TRACE=ON option located in parameter library       */
*/*               member ECFMSTR of the PARMLIB dataset must be      */
*/*               specified.                                         */
*/*                                                                  */
*/*               DDname TRCELOG must be specified in the Event      */
*/*               Capture Facility started task JCL procedure.       */
*/*                                                                  */
*/* Input Regs: R0  trace address                                    */
*/*             R1  trace ID                                         */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, key=8                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFTRC   $ENTRY SAVE=NO                module ID
         USING PSA,0                   FLC addressability
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING ECFTRC,R10              set addressability
         IPK   ,                       entry PSW key
         LR    R4,R2                   save it
         IC    R2,X'80'                get key=8
         SPKA  0(R2)                   run in key=8
*
**       Obtain trace dynamic storage
*
         L     R3,=AL4(DSA@SIZE)       DSA size
         GETMAIN RU,LV=(R3),SP=SP110   obtain DSA
         LR    R2,R1                   scrub,
         XR    R15,R15                 dynamic,
         MVCL  R2,R14                  storage area.
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         LR    R12,R1                  set also as DSA address
         USING DSA,R12                 set addressability
         L     R1,4(,R13)              caller's save area
         L     R2,60(,R1)              survice routine EPA(R10)
         LM    R0,R1,20(R1)            get parm regs
         STM   R0,R1,DSAIPAR           save PARM regs
         MVC   DSASUBEP,4(R2)          init service routine name
         ST    R4,DSACKEY              save entry protect key
*
**       Establish recovery environment
*
TRC0000  DS    0H
         LA    R3,TRC0099              retry address
         ST    R3,DSARETRY             set retry address
         LA    R3,RECOVERY             recovery routine
         MVC   DSAESTAE(ESTAEL),ESTAE  listform
         ESTAE (R3),                   retry address                   +
               PARAM=(R12),            SDWAPARM address                +
               TOKEN=DSATOKN,          store token here            @02A+
               MF=(E,DSAESTAE)         establish recovery
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BNZ   TRC0010                 no, ABEND
         OI    DSAFLG1,DSA@STA         recovery established
         STM   R0,R15,DSARGPRS         set retry registers
         B     TRC0020                 carry on
*
TRC0010  DS    0H
         MVC   DSARSN,=AL4(RSN0114)    set RSN
         L     R3,DSARSN               show RSN in R3
         ABEND X'FF7',DUMP,REASON=(R3)                             @02C
*
**       Validity check trace request
*
TRC0020  DS    0H
         ST    R9,DSASTK               save STK for recovery
         MVC   DSARC,=AL4(RC12)        set error RC
         CLC   EVTASCB,PSAAOLD         ECF address space?
         BNE   TRCEXIT                 no, exit
         TM    STKFLG1,STK@TRCE        TRACE=ON?
         BZ    TRCEXIT                 no, exit
         TM    STKFLG2,STK@TLOG        TRCELOG opened?
         BNZ   TRC0030                 yes, carry on
*
**       Issue TRCELOG log not opened error msg
*
         MVC   DSARSN,=AL4(RSN0586)    set error RSN
         TM    EVTFLG4,EVT@TMSG        message issued?
         BNZ   TRCEXIT                 yes, exit
         $WTO  MID=ECF048E,                                            +
               VAR1=DSARSN             show error RSN
         $OI   EVTFLG4,EVT@TMSG        set message issued
         B     TRCEXIT                 exit
*
**       Serialize TRCELOG log dataset
*
TRC0030  DS    0H
         MVC   DSAEQDQ(ENQTRCL),ENQTRC init listform
         LA    R2,EVTTRCMJ             major name
         LA    R3,EVTTRCMN             minor name
         ENQ   ((R2),(R3)),MF=(E,DSAEQDQ)
         OI    DSAFLG1,DSA@ENQ         set ENQ indicator
*
**       Capture TRACE caller LMOD/CSECT
*
         L     R1,STKSTKEC             current STKE entry
         USING STKE,R1                 set addressability
         ST    R1,DSASTKE              save STKE address
         LA    R1,STKESRWA             SRWA address
         USING SRWA,R1                 set addressability
         MVC   DSALMOD,SRWALMOD        init caller LMOD
         MVC   DSACSECT,SRWASECT       init caller CSECT
         DROP  R1
*
**       Capture TRACE date and time
*
         TIME  BIN                     get triggered date
         ST    R1,DSADATE              save it
         $CNVX DSAVAR,DSADATE          translate date
         MVC   DSAXDATE,DATE           init date mask
         MVC   DSAYEAR,DSAVAR+2        init year
         MVC   DSADAYS,DSAVAR+4        nit days
         TIME  DEC                     get triggered time
         ST    R0,DSATIME              save it
         $CNVX DSAVAR,DSATIME          translate time
         MVC   DSAXTIME,TIME           init time mask
         MVC   DSAHH,DSAVAR            init hours
         MVC   DSAMM,DSAVAR+2          init minutes
         MVC   DSASS,DSAVAR+4          init seconds
         MVC   DSATH,DSAVAR+6          init th
*
**       Process TRACE service request
*
         LA    R3,TRCTABLE             trace table
         USING TRCC,R3                 set addressability
         L     R1,DSAIGR1              trace ID address
         MVC   DSATRCLN,0(R1)          copy data size
         MVC   DSATRCID,4(R1)          copy trace ID
         MVC   DSACSECT,12(R1)         copy trace caller
         LA    R1,TRZI                 TRZI record model address
         ST    R1,DSATRZI              init TRZI address
         LA    R1,TRZE                 TRZE record model address
         ST    R1,DSATRZE              init TRZE address
*
TRC0040  DS    0H
         CLC   TRCCEPA,TRCTEND         end of table?
         BE    TRC0060                 yes, exit loop
         CLC   TRCCID,DSATRCID         trace ID match?
         BNE   TRC0050                 no, loop
         L     R15,TRCCEPA             trace subroutine EPA
         BALR  R14,R15                 call trace subroutine
         ST    R0,DSARC                save RC
         ST    R15,DSARSN              save RSN
         OI    DSAFLG1,DSA@TRC         trace subroutine called
*
TRC0050  DS    0H
         LA    R3,TRCC@SZE(,R3)        next trace entry
         B     TRC0040                 loop
         DROP  R3
*
**       Issue invalid TRACE call error msg
*
TRC0060  DS    0H
         TM    DSAFLG1,DSA@TRC         trace subroutine called?
         BNZ   TRC0099                 yes, exit
         MVC   DSARSN,=AL4(RSN0660)    set error RSN
         TM    EVTFLG4,EVT@TMSG        message issued?
         BNZ   TRC0099                 yes, skip it
         $WTO  MID=ECF049E,                                            +
               VAR1=DSATRCID,          show trace ID                   +
               VAR2=DSARSN             show RSN
         $OI   EVTFLG4,EVT@TMSG        set message issued
*
**       Release TRCELOG log serialization
*
TRC0099  DS    0H
         TM    DSAFLG1,DSA@ENQ         DEQ required?
         BZ    TRCEXIT                 no, skip DEQ
         NI    DSAFLG1,XFF-DSA@ENQ     yes, reset ENQ indicator
         MVC   DSAEQDQ(DEQTRCL),DEQTRC init listform
         LA    R2,EVTTRCMJ             major name
         LA    R3,EVTTRCMN             minor name
         DEQ   ((R2),(R3)),MF=(E,DSAEQDQ)
         B     TRCEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
TRCEXIT  DS    0H
         TM    DSAFLG1,DSA@STA         ESTAE active?
         BZ    TRCXIT00                no, delete
         ESTAE 0,TOKEN=DSATOKN         yes, delete recovery        @02C
*
TRCXIT00 DS    0H
         LR    R3,R13                  copy save area address
         L     R13,4(,R13)             caller's save area
         MVC   16(4,R13),DSARC         return RC
         MVC   20(4,R13),DSARSN        return RSN
         L     R2,DSACKEY              entry PSW key
         SPKA  0(R2)                   restore key
         L     R1,=AL4(DSA@SIZE)       DSA size
         FREEMAIN RU,LV=(R1),A=(R3),SP=SP110
         LM    R14,R12,12(R13)         restore regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        TRACE ENQ/DEQ listforms                                      *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ENQTRC   ENQ   (0,0,E,8,STEP),RET=NONE,MF=L
ENQTRCL  EQU   *-ENQTRC
         DS    0F
DEQTRC   DEQ   (0,0,8,STEP),MF=L
DEQTRCL  EQU   *-DEQTRC
*---------------------------------------------------------------------*
*        Trace subroutine entries                                     *
*--------+---------+---------+---------+---------+---------+---------+*
TRCTABLE DS    0F
         $TRCCALL TYPE=INITIAL
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=MAINTRC,             routine EPA                     +
               TRCID=$ENTRY            trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=MAINTRC,             routine EPA                     +
               TRCID=$EXIT             trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=SUBTRC,              routine EPA                     +
               TRCID=$SUBSTR           trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=SUBTRC,              routine EPA                     +
               TRCID=$SUBINI           trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=SUBTRC,              routine EPA                     +
               TRCID=$SUBXIT           trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=SUBTRC,              routine EPA                     +
               TRCID=$SUBOUT           trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=SRVTRC,              routine EPA                     +
               TRCID=$SRVINI           trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=SRVTRC,              routine EPA                     +
               TRCID=$SRVXIT           trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=REBTRC,              routine EPA                     +
               TRCID=$QUEREB           trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=REBTRC,              routine EPA                     +
               TRCID=$DEQREB           trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=REBTRC,              routine EPA                     +
               TRCID=$QSTGREB          trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=REBTRC,              routine EPA                     +
               TRCID=$DSTGREB          trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=REBTRC,              routine EPA                     +
               TRCID=$MOVREB           trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=REBTRC,              routine EPA                     +
               TRCID=$REMREB           trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=SRETRC,              routine EPA                     +
               TRCID=$RULEADD          trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=SRETRC,              routine EPA                     +
               TRCID=$RULEREF          trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=CPTTRC,              routine EPA                     +
               TRCID=$CPOOL            trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=PARTRC,              routine EPA                     +
               TRCID=$ECFMSTR          trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=RULTRC,              routine EPA                     +
               TRCID=$RULEMEM          trace ID
*
         $TRCCALL TYPE=ENTRY,                                          +
               EP=MGCTRC,              routine EPA                     +
               TRCID=$MGCR             trace ID
*
         $TRCCALL TYPE=FINAL
TRC@SIZE EQU   *-TRCTABLE
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ESTAE    ESTAE 0,MF=L                  listform
ESTAEL   EQU   *-ESTAE
         DS    0F
TRCTEND  DC    XL4'FFFFFFFF'
         DS    0F
         $ECFTRC DSECT=NO,             no TRC expansion                +
               ID=TRZI,                expand TRCI                     +
               IX=TRZE                 expand TRCE
         DS    0C
DATE     DC    CL08'20yy.ddd'          date mask
TIME     DC    CL11'hh.mm.ss.th'       time mask
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        ABEND recovery routine                                       *
*--------+---------+---------+---------+---------+---------+---------+*
RECOVERY DS    0H
         USING RECOVERY,R15            base addressability
         CL    R0,NOSDWA               SDWA available?
         BNE   REC0000                 yes, carry on
         DROP  R15                     release addresability
         LA    R15,0                   indicate no retry
         BR    R14                     return to RTM
*
REC0000  DS    0H
         STM   R14,R12,12(R13)         save RTM regs
         LR    R10,R15                 copy base
         USING RECOVERY,R10            set addressability
         LR    R8,R1                   SDWA address
         USING SDWA,R8                 set addressability
*
         L     R12,SDWAPARM            DSA address
         USING DSA,R12                 set addressability
         LA    R1,DSARTMSV             get RTMs save area
         ST    R13,4(,R1)              chain save area
         LR    R13,R1                  set current save area
*
         TM    SDWAERRD,SDWACLUP       clean up only?
         BNZ   NORETRY                 yes, skip retry
         TM    SDWAERRC,SDWAPERC       percolated ABEND?
         BNZ   NORETRY                 yes, skip retry
*
         ICM   R9,15,DSASTK            STK init?
         BZ    RETRY                   no, retry anyway
         USING STK,R9                  set addressability
         L     R1,STKRECT              ABEND count
         LA    R1,1(,R1)               add one
         ST    R1,STKRECT              update count
         CL    R1,MAXABEND             ABENDs exceeded?
         BL    RETRY                   no, retry
         XC    STKTRCA,STKTRCA         disable tracing
         WTO   MF=(E,WTOMSG)           issue error message
*
RETRY    DS    0H
         L     R3,DSARETRY             retry address
         MVC   SDWASRSV,DSARGPRS       set retry regs
         SETRP RC=4,                   retry                           +
               WKAREA=(R8),            SDWA address                    +
               RETADDR=(R3),           retry address                   +
               RECPARM=RECPARM,        recovery data                   +
               RETREGS=YES,            retry regs                      +
               FRESDWA=YES             release SDWA
         B     RETRYXIT                exit
*
NORETRY  DS    0H
         SETRP RC=0,                   percolate ABEND                 +
               WKAREA=(R8)             SDWA address
*
RETRYXIT DS    0H
         L     R13,4(,R13)             RTM save area address
         LM    R14,R12,12(R13)         restore RTM regs
         BR    R14                     return to RTM
*---------------------------------------------------------------------*
*        Recovery data                                                *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
NOSDWA   DC    AL4(12)                 no SDWA indicator
MAXABEND DC    AL4(08)                 max ABENDs allowed?
         DS    0C
RECPARM  DS    0CL24                   RECPARM
RECPLMOD DC    CL8'ECFTRC'             LMOD name
RECPSECT DC    CL8'ECFTRC'             CSECT name
RECPRTNE DC    CL8'RECOVERY'           recovery routine name
RECPRECL EQU   *-RECPARM               RECPARM size
         DS    0F
WTOMSG   WTO   'ECF902E ECF trace component abnormally terminated and h+
               as been disabled',ROUTCDE=(2,11),MF=L
WTOMSGL  EQU   *-WTOMSG
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: $MAINTRC                                                   */
*/*                                                                  */
*/* Function: $ENTRY and $EXIT trace subroutine                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSAMSUB save area                         */
*/*                                                                  */
*/********************************************************************/
MAINTRC  DS    0H
         B     12(,R15)
         DC    CL8'MAINTRC'            ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING MAINTRC,R10             base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSAMSUB              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
**       Trace R13 storage data
*
         MVC   DSATRACE,=CL8'R13'      set ID
         $CALL TRCHDR                  trace header data
         MVC   DSATRCAD,DSAIGR0        set address
         $CALL TRCADR                  trace address
         ICM   R2,15,DSATRCLN          valid storage size?
         BZ    MAINTRCX                no, exit
         LA    R1,STKE@SVZ             save area size
         ST    R1,DSATRCLN             save size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
*
**       Trace R12 storage data
*
         MVC   DSATRCAD,DSAIGR0        set address
         MVC   DSATRACE,=CL8'R12'      set ID
         $CALL TRCADR                  trace address
         ST    R2,DSATRCLN             save size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
*
**       Trace STK stack data
*
         ST    R9,DSATRCAD             set STK address
         MVC   DSATRACE,=CL8'STK'      set STK trace ID
         $CALL TRCADR                  trace STK address
         LA    R1,STK@PRFX             partial STK block size
         ST    R1,DSATRCLN             save data size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace STK storage block
*
**       Trace service routines DSA data
*
         MVC   DSATRCAD,STKSDSAT       set SDSA address
         MVC   DSATRACE,=CL8'SDSASTK'  set SDSA trace ID
         $CALL TRCADR                  trace SDSA address
         MVC   DSATRCLN,=AL4(SDSA@MAX) set SDSA size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace SDSA storage block
*
**       Trace SRWA recovery data
*
         L     R4,DSASTKE              caller STKE address
         USING STKE,R4                 set addressability
         LA    R4,STKESRWA             SRWA address
         USING SRWA,R4                 set addressaility
         ST    R4,DSATRCAD             set SRWA address
         MVC   DSATRACE,=CL8'SRWA'     set SRWA trace ID
         $CALL TRCADR                  trace SRWA address
         LA    R1,SRWA@SZE             SRWA block size
         ST    R1,DSATRCLN             save data size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace STK storage data
         DROP  R4
*
**       Trace EVT vector table data
*
         ST    R11,DSATRCAD            set EVT address
         MVC   DSATRACE,=CL8'EVT'      set EVT trace ID
         $CALL TRCADR                  trace EVT address
         LA    R1,EVT@SIZE             EVT block size
         ST    R1,DSATRCLN             save data size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace EVT vector table
*
**       Trace SSCT control table
*
         MVC   DSATRCAD,EVTSSCT        set SSCT address
         MVC   DSATRACE,=CL8'SSCT'     set SSCT trace ID
         $CALL TRCADR                  trace STK address
         LA    R1,SSCTSIZE             SSCT block size
         ST    R1,DSATRCLN             save data size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace STK storage block
*
**       Trace SSVT entry address
*
         MVC   DSATRCAD,EVTSSVT        set SSVT address
         MVC   DSATRACE,=CL8'SSVT'     set SSVT trace ID
         $CALL TRCADR                  trace SSVT address
         LA    R1,SSVTSIZE             SSVT block size
         ST    R1,DSATRCLN             save data size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace SSVT storage block
*                                                                  @02A
**       Trace System-Level token table                            @02A
*                                                                  @02A
         ICM   R1,15,EVTSYLVL          token table init?           @02A
         BZ    MAIN010                 no, skip it                 @02A
         MVC   DSATRCAD,0(R1)          set TKN table address       @02A
         MVC   DSATRACE,=CL8'SYSTOKN'  set TKN trace ID            @02A
         $CALL TRCADR                  trace token table           @02A
         MVC   DSATRCLN,=AL4(TKN@TSZE) token table size            @02A
         $CALL TRCLEN                  compute data lines          @02A
         $CALL TRCDATA                 trace TKN token table       @02A
*                                                                  @02A
**       Trace Address-Space-Level token table                     @02A
*                                                                  @02A
MAIN010  DS    0H                                                  @02A
         ICM   R1,15,EVTASLVL          token table init?           @02A
         BZ    MAIN020                 no, skip it                 @02A
         MVC   DSATRCAD,EVTASLVL       set TKN table address       @02A
         MVC   DSATRACE,=CL8'ASTOKN'   set TKN trace ID            @02A
         $CALL TRCADR                  trace token table           @02A
         MVC   DSATRCLN,=AL4(TKN@TSZE) token table size            @02A
         $CALL TRCLEN                  compute data lines          @02A
         $CALL TRCDATA                 trace TKN token table       @02A
*                                                                  @02A
**       Task-Level token table                                    @02A
*                                                                  @02A
MAIN020  DS    0H                                                  @02A
         USING PSA,0                   FLC                         @02A
         L     R4,PSATOLD              TCB address                 @02A
         USING TCB,R4                  set addressability          @02A
         ICM   R4,7,TCBFSAB            FSA init?                   @02A
         BZ    MAIN099                 no, skip it                 @02A
         ICM   R4,15,0(R4)             TKN table init?             @02A
         BZ    MAIN099                 no, skip it                 @02A
         USING TKN,R4                  TKN addressability          @02A
         CLC   TKNID,=CL4'TKN'         valid D?                    @02A
         BNE   MAIN099                 no, skip it                 @02A
         ST    R4,DSATRCAD             set TKN table address       @02A
         MVC   DSATRACE,=CL8'TCBTOKN'  set TKN trace ID            @02A
         $CALL TRCADR                  trace token table           @02A
         MVC   DSATRCLN,=AL4(TKN@TSZE) token table size            @02A
         $CALL TRCLEN                  compute data lines          @02A
         $CALL TRCDATA                 trace TKN token table       @02A
         DROP  R4                                                  @02A
*                                                                  @02A
MAIN099  DS    0H                                                  @02A
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
MAINTRCX DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SUBTRC                                                     */
*/*                                                                  */
*/* Function: $SUBSTR and $SUBXIT trace subroutine                   */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSAMSUB save area                         */
*/*                                                                  */
*/********************************************************************/
SUBTRC   DS    0H
         B     12(,R15)
         DC    CL8'SUBTRC'             ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING SUBTRC,R10              base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSAMSUB              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
**       Trace R13 storage block
*
         MVC   DSATRACE,=CL8'R13'      set ID
         $CALL TRCHDR                  trace header data
         MVC   DSATRCAD,DSAIGR0        set address
         $CALL TRCADR                  trace address
         ICM   R2,15,DSATRCLN          valid data size?
         BZ    SUBTRCXT                no, exit
         LA    R1,STKE@SVZ             save area size
         ST    R1,DSATRCLN             save size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
*
**       Trace R12 storage block
*
         MVC   DSATRACE,=CL8'R12'      set ID
         $CALL TRCADR                  trace address
         ST    R2,DSATRCLN             set DSA size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
*
**       Trace STKE entry data
*
         MVC   DSATRACE,=CL8'STKEIDX'  set ID
         L     R4,DSASTKE              caller STKE entry address
         USING STKE,R4                 set addressability
         LA    R1,STKEIDX              STKE address
         ST    R1,DSATRCAD             set address
         $CALL TRCADR                  trace address
         LA    R1,STKE@IDZ             partial STKE size
         ST    R1,DSATRCLN             set size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace DSA storage block
*
**       Trace SRWA entry data
*
         L     R4,DSASTKE              caller STKE entry address
         USING STKE,R4                 set addressability
         LA    R4,STKESRWA             SRWA address
         USING SRWA,R4                 set addressaility
         ST    R4,DSATRCAD             set SRWA address
         MVC   DSATRACE,=CL8'SRWA'     set SRWA trace ID
         $CALL TRCADR                  trace SRWA address
         LA    R1,SRWA@SZE             SRWA block size
         ST    R1,DSATRCLN             save size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace STK storage data
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         DROP  R4
*
SUBTRCXT DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SRVTRC                                                     */
*/*                                                                  */
*/* Function: $SRVINI and $SRVXIT trace routine                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSAMSUB save area                         */
*/*                                                                  */
*/********************************************************************/
SRVTRC   DS    0H
         B     12(,R15)
         DC    CL8'SRVTRC'             ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING SRVTRC,R10              base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSAMSUB              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
**       Trace R13 storage block
*
         MVC   DSATRACE,=CL8'R13'      sset ID
         $CALL TRCHDR                  trace header data
         MVC   DSATRCAD,DSAIGR0        save area address
         $CALL TRCADR                  trace address
         ICM   R1,15,DSATRCLN          valid data size?
         BZ    SRVTRCXT                no, exit
         LA    R1,STKE@SVZ             save area size
         ST    R1,DSATRCLN             set size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace DSA storage block
*
**       Trace STKE entry data
*
         MVC   DSATRACE,=CL8'STKEIDX'  set ID
         L     R4,DSASTKE              caller STKE entry address
         USING STKE,R4                 set addressability
         LA    R1,STKEIDX              STKE address
         ST    R1,DSATRCAD             set address
         $CALL TRCADR                  trace address
         LA    R1,STKE@IDZ             partial STKE size
         ST    R1,DSATRCLN             set size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace DSA storage block
*
**       Trace R12 block data
*
         LA    R1,STKSDSAC             DSA address
         ST    R1,DSATRCAD             set address
         MVC   DSATRACE,=CL8'R12'      set ID
         $CALL TRCADR                  trace address
         LA    R1,SDSA@SZE             get size
         ST    R1,DSATRCLN             set size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace STK storage data
*
**       Trace SRWA entry data
*
         LA    R4,STKESRWA             SRWA address
         USING SRWA,R4                 set addressaility
         ST    R4,DSATRCAD             set address
         MVC   DSATRACE,=CL8'SRWA'     set ID
         $CALL TRCADR                  trace address
         LA    R1,SRWA@SZE             SRWA block size
         ST    R1,DSATRCLN             save data size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace STK storage data
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         DROP  R4
*
SRVTRCXT DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: $REB                                                       */
*/*                                                                  */
*/* Function: REBTRC trace subroutine                                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSAMSUB save area                         */
*/*                                                                  */
*/********************************************************************/
REBTRC   DS    0H
         B     12(,R15)
         DC    CL8'REBTRC'             ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING REBTRC,R10              base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSAMSUB              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
**       Trace REB storage block
*
         MVC   DSATRACE,=CL8'REB'      trace ID
         $CALL TRCHDR                  trace header data
         MVC   DSATRCAD,DSAIGR0        trace address
         $CALL TRCADR                  trace it
         ICM   R1,15,DSATRCLN          valid size?
         BZ    REBTXIT                 no, exit
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
*
**       Trace REBX storage block
*
         L     R4,DSAIGR0              trace block address
         USING REB,R4                  set addressability
         ICM   R1,15,REBREBX           REBX init?
         BZ    REBTXIT                 no, exit
         ST    R1,DSATRCAD             set REBX address
         MVC   DSATRACE,=CL8'REBX'     trace ID
         $CALL TRCADR                  trace it
         LA    R1,REBX@SZE             data size
         ST    R1,DSATRCLN             set size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         DROP  R4
*
REBTXIT  DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SRETRC                                                     */
*/*                                                                  */
*/* Function: SRETRC SRE/SRB trace subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSAMSUB save area                         */
*/*                                                                  */
*/********************************************************************/
SRETRC   DS    0H
         B     12(,R15)
         DC    CL8'SRETRC'             ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING SRETRC,R10              base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSAMSUB              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
**       Trace SRE storage block
*
         MVC   DSATRACE,=CL8'SRE'      trace ID
         $CALL TRCHDR                  trace header data
         MVC   DSATRCAD,DSAIGR0        trace address
         $CALL TRCADR                  trace it
         ICM   R1,15,DSATRCLN          valid size?
         BZ    SRETXIT                 no, exit
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
*
**       Trace SRB storage block
*
         L     R4,DSAIGR0              SRE address
         USING SRE,R4                  set addressability
         MVC   DSATRCAD,SRESRBA        copy SRB address
         MVC   DSATRACE,=CL8'SRB'      trace ID
         $CALL TRCADR                  trace it
         MVC   DSATRCLN,=AL4(SRBSIZE)
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
*
**       Trace ZIRB storage block
*
         L     R4,SRESRBA              SRB address
         USING SRB,R4                  set addressability
         LA    R4,SRBSIZE(,R4)         get ZIRB address
         ST    R4,DSATRCAD             set address
         MVC   DSATRACE,=CL8'ZIRB'     trace ID
         $CALL TRCADR                  trace it
         MVC   DSATRCLN,=AL4(ZIRB@SZE) set size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         DROP  R4
*
SRETXIT  DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: CPTTRC                                                     */
*/*                                                                  */
*/* Function: CPLTRC trace subroutine                                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSAMSUB save area                         */
*/*                                                                  */
*/********************************************************************/
CPTTRC   DS    0H
         B     12(,R15)
         DC    CL8'CPTTRC'             ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING CPTTRC,R10              base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSAMSUB              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
**       Trace CPT cell pool table
*
         MVC   DSATRACE,=CL8'CPT'      trace ID
         $CALL TRCHDR                  trace header data
         L     R4,DSAIGR0              CPT address
         SL    R4,=AL4(CPT@SIZE)       get CPT address
         USING CPT,R4                  set addressability
         ST    R4,DSATRCAD             trace address
         $CALL TRCADR                  trace it
         MVC   DSATRCLN,CPTCPSZE       set size
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
         DROP  R4
*
CPTTXIT  DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: PARTRC                                                     */
*/*                                                                  */
*/* Function: PARTRC trace subroutine                                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSAMSUB save area                         */
*/*                                                                  */
*/********************************************************************/
PARTRC   DS    0H
         B     12(,R15)
         DC    CL8'PARTRC'             ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING PARTRC,R10              base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSAMSUB              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
**       Trace ECFMSTR init parms
*
         SLR   R1,R1                   record counter
         L     R2,EVTPRCNT             max # of records
         L     R3,EVTPRLIB             buffer address
*
PART000  DS    0H
         CLI   0(R3),X'00'             end of buffer
         BE    PART010                 yes, exit loop
         LA    R1,80(,R1)              add 80 to count
         LA    R3,80(,R3)              get next record
         BCT   R2,PART000              loop
*
PART010  DS    0H
         ST    R1,DSATRCLN             init trace size
         MVC   DSATRACE,EVTMASTR       trace ID
         $CALL TRCHDR                  trace header data
         MVC   DSATRCAD,DSAIGR0        trace address
         $CALL TRCADR                  trace it
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
*
PARTXIT  DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: MGCTRC                                                     */
*/*                                                                  */
*/* Function: MGCTRC trace subroutine                                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSAMSUB save area                         */
*/*                                                                  */
*/********************************************************************/
MGCTRC   DS    0H
         B     12(,R15)
         DC    CL8'MGCTRC'             ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING MGCTRC,R10              base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSAMSUB              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
**       Trace triggered event rule
*
         ICM   R1,15,DSATRCLN          size init?
         BZ    MGCRXIT                 no, exit
         MVC   DSATRACE,=CL8'$MGCR'    trace ID
         $CALL TRCHDR                  trace header data
         MVC   DSATRCAD,DSAIGR0        trace address
         $CALL TRCADR                  trace it
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
*
MGCRXIT  DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RULTRC                                                     */
*/*                                                                  */
*/* Function: RULTRC trace subroutine                                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSAMSUB save area                         */
*/*                                                                  */
*/********************************************************************/
RULTRC   DS    0H
         B     12(,R15)
         DC    CL8'RULTRC'             ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING RULTRC,R10              base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSAMSUB              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
**       Trace $RULEMEM event rule
*
         SLR   R1,R1                   record counter
         L     R2,EVTPRCNT             max # of records
         L     R3,EVTPRLIB             buffer address
*
RULT000  DS    0H
         CLI   0(R3),X'00'             end of buffer
         BE    RULT010                 yes, exit loop
         LA    R1,80(,R1)              add 80 to count
         LA    R3,80(,R3)              get next record
         BCT   R2,RULT000              loop
*
RULT010  DS    0H
         ST    R1,DSATRCLN             init trace size
         MVC   DSATRACE,=CL8'$RULEMEM' trace ID
         $CALL TRCHDR                  trace header data
         MVC   DSATRCAD,DSAIGR0        trace address
         $CALL TRCADR                  trace it
         $CALL TRCLEN                  compute data lines
         $CALL TRCDATA                 trace storage data
*
RULTXIT  DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TRCHDR                                                     */
*/*                                                                  */
*/* Function: TRCHDR trace subroutine                                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSASNST save area                         */
*/*                                                                  */
*/********************************************************************/
TRCHDR   DS    0H
         B     12(,R15)
         DC    CL8'TRCHDR'             ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING TRCHDR,R10              base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSASNST              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
         L     R5,STKTDCB
         MVI   DSADATA,BLANK
         MVC   DSADATA+1(DSADATAL-1),DSADATA
*
         MVI   DSAREC,C'-'
         MVC   DSAREC+1(71),DSAREC
         PUT   (R5),DSADATA
*
         MVI   DSADATA,BLANK
         MVC   DSADATA+1(DSADATAL-1),DSADATA
         PUT   (R5),DSADATA
*
         MVI   DSADATA,BLANK
         MVC   DSADATA+1(DSADATAL-1),DSADATA
         MVC   DSAREC(10),=CL10'ID:'
         MVC   DSAREC+10(8),DSATRCID
*
         MVC   DSAREC+20(L'ENTRY),ENTRY
         CLC   DSATRCID,=CL8'$ENTRY'
         BE    TRCHD00
         MVC   DSAREC+20(L'EXIT),EXIT
         CLC   DSATRCID,=CL8'$EXIT'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'SUBSTR),SUBSTR
         CLC   DSATRCID,=CL8'$SUBSTR'
         BE    TRCHD00
         MVC   DSAREC+20(L'SUBSTR),SUBINI
         CLC   DSATRCID,=CL8'$SUBINI'
         BE    TRCHD00
         MVC   DSAREC+20(L'SUBXIT),SUBXIT
         CLC   DSATRCID,=CL8'$SUBXIT'
         BE    TRCHD00
         MVC   DSAREC+20(L'SUBXIT),SUBOUT
         CLC   DSATRCID,=CL8'$SUBOUT'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'SRVENTY),SRVENTY
         CLC   DSATRCID,=CL8'$SRVENTY'
         BE    TRCHD00
         MVC   DSAREC+20(L'SRVEXIT),SRVEXIT
         CLC   DSATRCID,=CL8'$SRVEXIT'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'QUEREB),QUEREB
         CLC   DSATRCID,=CL8'$QUEREB'
         BE    TRCHD00
         MVC   DSAREC+20(L'DEQREB),DEQREB
         CLC   DSATRCID,=CL8'$DEQREB'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'QSTGREB),QSTGREB
         CLC   DSATRCID,=CL8'$QSTGREB'
         BE    TRCHD00
         MVC   DSAREC+20(L'DSTGREB),DSTGREB
         CLC   DSATRCID,=CL8'$DSTGREB'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'DEQREB),DEQREB
         CLC   DSATRCID,=CL8'$REMREB'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'MOVEREB),MOVEREB
         CLC   DSATRCID,=CL8'$MOVEREB'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'RULEADD),RULEADD
         CLC   DSATRCID,=CL8'$RULEADD'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'RULEREF),RULEREF
         CLC   DSATRCID,=CL8'$RULEREF'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'CELLCPL),CELLCPL
         CLC   DSATRCID,=CL8'$CPOOL'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'INIPARM),INIPARM
         CLC   DSATRCID,=CL8'$ECFMSTR'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'RULEMEM),RULEMEM
         CLC   DSATRCID,=CL8'$RULEMEM'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'MGCRPRO),MGCRPRO
         CLC   DSATRCID,=CL8'$MGCR'
         BE    TRCHD00
*
         MVC   DSAREC+20(L'UNKNOWN),UNKNOWN
*
TRCHD00  DS    0H
         PUT   (R5),DSADATA
*
         MVI   DSADATA,BLANK
         MVC   DSADATA+1(DSADATAL-1),DSADATA
*
         MVC   DSAREC(10),=CL10'CALLER:'
         MVC   DSAREC+10(8),DSALMOD
         PUT   (R5),DSADATA
*
         MVC   DSAREC(10),=CL10'CSECT:'
         MVC   DSAREC+10(8),DSACSECT
         PUT   (R5),DSADATA
*
         MVC   DSAREC(10),=CL10'SERVICE:'
         MVC   DSAREC+10(8),DSASUBEP
         PUT   (R5),DSADATA
*
         MVC   DSAREC(10),=CL10'DATE:'
         MVC   DSAREC+10(8),DSAXDATE
         PUT   (R5),DSADATA
*
         MVC   DSAREC(10),=CL10'TIME:'
         MVC   DSAREC+10(11),DSAXTIME
         PUT   (R5),DSADATA
*
         MVI   DSADATA,BLANK
         MVC   DSADATA+1(DSADATAL-1),DSADATA
         PUT   (R5),DSADATA
         XC    DSARC,DSARC
         XC    DSARSN,DSARSN
*
TRCHDRXT DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
UNKNOWN  DC    CL44' '
ENTRY    DC    CL44'(Load Module Entry)'
EXIT     DC    CL44'(Load Module Exit)'
SUBSTR   DC    CL44'(Subroutine Entry)'
SUBINI   DC    CL44'(Subroutine Entry)'
SUBXIT   DC    CL44'(Subroutine Exit)'
SUBOUT   DC    CL44'(Subroutine Exit)'
SRVENTY  DC    CL44'(Service Routine Entry)'
SRVEXIT  DC    CL44'(Service Routine Exit)'
QUEREB   DC    CL44'(REB added to active EVTREBQA queue)'
DEQREB   DC    CL44'(REB removed from active EVTREBQA queue)'
QSTGREB  DC    CL44'(REB added to staging EVTSTGQA queue)'
DSTGREB  DC    CL44'(REB removed from staging EVTSTGQA)'
MOVEREB  DC    CL44'(Move REB from EVTSTGQA to EVTREBQA queue)'
RULEADD  DC    CL44'(Processing rule ADD service request)'
RULEREF  DC    CL44'(Processing rule REFRESH service request)'
CELLCPL  DC    CL44'(Event Capture cell pool control table)'
INIPARM  DC    CL44'(Event Capture initialization parameters)'
RULEMEM  DC    CL44'(Event Rule member implementation)'
MGCRPRO  DC    CL44'(Event rule triggered successfully)'
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TRCADR                                                     */
*/*                                                                  */
*/* Function: TRCADR trace subroutine                                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSASNST save area                         */
*/*                                                                  */
*/********************************************************************/
TRCADR   DS    0H
         B     12(,R15)
         DC    CL8'TRCADR'             ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING TRCADR,R10              base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSASNST              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
         L     R5,STKTDCB              TRCELOG DCB address
         L     R1,DSATRZI              TRCI entry address
         MVC   DSADATA(DSADATAL),0(R1) copy TRCI model
         LA    R4,DSADATA              TRCI address
         USING TRCI,R4                 set addressability
         MVC   TRCINAM,DSATRACE        init trace ID
         LA    R1,10                   loop value
         LA    R3,TRCINAM              trace ID
*
TRCADR00 DS    0H
         CLI   0(R3),BLANK             end of trace ID?
         BE    TRCADR05                yes, exit loop
         LA    R3,1(,R3)               next byte
         BCT   R1,TRCADR00             loop
         B     TRCADR10                exit loop
*
TRCADR05 DS    0H
         MVI   0(R3),C':'              set separator
*
TRCADR10 DS    0H
         $CNVX TRCIADR,DSATRCAD        convert to hex
         PUT   (R5),TRCI               write trace record
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
TRCADRXT DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TRCLEN                                                     */
*/*                                                                  */
*/* Function: TRCLEN trace subroutine                                */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSASNST save area                         */
*/*                                                                  */
*/********************************************************************/
TRCLEN   DS    0H
         B     12(,R15)
         DC    CL8'TRCLEN'             ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING TRCLEN,R10              base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSASNST              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
         L     R1,DSATRCLN             data size
         SLR   R0,R0                   remainder
         LA    R3,16                   divisor (4 fullwords/line)
         DR    R0,R3                   result in R1 (number of lines)
         ST    R1,DSADLINE             save # of trace data lines
         ST    R0,DSARLINE             save remaining line data
         LTR   R0,R0                   remaining line data?
         BZ    TRCL000                 no, carry on
         L     R1,DSARLINE             remaining line data
         LA    R1,3(,R1)               round up to next,
         N     R1,ROUNDIT              fullword boudary.
         ST    R1,DSARLINE             save rounded remainder
*
TRCL000  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
TRCLENXT DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ROUNDIT  DC    XL4'FFFFFFFC'
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TRCDATA                                                    */
*/*                                                                  */
*/* Function: TRCDATA trace subroutine                               */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: Subroutine uses DSAMSUB save area                         */
*/*                                                                  */
*/********************************************************************/
TRCDATA  DS    0H
         B     12(,R15)
         DC    CL8'TRCDATA'            ID subroutine
         STM   R14,R12,12(R13)         save caller's regs
         LR    R10,R15                 set base address
         USING TRCDATA,R10             base addressability
         USING DSA,R12                 set addressability
         LA    R1,DSASNST              save area address
         ST    R13,4(,R1)              chain,
         ST    R1,8(,R13)              save areas.
         LR    R13,R1                  set save area address
         USING STK,R9                  STK addressability
         USING EVT,R11                 EVT addressability
*
         L     R1,DSATRZE              TRCE model address
         MVC   DSADATA(DSADATAL),0(R1) copy TRCE model
         LA    R4,DSADATA              TRCE address
         USING TRCE,R4                 set addressability
         L     R2,DSATRCAD             storage address
         L     R3,DSADLINE             number of data lines
         L     R5,STKTDCB              TRCELOG DCB address
         XC    DSAOFSET,DSAOFSET       set initial data offset
         B     TRCD010                 carry on
*
TRCD005  DS    0H
         LA    R2,4(,R2)               get storage address
*
TRCD010  DS    0H
         $CNVX TRCEOSET,DSAOFSET       convert data offset
         MVC   TRCEDDAT,0(R2)          show 16 bytes hex data
         MVC   DSAWORD,0(R2)           set storage address
         $CNVX TRCEDAT1,DSAWORD        convert data value
         LA    R2,4(,R2)               get storage address
         MVC   DSAWORD,0(R2)           set storage address
         $CNVX TRCEDAT2,DSAWORD        convert data value
         LA    R2,4(,R2)               get storage address
         MVC   DSAWORD,0(R2)           set storage address
         $CNVX TRCEDAT3,DSAWORD        convert data value
         LA    R2,4(,R2)               get storage address
         MVC   DSAWORD,0(R2)           set storage address
         $CNVX TRCEDAT4,DSAWORD        convert data value
         L     R1,DSAOFSET             get curent offset
         LA    R1,16(,R1)              add one line (16 bytes)
         ST    R1,DSAOFSET             update offset
         PUT   (R5),TRCE               write trace record
         BCT   R3,TRCD005              loop
*
**       Trace remaining storage date
*
         ICM   R3,15,DSARLINE          any reamining data?
         BZ    TRCD025                 no, write separator line
         MVI   DSADATA,BLANK
         MVC   DSADATA+1(DSADATAL-1),DSADATA
         MVI   TRCEPLUS,C'+'           set offset ID
         MVI   TRCESTRS,C'*'           set hex data start
         MVI   TRCESTRE,C'*'           set hex data end
         LA    R1,TRCEDDAT             16 bytes hex data address
         LA    R2,4(,R2)               next storage data address
         LA    R15,TRCEDAT1            1st TRCE data address
         B     TRCD020                 carry on
*
TRCD015  DS    0H
         LA    R2,4(,R2)               next storage data address
*
TRCD020  DS    0H
         $CNVX TRCEOSET,DSAOFSET       convert data offset
         MVC   0(4,R1),0(R2)           show 4 bytes hex data
         MVC   DSAWORD,0(R2)           set storage address
         $CNVX DSAVAR,DSAWORD          convert data value
         MVC   0(8,R15),DSAVAR         show trace data
         LA    R15,9(,R15)             next data address
         LA    R1,4(,R1)               next hex data address
         S     R3,=F'4'                subtract remainder by 4
         BNZ   TRCD015                 loop
         PUT   (R5),TRCE               write trace record
*
TRCD025  DS    0H
         MVI   DSADATA,BLANK
         MVC   DSADATA+1(DSADATAL-1),DSADATA
         PUT   (R5),DSADATA            separator line
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
TRCDEXIT DS    0H
         L     R13,4(,R13)             caller's save area
         LM    R14,R12,12(R13)         set caller's regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFEQU ,
         $ECFTRC ,
         $ECFREB ,
         $ECFSRE ,
         $ECFCPT ,
         $ECFTKN ,                                                 @02A
         $XMPOST MAP=YES
         $TRCCALL DSECT=YES
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAMSVE  DS    18F                     mainline save area
DSAMSUB  DS    18F                     subroutine save area
DSASNST  DS    18F                     nested subroutine save area
DSARTMSV DS    18F                     RECOVERY - RTM save area
DSARGPRS DS    16F                     RECOVERY - general retry regs
         DS    0X
DSAFLG1  DS    XL1                     flags
DSA@ENQ  EQU   X'80'                   ENQ active indicator
DSA@TRC  EQU   X'40'                   trace routine called indicator
DSA@STA  EQU   X'20'                   recovery establishd indicator
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSAIPAR  DS    0F                      input parm regs
DSAIGR0  DS    F                       -GPR0
DSAIGR1  DS    F                       -GPR1
DSAIPARL EQU   *-DSAIPAR               -keep it together
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSACKEY  DS    F                       entry protect key
DSATOKN  DS    F                       ESTAE token                 @02A
DSASTK   DS    F                       RECOVERY - STK address
DSARETRY DS    F                       RECOVERY - retry address
DSAGPR2  DS    F                       R2 save area
DSAWORD  DS    F                       fullword workarea
DSATRZI  DS    F                       TRZI record model address
DSATRZE  DS    F                       TRZE record model address
DSASTKE  DS    F                       caller STKE entry address
DSATRCAD DS    F                       trace ID
DSATRCLN DS    F                       trace data size
DSADLINE DS    F                       number of trace data lines
DSARLINE DS    F                       remaining line data
DSAOFSET DS    F                       trace data line offset
         DS    0F
DSAESTAE DS    CL(ESTAEL)              ESTAE listform
         DS    0F
DSAEQDQ  DS    CL(ENQTRCL)             ENQ listform
         DS    0F
DSATOD   DS    0XL8                    TOD
DSATIME  DS    F                       -time field
DSADATE  DS    F                       -date field
DSATODSZ EQU   *-DSATOD                keep it together
         DS    0C
DSATRCID DS    CL8                     trace ID
DSATRACE DS    CL8                     local trace ID
DSALMOD  DS    CL8                     trace caller LMOD
DSACSECT DS    CL8                     trace caller CSECT
DSASUBEP DS    CL8                     trace caller subroutine
         DS    0C
DSAXDATE DS    0CL8                    date
         DS    CL2                     -yy
DSAYEAR  DS    CL2                     -yy
         DS    CL1                     -.
DSADAYS  DS    CL3                     -ddd
DSAXDATL EQU   *-DSAXDATE              length
         DS    0C
DSAVAR   DS    CL8                     variable data
DSAVARX  DS    CL1                     slack byte
DSA@VARZ EQU   *-DSAVAR                keep it together
         DS    0C
DSAXTIME DS    0CL11                   time
DSAHH    DS    CL2                     -hh
         DS    CL1                     -.
DSAMM    DS    CL2                     -mm
         DS    CL1                     -.
DSASS    DS    CL2                     -mm
         DS    CL1                     -.
DSATH    DS    CL2                     -th
DSAXTIML EQU   *-DSAXTIME              length
         DS    0F
DSADATA  DS    0CL80                   output trace record
DSAASA   DS    CL1                     ASA
DSAREC   DS    CL79                    record data
DSADATAL EQU   *-DSADATA               record data size
         DS    0F
DSAPLST  DS    CL128                   parmlist
DSAPLSTL EQU   *-DSAPLST               parmlist size
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 4096-bytes)
*
         DS    0XL(4096-DSA@SIZE+1)
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHASRB ,
         IHASDWA ,
         IKJTCB ,
         IEFJESCT ,
         IEFJSCVT ,
         IEFJSSVT ,
         IEFJSSIB ,
         DCBD  DSORG=PS,DEVD=DA
         END
./ ADD NAME=ECFVAL   0107-21068-21304-1647-00281-00282-00003-BENMAR  08
ECFVAL   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFVAL                                                     */
*/*                                                                  */
*/* Function: Event Capture Storage Validation Processor             */
*/*                                                                  */
*/* Description: Validates an address by determining if the          */
*/*              storage key and protect key match. Switch           */
*/*              to the caller's protect key and perform fetch       */
*/*              and store into the page. An invalid fetch and       */
*/*              store will be handled by the FRR routine.           */
*/*                                                                  */
*/* Input Regs: R1  Storage address                                  */
*/*             R13 Caller's save area                               */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R11 EVT address                                      */
*/*             R10 base address                                     */
*/*                                                                  */
*/* Output Regs: R0  - R14 restored                                  */
*/*              R15 - return code                                   */
*/*                    00 - address is valid                         */
*/*                    04 - 0C4-4  Protection Exception              */
*/*                    08 - 0C5-5  Addressing Exception              */
*/*                    12 - 0C4-10 Segment Translation Exception     */
*/*                    16 - 0C4-11 Page Translation Exception        */
*/*                    20 - Internal service routine failure         */
*/*                                                                  */
*/* Condition Code: zero    - address is valid                       */
*/*                 nonzero - address is invalid                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key=0/8                 */
*/*                                                                  */
*/* Restrictions: Routine runs without a save area.                  */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFVAL   $ENTRY SAVE=NO                entry
         STM   R14,R12,GPR@R14(R13)    save regs
         LR    R10,R15                 copy base
         USING ECFVAL,R10              set addressability
*
**       Set Supervisor key
*
         IPK   ,                       get caller's key
         SPKA  0(0)                    set Supervisor key
*
         SETLOCK OBTAIN,TYPE=LOCAL,    obtain LOAL lock                +
               MODE=UNCOND,                                            +
               REGS=USE,                                               +
               RELATED=('Serialize address space')
*
**       Establish FRR routine
*
         LA    R3,VALFRR               FRR routine
         SETFRR A,FRRAD=(3),           EPA                             +
               PARMAD=(8),             VFRR                            +
               WRKREGS=(4,5)           work regs
         USING VFRR,R8                 set addressability
         ST    R2,VFRRKEY              protect caller's key
         ST    R13,VFRRSAVE            protect R13
         MVI   VFRRCODE,X'20'          init RC
*
**       Validity check storage address
*
         SPKA  0(R2)                   set caller's key
         L     R1,GPR@R1(,R13)         storage address
         LA    R1,0(,R1)               purify storage address
         L     R3,0(,R1)               fetch word from storage
*
VAL0000  DS    0H
         CS    R3,R3,0(R1)             fetch & store
         BNZ   VAL0000                 changed; try again
         XR    R6,R6                   set successful RC
*
**       Delete FRR routine
*
         SPKA  0(0)                    set Supervisor key
         SETFRR D,WRKREGS=(4,5)        delete FRR
*
         SETLOCK RELEASE,TYPE=LOCAL,                                   +
               REGS=USE,                                               +
               RELATED=('Release address space serialization')
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
VALEXIT  DS    0H
         SPKA  0(R2)                   caller's protect key
         LR    R15,R6                  set RC
         SR    R0,R0                   set condition code zero
         L     R14,GPR@R14(,R13)       return address
         LM    R0,R12,GPR@R0(R13)      restore regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: VALFRR                                                     */
*/*                                                                  */
*/* Function: FRR recovery routine                                   */
*/*                                                                  */
*/* Input Regs: R1  SDWA address                                     */
*/*             R13 SDWAVRA address                                  */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* Regs Usage: R8  VFRR address                                     */
*/*             R11 SDWA address                                     */
*/*             R10 base address                                     */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*                                                                  */
*/********************************************************************/
VALFRR   DS    0H
         BALR  R10,0                   base
         USING *,R10                   set addressability
         LR    R7,R1                   SDWA address
         USING SDWA,R7                 set addressability
         L     R8,SDWAPARM             FRR parm area
         USING VFRR,R8                 set addressability
         TM    SDWAERRD,SDWACLUP       clean up only?
         BNZ   ABEND                   yes, percolate
         TM    VFRRFLG1,VFRR@REC       recursive ABEND?
         BNZ   ABEND                   yes, percolate
         OI    VFRRFLG1,VFRR@REC       set recursive indicator
         TM    SDWAERRA,SDWAPCHK       program check?
         BZ    ABEND                   no, percolate
*
**       Identify program check
*
         MVI   VFRRCODE,X'04'          set RC
         CLI   SDWAICD1,PIC4           protection exception?
         BE    RETRY                   yes, retry
         MVI   VFRRCODE,X'08'          set RC
         CLI   SDWAICD1,PIC5           addressing exception?
         BE    RETRY                   yes, retry
         MVI   VFRRCODE,X'12'          set RC
         CLI   SDWAICD1,PIC10          segment translation error?
         BE    RETRY                   yes, retry
         MVI   VFRRCODE,X'16'          set RC
         CLI   SDWAICD1,PIC11          page transaltion error?
         BNE   ABEND                   no, percolate
*
**       Expected program check
*
RETRY    DS    0H
         ST    R8,SDWASR08             set VFRR address
         SETRP RC=4,                   retry                           +
               RETADDR=VALRETRY,       retry address                   +
               RETREGS=YES,            restore registers               +
               RECORD=NO,              LOGREC not required             +
               DUMP=NO,                SDUMP not required              +
               WKAREA=(7)              SDWA address
         BR    R14                     return to RTM
*
**       Unexpected ABEND
*
ABEND    DS    0H
         MVC   SDWARECP,RECPARM        recovery parm
         SETRP RC=0,                   percolate                       +
               DUMP=NO,                SDUMP not required              +
               RECORD=YES,             LOGREC recording required       +
               WKAREA=(7)              SDWA address
         BR    R14                     return to RTM
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
RECPARM  DS    0CL24
         DC    CL8'ECFSSM'             LMOD name
         DC    CL8'ECFVAL'             CSECT name
         DC    CL8'FRRENTRY'           FRR recovery routine name
ZECF@SZE EQU   *-RECPARM
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: VALRETRY                                                   */
*/*                                                                  */
*/* Function: FRR retry routine                                      */
*/*                                                                  */
*/* Input Regs: R8  VFRR address                                     */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* Regs Usage: R8  VFRR address                                     */
*/*             R10 base address                                     */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*              R15 return code                                     */
*/*                                                                  */
*/********************************************************************/
VALRETRY DS    0H
         BALR  R10,0                   base
         USING *,R10                   set addressability
         USING VFRR,R8                 VFRR addressability
         L     R2,VFRRKEY              caller's protect key
         XR    R6,R6                   zero RC
         IC    R6,VFRRCODE             insert RC
         L     R13,VFRRSAVE            restore R13
*
**       Set Supervisor key
*
         SPKA  0(0)                    Supervisor key
*
**       Delete FRR routine
*
         SETFRR D,WRKREGS=(4,5)        delete FRR
*
         SETLOCK RELEASE,TYPE=LOCAL,                                   +
               REGS=USE,                                               +
               RELATED=('Release address space serialization')
*
**       Restore caller's key
*
         SPKA  0(R2)                   restore key
*
**       Return to caller
*
         LR    R15,R6                  set RC
         LTR   R15,R15                 set nonzero condition code
         L     R14,GPR@R14(,R13)       return address
         LM    R0,R12,GPR@R0(R13)      restore regs
         BR    R14                     return
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFVT ,
         $ECFEQU ,
         $ECFSRWA ,
*
**       FRR work area map
*
VFRR     DSECT
VFRRSAVE DS    F                       save area address
VFRRKEY  DS    F                       caller's key
VFRRRSV3 DS    F                       -available
VFRRRSV4 DS    F                       -available
VFRRRSV5 DS    F                       -available
VFRRFLG1 DS    XL1                     flags
VFRR@REC EQU   X'80'                   recursion indicator
VFRRINTC DS    XL1                     interrupt code
VFRRCODE DS    XL1                     return code
VFRRSZRV DS    XL1                     -available
VFRR@SZE EQU   *-VFRR
*
*        The following statement will cause assembly errors when
*        the FFRR size exceeds 24-bytes.
*
         DS    0XL(24-VFRR@SZE+1)      set SETFRR macro
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         CVT   DSECT=YES
         IHAWSAVT ,
         IHASDWA ,
         IHAFRRS ,
         END
./ ADD NAME=ECFVAR   0113-21068-21304-1647-00228-00226-00037-BENMAR  11
ECFVAR   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFVAR                                                     */
*/*                                                                  */
*/* Description: Event Capture Variable Service Processor            */
*/*                                                                  */
*/* Function: Called by event listeners to capture address           */
*/*           space-related and system-related variable data.        */
*/*                                                                  */
*/* Input Regs: R1  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor state, key=8                   */
*/*                                                                  */
*/* Restrictions: 1. R9 thru R12 are permanently assigned            */
*/*               2. $TRACE macro calls CANNOT be issued             */
*/*               3. WTO/R SVC CANNOT be issued                      */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 10112020 | Ben Marino  | WTOR reply ID 4-digit support *
* @03 | V2R3 | 09072021 | Ben Marino  | Serviceability enhancements   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFVAR   $SRVINI                       entry
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         $ST   R1,DSAIPAR              save parm reg
*
**       Validity check input REB
*
         LR    R8,R1                   REB address
         USING REB,R8                  set addressability
         CLC   REBID,=CL4'REB'         valid indeed?
         BE    VAR0000                 yes, carry on
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0484)    set error RSN
         B     VAREXIT                 exit
*
**       Capture &SYSID/&LPAR variable data
*
VAR0000  DS    0H
         MVC   REBSYSID,EVTSYSID       init &SYSID
         MVC   REBLPAR,EVTLPARN        init &LPAR
*
**       Capture &JOBNAME/&JOBTYPE variable data
*
         L     R3,PSAAOLD              ASCB address
         USING ASCB,R3                 set addressability
         ICM   R1,15,ASCBJBNS          STC address space?
         BZ    VAR0020                 no, JOB address space
         CLC   0(8,R1),=CL8'INIT'      JES initiator?              @03A
         BE    VAR0020                 yes, ASCBJBNI has jobname   @03A
         MVC   REBASNAM,0(R1)          init &JOBNAME
         ICM   R1,15,ASCBTSB           TSU address space?
         BZ    VAR0010                 no, carry on
         MVC   REBASTYP,=CL3'TSU'      init &JOBTYPE
         B     VAR0030                 carry on
*
VAR0010  DS    0H
         MVC   REBASTYP,=CL3'STC'      init &JOBTYPE
         B     VAR0030                 carry on
*
VAR0020  DS    0H
         L     R1,ASCBJBNI             JOB address space
         MVC   REBASTYP,=CL3'JOB'      init &JOBTYPE
         MVC   REBASNAM,0(R1)          init &JOBNAME
*
**       Capture &CMDORIGN variable data
*
VAR0030  DS    0H
         TM    REBTYPE,REB@CMD         CMD event rule REB?
         BNZ   VAR0040                 yes, console ID set by ECFS34
         XC    REBCONID,REBCONID       no, set null console ID
*
**       Capture &REPLYID variable data
*
VAR0040  DS    0H
         TM    REBTYPE,REB@WTO         message event rule?
         BNZ   VAR0050                 yes, &REPLYID set by ECFS35
         XC    REBREPLY,REBREPLY       no, zero 2-digits replyID   @02C
         XC    REBRPLY2,REBRPLY2       zero last 2-digits replyID  @02C
*
**       Capture &DATE variable data
*
VAR0050  DS    0H
         TIME  BIN                     get triggered date
         ST    R1,DSADATE              save it
         $CNVX DSAVAR,DSADATE          translate date
         MVC   DSAXDATE,DATE           init date mask
         MVC   DSAYEAR,DSAVAR+2        init year
         MVC   DSADAYS,DSAVAR+4        nit days
         MVC   REBSDATE,DSAXDATE       init &DATE variable
*
**       Capture &TIME variable data
*
VAR0060  DS    0H
         TIME  DEC                     get triggered time
         ST    R0,DSATIME              save it
         $CNVX DSAVAR,DSATIME          translate time
         MVC   DSAXTIME,TIME           init time mask
         MVC   DSAHH,DSAVAR            init hours
         MVC   DSAMM,DSAVAR+2          init minutes
         MVC   DSASS,DSAVAR+4          init seconds
         MVC   REBSTIME,DSAXTIME       init &TIME variable
*
VAR0099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         B     VAREXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
VAREXIT  DS    0H
         $SRVXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
DATE     DC    CL8'20yy.ddd'           date mask
TIME     DC    CL8'hh.mm.ss'           time mask
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem Data Areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFREB ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@RV0  EQU   X'80'                   -available
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
         DS    0F
DSAIPAR  DS    F                       input parm reg
DSAOPAR  DS    F                       output Parm reg
DSAWORD  DS    F                       work area
         DS    0F
DSATOD   DS    0XL8                    TOD
DSATIME  DS    F                       -time field
DSADATE  DS    F                       -date field
DSATODSZ EQU   *-DSATOD                keep it together
         DS    0F
DSASRC   DS    XL4                     variable source
DSASRC2  DS    XL4                     variable source
DSASRCL  EQU   *-DSASRC                variable length
         DS    0C
DSAVAR   DS    CL8                     variable data
DSAVARX  DS    CL1                     slack byte
DSA@VARZ EQU   *-DSAVAR                keep it together
         DS    0C
DSAXDATE DS    0CL8                    date
         DS    CL2                     -yy
DSAYEAR  DS    CL2                     -yy
         DS    CL1                     -.
DSADAYS  DS    CL3                     -ddd
DSAXDATL EQU   *-DSAXDATE              length
         DS    0C
DSAXTIME DS    0CL8                    time
DSAHH    DS    CL2                     -hh
         DS    CL1                     -.
DSAMM    DS    CL2                     -mm
         DS    CL1                     -.
DSASS    DS    CL2                     -mm
DSAXTIML EQU   *-DSAXTIME              length
         DS    0D
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         CVT   DSECT=YES
         END
./ ADD NAME=ECFVRX   0115-21068-21304-1647-00864-00837-00852-BENMAR  15
ECFVRX   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFVRX                                                     */
*/*                                                                  */
*/* Description: Variables Resolution Service Processor              */
*/*                                                                  */
*/* Function: Called by event rule processing routines to resolve    */
*/*           address space-reace-related variable data and system   */
*/*           related variable data.                                 */
*/*                                                                  */
*/* Input Regs: R1  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R5  VAR address                                      */
*/*             R6  REBX address                                     */
*/*             R7  record buffer address                            */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor state, key=8                   */
*/*                                                                  */
*/* Restrictions: - R9 thru R12 are permanently assigned.            */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V1R1 | 10112020 | Ben Marino  | WTOR reply ID 4-digit support *
* @03 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
* @04 | V2R3 | 07312021 | Ben Marino  | fixed &SYSDATA variable bug   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFVRX   $SRVINI
         USING PSA,0                   FLC addressability
         USING EVT,R11                 EVT addressability
         ST    R1,DSAIPAR              save parm reg
*
**       Trace service request entry
*
         $TRACE $SRVINI,                                               +
               MID=ECFVRX,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
**       Validity check input REB
*
         L     R8,DSAIPAR              REB address
         USING REB,R8                  set addressability
         CLC   REBID,=CL4'REB'         valid indeed?
         BE    VRX0005                 yes, carry on
         MVC   DSARC,=AL4(RC8)         no, set error RC
         MVC   DSARSN,=AL4(RSN1028)    set error RSN
         B     VRXEXIT                 exit
*
**       Validity check REBX extension
*
VRX0005  DS    0H
         L     R6,REBREBX              REBX address
         USING REBX,R6                 set addressability
         CLC   REBXID,=CL4'REBX'       valid indeed?
         BE    VRX0010                 yes, carry on
         MVC   DSARC,=AL4(RC8)         no, set error RC
         MVC   DSARSN,=AL4(RSN1032)    set error RSN
         B     VRXEXIT                 exit
*
**       Clear storage variables buffer
*
VRX0010  DS    0H
         MVC   DSARC,=AL4(RC8)         no, set error RC
         MVC   DSARSN,=AL4(RSN1036)    set error RSN
         L     R7,REBXPLIB             buffer address
         USING HDR,R7                  HDR addressability
*
**       Build event rule header records
*
         MVI   HDR,BLANK               clear,
         MVC   HDR+1(HDR@SIZE-1),HDR   HDR record.
         MVC   HDR(RECORDL),RECORD     set first record
*
         LA    R7,HDR@SIZE(,R7)        next record ptr
         MVI   HDR,BLANK               clear,
         MVC   HDR+1(HDR@SIZE-1),HDR   HDR record.
         MVC   HDR(RECORDL),RECORD     set record model
         MVI   HDRSEP,C'-'             set separator
         MVC   HDRID,=CL8'MEMBER'      ID item
         MVC   HDRITEM,REBMEMBR        set item name
*
         LA    R7,HDR@SIZE(,R7)        next record ptr
         MVI   HDR,BLANK               clear,
         MVC   HDR+1(HDR@SIZE-1),HDR   HDR record.
         MVC   HDR(RECORDL),RECORD     set record model
         MVI   HDRSEP,C'-'             set separator
         MVC   HDRID,=CL8'EVENT'       ID item
         MVC   HDRITEM,REBETYPE        set item name
*
         LA    R7,HDR@SIZE(,R7)        next record ptr
         MVI   HDR,BLANK               clear,
         MVC   HDR+1(HDR@SIZE-1),HDR   HDR record.
         MVC   HDR(RECORDL),RECORD     set record model
         MVI   HDRSEP,C'-'             set separator
         MVC   HDRID,=CL8'EXEC'        ID item
         MVC   HDRITEM,REBEXEC         set item name
*
         LA    R7,HDR@SIZE(,R7)        next record ptr
         MVI   HDR,BLANK               clear,
         MVC   HDR+1(HDR@SIZE-1),HDR   HDR record.
         MVC   HDR(RECORDL),RECORD     set record model
         MVI   HDRSEP,C'-'             set separator
         MVC   HDRID,=CL8'RUNAS'       ID item
         MVC   HDRITEM(3),REBRUNAS     set item name
*
         LA    R7,HDR@SIZE(,R7)        next record ptr
         MVI   HDR,BLANK               clear,
         MVC   HDR+1(HDR@SIZE-1),HDR   HDR record.
         MVC   HDR(RECORDL),RECORD     set record model
         MVI   HDRSEP,C'-'             set separator
         MVC   HDRID,=CL8'SYSID'       ID item
         MVC   HDRITEM(4),REBSYSID     set item name
*
         LA    R7,HDR@SIZE(,R7)        next record ptr             @03A
         MVI   HDR,BLANK               clear,                      @03A
         MVC   HDR+1(HDR@SIZE-1),HDR   HDR record.                 @03A
         MVC   HDR(RECORDL),RECORD     set record model            @03A
         MVI   HDRSEP,C'-'             set separator               @03A
         MVC   HDRID,=CL8'LPAR'        ID item                     @03A
         MVC   HDRITEM(8),REBLPAR      set item name               @03A
*
         LA    R7,HDR@SIZE(,R7)        next record ptr
         MVI   HDR,BLANK               clear,
         MVC   HDR+1(HDR@SIZE-1),HDR   HDR record.
         MVC   HDR(RECORDL),RECORD     set record model
         MVI   HDRSEP,C'-'             set separator
         MVC   HDRID,=CL8'DATE'        ID item
         MVC   HDRITEM(8),REBSDATE     set item name
*
         LA    R7,HDR@SIZE(,R7)        next record ptr
         MVI   HDR,BLANK               clear,
         MVC   HDR+1(HDR@SIZE-1),HDR   HDR record.
         MVC   HDR(RECORDL),RECORD     set record model
         MVI   HDRSEP,C'-'             set separator
         MVC   HDRID,=CL8'TIME'        ID item
         MVC   HDRITEM(8),REBSTIME     set item name
*
         LA    R7,HDR@SIZE(,R7)        next record ptr
         MVI   HDR,BLANK               clear,
         MVC   HDR+1(HDR@SIZE-1),HDR   HDR record.
         MVC   HDR(RECORDL),RECORD     set last record
*
**       Create event rule EXEC record
*
         LA    R7,DTA@SIZE(,R7)        next record ptr
         USING DTA,R7                  set addressability
         MVI   DTA,BLANK               clear,
         MVC   DTA+1(DTA@SIZE-1),DTA   EXEC record.
         MVC   DTAVAR(8),REBEXEC       set CLIST/REXX name
*
         ICM   R3,15,REBXVCNT          any VARs defined?
         BZ    VRX3000                 no, set record count
         LA    R4,REBXVARS             VARS table address
         CLC   REBXVID,=CL4'VARS'      valid indeed?
         BE    VRX0015                 yes, carry on
         MVC   DSARC,=AL4(RC8)         no, set error RC
         MVC   DSARSN,=AL4(RSN1040)    set error RSN
         B     VRXEXIT                 exit
*
**       Parse event rule variables
*
VRX0015  DS    0H
         LA    R7,DTA@SIZE(,R7)        next record ptr
         MVI   DTA,BLANK               clear,
         MVC   DTA+1(DTA@SIZE-1),DTA   VAR record.
         XR    R2,R2                   zero VAR length reg
         ICM   R2,3,0(R4)              get VAR length
         ST    R2,DSAVARL              init VAR length
         BCTR  R2,0                    decrement for EXecute
         EX    R2,COPYVAR              copy VAR record to DTAVAR
         $CALL PARVAR                  create VAR entry
         LTR   R15,R15                 successful?
         BNZ   VRXEXIT                 no, error
         LA    R5,DSAVAR               VAR data entry address
         USING VAR,R5                  set addressability
*
**       Resolve &MEMBER rule variable
*
VRX0020  DS    0H
         CLC   VARNAME,=CL9'&&MEMBER'  &MEMBER VAR?
         BNE   VRX0025                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(8,R2),REBMEMBR        resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &EVENT rule variable
*
VRX0025  DS    0H
         CLC   VARNAME,=CL9'&&EVENT'   &EVENT VAR?
         BNE   VRX0030                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(8,R2),REBETYPE        resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &EXEC rule variable
*
VRX0030  DS    0H
         CLC   VARNAME,=CL9'&&EXEC'    &EXEC VAR?
         BNE   VRX0035                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(8,R2),REBEXEC         resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &RUNAS rule variable
*
VRX0035  DS    0H
         CLC   VARNAME,=CL9'&&RUNAS'   &RUNAS VAR?
         BNE   VRX0040                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(3,R2),REBRUNAS        resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &SYSID rule variable
*
VRX0040  DS    0H
         CLC   VARNAME,=CL9'&&SYSID'   &RUNAS VAR?
         BNE   VRX0045                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(4,R2),REBSYSID        resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &LPAR rule variablee
*
VRX0045  DS    0H
         CLC   VARNAME,=CL9'&&LPAR'    &LPAR VAR?
         BNE   VRX0050                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(8,R2),REBLPAR         resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve address space name variable
*
VRX0050  DS    0H
         CLC   VARNAME,=CL9'&&JOBNAME' &JOBNAME VAR?
         BE    VRX0052                 yes                         @04A
         CLC   VARNAME,=CL9'&&STCNAME' &STCNAME VAR?               @04A
         BE    VRX0052                 yes                         @04A
         CLC   VARNAME,=CL9'&&TSUNAME' &TSUNAME VAR?               @04A
         BNE   VRX0055                 no, test further
*
VRX0052  DS    0H                                                  @04A
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(8,R2),REBASNAM        resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &ASTYPE rule variable
*
VRX0055  DS    0H
         CLC   VARNAME,=CL9'&&JOBTYPE' &JOBTYPE VAR?
         BNE   VRX0060                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(3,R2),REBASTYP        resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &REPLYID rule variable
*
VRX0060  DS    0H
         CLC   VARNAME,=CL9'&&REPLYID' &REPLYID VAR?
         BNE   VRX0065                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         L     R1,EVTREPLY             REPLYID=size option         @02A
         BCTR  R1,0                    decrement for EXecute       @02A
         EX    R1,COPYRPLY             resolve VAR data            @02A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &CONSOLE rule variable
*
VRX0065  DS    0H
         CLC   VARNAME,=CL9'&&CONSOLE' &CONSOLE VAR?
         BNE   VRX0070                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(8,R2),REBCONID        resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &DATE rule variable
*
VRX0070  DS    0H
         CLC   VARNAME,=CL9'&&DATE'    &DATE VAR?
         BNE   VRX0075                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(8,R2),REBSDATE        resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &TIME rule variable
*
VRX0075  DS    0H
         CLC   VARNAME,=CL9'&&TIME'    &TIME VAR?
         BNE   VRX0080                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(8,R2),REBSTIME        resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &TRIGGER rule variable
*
VRX0080  DS    0H
         CLC   VARNAME,=CL9'&&TRIGGER' &TRIGGER VAR?
         BNE   VRX0085                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(REBE@DAL,R2),REBEDATA resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &SYSDATA rule variable
*
VRX0085  DS    0H
         CLC   VARNAME,=CL9'&&COMMAND' &SYSDATA VAR?
         BE    VRX0090                 yes, carry on
         CLC   VARNAME,=CL9'&&MESSAGE' &SYSDATA VAR?
         BE    VRX0090                 yes, carry on
         CLC   VARNAME,=CL9'&&SYSDATA' &SYSDATA VAR?
         BNE   VRX0095                 no, unknown VAR
*
VRX0090  DS    0H
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(REBS@DAL,R2),REBSDATA resolve VAR data
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Resolve &ABEND rule variable
*
VRX0095  DS    0H
         CLC   VARNAME,=CL9'&&ABEND'   &ABEND VAR?
         BNE   VRX0105                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         CLC   REBABEND,=F'0'          null &ABEND VAR?
         BNE   VRX0100
         MVC   0(4,R2),=CL4'NONE'      set &ABEND VAR to 'NONE'
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
VRX0100  DS    0H
         MVC   0(4,R2),REBABEND        resolve VAR data
         CLC   REBABEND,=CL4'NONE'     ABEND set to 'NONE'?
         BE    VRX1000                 yes, complete VAR resolution
         CLI   REBABEND,C'S'           system ABEND code?
         BE    VRX1000                 yes, complete VAR resolution
         MVI   0(R2),C'U'              no, user ABEND code
         MVC   1(4,R2),REBABEND        resolve variable
         B     VRX1000                 complete VAR resolution
*
**       Resolve &JCLERR rule variable
*
VRX0105  DS    0H
         CLC   VARNAME,=CL9'&&JCLERR'  &JCLERR VAR?
         BNE   VRX0199                 no, test further
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(8,R2),=CL8'JCLERROR'  resolve VAR data
         CLI   REBJCLER,REB@JCLY       JCL error?
         BE    VRX1000                 yes, carry on
         MVC   0(8,R2),=CL8'NONE'      no, set to 'NONE'
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Unknown rule variable found
*
VRX0199  DS    0H
         LA    R2,DTAVAR               DTAVAR record address
         L     R1,VAROSET              DTAVAR VAR name offset
         LA    R2,0(R1,R2)             VAR name record location
         MVC   0(9,R2),BLANKS          clear field
         MVC   0(8,R2),=CL8'Unknown'   unknown variable
         MVC   DTAEND,BLANKS           clear variable-end field    @04A
         B     VRX1000                 complete VAR resolution
*
**       Complete variable resolution
*
VRX1000  DS    0H
         LA    R1,DTAEND               VAR data end address
         LA    R2,DTAVAR               VAR data start address
         SLR   R1,R2                   get loop value
         LA    R2,DTAEND               VAR data end address
*
VRX1005  DS    0H
         CLI   0(R2),BLANK             end of VAR data?
         BNE   VRX1010                 yes, carry on
         BCTR  R2,0                    no, back up one character
         BCT   R1,VRX1005              loop
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN1048)    set error RSN
         B     VRXEXIT                 exit
*
VRX1010  DS    0H
         LA    R2,1(,R2)               set end of VAR data
         MVC   0(3,R2),VARENDK         complete DTA data record
         LA    R2,3(,R2)               continuation ID address
*
**       Display variables data line
*
         TM    EVTFLG2,EVT@EDSP        SHOWREB=YES
         BZ    VRX1015                 no, skip message
         $WTO  MID=ECF305I,                                            +
               VAR1=REBMEMBR,          show member name                +
               VAR2=DTAVAR             show DTA record
*
**       Get next event rule variable
*
VRX1015  DS    0H
         XR    R2,R2                   zero
         ICM   R2,3,0(R4)              get VAR length
         LA    R4,2(R2,R4)             next VAR address
         BCT   R3,VRX0015              process next VAR
*
**       Set variables continuation ID
*
VRX2000  DS    0H
         USING DTA,R7                  set addressability
         L     R7,STKPRLIB             buffer address
*
VRX2005  DS    0H
         CLC   DTAX(2),=CL2'/*'        JCL record?
         BE    VRX2020                 yes, next record
         CLC   DTAX(2),=CL2'//'        JCL record?
         BE    VRX2020                 yes, next record
         CLC   DTAX(3),=CL3' /*'       comment record?
         BE    VRX2020                 yes, next record
         LA    R1,DTAEND               VAR data end address
         LA    R2,DTAVAR               VAR data start address
         SLR   R1,R2                   get loop value
         LA    R2,DTAEND               VAR data end address
*
VRX2010  DS    0H
         CLI   0(R2),BLANK             end of VAR data?
         BNE   VRX2015                 yes, carry on
         BCTR  R2,0                    no, back up one character
         BCT   R1,VRX2010              loop
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN1052)    set error RSN
         B     VRXEXIT                 exit
*
VRX2015  DS    0H
         LA    R3,DTA@SIZE(,R7)        next record ptr
         CLI   DTA-DTAX(R3),X'00'      and of records?
         BE    VRX2025                 yes, exit loop
         LA    R2,2(,R2)               skip past blank
         MVI   0(R2),C'+'              set continuation ID
*
VRX2020  DS    0H
         LA    R7,DTA@SIZE(,R7)        next record ptr
         B     VRX2005                 loop
*
VRX2025  DS    0H
         LR    R7,R3                   copy record address
         MVI   DTA,BLANK               clear,
         MVC   DTA+1(DTA@SIZE-1),DTA   EXEC record.
         MVC   DTAX(2),=CL2'$$'        DLM record
         LA    R7,DTA@SIZE(,R7)        next record ptr
         MVI   DTA,BLANK               clear,
         MVC   DTA+1(DTA@SIZE-1),DTA   EXEC record.
         MVC   DTAX(2),=CL2'/*'        end of step record
         LA    R7,DTA@SIZE(,R7)        next record ptr
         MVI   DTA,BLANK               clear,
         MVC   DTA+1(DTA@SIZE-1),DTA   EXEC record.
         MVC   DTAX(2),=CL2'//'        end of job record
*
**       Compute variables records count
*
VRX3000  DS    0H
         XR    R3,R3                   zero record count
         L     R7,STKPRLIB             buffer address
*
VRX3005  DS    0H
         CLI   DTAX,X'00'              end of records?
         BE    VRX3020                 yes, exit loop
*
**       Display variables data line
*
         TM    EVTFLG2,EVT@EDSP        SHOWREB=YES
         BZ    VRX3010                 no, loop
         $WTO  MID=ECF305I,                                            +
               VAR1=REBMEMBR,          show member name                +
               VAR2=DTAX               show DTA record
*
VRX3010  DS    0H
         LA    R3,1(,R3)               add one to record count
         LA    R7,DTA@SIZE(,R7)        next record address
         B     VRX3005                 loop
*
VRX3020  DS    0H
         ST    R3,DSAOPAR              return count to caller
*
**       Display total number of data lines
*
         TM    EVTFLG2,EVT@EDSP        SHOWREB=YES
         BZ    VRX3099                 no, exit
         $WTO  MID=ECF306I,                                            +
               VAR1=REBMEMBR,          show member name                +
               VAR2=DSAOPAR            show lines count
*
VRX3099  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
         B     VRXEXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
VRXEXIT  DS    0H
         $TRACE $SRVXIT,                                               +
               MID=ECFVRX,             trace caller                    +
               A=(R13),                trace storage addrss            +
               LN=DSA@SIZE             trace storage size
*
         $SRVXIT PARM=DSAOPAR,RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYVAR  MVC   DTAVAR(*-*),2(R4)       EXecuted instruction
COPYRPLY MVC   0(*-*,R2),REBREPLY      EXecuted instruction        @02A
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0C
BLANKS   DC    CL17' '                 blanks                      @04C
         DS    0C
RECORD   DS    0CL28
         DC    CL1' '                  blank
         DC    CL26'/*                      */'
         DC    CL1' '                  blank
RECORDL  EQU   *-RECORD
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: PARVAR                                                     */
*/*                                                                  */
*/* Function: Parse variable name subroutine                         */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input regs: R7  DTA address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usgae: R6  VAR address                                      */
*/*             R7  DTA address                                      */
*/*             R8  REB address                                      */
*/*             R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
PARVAR   $SUBINI
         USING EVT,R11                 EVT addressability
         USING DTA,R7                  DTA addressability
         USING REB,R8                  REB addressability
         LA    R6,DSAVAR               data entry address
         USING VAR,R6                  VAR addressability
*
**       Validity check input record
*
         LA    R3,DTAVAR               var name address
         LA    R2,VARNAMEL+6           var name length+6
         XC    VAR(DSA@VARL),VAR       clear VAR data entry
         MVI   VARNAME,BLANK           clear VAR name
         MVC   VARNAME+1(VARNAMEL-1),VARNAME
*
PAR0010  DS    0H
         CLI   0(R3),C'&&'             ampersand found?
         BE    PAR0020                 yes, carry on
         LA    R3,1(,R3)               no, bump address
         BCT   R2,PAR0010              loop
         XC    VAROSET,VAROSET         var name offset
         XC    VARNAML,VARNAML         unknown VAR length
         MVC   VARNAME,=CL8'notmyvar'  unknown VAR name
         MVI   VARTYPE,VAR@TXT         no resolution required
         B     PAR0099                 exit
*
**       Check for positional variable
*
PAR0020  DS    0H
         LA    R2,DTAVAR               var data address
         L     R3,DSAVARL              var data length
         LA    R4,0(R3,R2)             set end of VAR data
         BCTR  R4,0                    back up one character
         BCTR  R4,0                    back up one more charcter
         CLC   0(3,R4),=CL3''')'       keyword VAR?
         BE    PAR0030                 yes, carry on
         LA    R4,1(,R4)               bump up one character
         CLC   0(2,R4),=CL2')'         keyword VAR?
         BE    PAR0030                 yes, carry on
*
         LA    R4,0(R3,R2)             end of VAR data
         BCTR  R4,0                    back up one character
         CLC   0(2,R4),=CL2''''        quoted VAR?
         BNE   PAR0025                 no, carry on
         MVC   VARENDK,0(R4)           copy quote ID
         MVI   0(R4),C' '              clear end quoute
         LA    R2,1(,R2)               bump up one character
         LR    R3,R2                   copy var name address
         SLR   R4,R3                   get VAR name length
         ST    R4,VARNAML              init var name length
         BCTR  R4,0                    decrement for EXecute
         EX    R4,VARCOPY
*
         LA    R1,DTAVAR               var data address
         SLR   R2,R1                   compute offset
         ST    R2,VAROSET              var name offset
         MVI   VARTYPE,VAR@POS         no, positional VAR
         B     PAR0099                 exit
*
PAR0025  DS    0H
         ST    R3,VARNAML              init var name length
         BCTR  R3,0                    decrement for EXecute
         EX    R3,VARCOPY              copy VAR text
         MVC   VARENDK,=CL3' '         unquoted ID
*
         LA    R1,DTAVAR               var data address
         SLR   R2,R1                   compute offset
         ST    R2,VAROSET              var name offset
         MVI   VARTYPE,VAR@POS         positional VAR
         B     PAR0099                 exit
*
**       Check for keyword variable
*
PAR0030  DS    0H
         MVC   VARENDK,0(R4)           copy keyword-end ID
         MVC   0(2,R4),=CL2' '         clear keyword-end ID
         LA    R2,DTAVAR               var data address
         L     R3,DSAVARL              var data length
*
PAR0040  DS    0H
         LA    R1,2                    ID length
         CLC   0(2,R2),=CL2'('''       keyword var start ID?
         BE    PAR0050                 yes, carry on
         LA    R1,1                    ID length
         CLI   0(R2),C'('              keyword var start ID?
         BE    PAR0050                 yes, carry on
         LA    R2,1(,R2)               next character
         BCT   R3,PAR0040              loop
         MVC   DSARC,=AL4(RC8)         set error RC
         MVC   DSARSN,=AL4(RSN1044)    set error RSN
         B     PAREXIT                 exit
*
PAR0050  DS    0H
         LA    R2,0(R1,R2)             var name address
         LR    R1,R2                   copy var name address
         SLR   R4,R1                   get var name length
         ST    R4,VARNAML              init var name length
         BCTR  R4,0                    decrement foe EXecute
         EX    R4,VARCOPY              copy VAR name
*
         LA    R1,DTAVAR               var data address
         SLR   R2,R1                   compute offset
         ST    R2,VAROSET              var name offset
         MVI   VARTYPE,VAR@KEY         indicate keyword VAR
*
PAR0099  DS    0H
         TM    EVTFLG2,EVT@EDSP        SHOWREB=YES
         BZ    PAR0999                 no, exit
         $WTO  MID=ECF303I,                                            +
               VAR1=REBMEMBR,          show member name                +
               VAR2=VAROSET,           show offset                     +
               VAR3=DTAVAR             show VAR
*
         $WTO  MID=ECF304I,                                            +
               VAR1=REBMEMBR,          show member name                +
               VAR2=VARTYPE,           show var type                   +
               VAR3=VARNAML,           show var name length            +
               VAR4=VARNAME            show var name
*
PAR0999  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*
PAREXIT  DS    0H
         $SUBXIT PARM=DSAOPAR,         exit                            +
               RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
VARCOPY  MVC   VARNAME(*-*),0(R2)      EXecuted instruction
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem Data Areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFREB ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAFLG1  DS    XL1                     flags
DSA@RV0  EQU   X'80'                   -available
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
         DS    0F
DSAIPAR  DS    F                       input parm reg
DSAOPAR  DS    F                       output Parm reg
DSAVARL  DS    F                       VAR data length
DSAWORD  DS    F                       work area
         DS    F
DSAVAR   DS    CL80                    VAR data entry
DSA@VARL EQU   *-DSAVAR                lebgth
         DS    0F
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*
**       Event rule header entry
*
HDR      DSECT ,
HDRX     DS    CL4                     blank
HDRID    DS    CL8                     item ID
         DS    CL1                     filler
HDRSEP   DS    CL1                     separator
         DS    CL1                     filler
HDRITEM  DS    CL8                     item name
         DS    CL4                     filler
         DS    CL53                    -available
HDR@SIZE EQU   *-HDR                   entry size
*
**       Event rule data entry
*
DTA      DSECT ,
DTAX     DS    CL1                     blank
DTAVAR   DS    CL62                    VAR data
DTAEND   DS    CL17                    blanks
DTA@SIZE EQU   *-DTA                   entry size
*
**       Variable data entry
*
VAR      DSECT ,
VARTYPE  DS    XL1                     flags
VAR@TXT  EQU   X'80'                   plain text data
VAR@POS  EQU   X'40'                   positional VAR
VAR@KEY  EQU   X'20'                   keyword VAR
         DS    0X
VARENDK  DS    CL3                     1.VAR name end ID
         DS    0F
VAROSET  DS    F                       VAR name offset
VARNAML  DS    F                       VAR name length
VARNAME  DS    CL9                     &+VAR name
VARNAMEL EQU   *-VARNAME               VAR name length
VAR@SIZE EQU   *-VAR                   entry size
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         END
./ ADD NAME=ECFVTA   0106-21068-21304-1647-00035-00035-00004-BENMAR  18
ECFVTA   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFVTA                                                     */
*/*                                                                  */
*/* Function: Event Capture Subsystem EVT Vector Table               */
*/*                                                                  */
*/* Input Regs: n/a                                                  */
*/*                                                                  */
*/* Regs Usage: n/a                                                  */
*/*                                                                  */
*/* Oupput Regs: n/a                                                 */
*/*                                                                  */
*/* Attributes: non-exacutable, key zero, LPA-resident               */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
         COPY  $GLBLS                                              @02A
         ENTRY ECFVTA
         $ECFVT DSECT=NO
         END
./ ADD NAME=ECFWSR   0107-21068-21304-1647-00137-00138-00003-BENMAR  21
ECFWSR   CSECT
*/********************************************************************/
*/*                                                                  */
*/* NAME: ECFWSR                                                     */
*/*                                                                  */
*/* DESCRIPTION: Timer Wait Service Processor                        */
*/*                                                                  */
*/* Function: Issues STIMER wait for the specified time interval.    */
*/*                                                                  */
*/* Input Regs: R1  input parameter                                  */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, problem state, key=8                      */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
         COPY  $GLBLS
ECFWSR   $ENTRY STACK=SUBTCB           entry
         ST    R1,DSAIPAR              save PARM reg
*
         MVI   DSAPARM,BLANK
         MVC   DSAPARM+1(DSAPARMZ-1),DSAPARM
         L     R2,0(,R1)               parmlist address
         LH    R1,0(,R2)               PARM= data length
         LTR   R1,R1                   PARM= specified?
         BNZ   WSR0010                 yes, test further
         WTO   'ECFWAIT - WAIT= 5-seconds default used',ROUTCDE=11
         STIMER WAIT,DINTVL=TIMER005   wait using default
         MVC   DSARC,=AL4(4)           set warning RC
         B     WSREXIT                 exit
*
WSR0010  DS    0H
         ST    R1,DSAPLEN              init PARM= data length
         BCTR  R1,0                    subtract one for EXecute
         EX    R1,COPYPARM             copy PARM= data
         CLC   =CL5'WAIT=',DSAPARM     wait interval request?
         BE    WSR0020                 yes, test further
         WTO   'ECFWAIT - WAIT= parameter missing',ROUTCDE=11
         MVC   DSARC,=AL4(8)           no, set error RC
         B     WSREXIT                 exit
*
WSR0020  DS    0H
         MVC   DSATIMER,NUMERICS       move zones
         MVN   DSATIMER,DSAPARM+5      move interval numerics
         CLC   DSATIMER,DSAPARM+5      valid timer interval?
         BE    WSR0030                 yes, carry on
         WTO   'ECFWAIT - WAIT= invalid timer interval',ROUTCDE=11
         MVC   DSARC,=AL4(8)           no, set error RC
         B     WSREXIT                 exit
*
WSR0030  DS    0H
         STIMER WAIT,DINTVL=DSATIMER   wait for specified interval
         XC    DSARC,DSARC             set RC
         B     WSREXIT                 exit
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
WSREXIT  DS    0H
         $EXIT RC=DSARC                exit
*---------------------------------------------------------------------*
*        EXecuted instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COPYPARM MVC   DSAPARM(*-*),2(R2)      EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0D
TIMER005 DC    CL8'00000500'           5-seconds default timer interval
NUMERICS DC    CL8'00000000'           MVN numerics
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFEQU ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASVA   DS    18F                     save area
         DS    0X
DSAFLG1  DS    XL1                     flags
DSA@RV0  EQU   X'80'                   -available
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL3                     -available
         DS    0F
DSARC    DS    F                       return code
DSAIPAR  DS    F                       input parameter
DSAPLEN  DS    F                       PARM= data length
         DS    0D
DSATIMER DS    D                       STIMER listform
         DS    0C
DSAPARM  DS    CL100                   PARM= parameter
DSAPARMZ EQU   *-DSAPARM               max parm length
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
         END
./ ADD NAME=ECFWTO   0147-21068-21308-0922-00454-00429-00454-BENMAR  51
ECFWTO   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFWTO                                                     */
*/*                                                                  */
*/* Function: Event Capture Subsystem WTO Manager                    */
*/*                                                                  */
*/* Input Regs: R1  parmlist                                         */
*/*             R9  STK address                                      */
*/*             R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R4  parmlist address                                 */
*/*             R6  WTO text address                                 */
*/*             R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor state, Key=Callerkey           */
*/*                                                                  */
*/* Restrictions: 1. R9 thru R12 are permanently assigned            */
*/*               2. DONOT reference EVT (Event Vector Table)        */
*/*               3. $TRACE macro calls CANNOT be issued             */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
* @03 | V2R3 | 07312021 | Ben Marino  | Do not compress SHOWREB WTOs  *
* @04 | V2R3 | 11072021 | Ben Marino  | Fixed DBUGLOG ABENDC01/301    *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFWTO   $SRVINI                       module ID
         USING PSA,0                   FLC addressability
         ST    R1,DSAIPAR              save PARM reg
         LR    R4,R1                   parmlist address
*
**       Validity check request
*
         TM    STKFLG1,STK@HZOS        zOS host system?            @02A
         BNZ   WTO0000                 yes, carry on               @02A
         ICM   R1,15,PSATOLD           SRB-mode caller?
         BZ    WTO0999                 yes, not allowed in MVS 3.8j
*
**       Locate requested WTO message
*
WTO0000  DS    0H
         L     R3,ECFWTXA              WTO msg table EPA
         LA    R3,ZID@SZE+4(,R3)       set table address
         USING WTB,R3                  WTB addressability
         L     R2,WTBEND               end-of-WTO table address
         L     R3,WTBSTAR              start-of-WTO table address
         L     R1,0(,R4)               message ID address
         MVC   DSAMID,0(R1)            init message ID
         DROP  R3
*
WTO0010  DS    0H
         CR    R3,R2                   last entry?
         BL    WTO0020                 no, test further
         MVC   DSARC,=AL4(RC12)        set error RC
         MVC   DSARSN,=AL4(RSN0128)    set error RSN
         MVC   DSAWTO(ECF998EL),ECF998E
         MVC   DSAWTXT+1(7),DSAMID     show error msg-ID
         MVC   DSAWSUB,STKSUBNM        show subsystem name         @02C
*
         MVC   DSARC,=AL4(RC8)         set error RC                @02A
         MVC   DSARSN,=AL4(RSN0168)    set error RSN               @02A
         ICM   R1,15,PSATOLD           SRB-mode caller?            @02A
         BZ    WTO0015                 yes, carry on               @02A
         WTO   MF=(E,DSAWTO)           issue error message
         B     WTOEXIT                 exit
*
WTO0015  DS    0H
         WTO   MF=(E,DSAWTO),          issue error message         @02A+
               LINKAGE=BRANCH          branch entry                @02A
         B     WTOEXIT                 exit                        @02A
*
WTO0020  DS    0H
         CLC   DSAMID,4(R3)            MID match?
         BE    WTO0030                 yes, carry on
         LH    R1,0(,R3)               get text length
         LA    R1,3(,R1)               round up to next,
         N     R1,=XL4'FFFFFFFC'       fullword boundary
         LA    R3,4(R1,R3)             add DESC+ROUT codes
         B     WTO0010                 loop
*
WTO0030  DS    0H
         MVI   DSAWTO,BLANK
         MVC   DSAWTO+1(DSAWTOL-1),DSAWTO
         LH    R1,0(,R3)               get text length
         ST    R1,DSATXLN              save text length
         LA    R1,4(,R1)               add DESC+ROUT size
         BCTR  R1,0                    decrement for EXecute
         EX    R1,COPYMSG              copy WTO message
         MVC   DSAWSUB,STKSUBNM        insert subsystem name       @02C
*
**       Resolve WTO message variables
*
         LA    R6,DSAWTXT              msg text address
         LH    R5,DSAWLEN              get text length
         SH    R5,=H'4'                subtract MCS flags
*
WTO0040  DS    0H
         TM    0(R4),ENDVL             end of parmlist?
         BNZ   WTO0500                 yes, issue target WTO
         LA    R4,4(,R4)               next var ptr
         L     R3,0(,R4)               var data address
*
WTO0050  DS    0H
         CLI   0(R6),C'%'              var ID found?
         BE    WTO0060                 yest test further
         CLI   0(R6),C'!'              var ID found?
         BE    WTO0060                 yest test further
         CLI   0(R6),C'@'              var ID found?
         BE    WTO0060                 yest test further
         LA    R6,1(,R6)               walk thru text
         BCT   R5,WTO0050              loop
         B     WTO0500                 issue WTO message
*
WTO0060  DS    0H
         LR    R1,R6                   copy var ID address
         MVC   DSAVARID,0(R6)          save var ID found
*
WTO0070  DS    0H
         CLC   DSAVARID,0(R6)          end of var ID found?
         BNE   WTO0080                 yes, compute var ID length
         LA    R6,1(,R6)               walk thru text
         BCT   R5,WTO0070              loop
*
WTO0080  DS    0H
         LR    R2,R6                   copy msg text address
         SLR   R2,R1                   compute var length
         CLI   DSAVARID,C'%'           text var ID?
         BNE   WTO0090                 no, test further
         BCTR  R2,0                    decrement for EXecute
         EX    R2,MOVEVAR              move var data to msg
         B     WTO0400                 loop
*
WTO0090  DS    0H
         CLI   DSAVARID,C'!'           hexadecimal var ID?
         BNE   WTO0300                 no, test further
         MVC   DSASRC,0(R3)            get var value
         $CNVX DSAVAR,DSASRC,TR=TRANTB translate var
         LA    R15,2                   compare length
         CLR   R2,R15                  display 6-hex digits?
         BH    WTO0100                 no, test further
         MVC   0(2,R1),DSAVAR+6        move var data to msg
         B     WTO0400                 loop
*
WTO0100  DS    0H
         LA    R15,4                   compare length
         CLR   R2,R15                  display 4-hex digits,
         BH    WTO0200                 no, test further
         MVC   0(4,R1),DSAVAR+4        move var data to msg
         B     WTO0400                 loop
*
WTO0200  DS    0H
         MVC   0(8,R1),DSAVAR          move var data to msg
         B     WTO0400                 loop
*
WTO0300  DS    0H
         CLI   DSAVARID,C'@'           decimal var ID?
         BNE   WTO0400                 no, carry on
         L     R2,0(,R3)               get var value
         CVD   R2,DSADWRD              make decimal
         OI    DSADWRD+7,X'0F'         fix sign
         UNPK  DSAVAR,DSADWRD          unpack it
         MVC   0(8,R1),DSAVAR          move var data to msg
*
WTO0400  DS    0H
         LA    R6,1(,R6)               walk thru text
         BCT   R5,WTO0040              loop
*
**       Issue requested WTO message
*
WTO0500  DS    0H
         TM    STKFLG1,STK@CWTO        COMPWTO=NO?                 @02C
         BNZ   WTO0600                 yes, skip msg compress
         CLC   DSAWID(4),=CL4'ECF3'    SHOWREB debugging WTO?      @03A
         BE    WTO0600                 yes, do not compres         @03A
         $CALL COMPRESS                no, compress msg text
*
WTO0600  DS    0H
         ICM   R1,15,PSATOLD           SRB-mode caller?            @02A
         BZ    WTO0700                 yes, carry on               @02A
         WTO   MF=(E,DSAWTO)           issue WTO msg
         B     WTO0800                 write msg to DBUGLOG
*
WTO0700  DS    0H                                                  @02A
         WTO   MF=(E,DSAWTO),          issue error message         @02A+
               LINKAGE=BRANCH          branch entry                @02A
         B     WTO0999                 exit                        @02A
*
**       Write debug message to log
*
WTO0800  DS    0H                                                  @02A
         CLC   PSAAOLD,STKASCB         ECF address space?          @02C
         BNE   WTO0999                 no, exit                    @02C
         TM    STKFLG2,STK@DLOG        DBUGLOG opened?             @04A
         BZ    WTO0999                 no, exit                    @04A
         ICM   R3,15,STKDDCB           DBUGLOG opened?
         BZ    WTO0999                 no, exit                    @02C
         MVI   DSALOGR,BLANK
         MVC   DSALOGR+1(DSALOGRL-1),DSALOGR
         L     R1,DSATXLN              WTO text length
         SL    R1,=F'4'                strip ROUT&DESC codes
         BCTR  R1,0
         EX    R1,COPYDBUG             copy debug msg
         MVC   DSALSYS,STKSYSID        init system ID              @02C
*
         MVC   DSAENQ(LOGENQL),LOGENQ  init listform               @04A
         ENQ   (ZECFWTO,DBUGLOG),MF=(E,DSAENQ)                     @04A
*
         PUT   (R3),DSALOGR            write debug message
*
         MVC   DSADEQ(LOGDEQL),LOGDEQ  init listform               @04A
         DEQ   (ZECFWTO,DBUGLOG),MF=(E,DSADEQ)                     @04A
*
WTO0999  DS    0H
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*---------------------------------------------------------------------*
*        Exit Routine                                                 *
*--------+---------+---------+---------+---------+---------+---------+*
WTOEXIT  DS    0H
         $SRVXIT PARM=DSAOPAR,RC=DSARC,RSN=DSARSN
*---------------------------------------------------------------------*
*        EXecuted Instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
MOVEVAR  MVC   0(*-*,R1),0(R3)         EXecuted instruction
COPYMSG  MVC   DSAWTO(*-*),0(R3)       EXecuted instruction
COPYDBUG MVC   DSALDATA(*-*),DSAWID    EXecuted instruction
*---------------------------------------------------------------------*
*        Constants                                                    *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFWTXA  DC    V(ECFWTX)               WTO message table EPA
         DS    0F
TRANTB   DC    CL16'0123456789ABCDEF'  translate table
*---------------------------------------------------------------------*
*        ENQ/DEQ listform                                             *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
LOGENQ   ENQ   (ZECFWTO,DBUGLOG,E,8,STEP),RET=HAVE,MF=L
LOGENQL  EQU   *-LOGENQ
         DS    0F
LOGDEQ   DEQ   (ZECFWTO,DBUGLOG,8,STEP),MF=L
LOGDEQL  EQU   *-LOGDEQ
         DS    0C
ZECFWTO  DC    CL8'ZECFWTO'
DBUGLOG  DC    CL8'DBUGLOG'
*---------------------------------------------------------------------*
*        Error Message                                                *
*--------+---------+---------+---------+---------+---------+---------+*
ECF998E  WTO   'ECF998E ECF  %%%%%%% not found in message table',      +
               ROUTCDE=(2,11),DESC=(4,5),MF=L
ECF998EL EQU   *-ECF998E
*---------------------------------------------------------------------*
*        WTO Message Model with Command and Response token            *
*--------+---------+---------+---------+---------+---------+---------+*
WTOCART  WTO   'ECFnnn? ECF  ...                                       +
                                                                    ', +
               CART=,MF=L                                          @02A
WTOCARTL EQU   *-WTOCART                                           @02A
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: COMPRESS                                                   */
*/*                                                                  */
*/* Function: Compress WTO message subroutine                        */
*/*                                                                  */
*/* Restrictions: R9 thru R12 are permanently assigned               */
*/*                                                                  */
*/* Input Regs: R13 save area address                                */
*/*             R14 return address                                   */
*/*             R15 entry point address                              */
*/*                                                                  */
*/* Regs Usage: R9  STK address                                      */
*/*             R10 base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 save area address                                */
*/*                                                                  */
*/* Output Regs: R0  reason code                                     */
*/*              R1  output parameter                                */
*/*              R15 return code                                     */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
COMPRESS $SUBINI
         LA    R4,DSAXTXT              compress msg address
         LA    R3,DSAWTXT              WTO msg text address
         LH    R2,DSAWLEN              WTO text length
         SH    R2,=H'16'               minus MCS flags & msg prefix
         LA    R2,0(R2,R3)             WTO msg end-address
         MVC   DSAROUT,0(R2)           save ROUTCDE & DESC codes
         MVI   DSAXTXT,BLANK           clear WTO work area
         MVC   DSAXTXT+1(DSAXTXTL-1),DSAXTXT
         B     COMP020                 carry on
*
COMP010  DS    0H
         CLI   0(R3),XZERO             end of text?
         BE    COMP035                 yes, test further
         CLI   0(R3),BLANK             blank?
         BNE   COMP020
         LR    R1,R3                   msg text address
         BCTR  R1,0                    subtract one
         CLI   0(R1),BLANK             previous char blank?
         BNE   COMP020                 no, copy char
         LA    R3,1(,R3)               next msg text address
         B     COMP030                 loop
*
COMP020  DS    0H
         MVC   0(1,R4),0(R3)           copy char
         LA    R3,1(,R3)               next msg text char
         LA    R4,1(,R4)               next msg text char
*
COMP030  DS    0H
         CLR   R3,R2                   all done?
         BL    COMP010                 no, loop
*
COMP035  DS    0H
         MVI   DSAWTXT,BLANK           clear WTO work area
         MVC   DSAWTXT+1(DSAWTXTL-1),DSAWTXT
         LA    R2,DSAXTXT              msg text address
         SLR   R4,R2                   get compresed msg length
         BCTR  R4,0
         EX    R4,COMPCOPY             copy compressed msg text
*
         LH    R2,DSAWLEN              MCS flags & msg length
         LA    R3,DSAWTO               WTO msg address
         LA    R3,0(R2,R3)             end-of-text address
         MVC   0(4,R3),DSAROUT         insert ROUTCDE & DESC code
*
COMPEXIT DS    0H
         $SUBXIT RC=DSARC,RSN=DSARSN   exit
*---------------------------------------------------------------------*
*        EXecuted Instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0H
COMPCOPY MVC   DSAWTXT(*-*),DSAXTXT    copy msg text
*---------------------------------------------------------------------*
*        Literals                                                     *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Subsystem data areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFSRWA ,
         $ECFVT ,
         $ECFSTK ,
         $ECFEQU ,
         $ECFWTB DSECT=YES
         $MODID ID=ZID
ZID@SZE  EQU   *-ZID
         $ECFWTO ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSAMOD   DS    CL8                     module ID
DSAFLG1  DS    XL1                     flags
DSA@RV0  EQU   X'80'                   -available
DSA@RV1  EQU   X'40'                   -available
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAVARID DS    CL1                     variable ID
DSAFLGSX DS    XL2                     -available
         DS    0F
DSARC    DS    F                       return code
DSARSN   DS    F                       reason code
DSATXLN  DS    F                       WTO text length
DSAROUT  DS    F                       ROUTCDE & DESC codes
         DS    0F
DSAIPAR  DS    F                       input PARM reg
DSAOPAR  DS    F                       output PARM reg
         DS    0C
DSAMID   DS    CL8                     target message ID
         DS    0F
DSASRC   DS    XL4                     variable source
DSASRC2  DS    XL4                     variable source
DSASRCL  EQU   *-DSASRC                variable length
DSAVAR   DS    CL8                     variable data
         DS    CL1                     slack byte
DSAVARL  EQU   *-DSAVAR                variable length
         DS    0D
DSADWRD  DS    D                       conversion work area
DSAPACK  DS    PL4                     conversion work area
DSAPAK2  DS    PL4                     conversion work area
DSA@PSZE EQU   *-DSADWRD
         DS    0F
DSAWTO   DS    0CL124                  WTO message work area
DSAWLEN  DS    AL2                     -text length
         DS    XL2                     -MCS flags
DSAWID   DS    CL7                     -message ID
         DS    CL1                     -blank
DSAWSUB  DS    CL4                     -subsystem name
DSAWTXT  DS    CL108                   -msg text
DSAWTXTL EQU   *-DSAWTXT
DSAWTOL  EQU   *-DSAWTO                WTO message work area size
         DS    0F
DSAXTXT  DS    CL108                   compress text work area
DSAXTXTL EQU   *-DSAXTXT               compress text work area size
         DS    0F
DSAENQ   DS    CL(LOGENQL)             ENQ listform
         DS    0F
DSADEQ   DS    CL(LOGDEQL)             DEQ listform
         DS    0F
         DS    0F
DSALOGR  DS    0CL133                  Log record work area
         DS    CL1                     -carriage control
DSALSYS  DS    CL4                     -system ID
         DS    CL1                     -
DSALDATA DS    CL127                   -log data
DSALOGRL EQU   *-DSALOGR               Log record work area size
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
*        The following statement will cause assembly errors when
*        the DSA size exceeds 1024-bytes
*
         DS    0XL(1024-DSA@SIZE+1)    see $ECFSTK(SDSA@SZE)
*---------------------------------------------------------------------*
*        System data areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         END
./ ADD NAME=ECFWTX   0199-21068-21309-1048-00621-00573-00169-BENMAR  30
ECFWTX   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFWTX                                                     */
*/*                                                                  */
*/* Description: Event Capture WTO Message Table                     */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V1R1 | 05242019 | Ben Marino  | Initial version               *
* @02 | V2R1 | 03072021 | Ben Marino  | zOS serviceability support    *
* @03 | V2R3 | 07302021 | Ben Marino  | Enhanced Event Rule support   *
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
ECFWTX   $ENTRY SAVE=NO
         $ECFWTB DSECT=NO
*---------------------------------------------------------------------*
**       ECF001 to ECF099 (Event Capture initialization)              *
*--------+---------+---------+---------+---------+---------+---------+*
WTOTBLE  DS    0F
ECF000I  WTO   'ECF000I ECF {?command} {END}',                         +
               ROUTCDE=(2,11),DESC=(4),MF=L
ECF001I  WTO   'ECF001I ECF  Event Capture initialization in progress',+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF002I  WTO   'ECF002I ECF  Event Capture initialization complete',   +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF003I  WTO   'ECF003I ECF  Event Capture resources released',        +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF004I  WTO   'ECF004I ECF  Using PARM=''%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+
               %%%%%%%%%%%%%%%%%%%%%''',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF005E  WTO   'ECF005E ECF  RTBE Overflow error RSN=!!!!',            +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF006I  WTO   'ECF006I ECF  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+
               %%%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF007I  WTO   'ECF007I ECF  TMPSTC=%%%%%%%%',                         +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF008I  WTO   'ECF008I ECF  RUNAS=%%%',                               +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF009I  WTO   'ECF009I ECF  %%%%%%%=(!!,!!)',                         +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF010I  WTO   'ECF010I ECF  Default init parms in effect',            +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF011I  WTO   'ECF011I ECF  Previous instance resources released',    +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF012E  WTO   'ECF012E ECF  CMD=% Invalid command prefix specified; RC+
               =!!!! RSN=!!!!!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF013E  WTO   'ECF013E ECF  CMD=% prefix owned by ECF subsystem instan+
               ce %%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF014W  WTO   'ECF014W ECF  Unknown init parm ignored; %%%%%%%%%%%%%%%+
               %%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF015E  WTO   'ECF015E ECF  Invalid init parm RSN=!!!! %%%%%%%%%%%%%%%+
               %%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF016W  WTO   'ECF016W ECF  Previous Event Capture instance deactivate+
               d',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF017W  WTO   'ECF017W ECF  Unable to free previous instance %%% RC=!!+
               !!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF018E  WTO   'ECF018E ECF  %%%% storage %%%%%%% failed RC=!!!! RSN=!!+
               !!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF019I  WTO   'ECF019I ECF  %%%%%=%%%',                               +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF020E  WTO   'ECF020E ECF  %%% CPOOL %%%%%% failed RSN=!!!!',        +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF021E  WTO   'ECF021E ECF  EVT storage %%%%%%% failed RC=!!!!',      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF022E  WTO   'ECF022E ECF  REBX CPOOL %%%%%% failed RSN=!!!!',       +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF023E  WTO   'ECF023E ECF  Dynamic LPA %%% request failed; SSM=%%%%%%+
               %% RC=!!!! RSN=!!!!!!!!',                           @02C+
               ROUTCDE=(2,11),DESC=(4),MF=L                        @02A
         DS    0F
ECF024E  WTO   'ECF024E ECF  SRB CPOOL %%%%%% failed RSN=!!!!',        +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF025E  WTO   'ECF025E ECF  %%%%%%%% Open error RSN=!!!!',            +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF026E  WTO   'ECF026E ECF  %%%%%%%% FIND error; MEM=%%%%%%%% RC=!!!! +
               RSN=!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF027E  WTO   'ECF027E ECF  %%%%%%%% READ overflow error Member=%%%%%%+
               %% RSN=!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF028E  WTO   'ECF028E ECF  %%% storage release failed RC=!!!! RSN=!!!+
               ! SSM=%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF029I  WTO   'ECF029I ECF  No rules defined; %%%%%%%%',              +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF030I  WTO   'ECF030I ECF  %%%%%%%%=%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+
               %%%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF031E  WTO   'ECF031E ECF  Misplaced Rule=%%%%%%%% Type=%%%%%%%%%%%% +
               ',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF032E  WTO   'ECF032E ECF  Event data error Rule=%%%%%%%% Type=%%%%%%+
               %%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF033E  WTO   'ECF033E ECF  Rule=%%%%%%%% %%%%% record error; %%%%%%%%+
               %%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L                @03C
         DS    0F
ECF034E  WTO   'ECF034E ECF  Misplaced EXEC record Rule=%%%%%%%% %%%%%%+
               %%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF035E  WTO   'ECF035E ECF  Rule=%%%%%%%% EXEC=%%%%%%%% END record mis+
               sing',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF036E  WTO   'ECF036E ECF  Rule=%%%%%%%% EXEC=%%%%%%%% Variable overf+
               low error',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF037E  WTO   'ECF037E ECF  Rule=%%%%%%%% EXEC=%%%%%%%% Variable buffe+
               r size exceeded',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF038E  WTO   'ECF038E ECF  %%%%%%%% %%%%% error RSN=!!!!',           +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF039I  WTO   'ECF039I ECF  DBUGLOG Logging is %%%%%%%%',             +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF040I  WTO   'ECF040I ECF  %%%%%=%%% option set',                    +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF041E  WTO   'ECF041E ECF  Command invalid; %%%%%%%%%%%%%%%%%%%%%%%%%+
               ',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF042I  WTO   'ECF042I ECF  SHOWREB=%%% %%%%%%%%%%',                  +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF043E  WTO   'ECF043E ECF  Rule=%%%%%%%% refresh error RSN=!!!!',    +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF044E  WTO   'ECF044E ECF  Rule=%%%%%%%% add error RSN=!!!!',        +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF045I  WTO   'ECF045I ECF  Rule %%%%%%%% not found',                 +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF046I  WTO   'ECF046I ECF  Rule %%%%%%%% is now %%%%%%%%',           +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF047I  WTO   'ECF047I ECF  Rule %%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%+
               %%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF048E  WTO   'ECF048E ECF  TRCELOG log dataset not opened RSN=!!!!', +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF049E  WTO   'ECF049E ECF  Invalid trace call ID=%%%%%%%% RSN=!!!!', +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF050E  WTO   'ECF050E ECF  %%%%%%%% storage %%%%%%% failed RC=!!!! SS+
               M=%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF051I  WTO   'ECF051I ECF  Enter %HELP for a list of valid commands',+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF052E  WTO   'ECF052E ECF  %%%%%%%% Request error RC=!!!! RSN=!!!! SS+
               M=%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF053I  WTO   'ECF053I ECF  TMP=%%%%%%%%',                            +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF054I  WTO   'ECF054I ECF  TSOSUB=%%%%',                             +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF055I  WTO   'ECF055I ECF  MSAS=%%%%',                               +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF056E  WTO   'ECF056E ECF  Unable to locate RTB rule table',         +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF057I  WTO   'ECF057I ECF  COMPWTO=%%% %%%%%%%%%%',                  +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF058I  WTO   'ECF058I ECF  TIMER=%%',                                +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF059E  WTO   'ECF059E ECF  TQE storage %%%%%%% failed RC=!!!!',      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF060E  WTO   'ECF060E ECF  SetDIE initialization failed; RC=!!!! RSN=+
               !!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF061I  WTO   'ECF061I ECF  SVC=%%%',                                 +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF062E  WTO   'ECF062E ECF  Required initialization option SVC= not sp+
               ecified',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF063E  WTO   'ECF063E ECF  %%%%%%%% %%%%%%%%%%%%%%%% error; RC=!!!! R+
               SN=!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF064I  WTO   'ECF064I ECF  REPLYID=%',                               +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF065I  WTO   'ECF065I ECF  CAPTURE=%%%',                             +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF066E  WTO   'ECF066E ECF  Command ABENDed; RSN=!!!! %%%%%%%%%%%%%%%%+
               %%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF067E  WTO   'ECF067E ECF  Event Capture subtask %%% initialization f+
               ailed',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF068E  WTO   'ECF068E ECF  CSVDYLPA %%%%%% ownership error; RC=!!!! S+
               SM=%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF069E  WTO   'ECF069E ECF  MLWTO buffer overflow error; %%%%%%%%%%%%%+
               %%%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF070I  WTO   'ECF070I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF071E  WTO   'ECF071E ECF  Command issuer not authorized; %%%%%%%%%%%+
               %%%%%%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF072I  WTO   'ECF072I ECF  System-Level token %%%%%%%%%%%%%%%% %%%%%%+
               %%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF073I  WTO   'ECF073I ECF  Q10LOCK=%%%',                         @03A+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF074I  WTO   'ECF074I ECF  MONTIMER=%%',                         @03A+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF075I  WTO   'ECF075I ECF  MONMSGCT=%%%%',                       @03A+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF076I  WTO   'ECF076I ECF  PERSIST=%%%',                         @03A+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF077I  WTO   'ECF077I ECF  TRAPSVC=%%%%%%%%',                    @03A+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF078I  WTO   'ECF078I ECF  *** free entry ***',                  @03A+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF079I  WTO   'ECF079I ECF  SETCON MN,JOBNAMES=(ON,LOG) %%%%%%%%%%%%',+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF080I  WTO   'ECF080I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF081I  WTO   'ECF081I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF095E  WTO   'ECF095E ECF  %%% storage %%%%%%% failed RC=!!!! SSM=%%%+
               %%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF096I  WTO   'ECF096I ECF  STOP command accepted',                   +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF097E  WTO   'ECF097E ECF  Event Capture initialization failed RC=!!!+
               ! RSN=!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF098I  WTO   'ECF098I ECF  Event Capture termination in progress',   +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF099I  WTO   'ECF099I ECF  Event Capture termination complete',      +
               ROUTCDE=(2,11),DESC=(4),MF=L
*---------------------------------------------------------------------*
**       ECF100 to ECF199 (DEBUG=ON messages)                         *
*--------+---------+---------+---------+---------+---------+----------*
         DS    0F
ECF100I  WTO   'ECF100I ECF  CPOOL %%%%%% A=!!!!!!!! RSN=!!!! %%%%%%%%%+
               %%%%%%%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF101I  WTO   'ECF101I ECF  %%%%%%%% %%%%%%%%%%%%%%%%%%%% token=%%%%%%+
               %%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF102I  WTO   'ECF102I ECF  CELL %%%% A=!!!!!!!! RSN=!!!! %%%%%%%%%%%%+
               %%%%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF103I  WTO   'ECF103I ECF  %%%% Failed validity check RSN=!!!!',     +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF104W  WTO   'ECF104W ECF  Unknown listener service request issued', +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF105I  WTO   'ECF105I ECF  Event Capture subtasks %%%%%%%%',         +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF106I  WTO   'ECF106I ECF  Event subtask ECFSRV(%%%) TCB=!!!!!!!! %%%+
               %%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF107I  WTO   'ECF107I ECF  WTO broadcasts listener %%%%%%%%%%%%%%%%',+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF108I  WTO   'ECF108I ECF  SetDIE environment %%%%%%%%',             +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF109I  WTO   'ECF109I ECF  MGCR RC=!!!! !!!!!!!! %%%%%%%%%%%%%%%%%%%%+
               %%%%%%%%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF110I  WTO   'ECF110I ECF  DYNALLOC DSORG=!!!! DD=%%%%%%%% DSN=%%%%%%+
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%',                          +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF111I  WTO   'ECF111I ECF  LOAD listener %%%%%%%%%%%',               +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF112I  WTO   'ECF112I ECF  SSM=%%%%%% CSA virtual storage released', +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF113I  WTO   'ECF113I ECF  Name/Token Pair services initialized',    +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF114I  WTO   'ECF114I ECF  Previous instance cell pools deleted',    +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF115I  WTO   'ECF115I ECF  WTO/R broadcast listener %%%%%%%%%%%%%%%%'+
               ,ROUTCDE=(2,11),DESC=(4),MF=L                       @02A
         DS    0F
ECF116I  WTO   'ECF116I ECF  SSIREQ %%%%%%%% service request RC=!!!! RS+
               N=!!!!!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF117I  WTO   'ECF117I ECF  %%%%%%%% No queued elements found',       +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF118I  WTO   'ECF118I ECF  %%%%%%%% Event rules defined as %%%%%%%%',+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF119I  WTO   'ECF119I ECF  SVC %%% Service router initialized',      +
               ROUTCDE=11,MF=L
         DS    0F
ECF120I  WTO   'ECF120I ECF  Stacking PC router %%%%%%%%%%%; SLX=!!!!!!+
               !!',ROUTCDE=11,MF=L
         DS    0F
ECF121I  WTO   'ECF121I ECF  %%%%%%%% SAFRC=!!!! RC=!!!! RSN=!!!!!!!! P+
               ROFILE=%%%%%%%%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF122I  WTO   'ECF122I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF123I  WTO   'ECF123I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF124I  WTO   'ECF124I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF190I  WTO   'ECF190I ECF  %%%%%%%% %%%%%%%% to global failed; RC=!!!+
               ! RSN=!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF191I  WTO   'ECF191I ECF  $LOAD %%%%%%%% successful; RC=!!!! SIZE=!!+
               !!!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF192I  WTO   'ECF192I ECF  $DELETE %%%%%%%% successful; RC=!!!! RSN=!+
               !!! SIZE=!!!!!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF193I  WTO   'ECF193I ECF  Event Capture subtask %%% terminated',    +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF194I  WTO   'ECF194I ECF  %%%%%%%% Unknown Event Capture ID specifie+
               d',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF195I  WTO   'ECF195I ECF  %%%%%%%% ESTAE create error RC=!!!! RSN=!!+
               !!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF196I  WTO   'ECF196I ECF  SSIREQ %%%%%%% service request RC=!!!! RSN+
               =!!!!!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF197I  WTO   'ECF197I ECF  CMD=!!!!!!!! ABENDS=%%%%%%%%%%%%%%%%%%%', +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF198I  WTO   'ECF198I ECF  CPF %%%%%% RC=!!!! RSN=!!!!!!!!',         +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF199I  WTO   'ECF199I ECF  Event Capture %%%%%%%%/%%%%%%%% ABEND=!!!!+
               !!!! RSN=!!!!!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
*---------------------------------------------------------------------*
**       ECF200 to ECF299 (TRACE=ON messages)                         *
*--------+---------+---------+---------+---------+---------+----------*
         DS    0F
ECF200I  WTO   'ECF200I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF299I  WTO   'ECF299I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
*---------------------------------------------------------------------*
**       ECF300 to ECF399 (SHOWREB=YES messages)                      *
*--------+---------+---------+---------+---------+---------+----------*
         DS    0F
ECF300I  WTO   'ECF300I ECF  %%%%%%%% @@@@@@@@ %%%%%%%%%%%%%%%%%%%%%%%%+
               %%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF301I  WTO   'ECF301I ECF  %%%%%%%% @@@@@@@@',                       +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF302I  WTO   'ECF302I ECF  %%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+
               %%%%%%%%%%%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF303I  WTO   'ECF303I ECF  %%%%%%%% OFF=!!!!!!!! DTA=%%%%%%%%%%%%%%%%+
               %%%%%%%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L       @03C
         DS    0F
ECF304I  WTO   'ECF304I ECF  %%%%%%%% TP=!!!!!!!! LN=!!!!!!!! NM=%%%%%%+
               %%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF305I  WTO   'ECF305I ECF  %%%%%%%% DTA=%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%',                 @03C+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF306I  WTO   'ECF306I ECF  %%%%%%%% Line count @@@@@@@@',            +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF307I  WTO   'ECF307I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF399I  WTO   'ECF399I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
*---------------------------------------------------------------------*
**       ECF400 to ECF499 message range (reserved)                    *
*--------+---------+---------+---------+---------+---------+----------*
         DS    0F
ECF400I  WTO   'ECF400I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF499I  WTO   'ECF499I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
*---------------------------------------------------------------------*
**       ECF500 to ECF599 message range (reserved)                    *
*--------+---------+---------+---------+---------+---------+----------*
         DS    0F
ECF500I  WTO   'ECF500I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF599I  WTO   'ECF599I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
*---------------------------------------------------------------------*
**       ECF600 to ECF699 message range  (reserved)                   *
*--------+---------+---------+---------+---------+---------+----------*
         DS    0F
ECF600I  WTO   'ECF600I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF699I  WTO   'ECF699I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
*---------------------------------------------------------------------*
**       ECF700 to ECF799 msg range (MONITOR System address spaces)   *
*--------+---------+---------+---------+---------+---------+----------*
         DS    0F
ECF700E  WTO   'ECF700E ECF  %%%%%%%% *** MONITORED SYSTEM ADDRESS SPAC+
               E TERMINATED ***',ROUTCDE=(2,11),DESC=(4),MF=L      @03C
         DS    0F
ECF701I  WTO   'ECF701I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF702I  WTO   'ECF702I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF703I  WTO   'ECF703I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF799I  WTO   'ECF799I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
*---------------------------------------------------------------------*
**       ECF800 to ECF899 message (Master Scheduler recovery)         *
*--------+---------+---------+---------+---------+---------+----------*
         DS    0F
ECF800A  WTO   'ECF800A ECF  Specify Event Capture Facility %%%%%%%% or+
                EXIT',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF801I  WTO   'ECF801I ECF  Primary subsystem name altered',          +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF802I  WTO   'ECF802I ECF  Subsystem successfully defined',          +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF803E  WTO   'ECF803E ECF  Recovery session already active; command r+
               ejected',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF804I  WTO   'ECF804I ECF  Default parms=%%%%%%%%%%%%%%%%%%%%%%%%%%%%+
               %%%%%%%%%%%%%%%%%%%%%%''',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF805I  WTO   'ECF805I ECF  Secondary subsystem successfully defined',+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF806E  WTO   'ECF806E ECF  Recovery only allowed from Master address +
               space',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF807I  WTO   'ECF807I ECF  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+
               %%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF808I  WTO   'ECF808I ECF  For COMPRESS details issue %BROWSE %%%%%%%+
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%',                   +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF809I  WTO   'ECF809I ECF  For details issue %%%%%%%%%%%%%%%%%%%%%%%%+
               %%%%%%%%%%%%%%%%%%%%%%%%%',                             +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF810I  WTO   'ECF810I ECF  System recovery session in progress',     +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF811I  WTO   'ECF811I ECF  Secondary subsystem already defined',     +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF812I  WTO   'ECF812I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF813I  WTO   'ECF813I ECF  Enter %HELP for a list of valid commands',+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF899I  WTO   'ECF899I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
*---------------------------------------------------------------------*
**       ECF900 to ECF999 (Event Capture temination)                  +
*--------+---------+---------+---------+---------+---------+----------*
         DS    0F
ECF900I  WTO   'ECF900I ECFn Service request facility in progress',    +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF901I  WTO   'ECF901I ECFn Service request facility complete',       +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF902E  WTO   'ECF902E ECFn trace component abnormally terminated and +
               has been disabled',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF903E  WTO   'ECF903E ECF  DYNALLOC error RC=!!!! I=!!!! E=!!!! DSN=%+
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%',            +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF904E  WTO   'ECF904E ECF  Subtask attach failed ECFSRV(%%%%%%)',    +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF905E  WTO   'ECF905E ECF  %%%%%% recursive loop detected',          +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF906E  WTO   'ECF906E ECF  SSI load module LOAD failed SSM=%%%%%%%%',+
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF907E  WTO   'ECF907E ECF EVT vector table size mismatch; ECFSUB/ECFV+
               TA',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF908I  WTO   'ECF908I ECF  Commmon instance resources retained',     +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF909I  WTO   'ECF909I ECF  *** free entry ***',                      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF913E  WTO   'ECF913E ECF  %%%%%% %%%%%%% listener lock obtain failed+
               ; %%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF984E  WTO   'ECF984E ECF  SVCUPDTE %%%%%%% failed; SVC=%%% RC=!!!!',+
               ROUTCDE=(2,11),DESC=(4),MF=L                        @02A
         DS    0F
ECF985E  WTO   'ECF985E ECF  SVC=%%% ownership error; SVC owner=%%%%', +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF986E  WTO   'ECF986E ECF  $SSVT failed validity checks RC=!!!! RSN=!+
               !!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF987E  WTO   'ECF987E ECF  %%%%%% error Rule=%%%%%%%% RC=!!!! RSN=!!!+
               !',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF988E  WTO   'ECF988E ECF  %%%% subsystem ownership error. Owner=%%%%+
               %%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF989E  WTO   'ECF989E ECF  Event Capture already active. Start reject+
               ed',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF990E  WTO   'ECF990E ECF  Release Level mismatch; ECFSUB=VnRnMn ECFS+
               SM=VnRnMn',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF991E  WTO   'ECF991E ECF  Recovery environment create error RC=!!!! +
               RSN=!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF992E  WTO   'ECF992E ECF  %%%%%%%% parms table overflow error',     +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF993E  WTO   'ECF993E ECF  Storage obtain failed RC=!!!! CMD=%%%%%%%%+
               %%%%%%%%%%%%',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF994I  WTO   'ECF994I ECF  No rules found',                          +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF995E  WTO   'ECF995E ECF  MLWTO display error RC=!!!! ID=!!!!!!!!', +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF996W  WTO   'ECF996W ECF  %%%%%%%% Recovery environment bypassed',  +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF997I  WTO   'ECF997I ECF  Event Capture listeners deactivated by %%%+
               ',ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF998E  WTO   'ECF998E ECF  %%%%%%% Not found in message table',      +
               ROUTCDE=(2,11),DESC=(4),MF=L
         DS    0F
ECF999E  WTO   'ECF999E ECF  Event Capture %%%%%%%%/%%%%%%%% ABEND=!!!!+
               !!!! RSN=!!!!!!!!',ROUTCDE=(2,11),DESC=(4),MF=L
WTOTEND  EQU   *
         DS    0D
WTOTBSZ  EQU   *-WTOTBLE            WTO table size
         $ECFEQU ,
         END
./ ADD NAME=ECFXPC   0199-21138-21334-0648-01540-00001-01540-BENMAR  21
ECFXPC   CSECT
*/********************************************************************/
*/*                                                                  */
*/* Name: ECFXPC                                                     */
*/*                                                                  */
*/* Function: Event Capture PC Routine Router                        */
*/*                                                                  */
*/* Description: Routes control to the requested PC routine.         */
*/*              The routine receives control in Supervisor state    */
*/*              with the caller's protect key and in primary mode.  */
*/*                                                                  */
*/* PC Routines: The following PC routines are currently supported:  */
*/*                                                                  */
*/*              TPROT    - Test Protection                          */
*/*              DYNLPA   - Add load module to Dynamic-LPA           */
*/*              RUNIRB   - Schedule Ssynchronous IRB Exit           */
*/*              USERPC   - User PC routine model                    */
*/*                                                                  */
*/* Security: The PC caller must have READ authority to profile      */
*/*           ZECF.XPC.AUTH in RACF class, ECFCLASS, to be able to   */
*/*           successfully call these PC routines.                   */
*/*                                                                  */
*/*           RDEFINE ECFCLASS ZECF.XPC.AUTH UACC(NONE)              */
*/*                                                                  */
*/*           Grant read access to users that are authorized to      */
*/*           issue these PC routines.                               */
*/*                                                                  */
*/*           PERMIT ZECF.XPC.AUTH +                                 */
*/*           CLASS(ECFCLASS) ID(userid) ACCESS(READ)                */
*/*                                                                  */
*/* Input Regs: R0  Parameter                                        */
*/*             R1  Parameter                                        */
*/*             R15 PCID                                             */
*/*                                                                  */
*/* Regs Usage: R7  XPC address                                      */
*/*             R10 Base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 Save area address                                */
*/*                                                                  */
*/* Output Regs: R0  Reason code                                     */
*/*              R1  Output parameter                                */
*/*              R15 Return code                                     */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Caller-protect-key,     */
*/*             Dynamic-LPA-resident.                                */
*/*                                                                  */
*/* Â© Copyright Ben Marino. 2019 - 2022 (unpublished)                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*---------------------------CHANGE LOG--------------------------------*
*                                                                     *
* ID    Rel    Date       Author        Comments                      *
*---------------------------------------------------------------------*
* @01 | V2R1 | 04072021 | Ben Marino  | zOS serviceability support    *
* @02 | V2R2 | 04172021 | Ben Marino  | Added SAF RACROUTE suppport   *
* @03 | V2R3 | 08122021 | Ben Marino  | Added IRB schedule PC routine *
* @04 | V2R3 | 08242021 | Ben Marino  | Added $TPROT64/$DYNLPA support*
*     |      |          |             |                               *
*     |      |          |             |                               *
***********************************************************************
*--------+---------+---------+---------+---------+---------+---------+*
         COPY  $GLBLS
XPCMAIN  DS    0H
         BASR  R10,0                   base
         USING *,R10                   addressability
         B     XPC0000                 branch
         $MODID DSECT=NO               module ID
*
**       Obtain dynamic Storage area
*
XPC0000  DS    0H
         STORAGE OBTAIN,COND=NO,                                       +
               LENGTH=DSA@SIZE,SP=SP88
         LR    R12,R1                  DSA
         USING DSA,R12                 set addressability
         LA    R3,DSA@SIZE             DSA size
         LR    R2,R1                   copy address
         XR    R15,R15                 zero
         MVCL  R2,R14                  scrub DSA
         LA    R13,DSASAVE             savearea address
         IPK   ,                       caller protect key
         ST    R2,DSACKEY              save it
         MVC   DSAEVTA,ECFEVTA         read only EVT
*
**       Locate target PC routine
*
         LA    R7,XPCTABLE             PC routine table
         USING XPC,R7                  set addressability
         EREG  R15,R15                 PCID
         ST    R15,DSAPCID             save it locally
         EREGG R15,R15                 grande PCID
         STG   R15,DSAGPCID            save it locally
*
XPC0010  DS    0H
         CLC   XPCEPA,XPCTBND          end of table?
         BE    XPC0099                 yes, error
         CLC   XPCPCID,DSAPCID         PCID match?
         BE    XPC0020                 no, next entry
         LA    R7,XPC@SIZE(,R7)        next entry
         B     XPC0010                 locate PC entry
*
**       Call target PC routine
*
XPC0020  DS    0H
         EREG  R0,R1                   get parm regs
         STM   R0,R1,DSAIGR0           save locally
         EREGG R0,R1                   get grande parm regs        @04A
         STMG  R0,R1,DSAIGGR0          save locally                @04A
         L     R15,XPCEPA              PC routine EPA
         BSM   R15,0                   set AMODE
         BASR  R14,R15                 call target PC
         B     XPCEXIT                 exit
*
**       Invalid PCID specified
*
XPC0099  DS    0H
         L     R3,DSAPCID              show PCID in R3
         ABEND X'FFE',DUMP,REASON=(R3)
*---------------------------------------------------------------------*
*        Exit                                                         *
*--------+---------+---------+---------+---------+---------+---------+*
XPCEXIT  DS    0H
         LM    R3,R5,DSAOPAR
         STORAGE RELEASE,                                              +
               ADDR=(R12),LENGTH=DSA@SIZE,SP=SP88
         LR    R15,R3                  RC
         LR    R0,R4                   RSN
         LR    R1,R5                   R1
         PR    ,                       exit
*---------------------------------------------------------------------*
*        PC Routine Table                                             *
*           PCID codes are defined in $ECFEQU macro                   *
*--------+---------+---------+---------+---------+---------+---------+*
XPCTABLE DS    0F
         $PCENTRY TYPE=INITIAL
*
         $PCENTRY TYPE=ENTRY,                                          +
               EP=TPROT,             TPROT EPA                         +
               KEY=CALLER,           caller key                        +
               MODE=SUP,             supervisor state                  +
               PCID=$TPROT,          PCID                              +
               LINKAGE=BRANCH        entry linkage
*
         $PCENTRY TYPE=ENTRY,                                      @04A+
               EP=TPROT,             TPROT EPA                         +
               KEY=CALLER,           caller key                        +
               MODE=SUP,             supervisor state                  +
               PCID=$TPROT64,        PCID                              +
               LINKAGE=BRANCH        entry linkage
*
         $PCENTRY TYPE=ENTRY,                                      @02A+
               EP=SAF,               SAF EPA                           +
               KEY=CALLER,           caller key                        +
               MODE=SUP,             supervisor state                  +
               PCID=$SAF,            PCID                              +
               LINKAGE=BRANCH        entry linkage
*
         $PCENTRY TYPE=ENTRY,                                      @03A+
               EP=RUNIRB,            IRB EPA                           +
               KEY=CALLER,           caller key                        +
               MODE=SUP,             supervisor state                  +
               PCID=$RUNIRB,         PCID                              +
               LINKAGE=BRANCH        entry linkage
*
         $PCENTRY TYPE=ENTRY,                                      @04A+
               EP=DYNLPA,            LPA EPA                           +
               KEY=CALLER,           caller key                        +
               MODE=SUP,             supervisor state                  +
               PCID=$DYNLPA,         PCID                              +
               LINKAGE=BRANCH        entry linkage
*
         $PCENTRY TYPE=ENTRY,                                          +
               EP=USERPC,            model PC routine                  +
               KEY=CALLER,           caller key                        +
               MODE=SUP,             supervisor state                  +
               PCID=$USERPC,         PCID                              +
               LINKAGE=SYNCH         entry linkage
*
         $PCENTRY TYPE=FINAL
XPCTABSZ EQU   *-XPCTABLE
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFEVTA  DC    V(ECFVTA)             EVT address
XPCTBND  DC    XL4'FFFFFFFF'         PC table end indicator
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: TPROT                                                      */
*/*                                                                  */
*/* Function: Test Protection PC Routine                             */
*/*                                                                  */
*/* Description: Validate a storage address by determining if the    */
*/*              storage key and protect key match. Switch to the    */
*/*              caller's protect key and perform fetch and store    */
*/*              into the page. An invalid fetch and store will be   */
*/*              handled by the FRR routine.                         */
*/*                                                                  */
*/* Why?         The TPROT instruction does not distinguish between  */
*/*              a valid/invalid virtual storage address. When the   */
*/*              referenced page is swapped out TPROT sets CC 3,     */
*/*              translation not available.                          */
*/*                                                                  */
*/* Calling Macro: $TPROT                                            */
*/*                                                                  */
*/* Input Regs: R7  XPC address                                      */
*/*             DSAIGR1 storage address                              */
*/*             DSAPCID PCID router code                             */
*/*             R12 DSA address                                      */
*/*             R13 Router savearea address                          */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs Usage: R7  XPC address                                      */
*/*             R9  FRR address                                      */
*/*             R10 Base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 Save area address                                */
*/*                                                                  */
*/* Output Regs: R0  - R14 restored                                  */
*/*              R15 - return code                                   */
*/*                    00 - address is valid                         */
*/*                    04 - 0C4-4  Protection Exception              */
*/*                    08 - 0C5-5  Addressing Exception              */
*/*                    12 - 0C4-10 Segment Translation Exception     */
*/*                    16 - 0C4-11 Page Translation Exception        */
*/*                    20 - Internal service routine failure         */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Caller-protect-key,     */
*/*             Dynamic-LPA-resident.                                */
*/*                                                                  */
*/********************************************************************/
TPROT    DS    0H
         USING DSA,R12
         B     12(,R15)
         DC    CL8'TPROT'              PC routine
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         LR    R10,R15                 set base address
         USING TPROT,R10               base addressability
         LA    R1,DSAPCSA              PC routine savearea
         ST    R13,GPR@BWD(,R1)        chain,
         ST    R1,GPR@FWD(,R13)        save,
         LR    R13,R1                  areas.
*
**       Obtain LOCAL lock
*
         SPKA  0(0)
         SETLOCK OBTAIN,TYPE=LOCAL,                                    +
               MODE=UNCOND,REGS=USE,                                   +
               RELATED=('Serialize local Supervisor')
*
**       Establish FRR recovery
*
         LA    R3,PROFRR
         BSM   R3,0
         SETFRR A,FRRAD=(3),MODE=FULLXM,PARMAD=(9),                    +
               WRKREGS=(14,15)
         USING FRR,R9                  workarea
         MVI   FRRXRC,X'20'            set RC
         ST    R12,FRRDSA              protect DSA
         LA    R15,TPROT99             retry address
         BSM   R15,0                   set AMODE
         ST    R15,FRRETRY             init retry address
         STM   R0,R15,DSARTYR          init retry regs
         OI    FRRFLG1,FRR@PROT        TPROT indicator
*
**       Perform $TPROT fetch and store
*
         CLI   DSAPCID,$TPROT64        grande request?             @04A
         BE    TPROT10                 yes                         @04A
         L     R2,DSACKEY              caller protect key
         SPKA  0(R2)                   switch key
         L     R1,DSAIGR1              storage address
         L     R3,0(,R1)               get word from storage
*
TPROT00  DS    0H
         CS    R3,R3,0(R1)             fetch & store
         BNZ   TPROT00                 changed; try again
         SPKA  0(0)                    set Supervisor key
         XC    FRRCODE,FRRCODE         set RC=0
         B     TPROT99                 exit
*
**       Perform $TPROT64 fetch and store
*
TPROT10  DS    0H                                                  @04A
         L     R2,DSACKEY              caller protect key          @04A
         SPKA  0(R2)                   switch key                  @04A
         SAM64 ,                                                   @04A
         LG    R1,DSAIGGR1             storage address             @04A
         LG    R3,0(,R1)               get word from storage       @04A
*
TPROT20  DS    0H                                                  @04A
         CSG   R3,R3,0(R1)             fetch & store               @04A
         BNZ   TPROT20                 changed; try again          @04A
         SAM31 ,                                                   @04A
         SPKA  0(0)                    set Supervisor key          @04A
         XC    FRRCODE,FRRCODE         set RC=0                    @04A
*
**       Delete FRR recovery
*
TPROT99  DS    0H
         MVC   DSARC,FRRCODE           return RC to caller
         SETFRR D,WRKREGS=(14,15)      delete FRR
*
**       Release LOCAL lock
*
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,                          +
               RELATED=('Release local Supervisor serialization')
*
**       Exit linkage
*
TPROTXIT DS    0H
         L     R2,DSACKEY              caller protect key
         SPKA  0(R2)                   switch key
         L     R13,GPR@BWD(,R13)       router savearea
         LM    R14,R12,GPR@R14(R13)    restore router regs
         BR    R14                     return to router
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: PROFRR                                                     */
*/*                                                                  */
*/* Function: TPROT PC routine FRR                                   */
*/*                                                                  */
*/* Input Regs: R1  SDWA address                                     */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* Regs Usage: R8  SDWA address                                     */
*/*             R9  FRR address                                      */
*/*             R10 base address                                     */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*                                                                  */
*/********************************************************************/
PROFRR   DS    0H
         BASR  R10,0                   base
         USING *,R10                   set addressability
         LR    R8,R1                   SDWA address
         USING SDWA,R8                 set addressability
         L     R9,SDWAPARM             FRR parm area
         USING FRR,R9                  set addressability
         TM    SDWAERRD,SDWACLUP       clean up only?
         BNZ   ABEND                   yes, percolate
         TM    FRRFLG1,FRR@RECR        recursive ABEND?
         BNZ   ABEND                   yes, percolate
         OI    FRRFLG1,FRR@RECR        set recursive indicator
         TM    SDWAERRA,SDWAPCHK       program check?
         BZ    ABEND                   no, percolate
*
**       Identify program check
*
         MVI   FRRXRC,X'04'            set RC
         CLI   SDWAICD1,PIC4           protection exception?
         BE    RETRY                   yes, retry
         MVI   FRRXRC,X'08'            set RC
         CLI   SDWAICD1,PIC5           addressing exception?
         BE    RETRY                   yes, retry
         MVI   FRRXRC,X'12'            set RC
         CLI   SDWAICD1,PIC10          segment translation error?
         BE    RETRY                   yes, retry
         MVI   FRRXRC,X'16'            set RC
         CLI   SDWAICD1,PIC11          page transaltion error?
         BNE   ABEND                   no, percolate
*
**       Expected program check
*
RETRY    DS    0H
         ICM   R3,15,FRRETRY           retry address init?
         BZ    ABEND                   no, percolate
         ICM   R12,15,FRRDSA           DSA address init?
         BZ    ABEND                   no, percolate
         USING DSA,R12                 set addressability
         MVC   SDWASRSV,DSARTYR        set retry regs
         DROP  R12
         SETRP RC=4,                   retry                           +
               RETADDR=(3),            retry address                   +
               RETREGS=YES,            restore registers               +
               RECORD=NO,              LOGREC not required             +
               DUMP=NO,                SDUMP not required              +
               WKAREA=(8)              SDWA address
         BR    R14                     return to RTM
*
**       Unexpected ABEND
*
ABEND    DS    0H
         MVC   SDWARECP,RECPARM        recovery parm
         SETRP RC=0,                   percolate                       +
               DUMP=NO,                SDUMP not required              +
               RECORD=YES,             LOGREC recording required       +
               WKAREA=(8)              SDWA address
         BR    R14                     return to RTM
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
RECPARM  DS    0CL24
         DC    CL8'ECFXPC'             PC routine router name
         DC    CL8'TPROT'              target PC routine name
         DC    CL8'PROFRR'             FRR recovery routine name
REC@PSZE EQU   *-RECPARM
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: SAF                                                        */
*/*                                                                  */
*/* Function: System Authorization Facility PC routine               */
*/*                                                                  */
*/* Description: Check ECF function issuer authorization via         */
*/*              RACROUTE REQUEST=AUTH security server call.         */
*/*                                                                  */
*/* Calling Macro: $SAF                                              */
*/*                                                                  */
*/* Input Regs: R7  XPC address                                      */
*/*             DSAIGR0 - UACC level code                            */
*/*               X'00000002' - READ                                 */
*/*               X'00000004' - UPDATE                               */
*/*               X'00000008' - CONTROL                              */
*/*               X'00000080' - ALTER                                */
*/*             DSAIGR1 - Profile length & name address              */
*/*             DSAPCID - PCID SAF router code                       */
*/*             R12 DSA address                                      */
*/*             R13 Router savearea address                          */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs usage: R10 Base address                                     */
*/*             R11 EVT address (read only)                          */
*/*             R12 DSA address                                      */
*/*             R13 Save area address                                */
*/*                                                                  */
*/* Output Regs: R1  SAF return code                                 */
*/*              R15 RACF return code                                */
*/*              R0  RACF reason code                                */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Caller-protect-key,     */
*/*             Dynamic-LPA-resident.                                */
*/*                                                                  */
*/********************************************************************/
SAF      DS    0H                                                99@02A
         USING DSA,R12
         B     12(,R15)
         DC    CL8'SAF'                PC routine
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         LR    R10,R15                 set base address
         USING SAF,R10                 base addressability
         LA    R1,DSAPCSA              PC routine savearea
         ST    R13,GPR@BWD(,R1)        chain,
         ST    R1,GPR@FWD(,R13)        save,
         LR    R13,R1                  areas.
         L     R11,DSAEVTA             read only EVT
         USING EVT,R11                 set addessability
*
**       Validity check access level
*
         MVC   DSARC,=AL4(RC16)        error RC
         MVC   DSARSN,=AL4(RSN0964)    error RSN
         MVC   DSAOGR1,=AL4(-1)        RACROUTE not called
         MVC   DSAUACC,DSAIGR0+3       copy UACC
         CLI   DSAUACC,X'02'           READ?
         BE    SAF0000                 yes
         CLI   DSAUACC,X'04'           UPDATE?
         BE    SAF0000                 yes
         CLI   DSAUACC,X'08'           CONTROL?
         BE    SAF0000                 yes
         CLI   DSAUACC,X'80'           ALTER?
         BNE   SAFEXIT                 no
*
**       Validity check profile name
*
SAF0000  DS    0H
         MVC   DSARSN,=AL4(RSN0968)    error RSN
         ICM   R3,15,DSAIGR1           profile address init?
         BZ    SAFEXIT                 no
         LH    R1,0(,R3)               profile name length
         LTR   R1,R1                   valid?
         BZ    SAFEXIT                 no
         CLI   2(R3),BLANK             profile name valid?
         BE    SAFEXIT                 no
         CH    R1,=H'252'              length exceeded?
         BH    SAFEXIT                 yes
         MVI   DSAENTTY,BLANK
         MVC   DSAENTTY+1(DSA@ENTL-1),DSAENTTY
         BCTR  R1,0
         EX    R1,CPYENTTY             copy profile name
         XC    DSARSN,DSARSN           zero RSN
*
**       Call authorization server
*
         LA    R1,DSA@ENTZ             profile buffer length
         STH   R1,DSAENTBL             set buffer length
         MVC   DSAENTEL,0(R3)          copy profile length
         MVC   DSACZSZE,EVTCLSZE       CLASS name size
         MVC   DSACZECF,EVTCLASS       CLASS name
         MVC   DSARACF,DSAIGR0         UACC attribute              @04C
         OI    DSAFLG1,DSA@SAF         SAF PC caller indicator     @04A
         $CALL RACF                    check authorization         @04C
         NI    DSAFLG1,XFF-DSA@SAF     reset caller indicator      @04A
*---------------------------------------------------------------------*
*        Exit                                                         *
*--------+---------+---------+---------+---------+---------+---------+*
SAFEXIT  DS    0H
         L     R13,GPR@BWD(,R13)       router savearea
         LM    R14,R12,GPR@R14(R13)    restore router regs
         BR    R14                     return to router
*---------------------------------------------------------------------*
*        EXecuted Instructions                                        *
*--------+---------+---------+---------+---------+---------+---------+*
CPYENTTY MVC   DSAENTTY(*-*),2(R3)     EXecuted instruction
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* NAME: RUNIRB                                                     */
*/*                                                                  */
*/* FUNCTION: Schedule asynchronous exit PC routine                  */
*/*                                                                  */
*/* DESCRIPTION: Schedule an IRB to execute under any task in any    */
*/*              address space as specified by STOKEN and TCBTOKEN   */
*/*              input parameters.                                   */
*/*                                                                  */
*/* RACF SECURITY:                                                   */
*/*           The PC caller must have READ authority to profile      */
*/*           ZECF.XPC.AUTH in RACF class, ECFCLASS, to be able to   */
*/*           successfully call this PC routine.                     */
*/*                                                                  */
*/* NAME/TOKEN PAIR:                                                 */
*/*              Calling this PC routine from any address space      */
*/*              requires you to retrieve the ECF subsystem server   */
*/*              System-Level Name/Token Pair.                       */
*/*                                                                  */
*/*              The token name for this V2R3M0 release level is:    */
*/*              SYS-zECF-V2R3M0                                     */
*/*                                                                  */
*/*              The token contains the PC router routine SLX.       */
*/*              You need to supply this SLX number to the $RUNIRB   */
*/*              macro to successfully invoke this PC routine.       */
*/*                                                                  */
*/*              Macro MAC($ECFTKN) maps the System-Level Name/token */
*/*              Pair in DSECT NTP. The PC number is located in word */
*/*              NTPPCNUM.                                           */
*/*                                                                  */
*/* PC CALL EXAMPLE:                                                 */
*/*     CALLPC   $RUNIRB EP=(?),        IRB exit entry address      +*/
*/*                    STOKEN(?),       target ASCB STOKEN          +*/
*/*                    TCBTOKEN=(?)     target TCB TCBTOKEN         +*/
*/*                    PARM=(?),        IRB exit parameter          +*/
*/*                    PC=NTPPCNUM,     PC number                   +*/
*/*                    KEY=8,           IRB exit entry protect key  +*/
*/*                    MODE=SUP,        IRB exit entry system state +*/
*/*                    MF=(E,?)                                      */
*/*                                                                  */
*/* Input Regs: R7  XPC address                                      */
*/*             DSAIGR1 - XRB address                                */
*/*             DSAPCID - PCID router code                           */
*/*             R12 DSA address                                      */
*/*             R13 Router savearea address                          */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs Usage: R7  SRB aaddress                                     */
*/*             R8  XRB aaddress                                     */
*/*             R10 Base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 Save area address                                */
*/*                                                                  */
*/* Output Regs: R1  Output parameter                                */
*/*              R15 Return code                                     */
*/*                  00 - IRB exit scheduled successfully            */
*/*                  08 - IRB exit schedule failed                   */
*/*              R0  Reason codes                                    */
*/*                  00000000 - IRB exit scheduled successfully      */
*/*                  00000008 - XRB address supplied is invalid      */
*/*                  00000012 - LOCASCB(STOKEN) space not active     */
*/*                  00000016 - IRB exit EP address not supplied     */
*/*                  00000020 - SP=245 SRB+XRB storage obtain failed */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Caller-protect-key,     */
*/*             Dynamic-LPA-resident.                                */
*/*                                                                  */
*/********************************************************************/
RUNIRB   DS    0H                                                99@03A
         USING DSA,R12
         B     12(,R15)
         DC    CL8'RUNIRB'             PC routine
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         LR    R10,R15                 set base address
         USING RUNIRB,R10              base addressability
         LA    R1,DSAPCSA              PC routine savearea
         ST    R13,GPR@BWD(,R1)        chain,
         ST    R1,GPR@FWD(,R13)        save,
         LR    R13,R1                  areas.
         MVC   DSARC,=AL4(8)           initial RC
         SPKA  0(0)                    Supervisor key
*
**       Check request issuer authorization
*
         MVC   DSARACF,=AL4(2)         UACC=READ
         $CALL RACF                    check authorization
         CLC   DSAXRC,=AL4(RC0)        SAF RC okay?
         BNE   RUNABEND                no, ABEND
         CLC   DSARC,=AL4(RC0)         RACF authorized?
         BNE   RUNABEND                no, ABEND
*
**       Validity check input parameters
*
         L     R8,DSAIGR1              XRB address
         USING XRB,R8                  set addressability
         CLC   XRBID,=CL4'XRB'         valid?
         BE    RUNI010                 yes
         MVC   DSARSN,=AL4(8)          error RSN
         B     RUNIXIT                 exit
*
RUNI010  DS    0H
         LOCASCB STOKEN=XRBSTOKN
         ST    R1,DSAASCB              ASCb address
         LTR   R15,R15                 space active?
         BZ    RUNI020                 yes
         MVC   DSARSN,=AL4(12)         error RSN
         B     RUNIXIT                 exit
*
RUNI020  DS    0H
         ICM   R3,15,XRBEP             IRB exit EP supplied?
         BNZ   RUNI030                 yes
         MVC   DSARSN,=AL4(16)         error RSN
         B     RUNIXIT                 exit
*
**       Obtain SRB+XRB common storage
*
RUNI030  DS    0H
         DROP  R8
         L     R0,SRBXRBSZ
         STORAGE OBTAIN,               SQA storage                     +
               SP=245,                 fixed subpool                   +
               LOC=ANY,                anywhere                        +
               COND=YES,               conditional                     +
               LENGTH=(0),             SRB+XRB block length            +
               ADDR=DSAXSRB            return address here
         ST    R15,DSARC               save RC
         LTR   R15,R15                 successful?
         BZ    RUNI040                 yes
         MVC   DSARSN,=AL4(20)         error RSN
         B     RUNIXIT                 exit
*
RUNI040  DS    0H
         L     R7,DSAXSRB              SRB block address
         USING SRB,R7                  set addressability
         LA    R3,SRBSIZE(,R7)         XRB address
         MVC   0(XRB@SZE,R3),0(R8)     relocate XRB
         LR    R8,R3                   common XRB address
         USING XRB,R8                  set addressability
*
**       Schedule SRB service routine
*
         XC    SRB(SRBSIZE),SRB        clear SRB block
         LA    R3,RUNSRB               SRB routine
         BSM   R3,0                    set AMODE
         ST    R3,SRBEP                entry address
         ST    R7,XRBSRB               SRB block address
         MVC   SRBID,=CL4'SRB'         ID
         MVC   SRBRMTR,ECFRMTA         RMTR address
         MVC   SRBASCB,DSAASCB         target ASCB
         MVC   SRBPARM,SRBXRBSZ        PARM=SRB+XRB length
         MVI   SRBPRIOR,SRBPSYS        system priority level
         SCHEDULE SRB=(R7),SCOPE=LOCAL andiamo!
         XC    DSARC,DSARC             set RC
         XC    DSARSN,DSARSN           set RSN
*---------------------------------------------------------------------*
*        Exit                                                         *
*--------+---------+---------+---------+---------+---------+---------+*
RUNIXIT  DS    0H
         L     R2,DSACKEY              caller protect key
         SPKA  0(R2)                   switch key
         L     R13,GPR@BWD(,R13)       router savearea
         LM    R14,R12,GPR@R14(R13)    restore router regs
         BR    R14                     return to router
*---------------------------------------------------------------------*
*        ABEND Exit                                                   *
*--------+---------+---------+---------+---------+---------+---------+*
RUNABEND DS    0H
         L     R3,DSARC                RC
         ABEND X'FFE',DUMP,REASON=(R3) not authorized
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
ECFRMTA  DC    V(ECFRMT)               RMTR EPA
SRBXRBSZ DC    AL4(SRBSIZE+XRB@SZE)    SRB+XRB length
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RUNSRB                                                     */
*/*                                                                  */
*/* Function: RUNIRB PC routine SRB                                  */
*/*                                                                  */
*/* Description: Scheedules asynchronous IRB exit routine            */
*/*              to run in IRB mode under the specified TCB.         */
*/*                                                                  */
*/* Input Regs: R0  SRB block address                                */
*/*             R1  SRB parameter                                    */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* Regs Usage: R6  FRR address                                      */
*/*             R7  SRB address                                      */
*/*             R8  XRB address                                      */
*/*             R9  R14 address                                      */
*/*             R11 EVT address                                      */
*/*             R10 base address                                     */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RUNSRB   DS    0H                                                99@03A
         BASR  R10,0                   entry
         USING *,R10                   set addressability
         LR    R9,R14                  return address
*
**       Establish addressability
*
         LR    R7,R0                   SRB block address
         USING SRB,R7                  set addressability
         LA    R8,SRBSIZE(,R7)         XRB element address
         USING XRB,R8                  set addressability
*
**       Obtain LOCAL lock
*
         SETLOCK OBTAIN,TYPE=LOCAL,                                    +
               MODE=UNCOND,REGS=USE,                                   +
               RELATED=('Serialize local supervisor')
*
**       Establish FRR recovery
*
         LA    R2,RUNFRR               EPA
         BSM   R2,0                    set AMODE
         SETFRR A,                     add FRR                         +
               FRRAD=(2),              FRR address                     +
               PARMAD=(6),             FRR work area                   +
               WRKREGS=(14,15)
         USING FRR,R6                  set addressability
         LA    R15,SRBS099             retry address
         BSM   R15,0                   set AMODE
         ST    R15,FRRETRY             activate retry
         ST    R8,FRRXRB               init XRB address
         STM   R0,R15,XRBREGS          init retry regs
         OI    FRRFLG1,FRR@SRUN        set control indicator
*
**       Check address space instance
*
         USING PSA,0                   FLC addressability
         L     R3,PSAAOLD              ASCB
         USING ASCB,R3                 set addressability
         L     R3,ASCBASSB             ASSB
         USING ASSB,R3                 set addressability
         CLC   ASSBSTKN,XRBSTOKN       same address space?
         BNE   SRBS099                 nope! we're outta here
         DROP  R3
*
**       Check target TCB instance
*
         TCBTOKEN TYPE=TOTCB,TTOKEN=XRBTTOKN,TCB=XRBTCB,               +
               MF=(E,XRBPLIST)
         ST    R15,XRBRC               save RC
         LTR   R15,R15                 TCB instance still there?
         BNZ   SRBS099                 nope! we're outta here
*
**       Schedule IRB exit routine
*
         LA    R2,=A(RUNASY)           exit EPA ptr
         BSM   R2,0                    set AMODE
         LA    R3,XRBTCB               target TCB ptr
         LA    R4,XRBSRB               RUNASY exit parameter
         SCHEDIRB EPPTR=(2),TCBPTR=(3),PARAMPTR=(4),                   +
               KEY=SUPR,MODE=SUPR,SVAREA=YES,MF=(E,XRBPLIST)
         ST    R15,XRBRC               save RC
         LTR   R15,R15                 successful?
         BZ    SRBS099                 yes, exit
*
**       Storage release common SRB+XRB block
*
         LR    R1,R7                   SRB block address
         L     R0,SRBPARM              SRB+XRB length
         STORAGE RELEASE,ADDR=(1),LENGTH=(0),SP=SP245,                 +
               LINKAGE=SYSTEM
*
**       Delete FRR recovery
*
SRBS099  DS    0H
         SETFRR D,WRKREGS=(14,15)      delete FRR
*
**       Release LOCAL lock
*
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,                          +
               RELATED=('Release local supervisor serialization')
*
**       Exit
*
RUNSXIT  DS    0H
         LR    R14,R9                  return address
         BR    R14                     exit
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RUNFRR                                                     */
*/*                                                                  */
*/* Function: RUNIRB PC routine FRR                                  */
*/*                                                                  */
*/* Input Regs: R1  SDWA address                                     */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* Regs Usage: R7  XRB address                                      */
*/*             R8  SDWA address                                     */
*/*             R9  FRR address                                      */
*/*             R10 base address                                     */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*                                                                  */
*/********************************************************************/
RUNFRR   DS    0H                                                99@03A
         BASR  R10,0                   base
         USING *,R10                   set addressability
         LR    R8,R1                   SDWA address
         USING SDWA,R8                 set addressability
         L     R9,SDWAPARM             FRR parm area
         USING FRR,R9                  set addressability
         TM    SDWAERRD,SDWACLUP       clean up only?
         BNZ   XABEND                  yes, percolate
         TM    FRRFLG1,FRR@RECR        recursive ABEND?
         BNZ   XABEND                  yes, percolate
         OI    FRRFLG1,FRR@RECR        set recursive indicator
*
**       Expected program check
*
XRETRY   DS    0H
         ICM   R3,15,FRRETRY           retry address init?
         BZ    XABEND                  no, percolate
         ICM   R7,15,FRRXRB            XRB address init?
         BZ    XABEND                  no, percolate
         USING XRB,R7                  set addressability
         MVC   SDWASRSV,XRBREGS        set retry regs
         SETRP RC=4,                   retry                           +
               RETADDR=(3),            retry address                   +
               RETREGS=YES,            restore registers               +
               RECORD=NO,              LOGREC not required             +
               DUMP=NO,                SDUMP not required              +
               WKAREA=(8)              SDWA address
         BR    R14                     return to RTM
*
**       Unexpected ABEND
*
XABEND   DS    0H
         MVC   SDWARECP,XRECPARM       recovery parm
         SETRP RC=0,                   percolate                       +
               DUMP=NO,                SDUMP not required              +
               RECORD=YES,             LOGREC recording required       +
               WKAREA=(8)              SDWA address
         BR    R14                     return to RTM
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
XRECPARM DS    0CL24
         DC    CL8'RUNIRB'             PC routine name
         DC    CL8'RUNSRB'             SRB routine name
         DC    CL8'RUNFRR'             FRR recovery routine name
XREC@SZE EQU   *-XRECPARM
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RUNASY                                                     */
*/*                                                                  */
*/* Function: RUNIRB PC routine IRB exit                             */
*/*                                                                  */
*/* Input Regs: R1  SRB block address                                */
*/*             R13 Savearaa address                                 */
*/*             R14 return address                                   */
*/*             R15 entry address                                    */
*/*                                                                  */
*/* Regs Usage: R3  IRB exit protect key                             */
*/*             R4  IRB exit system state                            */
*/*             R5  IRB exit entry address                           */
*/*             R6  IRB exit parameter                               */
*/*             R7  SRB address                                      */
*/*             R8  XRB address                                      */
*/*             R9  Return address                                   */
*/*             R10 Base address                                     */
*/*             R13 XSA address                                      */
*/*                                                                  */
*/* Output Regs: R14 return address                                  */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Key zero.               */
*/*                                                                  */
*/* Notes: None                                                      */
*/*                                                                  */
*/********************************************************************/
RUNASY   DS    0H                                                99@03A
         BASR  R10,0                   base
         USING *,R10                   set addressability
*
**       Establish addressability
*
         LR    R7,R1                   SRB block address
         USING SRB,R7                  set addressability
         LA    R8,SRBSIZE(,R7)         XRB element address
         USING XRB,R8                  set addressability
         XR    R3,R3                   clear key
         IC    R3,XRBKEY               IRB protect key
         XR    R4,R4                   clear key
         IC    R4,XRBSTATE             IRB system state
         L     R5,XRBEP                IRB exit entry address
         L     R6,XRBPARM              IRB exit parameter
*
**       Storage release SRB+XRB block
*
         LR    R1,R7                   SRB block address
         L     R0,SRBPARM              SRB+XRB block length
         STORAGE RELEASE,                                              +
               ADDR=(1),               address                         +
               LENGTH=(0),             length                          +
               SP=SP245,               subpool                         +
               LINKAGE=SYSTEM
*
**       BASR to IRB exit routine
*
         LTR   R3,R3                   run in problem key?
         BNZ   RUNA010                 yes, SYNCH
         LTR   R4,R4                   run in problem state?
         BNZ   RUNA010                 yes, SYNCH
         LR    R15,R5                  exit routine address
         LR    R1,R6                   exit routine parameter
         BASR  R14,R15                 call IRB exit
         B     RUNAXIT                 exit
*
**       SYNCH to IRB exit routine
*
RUNA010  DS    0H
         LR    R1,R6                   exit parameter
         SYNCH (5),RESTORE=NO,AMODE=DEFINED
*
**       Exit linkage
*
RUNAXIT  DS    0H
         USING PSA,0                   FLC
         L     R14,FLCCVT              CVT address
         USING CVT,R14                 set addressability
         LA    R14,CVTEXIT             exit SVC
         BR    R14                     exit
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* NAME: DYNLPA                                                     */
*/*                                                                  */
*/* FUNCTION: Dynamic-LPA PC routine                                 */
*/*                                                                  */
*/* DESCRIPTION: Load and delete modules to/from dynamic LPA         */
*/*                                                                  */
*/* RACF SECURITY:                                                   */
*/*           The PC caller must have READ authority to profile      */
*/*           ZECF.XPC.AUTH in RACF class, ECFCLASS, to be able to   */
*/*           successfully call this PC routine.                     */
*/*                                                                  */
*/* NAME/TOKEN PAIR:                                                 */
*/*           Calling this PC routine from any address space         */
*/*           requires you to retrieve the ECF subsystem server      */
*/*           System-Level Name/Token Pair.                          */
*/*                                                                  */
*/*           The token name for this V2R3M0 release level is:       */
*/*           SYS-zECF-V2R3M0                                        */
*/*                                                                  */
*/*           The token contains the PC router routine SLX.          */
*/*           You need to supply this SLX number to the $DYNLPA      */
*/*           macro to successfully invoke this PC routine.          */
*/*                                                                  */
*/*           Macro MAC($ECFTKN) maps the System-Level Name/token    */
*/*           Pair in DSECT NTP. The PC number is located in word    */
*/*           NTPPCNUM.                                              */
*/*                                                                  */
*/* Calling Macro: $DYNLPA                                           */
*/*                                                                  */
*/*           Add Example:                                           */
*/*                $DYNLPA ADD,PC=NTPPCNUM,                          */
*/*                      MOD=MYMOD,MF=(E,LIST)                       */
*/*                                                                  */
*/*           Delete by Token Example:                               */
*/*                $DYNLPA DELETE,PC=NTPPCNUM,DDNAME=MYDDN,          */
*/*                      TYPE=TOKEN,TOKEN=MYTOKEN,MF=(E,LIST)        */
*/*                                                                  */
*/*           Delete by current example:                             */
*/*                $DYNLPA DELETE,PC=NTPPCNUM,                       */
*/*                      TYPE=CURRENT,MOD=MYMOD,MF=(E,LIST)          */
*/*                                                                  */
*/* Input Regs: R7  XPC address                                      */
*/*             DSAIGR1 - $ECFDYN listform address                   */
*/*             DSAPCID - PCID router code                           */
*/*             R12 DSA address                                      */
*/*             R13 Router savearea address                          */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs Usage: R6  DYN address                                      */
*/*             R7  LPMEA/LPMED address                              */
*/*             R10 Base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 Save area address                                */
*/*                                                                  */
*/* Output Regs: R1  Loaded entry point address                      */
*/*              R15 Return code                                     */
*/*                  00 - Dynamic-LPA completed successfully         */
*/*                  08 - Dynamic-LPA add/delete failed              */
*/*              R0  Reason codes                                    */
*/*                  00000000 - Dynamic-LPA completed successfully   */
*/*                  00000008 - Invalid DYN structure detected       */
*/*                  00000012 - Unknown Dynamic-LPA request          */
*/*                                                                  */
*/* ADD Output:  DYNADDR  - Entry point address                      */
*/*              DYNLEN   - Module length                            */
*/*              DYNTOKEN - token                                    */
*/*                                                                  */
*/* DELETE Output: None                                              */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Caller-protect-key,     */
*/*             Dynamic-LPA-resident.                                */
*/*                                                                  */
*/********************************************************************/
DYNLPA   DS    0H                                                99@04A
         USING DSA,R12
         B     12(,R15)
         DC    CL8'DYNLPA'             PC routine
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         LR    R10,R15                 set base address
         USING DYNLPA,R10              base addressability
         LA    R1,DSAPCSA              PC routine savearea
         ST    R13,GPR@BWD(,R1)        chain,
         ST    R1,GPR@FWD(,R13)        save,
         LR    R13,R1                  areas.
*
**       Check request issuer authorization
*
         MVC   DSARACF,=AL4(2)         UACC=READ
         $CALL RACF                    check authorization
         CLC   DSAXRC,=AL4(RC0)        SAF RC okay?
         BNE   DYNABEND                no, ABEND
         CLC   DSARC,=AL4(RC0)         RACF authorized?
         BNE   DYNABEND                no, ABEND
*
**       Serialize Dynamic-LPA
*
         MVC   DSAEQDQ(CSVENQL),CSVENQ init listform
         ENQ   MF=(E,DSAEQDQ)          serialize resource
         OI    DSAFLG1,DSA@ENQ         set ENQ indicator
*
**       Validity check Dynamic-LPA request
*
         MVC   DSARC,=AL4(8)           set RC
         L     R6,DSAIGR1              $ECFDYN address
         USING DYN,R6                  set addressability
         CLC   DYNID,=CL4'DYN'         listform valid?
         BE    DYN0000                 yes
         MVC   DSARSN,=AL4(8)          set error RSN
         B     DYN0999                 exit
*
DYN0000  DS    0H
         CLI   DYNREQ,DYN@ADD          ADD request?
         BE    DYN0100                 yes
         CLI   DYNREQ,DYN@CUR          DELETE current?
         BE    DYN0200                 yes
         CLI   DYNREQ,DYN@TKN          DELETE by token request?
         BE    DYN0300                 yes
         MVC   DSARSN,=AL4(12)         set error RSN
         B     DYN0999                 exit
*
**       Dynamic-LPA ADD service
*
DYN0100  DS    0H
         LA    R7,DSADYLPA
         USING LPMEA,R7
         XC    DSADYLPA(LPMEA_LEN),DSADYLPA
         MVC   LPMEANAME,DYNMOD             module name
         CLI   DYNPAGE,DYN@PGFX             page fix module?
         BNE   DYN0110                      no
         OI    LPMEAINPUTFLAGS0,LPMEAFIXED  yes
*
DYN0110  DS    0H
         CLI   DYNOWNR,DYN@SYS              system owner?
         BNE   DYN0120                      no
         OI    LPMEAINPUTFLAGS0,LPMEASTORAGEOWNERSYSTEM
*
DYN0120  DS    0H
         SAM31 ,
         SPKA  0(0)
         CSVDYLPA REQUEST=ADD,                                         +
               MODINFO=(R7),                                           +
               MODINFOTYPE=MEMBERLIST, by member name                  +
               BYADDR=NO,              fetch required                  +
               NUMMOD=LMODCNT,         module add count                +
               DDNAME=DYNDDN,          ADD MOD from specified DDname   +
               APFREQUIRED=YES,        library must be APF-authorized  +
               SECMODCHECK=YES,        do RACF FACILITY class check    +
               REQUESTOR=LMODREQ,      requesting subsysytem ID        +
               RETCODE=DSARC,          return RC here                  +
               RSNCODE=DSARSN,         return RSN here                 +
               MF=(E,DYLPAL)           listform
         SAM24 ,
         L     R2,DSACKEY              caller protect key
         SPKA  0(R2)                   switch key
         MVC   DYNRC,DSARC             copy RC
         MVC   DYNRSN,DSARSN           copy RSN
         CLC   DSARC,=AL4(RC0)         successful?
         BNE   DYN0999                 no
         MVC   DYNTOKEN,LPMEADELETETOKEN  copy delete token
         MVC   DYNADDR,LPMEALOADPOINTADDR  copy MOD address
         MVC   DYNLEN,LPMEAMODLEN      copy MOD size
         MVC   DSAOGR1,LPMEALOADPOINTADDR  set output parm w/EPA
         B     DYN0999                 exit
         DROP  R7
*
**       Dynamic-LPA DELETE current
*
DYN0200  DS    0H
         LA    R7,DSADYLPA
         USING LPMED,R7
         XC    DSADYLPA(LPMED_LEN),DSADYLPA
         MVC   LPMEDNAME,DYNMOD        module name
         SAM31 ,
         SPKA  0(0)
         CSVDYLPA REQUEST=DELETE,                                      +
               MODINFO=(R7),                                           +
               TYPE=CURRENT,           delete current instance         +
               NUMMOD=LMODCNT,         module delete count             +
               SECMODCHECK=YES,        do RACF FACILITY class check    +
               RETCODE=DSARC,          return RC here                  +
               RSNCODE=DSARSN,         return RSN here                 +
               MF=(E,DYLPAL)           listform
         SAM24 ,
         L     R2,DSACKEY              caller protect key
         SPKA  0(R2)                   switch key
         MVC   DYNRC,DSARC             copy RC
         MVC   DYNRSN,DSARSN           copy RSN
         CLC   DSARC,=AL4(RC0)         successful?
         BE    DYN0999                 yes
         CLC   DSARC,=XL4'00000004'    warning RC?
         BNE   DYN0999                 no
         CLC   DSARSN,=XL4'00000401'   not found RSN?
         BNE   DYN0999                 no, exit
         XC    DSARC,DSARC             set RC
         XC    DYNRC,DYNRC             set RC
         B     DYN0999                 exit
*
**       Dynamic-LPA DELETE by token
*
DYN0300  DS    0H
         LA    R7,DSADYLPA
         USING LPMED,R7
         XC    DSADYLPA(LPMED_LEN),DSADYLPA
         MVC   LPMEDNAME,DYNMOD        module name
         MVC   LPMEDDELETETOKEN,DYNTOKEN  token
         SAM31 ,
         SPKA  0(0)
         CSVDYLPA REQUEST=DELETE,                                      +
               MODINFO=(R7),                                           +
               TYPE=BYTOKEN,           delete by token                 +
               NUMMOD=LMODCNT,         module delete count             +
               SECMODCHECK=YES,        do RACF FACILITY class check    +
               RETCODE=DSARC,          return RC here                  +
               RSNCODE=DSARSN,         return RSN here                 +
               MF=(E,DYLPAL)           listform
         SAM24 ,
         L     R2,DSACKEY              caller protect key
         SPKA  0(R2)                   switch key
         MVC   DYNRC,DSARC             copy RC
         MVC   DYNRSN,DSARSN           copy RSN
         CLC   DSARC,=AL4(RC0)         successful?
         BE    DYN0999                 yes
         CLC   DSARC,=XL4'00000004'    warning RC?
         BNE   DYN0999                 no
         CLC   DSARSN,=XL4'00000401'   not found RSN?
         BNE   DYN0999                 no
         XC    DSARC,DSARC             set RC
         XC    DYNRC,DYNRC             set RC
         B     DYN0999                 exit
         DROP  R7
*
**       Release Dynamic-LPA serialization
*
DYN0999  DS    0H
         MVC   DSAEQDQ(CSVDEQL),CSVDEQ init listform
         DEQ   MF=(E,DSAEQDQ)          release serialization
         NI    DSAFLG1,XFF-DSA@ENQ     reset ENQ indicator
*---------------------------------------------------------------------*
*        Exit                                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DYNEXIT  DS    0H
         L     R2,DSACKEY              caller protect key
         SPKA  0(R2)                   switch key
         L     R13,GPR@BWD(,R13)       router savearea
         LM    R14,R12,GPR@R14(R13)    restore router regs
         BR    R14                     return to router
*---------------------------------------------------------------------*
*        ABEND Exit                                                   *
*--------+---------+---------+---------+---------+---------+---------+*
DYNABEND DS    0H
         L     R3,DSARC                RC
         ABEND X'FFE',DUMP,REASON=(R3) not authorized
*---------------------------------------------------------------------*
*        Dynamic LPA ADD/DELETE serialization                         *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
CSVENQ   ENQ   (CSVMAJ,CSVMIN,E,8,SYSTEM),RET=HAVE,MF=L
CSVENQL  EQU   *-CSVENQ
         DS    0F
CSVDEQ   DEQ   (CSVMAJ,CSVMIN,8,SYSTEM),MF=L
CSVDEQL  EQU   *-CSVDEQ
         DS    0C
CSVMAJ   DC    CL8'SYSZCSV'            Major name
CSVMIN   DC    CL8'CSVDYLPA'           Minor name
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         DS    0F
LMODCNT  DC    F'1'                    module fetch count
LMODREQ  DC    CL16'zECF&REL.ECFXPC'   LPA add requestor
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: RACF authorization subroutine                              */
*/*                                                                  */
*/* Function: Validity check resource authority                      */
*/*                                                                  */
*/* Calling Macro: $SAF macro                                        */
*/*                                                                  */
*/* Input Regs: R7  XPC address                                      */
*/*             DSAIGR0 - Parameter                                  */
*/*             DSAIGR1 - Parameter                                  */
*/*             R12 DSA address                                      */
*/*             R13 Router Save area address                         */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs Usage: R10 Base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 Subroutine save area address                     */
*/*                                                                  */
*/* Output Regs: R15 Return code                                     */
*/*              R0  Reason code returned to PC caller               */
*/*                                                                  */
*/********************************************************************/
RACF     DS    0H                                                99@04A
         USING DSA,R12
         B     12(,R15)
         DC    CL8'RACF'               PC routine
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         LR    R10,R15                 set base address
         USING RACF,R10                base addressability
         LA    R1,DSASUBSA             subroutine save area
         ST    R13,GPR@BWD(,R1)        chain,
         ST    R1,GPR@FWD(,R13)        save,
         LR    R13,R1                  areas.
         IPK   ,                       PC routine protect key
         ST    R2,DSAPKEY              save key
         SPKA  0(0)                    Supervisor key
*
         TM    DSAFLG1,DSA@SAF         SAF PC caller?
         BNZ   RACF000                 yes, issue request
         L     R11,DSAEVTA             read only EVT
         USING EVT,R11                 set addessability
         MVC   DSACZSZE,EVTCLSZE       CLASS name size
         MVC   DSACZECF,EVTCLASS       init class name
         DROP  R11
         MVI   DSAENTTY,BLANK
         MVC   DSAENTTY+1(DSA@ENTL-1),DSAENTTY
         MVC   DSAENTEL(SSAFNAMZ),SSAF init profile length+name
         LA    R1,DSA@ENTZ             profile buffer length
         STH   R1,DSAENTBL             init buffer length
*
RACF000  DS    0H
         L     R2,DSARACF              UACC attribute
         MVC   DSAROUTE(RACI@SZE),RACILST
         RACROUTE REQUEST=AUTH,                                        +
               ENTITYX=DSAENTBF,       profile buffer                  +
               CLASS=DSACLASS,         resource class                  +
               ATTR=(2),               UACC attribute                  +
               LOG=ASIS,               whatever                        +
               RELEASE=1.9,            server release                  +
               WORKA=DSARWORK,         SAF work area                   +
               MF=(E,DSAROUTE)
         ST    R15,DSAXRC              SAF RC
         TM    DSAFLG1,DSA@SAF         SAF PC routine caller?
         BZ    RACF099                 no
         ST    R15,DSAOGR1             yes, return SAF RC in R1
*
RACF099  DS    0H
         LA    R3,DSAROUTE             RACROUTE listform
         USING SAFP,R3                 set addressability
         MVC   DSARC,SAFPRRET          RACF RC
         MVC   DSARSN,SAFPRREA         RACF RSN
*
RACFEXIT DS    0H
         L     R2,DSAPKEY              PC routine protect key
         SPKA  0(R2)                   switch key
         L     R13,GPR@BWD(,R13)       router savearea
         LM    R14,R12,GPR@R14(R13)    restore router regs
         BR    R14                     return to router
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
SSAF     DS    0F
SSAFLEN  DC    AL2(SSAFNAML)           profile name length
SSAFNAME DC    C'ZECF.XPC.AUTH'        profile name
SSAFNAML EQU   *-SSAFNAME
SSAFNAMZ EQU   *-SSAF
         DS    0F
RACILST  RACROUTE REQUEST=AUTH,CLASS=0,ENTITYX=0,RELEASE=1.9,MF=L
RACI@SZE EQU   *-RACILST
         LTORG ,
         DROP  ,
*/********************************************************************/
*/*                                                                  */
*/* Name: USERPC                                                     */
*/*                                                                  */
*/* Function: User PC routine model                                  */
*/*                                                                  */
*/* Description: Use this model to code your PC routine.             */
*/*                                                                  */
*/* Calling Macro: $your-macro                                       */
*/*                                                                  */
*/* Input Regs: R7  XPC address                                      */
*/*             DSAIGR0 - Parameter                                  */
*/*             DSAIGR1 - Parameter                                  */
*/*             DSAPCID - PCID router code                           */
*/*             R12 DSA address                                      */
*/*             R13 Router savearea address                          */
*/*             R14 Return address                                   */
*/*             R15 Entry address                                    */
*/*                                                                  */
*/* Regs Usage: R10 Base address                                     */
*/*             R12 DSA address                                      */
*/*             R13 Save area address                                */
*/*                                                                  */
*/* Output Regs: R1  Output parameter returned to PC caller          */
*/*              R0  Reason code returned to PC caller               */
*/*              R15 Return code returned to PC caller               */
*/*                                                                  */
*/* Attributes: Reentrant, Supervisor State, Caller-protect-key,     */
*/*             Dynamic-LPA-resident.                                */
*/*                                                                  */
*/********************************************************************/
USERPC   DS    0H
         USING DSA,R12
         B     12(,R15)
         DC    CL8'USERPC'             PC routine
         STM   R14,R12,GPR@R14(R13)    save caller's regs
         LR    R10,R15                 set base address
         USING USERPC,R10              base addressability
         LA    R1,DSAPCSA              PC routine savearea
         ST    R13,GPR@BWD(,R1)        chain,
         ST    R1,GPR@FWD(,R13)        save,
         LR    R13,R1                  areas.
         L     R11,DSAEVTA             read only EVT
         USING EVT,R11                 set addessability
*
**       PC routine code goes here...
*




*
USEREXIT DS    0H
         L     R13,GPR@BWD(,R13)       router savearea
         LM    R14,R12,GPR@R14(R13)    restore router regs
         BR    R14                     return to router
*---------------------------------------------------------------------*
*        Constants/Literals                                           *
*--------+---------+---------+---------+---------+---------+---------+*
         LTORG ,
         DROP  ,
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*--------+---------+---------+---------+---------+---------+---------+*
DSA      DSECT ,
DSASAVE  DS    18F                     router save area
DSAPCSA  DS    18F                     PC routine save area
DSASUBSA DS    18F                     subroutine save area
DSARTYR  DS    16F                     PC routine retry regs
DSAFLG1  DS    XL1                     flags
DSA@ENQ  EQU   X'80'                   CSVDYLPA ENQ indicator      @04A
DSA@SAF  EQU   X'40'                   SAF PC routine indicator    @04A
DSA@RV2  EQU   X'20'                   -available
DSA@RV3  EQU   X'10'                   -available
DSA@RV4  EQU   X'08'                   -available
DSA@RV5  EQU   X'04'                   -available
DSA@RV6  EQU   X'02'                   -available
DSA@RV7  EQU   X'01'                   -available
         DS    0X
DSAFLGX  DS    XL2                     -available
         DS    0X
DSAUACC  DS    XL1                     UACC
         DS    0F
DSAXRC   DS    F                       SAF RC
DSACKEY  DS    F                       PC caller key
DSAPKEY  DS    F                       PC routine key              @04A
DSAEVTA  DS    F                       read only EVT addess
DSAASCB  DS    F                       ASCB address                @03A
DSAXSRB  DS    F                       SRB+XRB block address       @03A
DSARACF  DS    F                       UACC attribute              @04A
DSAALET  DS    F                       ALET                        @??A
DSAADDR  DS    F                       storage address             @??A
DSAWORD  DS    F                       work area
*
DSAIPAR  DS    0F                      input parameters
DSAPCID  DS    F                       -R15 = PCID
DSAIGR0  DS    F                       -R0  = Parameter
DSAIGR1  DS    F                       -R1  = parameter
DSA@IPSZ EQU   *-DSAIPAR               keep R15, R0, R1 order
*
DSAIGPAR DS    0D                      grande input regs           @04A
DSAGPCID DS    D                       -R15 = PCID                 @04A
DSAIGGR0 DS    D                       -R0  = Parameter            @04A
DSAIGGR1 DS    D                       -R1  = parameter            @04A
DSA@IGSZ EQU   *-DSAIGPAR              keep R15, R0, R1 order      @04A
*
DSAOPAR  DS    0F                      output parameters
DSARC    DS    F                       -R15 = RC
DSARSN   DS    F                       -R0  = RSN
DSAOGR1  DS    F                       -R1  = output parameter
DSA@OPSZ EQU   *-DSAOPAR               keep R15, R0, R1 order
         DS    0F
DSAXRB   DS    CL(XRB@SZE)             $RUNIRB listform            @03A
         DS    0F
DSAROUTE DS    CL(RACI@SZE)            RACROUTE listform
         DS    0F
DSARWORK DS    XL512                   SAF work area
         DS    0F
DSAENTBF DS    0CL255                  profile buffer
DSAENTBL DS    AL2                     -buffer length
DSAENTEL DS    AL2                     -profile length
DSAENTTY DS    CL251                   -profile name
DSA@ENTL EQU   *-DSAENTTY              -profile name length
DSA@ENTZ EQU   *-DSAENTBF              profile buffer lenght
         DS    0C
DSACLASS DS    0CL9                    CLASS field
DSACZSZE DS    AL1                     -size
DSACZECF DS    CL8                     -name
DSA@CLSZ EQU   *-DSACLASS              CLASS field size
         DS    0F
DSASAFBF DS    CL120                   SAF buffer                  @03A
DSA@SAFZ EQU   *-DSASAFBF              SAF buffer length           @03A
         DS    0D
DSADYLPA DS    CL(LPMED_LEN)           CSVDYLPA listform
         DS    0D
DSADYLST CSVDYLPA MF=(L,DYLPAL)        CSVDYLPA listform
DSARQLPA DS    0D                      CSVDYLPA
DSARQSUB DS    CL4                     -subsystem name
DSARQREL DS    CL6                     -subsystem release level
DSARQMOD DS    CL6                     -subsystem load module
DSA@RQSZ EQU   *-DSARQLPA              keep it together
         DS    0F
DSAEQDQ  DS    CL(CSVENQL)             ENQ/DEQ listform            @04A
         DS    0D
DSAPLST  DS    XL128                   parmlist
         DS    0D
DSA@SIZE EQU   *-DSA                   size of DSA
*
**       FRR work area map
*
FRR      DSECT
FRRETRY  DS    F                       PC retry routine EPA
FRRDSA   DS    F                       DSA address
FRRXRB   DS    F                       XRB address                 @03C
FRRRSV0  DS    F                       -available
*
FRRFLG1  DS    XL1                     flags
FRR@RECR EQU   X'80'                   recursion indicator
FRR@PROT EQU   X'40'                   TPROT indicator
FRR@SRUN EQU   X'20'                   RUNSRB indicator            @03C
FRR@RSV3 EQU   X'10'                   -available
FRR@RSV4 EQU   X'08'                   -available
FRR@RSV5 EQU   X'04'                   -available
FRR@RSV6 EQU   X'02'                   -available
FRR@RSV7 EQU   X'01'                   -available
FRRSVRZ  DS    XL3                     -available
*
FRRCODE  DS    0F                      return code field
FRRZRO   DS    XL3                     -always zero
FRRXRC   DS    XL1                     -RC
FRR@CODE EQU   *-FRRCODE
FRR@SZE  EQU   *-FRR
FRR@MAX  DS    0XL(24-FRR@SZE+1)       set SETFRR macro restriction
*---------------------------------------------------------------------*
*        Subsystem Data Areas                                         *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         $ECFVT ,
         $ECFXRB ,                                                 @03A
         $ECFDYN ,                                                 @04A
         $ECFSVX ,
         $ECFEQU ,
         $PCENTRY DSECT=YES
*---------------------------------------------------------------------*
*        System Data Areas                                            *
*--------+---------+---------+---------+---------+---------+---------+*
         PRINT NOGEN
         IHAPSA ,
         IHAASCB ,
         IHAASSB ,                                                 @03A
         IHAASXB ,
         IEZJSCB ,
         CVT   DSECT=YES
         IKJTCB DSECT=YES
         IKJRB DSECT=YES
         IHASCVT DSECT=YES,LIST=NO
         IHASRB ,                                                  @03A
         IHAFRRS ,
         IHASDWA ,
         ICHSAFP ,
         CSVLPRET LIST=YES                                         @04A
         END
